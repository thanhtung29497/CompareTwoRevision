/* tslint:disable */

import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;

import {projects} from "./projects";

export namespace appservices {

	export class AppServiceLocationEnum extends internal.IEnum {
		public static Default: AppServiceLocationEnum = new AppServiceLocationEnum("Default", { });
		public static Constant: AppServiceLocationEnum = new AppServiceLocationEnum("Constant", { });
		public static Parameter: AppServiceLocationEnum = new AppServiceLocationEnum("Parameter", { });
		protected qualifiedTsTypeName: string = "appservices.AppServiceLocationEnum";
	}


	/**
	 * Interfaces and instance classes for types from the Mendix sub meta model `AppServices`.
	 */


	export interface IAppServiceAction extends internal.IElement {
		model: IModel;
		containerAsConsumedAppService: IConsumedAppService;
		name: string;
		parameters: internal.IList<IAppServiceActionParameter>;
		load(): AppServiceAction;
		load(callback: (element: AppServiceAction) => void, forceRefresh?: boolean);
	}

	export class AppServiceAction extends internal.Element implements IAppServiceAction {
		public static typeName: string = "AppServices$AppServiceAction";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"name" : {
					"public" : {
						"currentValue" : true
					}
				},
				"parameters" : {
					"public" : {
						"currentValue" : true
					}
				}
			},
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsConsumedAppService() { return super.getContainerAs<ConsumedAppService>(ConsumedAppService); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(AppServiceAction, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __caption: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(AppServiceAction, this, "caption", "", internal.PrimitiveTypeEnum.String);
		public get caption(): string { return this.__caption.get(); }
		public set caption(newValue: string) { this.__caption.set(newValue); }
		private __description: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(AppServiceAction, this, "description", "", internal.PrimitiveTypeEnum.String);
		public get description(): string { return this.__description.get(); }
		public set description(newValue: string) { this.__description.set(newValue); }
		private __parameters: internal.PartListProperty<AppServiceActionParameter> =
			new internal.PartListProperty<AppServiceActionParameter>(AppServiceAction, this, "parameters", []);
		public get parameters(): internal.IList<AppServiceActionParameter> { return this.__parameters.get(); }
		public set parameters(newValue: internal.IList<AppServiceActionParameter>) { this.__parameters.set(newValue); }
		private __microflow: internal.ByNameReferenceProperty<microflows.IMicroflow> =
			new internal.ByNameReferenceProperty<microflows.IMicroflow>(AppServiceAction, this, "microflow", null, "Microflows$Microflow");
		public get microflow(): microflows.IMicroflow { return this.__microflow.get(); }
		public set microflow(newValue: microflows.IMicroflow) { this.__microflow.set(newValue); }
		get microflowQualifiedName(): string { return this.__microflow.qualifiedName(); }
		private __returnType: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(AppServiceAction, this, "returnType", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type dataTypes.DataType.
		 */
		public get returnType(): string { return this.__returnType.get(); }
		public set returnType(newValue: string) { this.__returnType.set(newValue); }
		private __returnTypeCanBeEmpty: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(AppServiceAction, this, "returnTypeCanBeEmpty", false, internal.PrimitiveTypeEnum.Boolean);
		public get returnTypeCanBeEmpty(): boolean { return this.__returnTypeCanBeEmpty.get(); }
		public set returnTypeCanBeEmpty(newValue: boolean) { this.__returnTypeCanBeEmpty.set(newValue); }
		private __image: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(AppServiceAction, this, "image", "", internal.PrimitiveTypeEnum.String);
		public get image(): string { return this.__image.get(); }
		public set image(newValue: string) { this.__image.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new AppServiceAction() cannot be invoked directly, please use 'model.appservices.createAppServiceAction()'"
				);
			}
			this._declaredAsNamespace = true;
		}

		/**
		 * Creates and returns a new AppServiceAction instance in the SDK and on the server.
		 * The new AppServiceAction will be automatically stored in the 'actions' property
		 * of the parent ConsumedAppService element passed as argument.
		 */
		public static createIn(container: ConsumedAppService): AppServiceAction {
			return internal.instancehelpers.createElement(container, AppServiceAction, "actions", true);
		}

		/**
		 * Creates and returns a new AppServiceAction instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): AppServiceAction {
			return internal.instancehelpers.createElement(model, AppServiceAction);
		}

		_isByNameReferrable() { return true; }

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.returnType = "Unknown";
		}

	}

	export interface IAppServiceActionParameter extends internal.IElement {
		model: IModel;
		containerAsAppServiceAction: IAppServiceAction;
		name: string;
		load(): AppServiceActionParameter;
		load(callback: (element: AppServiceActionParameter) => void, forceRefresh?: boolean);
	}

	export class AppServiceActionParameter extends internal.Element implements IAppServiceActionParameter {
		public static typeName: string = "AppServices$AppServiceActionParameter";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"name" : {
					"public" : {
						"currentValue" : true
					}
				}
			},
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsAppServiceAction() { return super.getContainerAs<AppServiceAction>(AppServiceAction); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(AppServiceActionParameter, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __type: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(AppServiceActionParameter, this, "type", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type dataTypes.DataType.
		 */
		public get type(): string { return this.__type.get(); }
		public set type(newValue: string) { this.__type.set(newValue); }
		private __canBeEmpty: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(AppServiceActionParameter, this, "canBeEmpty", false, internal.PrimitiveTypeEnum.Boolean);
		public get canBeEmpty(): boolean { return this.__canBeEmpty.get(); }
		public set canBeEmpty(newValue: boolean) { this.__canBeEmpty.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new AppServiceActionParameter() cannot be invoked directly, please use 'model.appservices.createAppServiceActionParameter()'"
				);
			}
		}

		/**
		 * Creates and returns a new AppServiceActionParameter instance in the SDK and on the server.
		 * The new AppServiceActionParameter will be automatically stored in the 'parameters' property
		 * of the parent AppServiceAction element passed as argument.
		 */
		public static createIn(container: AppServiceAction): AppServiceActionParameter {
			return internal.instancehelpers.createElement(container, AppServiceActionParameter, "parameters", true);
		}

		/**
		 * Creates and returns a new AppServiceActionParameter instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): AppServiceActionParameter {
			return internal.instancehelpers.createElement(model, AppServiceActionParameter);
		}

		_isByNameReferrable() { return true; }

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.type = "Unknown";
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/consumed-app-services relevant section in reference guide}
	 */
	export interface IConsumedAppService extends projects.IDocument {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		actions: internal.IList<IAppServiceAction>;
		load(): ConsumedAppService;
		load(callback: (element: ConsumedAppService) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/consumed-app-services relevant section in reference guide}
	 */
	export class ConsumedAppService extends projects.Document implements IConsumedAppService {
		public static typeName: string = "AppServices$ConsumedAppService";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"actions" : {
					"public" : {
						"currentValue" : true
					}
				},
				"msd" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }

		private __actions: internal.PartListProperty<AppServiceAction> =
			new internal.PartListProperty<AppServiceAction>(ConsumedAppService, this, "actions", []);
		public get actions(): internal.IList<AppServiceAction> { return this.__actions.get(); }
		public set actions(newValue: internal.IList<AppServiceAction>) { this.__actions.set(newValue); }
		private __msd: internal.PartProperty<Msd> =
			new internal.PartProperty<Msd>(ConsumedAppService, this, "msd", null, true);
		public get msd(): Msd { return this.__msd.get(); }
		public set msd(newValue: Msd) { this.__msd.set(newValue); }
		private __fromAppStore: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(ConsumedAppService, this, "fromAppStore", false, internal.PrimitiveTypeEnum.Boolean);
		public get fromAppStore(): boolean { return this.__fromAppStore.get(); }
		public set fromAppStore(newValue: boolean) { this.__fromAppStore.set(newValue); }
		private __appStoreGuid: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ConsumedAppService, this, "appStoreGuid", "", internal.PrimitiveTypeEnum.String);
		public get appStoreGuid(): string { return this.__appStoreGuid.get(); }
		public set appStoreGuid(newValue: string) { this.__appStoreGuid.set(newValue); }
		private __appStoreVersionGuid: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ConsumedAppService, this, "appStoreVersionGuid", "", internal.PrimitiveTypeEnum.String);
		public get appStoreVersionGuid(): string { return this.__appStoreVersionGuid.get(); }
		public set appStoreVersionGuid(newValue: string) { this.__appStoreVersionGuid.set(newValue); }
		private __appStoreVersion: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ConsumedAppService, this, "appStoreVersion", "", internal.PrimitiveTypeEnum.String);
		public get appStoreVersion(): string { return this.__appStoreVersion.get(); }
		public set appStoreVersion(newValue: string) { this.__appStoreVersion.set(newValue); }
		private __appServiceLocation: internal.EnumProperty<AppServiceLocationEnum> =
			new internal.EnumProperty<AppServiceLocationEnum>(ConsumedAppService, this, "appServiceLocation", AppServiceLocationEnum.Default, AppServiceLocationEnum);
		public get appServiceLocation(): AppServiceLocationEnum { return this.__appServiceLocation.get(); }
		public set appServiceLocation(newValue: AppServiceLocationEnum) { this.__appServiceLocation.set(newValue); }
		private __locationConstant: internal.ByNameReferenceProperty<constants.IConstant> =
			new internal.ByNameReferenceProperty<constants.IConstant>(ConsumedAppService, this, "locationConstant", null, "Constants$Constant");
		public get locationConstant(): constants.IConstant { return this.__locationConstant.get(); }
		public set locationConstant(newValue: constants.IConstant) { this.__locationConstant.set(newValue); }
		get locationConstantQualifiedName(): string { return this.__locationConstant.qualifiedName(); }
		private __useTimeOut: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(ConsumedAppService, this, "useTimeOut", false, internal.PrimitiveTypeEnum.Boolean);
		public get useTimeOut(): boolean { return this.__useTimeOut.get(); }
		public set useTimeOut(newValue: boolean) { this.__useTimeOut.set(newValue); }
		private __timeOut: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(ConsumedAppService, this, "timeOut", 0, internal.PrimitiveTypeEnum.Integer);
		public get timeOut(): number { return this.__timeOut.get(); }
		public set timeOut(newValue: number) { this.__timeOut.set(newValue); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "documents";
		}

		/**
		 * Creates a new ConsumedAppService unit in the SDK and on the server.
		 * Expects one argument, the projects.IFolderBase in which this unit is contained.
		 */
		public static createIn(container: projects.IFolderBase): ConsumedAppService {
			return internal.instancehelpers.createUnit(container, ConsumedAppService);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.appServiceLocation = AppServiceLocationEnum.Default;
			this.msd = Msd.create(this.model);
			this.timeOut = 30;
		}

	}

	export interface IMsd extends internal.IElement {
		model: IModel;
		containerAsConsumedAppService: IConsumedAppService;
		load(): Msd;
		load(callback: (element: Msd) => void, forceRefresh?: boolean);
	}

	export class Msd extends internal.Element implements IMsd {
		public static typeName: string = "AppServices$Msd";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"version" : {
					"required" : {
						"currentValue" : true
					}
				},
				"metadata" : {
					"required" : {
						"currentValue" : true
					}
				},
				"domainModel" : {
					"required" : {
						"currentValue" : true
					}
				},
				"enumerations" : {
					"required" : {
						"currentValue" : true
					}
				},
				"wsdlDescription" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsConsumedAppService() { return super.getContainerAs<ConsumedAppService>(ConsumedAppService); }

		private __version: internal.PartProperty<MsdVersion> =
			new internal.PartProperty<MsdVersion>(Msd, this, "version", null, true);
		public get version(): MsdVersion { return this.__version.get(); }
		public set version(newValue: MsdVersion) { this.__version.set(newValue); }
		private __metadata: internal.PartProperty<MsdMetadata> =
			new internal.PartProperty<MsdMetadata>(Msd, this, "metadata", null, true);
		public get metadata(): MsdMetadata { return this.__metadata.get(); }
		public set metadata(newValue: MsdMetadata) { this.__metadata.set(newValue); }
		private __domainModel: internal.PartProperty<MsdDomainModel> =
			new internal.PartProperty<MsdDomainModel>(Msd, this, "domainModel", null, true);
		public get domainModel(): MsdDomainModel { return this.__domainModel.get(); }
		public set domainModel(newValue: MsdDomainModel) { this.__domainModel.set(newValue); }
		private __enumerations: internal.PartProperty<MsdEnumerationContainer> =
			new internal.PartProperty<MsdEnumerationContainer>(Msd, this, "enumerations", null, true);
		public get enumerations(): MsdEnumerationContainer { return this.__enumerations.get(); }
		public set enumerations(newValue: MsdEnumerationContainer) { this.__enumerations.set(newValue); }
		private __wsdlDescription: internal.PartProperty<webservices.WsdlDescription> =
			new internal.PartProperty<webservices.WsdlDescription>(Msd, this, "wsdlDescription", null, true);
		public get wsdlDescription(): webservices.WsdlDescription { return this.__wsdlDescription.get(); }
		public set wsdlDescription(newValue: webservices.WsdlDescription) { this.__wsdlDescription.set(newValue); }
		private __wsdl: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Msd, this, "wsdl", "", internal.PrimitiveTypeEnum.String);
		public get wsdl(): string { return this.__wsdl.get(); }
		public set wsdl(newValue: string) { this.__wsdl.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Msd() cannot be invoked directly, please use 'model.appservices.createMsd()'"
				);
			}
		}

		/**
		 * Creates and returns a new Msd instance in the SDK and on the server.
		 * The new Msd will be automatically stored in the 'msd' property
		 * of the parent ConsumedAppService element passed as argument.
		 */
		public static createIn(container: ConsumedAppService): Msd {
			return internal.instancehelpers.createElement(container, Msd, "msd", false);
		}

		/**
		 * Creates and returns a new Msd instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): Msd {
			return internal.instancehelpers.createElement(model, Msd);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.domainModel = MsdDomainModel.create(this.model);
			this.enumerations = MsdEnumerationContainer.create(this.model);
			this.metadata = MsdMetadata.create(this.model);
			this.version = MsdVersion.create(this.model);
			this.wsdlDescription = webservices.WsdlDescription.create(this.model);
		}

	}

	export interface IMsdAssociation extends internal.IElement {
		model: IModel;
		containerAsMsdDomainModel: IMsdDomainModel;
		containerAsDataAssociation: webservices.IDataAssociation;
		load(): MsdAssociation;
		load(callback: (element: MsdAssociation) => void, forceRefresh?: boolean);
	}

	export class MsdAssociation extends internal.Element implements IMsdAssociation {
		public static typeName: string = "AppServices$MsdAssociation";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMsdDomainModel() { return super.getContainerAs<MsdDomainModel>(MsdDomainModel); }
		get containerAsDataAssociation() { return super.getContainerAs<webservices.DataAssociation>(webservices.DataAssociation); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdAssociation, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __guid: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdAssociation, this, "guid", "", internal.PrimitiveTypeEnum.String);
		public get guid(): string { return this.__guid.get(); }
		public set guid(newValue: string) { this.__guid.set(newValue); }
		private __parentEntityName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdAssociation, this, "parentEntityName", "", internal.PrimitiveTypeEnum.String);
		public get parentEntityName(): string { return this.__parentEntityName.get(); }
		public set parentEntityName(newValue: string) { this.__parentEntityName.set(newValue); }
		private __childEntityName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdAssociation, this, "childEntityName", "", internal.PrimitiveTypeEnum.String);
		public get childEntityName(): string { return this.__childEntityName.get(); }
		public set childEntityName(newValue: string) { this.__childEntityName.set(newValue); }
		private __associationType: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdAssociation, this, "associationType", "", internal.PrimitiveTypeEnum.String);
		public get associationType(): string { return this.__associationType.get(); }
		public set associationType(newValue: string) { this.__associationType.set(newValue); }
		private __associationOwner: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdAssociation, this, "associationOwner", "", internal.PrimitiveTypeEnum.String);
		public get associationOwner(): string { return this.__associationOwner.get(); }
		public set associationOwner(newValue: string) { this.__associationOwner.set(newValue); }
		private __parentDeleteBehavior: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdAssociation, this, "parentDeleteBehavior", "", internal.PrimitiveTypeEnum.String);
		public get parentDeleteBehavior(): string { return this.__parentDeleteBehavior.get(); }
		public set parentDeleteBehavior(newValue: string) { this.__parentDeleteBehavior.set(newValue); }
		private __childDeleteBehavior: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdAssociation, this, "childDeleteBehavior", "", internal.PrimitiveTypeEnum.String);
		public get childDeleteBehavior(): string { return this.__childDeleteBehavior.get(); }
		public set childDeleteBehavior(newValue: string) { this.__childDeleteBehavior.set(newValue); }
		private __associationKind: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdAssociation, this, "associationKind", "", internal.PrimitiveTypeEnum.String);
		public get associationKind(): string { return this.__associationKind.get(); }
		public set associationKind(newValue: string) { this.__associationKind.set(newValue); }
		private __parentX: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(MsdAssociation, this, "parentX", 0, internal.PrimitiveTypeEnum.Integer);
		public get parentX(): number { return this.__parentX.get(); }
		public set parentX(newValue: number) { this.__parentX.set(newValue); }
		private __parentY: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(MsdAssociation, this, "parentY", 0, internal.PrimitiveTypeEnum.Integer);
		public get parentY(): number { return this.__parentY.get(); }
		public set parentY(newValue: number) { this.__parentY.set(newValue); }
		private __childX: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(MsdAssociation, this, "childX", 0, internal.PrimitiveTypeEnum.Integer);
		public get childX(): number { return this.__childX.get(); }
		public set childX(newValue: number) { this.__childX.set(newValue); }
		private __childY: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(MsdAssociation, this, "childY", 0, internal.PrimitiveTypeEnum.Integer);
		public get childY(): number { return this.__childY.get(); }
		public set childY(newValue: number) { this.__childY.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MsdAssociation() cannot be invoked directly, please use 'model.appservices.createMsdAssociation()'"
				);
			}
		}


		/**
		 * Creates and returns a new MsdAssociation instance in the SDK and on the server.
		 * The new MsdAssociation will be automatically stored in the 'associations' property
		 * of the parent MsdDomainModel element passed as argument.
		 */
		public static createInMsdDomainModelUnderAssociations(container: MsdDomainModel): MsdAssociation {
			return internal.instancehelpers.createElement(container, MsdAssociation, "associations", true);
		}

		/**
		 * Creates and returns a new MsdAssociation instance in the SDK and on the server.
		 * The new MsdAssociation will be automatically stored in the 'associationByContract' property
		 * of the parent webservices.DataAssociation element passed as argument.
		 */
		public static createInDataAssociationUnderAssociationByContract(container: webservices.DataAssociation): MsdAssociation {
			return internal.instancehelpers.createElement(container, MsdAssociation, "associationByContract", false);
		}

		/**
		 * Creates and returns a new MsdAssociation instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): MsdAssociation {
			return internal.instancehelpers.createElement(model, MsdAssociation);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IMsdAttribute extends internal.IElement {
		model: IModel;
		containerAsMsdEntity: IMsdEntity;
		containerAsDataAttribute: webservices.IDataAttribute;
		load(): MsdAttribute;
		load(callback: (element: MsdAttribute) => void, forceRefresh?: boolean);
	}

	export class MsdAttribute extends internal.Element implements IMsdAttribute {
		public static typeName: string = "AppServices$MsdAttribute";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMsdEntity() { return super.getContainerAs<MsdEntity>(MsdEntity); }
		get containerAsDataAttribute() { return super.getContainerAs<webservices.DataAttribute>(webservices.DataAttribute); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdAttribute, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __guid: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdAttribute, this, "guid", "", internal.PrimitiveTypeEnum.String);
		public get guid(): string { return this.__guid.get(); }
		public set guid(newValue: string) { this.__guid.set(newValue); }
		private __attributeType: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdAttribute, this, "attributeType", "", internal.PrimitiveTypeEnum.String);
		public get attributeType(): string { return this.__attributeType.get(); }
		public set attributeType(newValue: string) { this.__attributeType.set(newValue); }
		private __enumerationName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdAttribute, this, "enumerationName", "", internal.PrimitiveTypeEnum.String);
		public get enumerationName(): string { return this.__enumerationName.get(); }
		public set enumerationName(newValue: string) { this.__enumerationName.set(newValue); }
		private __defaultValue: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdAttribute, this, "defaultValue", "", internal.PrimitiveTypeEnum.String);
		public get defaultValue(): string { return this.__defaultValue.get(); }
		public set defaultValue(newValue: string) { this.__defaultValue.set(newValue); }
		private __length: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(MsdAttribute, this, "length", 0, internal.PrimitiveTypeEnum.Integer);
		public get length(): number { return this.__length.get(); }
		public set length(newValue: number) { this.__length.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MsdAttribute() cannot be invoked directly, please use 'model.appservices.createMsdAttribute()'"
				);
			}
		}


		/**
		 * Creates and returns a new MsdAttribute instance in the SDK and on the server.
		 * The new MsdAttribute will be automatically stored in the 'attributes' property
		 * of the parent MsdEntity element passed as argument.
		 */
		public static createInMsdEntityUnderAttributes(container: MsdEntity): MsdAttribute {
			return internal.instancehelpers.createElement(container, MsdAttribute, "attributes", true);
		}

		/**
		 * Creates and returns a new MsdAttribute instance in the SDK and on the server.
		 * The new MsdAttribute will be automatically stored in the 'attributeByContract' property
		 * of the parent webservices.DataAttribute element passed as argument.
		 */
		public static createInDataAttributeUnderAttributeByContract(container: webservices.DataAttribute): MsdAttribute {
			return internal.instancehelpers.createElement(container, MsdAttribute, "attributeByContract", false);
		}

		/**
		 * Creates and returns a new MsdAttribute instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): MsdAttribute {
			return internal.instancehelpers.createElement(model, MsdAttribute);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IMsdDomainModel extends internal.IElement {
		model: IModel;
		containerAsMsd: IMsd;
		load(): MsdDomainModel;
		load(callback: (element: MsdDomainModel) => void, forceRefresh?: boolean);
	}

	export class MsdDomainModel extends internal.Element implements IMsdDomainModel {
		public static typeName: string = "AppServices$MsdDomainModel";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMsd() { return super.getContainerAs<Msd>(Msd); }

		private __entities: internal.PartListProperty<MsdEntity> =
			new internal.PartListProperty<MsdEntity>(MsdDomainModel, this, "entities", []);
		public get entities(): internal.IList<MsdEntity> { return this.__entities.get(); }
		public set entities(newValue: internal.IList<MsdEntity>) { this.__entities.set(newValue); }
		private __associations: internal.PartListProperty<MsdAssociation> =
			new internal.PartListProperty<MsdAssociation>(MsdDomainModel, this, "associations", []);
		public get associations(): internal.IList<MsdAssociation> { return this.__associations.get(); }
		public set associations(newValue: internal.IList<MsdAssociation>) { this.__associations.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MsdDomainModel() cannot be invoked directly, please use 'model.appservices.createMsdDomainModel()'"
				);
			}
		}

		/**
		 * Creates and returns a new MsdDomainModel instance in the SDK and on the server.
		 * The new MsdDomainModel will be automatically stored in the 'domainModel' property
		 * of the parent Msd element passed as argument.
		 */
		public static createIn(container: Msd): MsdDomainModel {
			return internal.instancehelpers.createElement(container, MsdDomainModel, "domainModel", false);
		}

		/**
		 * Creates and returns a new MsdDomainModel instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): MsdDomainModel {
			return internal.instancehelpers.createElement(model, MsdDomainModel);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IMsdEntity extends internal.IElement {
		model: IModel;
		containerAsMsdDomainModel: IMsdDomainModel;
		load(): MsdEntity;
		load(callback: (element: MsdEntity) => void, forceRefresh?: boolean);
	}

	export class MsdEntity extends internal.Element implements IMsdEntity {
		public static typeName: string = "AppServices$MsdEntity";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMsdDomainModel() { return super.getContainerAs<MsdDomainModel>(MsdDomainModel); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdEntity, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __guid: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdEntity, this, "guid", "", internal.PrimitiveTypeEnum.String);
		public get guid(): string { return this.__guid.get(); }
		public set guid(newValue: string) { this.__guid.set(newValue); }
		private __generalizationName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdEntity, this, "generalizationName", "", internal.PrimitiveTypeEnum.String);
		public get generalizationName(): string { return this.__generalizationName.get(); }
		public set generalizationName(newValue: string) { this.__generalizationName.set(newValue); }
		private __persistable: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(MsdEntity, this, "persistable", false, internal.PrimitiveTypeEnum.Boolean);
		public get persistable(): boolean { return this.__persistable.get(); }
		public set persistable(newValue: boolean) { this.__persistable.set(newValue); }
		private __locationX: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(MsdEntity, this, "locationX", 0, internal.PrimitiveTypeEnum.Integer);
		public get locationX(): number { return this.__locationX.get(); }
		public set locationX(newValue: number) { this.__locationX.set(newValue); }
		private __locationY: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(MsdEntity, this, "locationY", 0, internal.PrimitiveTypeEnum.Integer);
		public get locationY(): number { return this.__locationY.get(); }
		public set locationY(newValue: number) { this.__locationY.set(newValue); }
		private __attributes: internal.PartListProperty<MsdAttribute> =
			new internal.PartListProperty<MsdAttribute>(MsdEntity, this, "attributes", []);
		public get attributes(): internal.IList<MsdAttribute> { return this.__attributes.get(); }
		public set attributes(newValue: internal.IList<MsdAttribute>) { this.__attributes.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MsdEntity() cannot be invoked directly, please use 'model.appservices.createMsdEntity()'"
				);
			}
		}

		/**
		 * Creates and returns a new MsdEntity instance in the SDK and on the server.
		 * The new MsdEntity will be automatically stored in the 'entities' property
		 * of the parent MsdDomainModel element passed as argument.
		 */
		public static createIn(container: MsdDomainModel): MsdEntity {
			return internal.instancehelpers.createElement(container, MsdEntity, "entities", true);
		}

		/**
		 * Creates and returns a new MsdEntity instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): MsdEntity {
			return internal.instancehelpers.createElement(model, MsdEntity);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IMsdEnumeration extends internal.IElement {
		model: IModel;
		containerAsMsdEnumerationContainer: IMsdEnumerationContainer;
		load(): MsdEnumeration;
		load(callback: (element: MsdEnumeration) => void, forceRefresh?: boolean);
	}

	export class MsdEnumeration extends internal.Element implements IMsdEnumeration {
		public static typeName: string = "AppServices$MsdEnumeration";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMsdEnumerationContainer() { return super.getContainerAs<MsdEnumerationContainer>(MsdEnumerationContainer); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdEnumeration, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __guid: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdEnumeration, this, "guid", "", internal.PrimitiveTypeEnum.String);
		public get guid(): string { return this.__guid.get(); }
		public set guid(newValue: string) { this.__guid.set(newValue); }
		private __values: internal.PartListProperty<MsdEnumerationValue> =
			new internal.PartListProperty<MsdEnumerationValue>(MsdEnumeration, this, "values", []);
		public get values(): internal.IList<MsdEnumerationValue> { return this.__values.get(); }
		public set values(newValue: internal.IList<MsdEnumerationValue>) { this.__values.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MsdEnumeration() cannot be invoked directly, please use 'model.appservices.createMsdEnumeration()'"
				);
			}
		}

		/**
		 * Creates and returns a new MsdEnumeration instance in the SDK and on the server.
		 * The new MsdEnumeration will be automatically stored in the 'enumerations' property
		 * of the parent MsdEnumerationContainer element passed as argument.
		 */
		public static createIn(container: MsdEnumerationContainer): MsdEnumeration {
			return internal.instancehelpers.createElement(container, MsdEnumeration, "enumerations", true);
		}

		/**
		 * Creates and returns a new MsdEnumeration instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): MsdEnumeration {
			return internal.instancehelpers.createElement(model, MsdEnumeration);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IMsdEnumerationContainer extends internal.IElement {
		model: IModel;
		containerAsMsd: IMsd;
		containerAsVersionedService: webservices.IVersionedService;
		load(): MsdEnumerationContainer;
		load(callback: (element: MsdEnumerationContainer) => void, forceRefresh?: boolean);
	}

	export class MsdEnumerationContainer extends internal.Element implements IMsdEnumerationContainer {
		public static typeName: string = "AppServices$MsdEnumerationContainer";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMsd() { return super.getContainerAs<Msd>(Msd); }
		get containerAsVersionedService() { return super.getContainerAs<webservices.VersionedService>(webservices.VersionedService); }

		private __enumerations: internal.PartListProperty<MsdEnumeration> =
			new internal.PartListProperty<MsdEnumeration>(MsdEnumerationContainer, this, "enumerations", []);
		public get enumerations(): internal.IList<MsdEnumeration> { return this.__enumerations.get(); }
		public set enumerations(newValue: internal.IList<MsdEnumeration>) { this.__enumerations.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MsdEnumerationContainer() cannot be invoked directly, please use 'model.appservices.createMsdEnumerationContainer()'"
				);
			}
		}


		/**
		 * Creates and returns a new MsdEnumerationContainer instance in the SDK and on the server.
		 * The new MsdEnumerationContainer will be automatically stored in the 'enumerations' property
		 * of the parent Msd element passed as argument.
		 */
		public static createInMsdUnderEnumerations(container: Msd): MsdEnumerationContainer {
			return internal.instancehelpers.createElement(container, MsdEnumerationContainer, "enumerations", false);
		}

		/**
		 * Creates and returns a new MsdEnumerationContainer instance in the SDK and on the server.
		 * The new MsdEnumerationContainer will be automatically stored in the 'enumerationsByContract' property
		 * of the parent webservices.VersionedService element passed as argument.
		 */
		public static createInVersionedServiceUnderEnumerationsByContract(container: webservices.VersionedService): MsdEnumerationContainer {
			return internal.instancehelpers.createElement(container, MsdEnumerationContainer, "enumerationsByContract", false);
		}

		/**
		 * Creates and returns a new MsdEnumerationContainer instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): MsdEnumerationContainer {
			return internal.instancehelpers.createElement(model, MsdEnumerationContainer);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IMsdEnumerationValue extends internal.IElement {
		model: IModel;
		containerAsMsdEnumeration: IMsdEnumeration;
		load(): MsdEnumerationValue;
		load(callback: (element: MsdEnumerationValue) => void, forceRefresh?: boolean);
	}

	export class MsdEnumerationValue extends internal.Element implements IMsdEnumerationValue {
		public static typeName: string = "AppServices$MsdEnumerationValue";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMsdEnumeration() { return super.getContainerAs<MsdEnumeration>(MsdEnumeration); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdEnumerationValue, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __guid: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdEnumerationValue, this, "guid", "", internal.PrimitiveTypeEnum.String);
		public get guid(): string { return this.__guid.get(); }
		public set guid(newValue: string) { this.__guid.set(newValue); }
		private __translations: internal.PartListProperty<MsdText> =
			new internal.PartListProperty<MsdText>(MsdEnumerationValue, this, "translations", []);
		public get translations(): internal.IList<MsdText> { return this.__translations.get(); }
		public set translations(newValue: internal.IList<MsdText>) { this.__translations.set(newValue); }
		private __image: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdEnumerationValue, this, "image", "", internal.PrimitiveTypeEnum.String);
		public get image(): string { return this.__image.get(); }
		public set image(newValue: string) { this.__image.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MsdEnumerationValue() cannot be invoked directly, please use 'model.appservices.createMsdEnumerationValue()'"
				);
			}
		}

		/**
		 * Creates and returns a new MsdEnumerationValue instance in the SDK and on the server.
		 * The new MsdEnumerationValue will be automatically stored in the 'values' property
		 * of the parent MsdEnumeration element passed as argument.
		 */
		public static createIn(container: MsdEnumeration): MsdEnumerationValue {
			return internal.instancehelpers.createElement(container, MsdEnumerationValue, "values", true);
		}

		/**
		 * Creates and returns a new MsdEnumerationValue instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): MsdEnumerationValue {
			return internal.instancehelpers.createElement(model, MsdEnumerationValue);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IMsdMetadata extends internal.IElement {
		model: IModel;
		containerAsMsd: IMsd;
		load(): MsdMetadata;
		load(callback: (element: MsdMetadata) => void, forceRefresh?: boolean);
	}

	export class MsdMetadata extends internal.Element implements IMsdMetadata {
		public static typeName: string = "AppServices$MsdMetadata";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMsd() { return super.getContainerAs<Msd>(Msd); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdMetadata, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __documentation: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdMetadata, this, "documentation", "", internal.PrimitiveTypeEnum.String);
		public get documentation(): string { return this.__documentation.get(); }
		public set documentation(newValue: string) { this.__documentation.set(newValue); }
		private __version: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(MsdMetadata, this, "version", 0, internal.PrimitiveTypeEnum.Integer);
		public get version(): number { return this.__version.get(); }
		public set version(newValue: number) { this.__version.set(newValue); }
		private __publishDateTime: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdMetadata, this, "publishDateTime", "", internal.PrimitiveTypeEnum.String);
		public get publishDateTime(): string { return this.__publishDateTime.get(); }
		public set publishDateTime(newValue: string) { this.__publishDateTime.set(newValue); }
		private __serviceGuid: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdMetadata, this, "serviceGuid", "", internal.PrimitiveTypeEnum.String);
		public get serviceGuid(): string { return this.__serviceGuid.get(); }
		public set serviceGuid(newValue: string) { this.__serviceGuid.set(newValue); }
		private __versionGuid: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdMetadata, this, "versionGuid", "", internal.PrimitiveTypeEnum.String);
		public get versionGuid(): string { return this.__versionGuid.get(); }
		public set versionGuid(newValue: string) { this.__versionGuid.set(newValue); }
		private __instanceGuid: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdMetadata, this, "instanceGuid", "", internal.PrimitiveTypeEnum.String);
		public get instanceGuid(): string { return this.__instanceGuid.get(); }
		public set instanceGuid(newValue: string) { this.__instanceGuid.set(newValue); }
		private __supportedProtocols: internal.PrimitiveListProperty<string> =
			new internal.PrimitiveListProperty<string>(MsdMetadata, this, "supportedProtocols", [], internal.PrimitiveTypeEnum.String);
		public get supportedProtocols(): internal.IList<string> { return this.__supportedProtocols.get(); }
		public set supportedProtocols(newValue: internal.IList<string>) { this.__supportedProtocols.set(newValue); }
		private __headerAuthentication: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdMetadata, this, "headerAuthentication", "", internal.PrimitiveTypeEnum.String);
		public get headerAuthentication(): string { return this.__headerAuthentication.get(); }
		public set headerAuthentication(newValue: string) { this.__headerAuthentication.set(newValue); }
		private __microflows: internal.PartListProperty<MsdMicroflow> =
			new internal.PartListProperty<MsdMicroflow>(MsdMetadata, this, "microflows", []);
		public get microflows(): internal.IList<MsdMicroflow> { return this.__microflows.get(); }
		public set microflows(newValue: internal.IList<MsdMicroflow>) { this.__microflows.set(newValue); }
		private __caption: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdMetadata, this, "caption", "", internal.PrimitiveTypeEnum.String);
		public get caption(): string { return this.__caption.get(); }
		public set caption(newValue: string) { this.__caption.set(newValue); }
		private __image: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdMetadata, this, "image", "", internal.PrimitiveTypeEnum.String);
		public get image(): string { return this.__image.get(); }
		public set image(newValue: string) { this.__image.set(newValue); }
		private __description: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdMetadata, this, "description", "", internal.PrimitiveTypeEnum.String);
		public get description(): string { return this.__description.get(); }
		public set description(newValue: string) { this.__description.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MsdMetadata() cannot be invoked directly, please use 'model.appservices.createMsdMetadata()'"
				);
			}
		}

		/**
		 * Creates and returns a new MsdMetadata instance in the SDK and on the server.
		 * The new MsdMetadata will be automatically stored in the 'metadata' property
		 * of the parent Msd element passed as argument.
		 */
		public static createIn(container: Msd): MsdMetadata {
			return internal.instancehelpers.createElement(container, MsdMetadata, "metadata", false);
		}

		/**
		 * Creates and returns a new MsdMetadata instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): MsdMetadata {
			return internal.instancehelpers.createElement(model, MsdMetadata);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IMsdMicroflow extends internal.IElement {
		model: IModel;
		containerAsMsdMetadata: IMsdMetadata;
		load(): MsdMicroflow;
		load(callback: (element: MsdMicroflow) => void, forceRefresh?: boolean);
	}

	export class MsdMicroflow extends internal.Element implements IMsdMicroflow {
		public static typeName: string = "AppServices$MsdMicroflow";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"systemEntityType" : {
					"deleted" : "6.1.0",
					"deletionMessage" : null
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsMsdMetadata() { return super.getContainerAs<MsdMetadata>(MsdMetadata); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdMicroflow, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __documentation: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdMicroflow, this, "documentation", "", internal.PrimitiveTypeEnum.String);
		public get documentation(): string { return this.__documentation.get(); }
		public set documentation(newValue: string) { this.__documentation.set(newValue); }
		private __image: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdMicroflow, this, "image", "", internal.PrimitiveTypeEnum.String);
		public get image(): string { return this.__image.get(); }
		public set image(newValue: string) { this.__image.set(newValue); }
		private __description: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdMicroflow, this, "description", "", internal.PrimitiveTypeEnum.String);
		public get description(): string { return this.__description.get(); }
		public set description(newValue: string) { this.__description.set(newValue); }
		private __parameters: internal.PartListProperty<MsdMicroflowParameter> =
			new internal.PartListProperty<MsdMicroflowParameter>(MsdMicroflow, this, "parameters", []);
		public get parameters(): internal.IList<MsdMicroflowParameter> { return this.__parameters.get(); }
		public set parameters(newValue: internal.IList<MsdMicroflowParameter>) { this.__parameters.set(newValue); }
		private __returnType: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdMicroflow, this, "returnType", "", internal.PrimitiveTypeEnum.String);
		public get returnType(): string { return this.__returnType.get(); }
		public set returnType(newValue: string) { this.__returnType.set(newValue); }
		private __systemEntityType: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdMicroflow, this, "systemEntityType", "", internal.PrimitiveTypeEnum.String);
		/**
		 * In version 6.1.0: deleted
		 */
		public get systemEntityType(): string { return this.__systemEntityType.get(); }
		public set systemEntityType(newValue: string) { this.__systemEntityType.set(newValue); }
		private __returnTypeSpecification: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdMicroflow, this, "returnTypeSpecification", "", internal.PrimitiveTypeEnum.String);
		public get returnTypeSpecification(): string { return this.__returnTypeSpecification.get(); }
		public set returnTypeSpecification(newValue: string) { this.__returnTypeSpecification.set(newValue); }
		private __returnTypeCanBeEmpty: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(MsdMicroflow, this, "returnTypeCanBeEmpty", false, internal.PrimitiveTypeEnum.Boolean);
		public get returnTypeCanBeEmpty(): boolean { return this.__returnTypeCanBeEmpty.get(); }
		public set returnTypeCanBeEmpty(newValue: boolean) { this.__returnTypeCanBeEmpty.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MsdMicroflow() cannot be invoked directly, please use 'model.appservices.createMsdMicroflow()'"
				);
			}
		}

		/**
		 * Creates and returns a new MsdMicroflow instance in the SDK and on the server.
		 * The new MsdMicroflow will be automatically stored in the 'microflows' property
		 * of the parent MsdMetadata element passed as argument.
		 */
		public static createIn(container: MsdMetadata): MsdMicroflow {
			return internal.instancehelpers.createElement(container, MsdMicroflow, "microflows", true);
		}

		/**
		 * Creates and returns a new MsdMicroflow instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): MsdMicroflow {
			return internal.instancehelpers.createElement(model, MsdMicroflow);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IMsdMicroflowParameter extends internal.IElement {
		model: IModel;
		containerAsMsdMicroflow: IMsdMicroflow;
		containerAsPublishedParameter: webservices.IPublishedParameter;
		load(): MsdMicroflowParameter;
		load(callback: (element: MsdMicroflowParameter) => void, forceRefresh?: boolean);
	}

	export class MsdMicroflowParameter extends internal.Element implements IMsdMicroflowParameter {
		public static typeName: string = "AppServices$MsdMicroflowParameter";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"systemEntityType" : {
					"deleted" : "6.1.0",
					"deletionMessage" : null
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsMsdMicroflow() { return super.getContainerAs<MsdMicroflow>(MsdMicroflow); }
		get containerAsPublishedParameter() { return super.getContainerAs<webservices.PublishedParameter>(webservices.PublishedParameter); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdMicroflowParameter, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __type: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdMicroflowParameter, this, "type", "", internal.PrimitiveTypeEnum.String);
		public get type(): string { return this.__type.get(); }
		public set type(newValue: string) { this.__type.set(newValue); }
		private __typeSpecification: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdMicroflowParameter, this, "typeSpecification", "", internal.PrimitiveTypeEnum.String);
		public get typeSpecification(): string { return this.__typeSpecification.get(); }
		public set typeSpecification(newValue: string) { this.__typeSpecification.set(newValue); }
		private __systemEntityType: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdMicroflowParameter, this, "systemEntityType", "", internal.PrimitiveTypeEnum.String);
		/**
		 * In version 6.1.0: deleted
		 */
		public get systemEntityType(): string { return this.__systemEntityType.get(); }
		public set systemEntityType(newValue: string) { this.__systemEntityType.set(newValue); }
		private __canBeEmpty: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(MsdMicroflowParameter, this, "canBeEmpty", false, internal.PrimitiveTypeEnum.Boolean);
		public get canBeEmpty(): boolean { return this.__canBeEmpty.get(); }
		public set canBeEmpty(newValue: boolean) { this.__canBeEmpty.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MsdMicroflowParameter() cannot be invoked directly, please use 'model.appservices.createMsdMicroflowParameter()'"
				);
			}
		}


		/**
		 * Creates and returns a new MsdMicroflowParameter instance in the SDK and on the server.
		 * The new MsdMicroflowParameter will be automatically stored in the 'parameters' property
		 * of the parent MsdMicroflow element passed as argument.
		 */
		public static createInMsdMicroflowUnderParameters(container: MsdMicroflow): MsdMicroflowParameter {
			return internal.instancehelpers.createElement(container, MsdMicroflowParameter, "parameters", true);
		}

		/**
		 * Creates and returns a new MsdMicroflowParameter instance in the SDK and on the server.
		 * The new MsdMicroflowParameter will be automatically stored in the 'parameterByContract' property
		 * of the parent webservices.PublishedParameter element passed as argument.
		 */
		public static createInPublishedParameterUnderParameterByContract(container: webservices.PublishedParameter): MsdMicroflowParameter {
			return internal.instancehelpers.createElement(container, MsdMicroflowParameter, "parameterByContract", false);
		}

		/**
		 * Creates and returns a new MsdMicroflowParameter instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): MsdMicroflowParameter {
			return internal.instancehelpers.createElement(model, MsdMicroflowParameter);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IMsdText extends internal.IElement {
		model: IModel;
		containerAsMsdEnumerationValue: IMsdEnumerationValue;
		load(): MsdText;
		load(callback: (element: MsdText) => void, forceRefresh?: boolean);
	}

	export class MsdText extends internal.Element implements IMsdText {
		public static typeName: string = "AppServices$MsdText";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMsdEnumerationValue() { return super.getContainerAs<MsdEnumerationValue>(MsdEnumerationValue); }

		private __languageCode: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdText, this, "languageCode", "", internal.PrimitiveTypeEnum.String);
		public get languageCode(): string { return this.__languageCode.get(); }
		public set languageCode(newValue: string) { this.__languageCode.set(newValue); }
		private __caption: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MsdText, this, "caption", "", internal.PrimitiveTypeEnum.String);
		public get caption(): string { return this.__caption.get(); }
		public set caption(newValue: string) { this.__caption.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MsdText() cannot be invoked directly, please use 'model.appservices.createMsdText()'"
				);
			}
		}

		/**
		 * Creates and returns a new MsdText instance in the SDK and on the server.
		 * The new MsdText will be automatically stored in the 'translations' property
		 * of the parent MsdEnumerationValue element passed as argument.
		 */
		public static createIn(container: MsdEnumerationValue): MsdText {
			return internal.instancehelpers.createElement(container, MsdText, "translations", true);
		}

		/**
		 * Creates and returns a new MsdText instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): MsdText {
			return internal.instancehelpers.createElement(model, MsdText);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IMsdVersion extends internal.IElement {
		model: IModel;
		containerAsMsd: IMsd;
		load(): MsdVersion;
		load(callback: (element: MsdVersion) => void, forceRefresh?: boolean);
	}

	export class MsdVersion extends internal.Element implements IMsdVersion {
		public static typeName: string = "AppServices$MsdVersion";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMsd() { return super.getContainerAs<Msd>(Msd); }

		private __version: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(MsdVersion, this, "version", 0, internal.PrimitiveTypeEnum.Integer);
		public get version(): number { return this.__version.get(); }
		public set version(newValue: number) { this.__version.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MsdVersion() cannot be invoked directly, please use 'model.appservices.createMsdVersion()'"
				);
			}
		}

		/**
		 * Creates and returns a new MsdVersion instance in the SDK and on the server.
		 * The new MsdVersion will be automatically stored in the 'version' property
		 * of the parent Msd element passed as argument.
		 */
		public static createIn(container: Msd): MsdVersion {
			return internal.instancehelpers.createElement(container, MsdVersion, "version", false);
		}

		/**
		 * Creates and returns a new MsdVersion instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): MsdVersion {
			return internal.instancehelpers.createElement(model, MsdVersion);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}
}

import {constants} from "./constants";
import {microflows} from "./microflows";
import {webservices} from "./webservices";

import {IModel} from "./base-model";
