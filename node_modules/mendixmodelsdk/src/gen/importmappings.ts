/* tslint:disable */

import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;

import {mappings} from "./mappings";

export namespace importmappings {


	/**
	 * Interfaces and instance classes for types from the Mendix sub meta model `ImportMappings`.
	 */


	/**
	 * See: {@link https://docs.mendix.com/refguide7/import-mappings relevant section in reference guide}
	 */
	export interface IImportMapping extends mappings.IMappingDocument {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		load(): ImportMapping;
		load(callback: (element: ImportMapping) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/import-mappings relevant section in reference guide}
	 */
	export class ImportMapping extends mappings.MappingDocument implements IImportMapping {
		public static typeName: string = "ImportMappings$ImportMapping";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }

		private __parameter: internal.ByNameReferenceProperty<domainmodels.IEntity> =
			new internal.ByNameReferenceProperty<domainmodels.IEntity>(ImportMapping, this, "parameter", null, "DomainModels$Entity");
		public get parameter(): domainmodels.IEntity { return this.__parameter.get(); }
		public set parameter(newValue: domainmodels.IEntity) { this.__parameter.set(newValue); }
		get parameterQualifiedName(): string { return this.__parameter.qualifiedName(); }
		private __useSubtransactionsForMicroflows: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(ImportMapping, this, "useSubtransactionsForMicroflows", false, internal.PrimitiveTypeEnum.Boolean);
		public get useSubtransactionsForMicroflows(): boolean { return this.__useSubtransactionsForMicroflows.get(); }
		public set useSubtransactionsForMicroflows(newValue: boolean) { this.__useSubtransactionsForMicroflows.set(newValue); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "documents";
		}

		/**
		 * Creates a new ImportMapping unit in the SDK and on the server.
		 * Expects one argument, the projects.IFolderBase in which this unit is contained.
		 */
		public static createIn(container: projects.IFolderBase): ImportMapping {
			return internal.instancehelpers.createUnit(container, ImportMapping);
		}

		_isByNameReferrable() { return true; }

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/import-mappings relevant section in reference guide}
	 */
	export interface IImportObjectMappingElement extends mappings.IObjectMappingElement {
		model: IModel;
		containerAsMappingDocument: mappings.IMappingDocument;
		containerAsObjectMappingElement: mappings.IObjectMappingElement;
		load(): ImportObjectMappingElement;
		load(callback: (element: ImportObjectMappingElement) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/import-mappings relevant section in reference guide}
	 */
	export class ImportObjectMappingElement extends mappings.ObjectMappingElement implements IImportObjectMappingElement {
		public static typeName: string = "ImportMappings$ImportObjectMappingElement";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMappingDocument() { return super.getContainerAs<mappings.MappingDocument>(mappings.MappingDocument); }
		get containerAsObjectMappingElement() { return super.getContainerAs<mappings.ObjectMappingElement>(mappings.ObjectMappingElement); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ImportObjectMappingElement() cannot be invoked directly, please use 'model.importmappings.createImportObjectMappingElement()'"
				);
			}
		}


		/**
		 * Creates and returns a new ImportObjectMappingElement instance in the SDK and on the server.
		 * The new ImportObjectMappingElement will be automatically stored in the 'rootMappingElements' property
		 * of the parent mappings.MappingDocument element passed as argument.
		 */
		public static createInMappingDocumentUnderRootMappingElements(container: mappings.MappingDocument): ImportObjectMappingElement {
			return internal.instancehelpers.createElement(container, ImportObjectMappingElement, "rootMappingElements", true);
		}

		/**
		 * Creates and returns a new ImportObjectMappingElement instance in the SDK and on the server.
		 * The new ImportObjectMappingElement will be automatically stored in the 'children' property
		 * of the parent mappings.ObjectMappingElement element passed as argument.
		 */
		public static createInObjectMappingElementUnderChildren(container: mappings.ObjectMappingElement): ImportObjectMappingElement {
			return internal.instancehelpers.createElement(container, ImportObjectMappingElement, "children", true);
		}

		/**
		 * Creates and returns a new ImportObjectMappingElement instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ImportObjectMappingElement {
			return internal.instancehelpers.createElement(model, ImportObjectMappingElement);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/import-mappings relevant section in reference guide}
	 */
	export interface IImportValueMappingElement extends mappings.IValueMappingElement {
		model: IModel;
		containerAsObjectMappingElement: mappings.IObjectMappingElement;
		load(): ImportValueMappingElement;
		load(callback: (element: ImportValueMappingElement) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/import-mappings relevant section in reference guide}
	 */
	export class ImportValueMappingElement extends mappings.ValueMappingElement implements IImportValueMappingElement {
		public static typeName: string = "ImportMappings$ImportValueMappingElement";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsObjectMappingElement() { return super.getContainerAs<mappings.ObjectMappingElement>(mappings.ObjectMappingElement); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ImportValueMappingElement() cannot be invoked directly, please use 'model.importmappings.createImportValueMappingElement()'"
				);
			}
		}

		/**
		 * Creates and returns a new ImportValueMappingElement instance in the SDK and on the server.
		 * The new ImportValueMappingElement will be automatically stored in the 'children' property
		 * of the parent mappings.ObjectMappingElement element passed as argument.
		 */
		public static createIn(container: mappings.ObjectMappingElement): ImportValueMappingElement {
			return internal.instancehelpers.createElement(container, ImportValueMappingElement, "children", true);
		}

		/**
		 * Creates and returns a new ImportValueMappingElement instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ImportValueMappingElement {
			return internal.instancehelpers.createElement(model, ImportValueMappingElement);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}
}

import {domainmodels} from "./domainmodels";
import {projects} from "./projects";

import {IModel} from "./base-model";
