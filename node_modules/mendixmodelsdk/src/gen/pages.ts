/* tslint:disable */

import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;
import {common} from "../common";

import {projects} from "./projects";

export namespace pages {

	export class AggregateFunction extends internal.IEnum {
		public static None: AggregateFunction = new AggregateFunction("None", { });
		public static Average: AggregateFunction = new AggregateFunction("Average", { });
		public static Maximum: AggregateFunction = new AggregateFunction("Maximum", { });
		public static Minimum: AggregateFunction = new AggregateFunction("Minimum", { });
		public static Sum: AggregateFunction = new AggregateFunction("Sum", { });
		public static Count: AggregateFunction = new AggregateFunction("Count", { });
		protected qualifiedTsTypeName: string = "pages.AggregateFunction";
	}

	export class AlignmentEnum extends internal.IEnum {
		public static Left: AlignmentEnum = new AlignmentEnum("Left", { });
		public static Center: AlignmentEnum = new AlignmentEnum("Center", { });
		public static Right: AlignmentEnum = new AlignmentEnum("Right", { });
		protected qualifiedTsTypeName: string = "pages.AlignmentEnum";
	}

	export class ButtonStyle extends internal.IEnum {
		public static Default: ButtonStyle = new ButtonStyle("Default", { });
		public static Inverse: ButtonStyle = new ButtonStyle("Inverse", { });
		public static Primary: ButtonStyle = new ButtonStyle("Primary", { });
		public static Info: ButtonStyle = new ButtonStyle("Info", { });
		public static Success: ButtonStyle = new ButtonStyle("Success", { });
		public static Warning: ButtonStyle = new ButtonStyle("Warning", { });
		public static Danger: ButtonStyle = new ButtonStyle("Danger", { });
		protected qualifiedTsTypeName: string = "pages.ButtonStyle";
	}

	export class ClickTypeType extends internal.IEnum {
		public static Single: ClickTypeType = new ClickTypeType("Single", { });
		public static Double: ClickTypeType = new ClickTypeType("Double", { });
		protected qualifiedTsTypeName: string = "pages.ClickTypeType";
	}

	export class ContainerWidth extends internal.IEnum {
		public static FullWidth: ContainerWidth = new ContainerWidth("FullWidth", { });
		public static FixedWidth: ContainerWidth = new ContainerWidth("FixedWidth", { });
		protected qualifiedTsTypeName: string = "pages.ContainerWidth";
	}

	export class DataViewReadOnlyStyle extends internal.IEnum {
		public static Control: DataViewReadOnlyStyle = new DataViewReadOnlyStyle("Control", { });
		public static Text: DataViewReadOnlyStyle = new DataViewReadOnlyStyle("Text", { });
		protected qualifiedTsTypeName: string = "pages.DataViewReadOnlyStyle";
	}

	export class DatabaseConstraintOperator extends internal.IEnum {
		public static Equals: DatabaseConstraintOperator = new DatabaseConstraintOperator("Equals", { });
		public static NotEquals: DatabaseConstraintOperator = new DatabaseConstraintOperator("NotEquals", { });
		public static Contains: DatabaseConstraintOperator = new DatabaseConstraintOperator("Contains", { });
		public static NotContains: DatabaseConstraintOperator = new DatabaseConstraintOperator("NotContains", { });
		public static LessThan: DatabaseConstraintOperator = new DatabaseConstraintOperator("LessThan", { });
		public static LessThanOrEquals: DatabaseConstraintOperator = new DatabaseConstraintOperator("LessThanOrEquals", { });
		public static GreaterThan: DatabaseConstraintOperator = new DatabaseConstraintOperator("GreaterThan", { });
		public static GreaterThanOrEquals: DatabaseConstraintOperator = new DatabaseConstraintOperator("GreaterThanOrEquals", { });
		protected qualifiedTsTypeName: string = "pages.DatabaseConstraintOperator";
	}

	export class DateFormat extends internal.IEnum {
		public static Date: DateFormat = new DateFormat("Date", { });
		public static Time: DateFormat = new DateFormat("Time", { });
		public static DateTime: DateFormat = new DateFormat("DateTime", { });
		public static Custom: DateFormat = new DateFormat("Custom", { });
		protected qualifiedTsTypeName: string = "pages.DateFormat";
	}

	export class EditableEnum extends internal.IEnum {
		public static Always: EditableEnum = new EditableEnum("Always", { });
		public static Never: EditableEnum = new EditableEnum("Never", { });
		public static Conditional: EditableEnum = new EditableEnum("Conditional", { });
		protected qualifiedTsTypeName: string = "pages.EditableEnum";
	}

	export class EnumFormat extends internal.IEnum {
		public static Text: EnumFormat = new EnumFormat("Text", { });
		public static Image: EnumFormat = new EnumFormat("Image", { });
		protected qualifiedTsTypeName: string = "pages.EnumFormat";
	}

	export class FileManagerType extends internal.IEnum {
		public static Upload: FileManagerType = new FileManagerType("Upload", { });
		public static Download: FileManagerType = new FileManagerType("Download", { });
		public static Both: FileManagerType = new FileManagerType("Both", { });
		protected qualifiedTsTypeName: string = "pages.FileManagerType";
	}

	export class FormLocation extends internal.IEnum {
		public static Content: FormLocation = new FormLocation("Content", { });
		public static Popup: FormLocation = new FormLocation("Popup", { });
		public static ModalPopup: FormLocation = new FormLocation("ModalPopup", { });
		protected qualifiedTsTypeName: string = "pages.FormLocation";
	}

	export class FormValidations extends internal.IEnum {
		public static None: FormValidations = new FormValidations("None", { });
		public static Widget: FormValidations = new FormValidations("Widget", { });
		public static All: FormValidations = new FormValidations("All", { });
		protected qualifiedTsTypeName: string = "pages.FormValidations";
	}

	export class GridSelectionMode extends internal.IEnum {
		public static None: GridSelectionMode = new GridSelectionMode("None", { });
		public static Single: GridSelectionMode = new GridSelectionMode("Single", { });
		public static SingleAndMaintain: GridSelectionMode = new GridSelectionMode("SingleAndMaintain", { });
		public static Multi: GridSelectionMode = new GridSelectionMode("Multi", { });
		public static SimpleMulti: GridSelectionMode = new GridSelectionMode("SimpleMulti", { });
		protected qualifiedTsTypeName: string = "pages.GridSelectionMode";
	}

	export class GroupBoxCollapsible extends internal.IEnum {
		public static No: GroupBoxCollapsible = new GroupBoxCollapsible("No", { });
		public static YesInitiallyExpanded: GroupBoxCollapsible = new GroupBoxCollapsible("YesInitiallyExpanded", { });
		public static YesInitiallyCollapsed: GroupBoxCollapsible = new GroupBoxCollapsible("YesInitiallyCollapsed", { });
		protected qualifiedTsTypeName: string = "pages.GroupBoxCollapsible";
	}

	export class ImageSizeUnit extends internal.IEnum {
		public static Auto: ImageSizeUnit = new ImageSizeUnit("Auto", { });
		public static Pixels: ImageSizeUnit = new ImageSizeUnit("Pixels", { });
		public static Percentage: ImageSizeUnit = new ImageSizeUnit("Percentage", { });
		protected qualifiedTsTypeName: string = "pages.ImageSizeUnit";
	}

	export class LayoutModeType extends internal.IEnum {
		public static Headline: LayoutModeType = new LayoutModeType("Headline", { });
		public static Sidebar: LayoutModeType = new LayoutModeType("Sidebar", { });
		protected qualifiedTsTypeName: string = "pages.LayoutModeType";
	}

	export class LayoutType extends internal.IEnum {
		public static Responsive: LayoutType = new LayoutType("Responsive", { });
		public static Tablet: LayoutType = new LayoutType("Tablet", { });
		public static Phone: LayoutType = new LayoutType("Phone", { });
		public static ModalPopup: LayoutType = new LayoutType("ModalPopup", { });
		public static Popup: LayoutType = new LayoutType("Popup", { });
		public static Legacy: LayoutType = new LayoutType("Legacy", { });
		protected qualifiedTsTypeName: string = "pages.LayoutType";
	}

	export class LinkType extends internal.IEnum {
		public static Web: LinkType = new LinkType("Web", { });
		public static Email: LinkType = new LinkType("Email", { });
		public static Call: LinkType = new LinkType("Call", { });
		public static Text: LinkType = new LinkType("Text", { });
		protected qualifiedTsTypeName: string = "pages.LinkType";
	}

	export class MobileFooterType extends internal.IEnum {
		public static None: MobileFooterType = new MobileFooterType("None", { });
		public static MenuBar: MobileFooterType = new MobileFooterType("MenuBar", { });
		public static Custom: MobileFooterType = new MobileFooterType("Custom", { });
		protected qualifiedTsTypeName: string = "pages.MobileFooterType";
	}

	export class NewButtonEditLocation extends internal.IEnum {
		public static InlineAtTop: NewButtonEditLocation = new NewButtonEditLocation("InlineAtTop", { });
		public static InlineAtBottom: NewButtonEditLocation = new NewButtonEditLocation("InlineAtBottom", { });
		public static Form: NewButtonEditLocation = new NewButtonEditLocation("Form", { });
		protected qualifiedTsTypeName: string = "pages.NewButtonEditLocation";
	}

	export class ProgressBarType extends internal.IEnum {
		public static None: ProgressBarType = new ProgressBarType("None", { });
		public static NonBlocking: ProgressBarType = new ProgressBarType("NonBlocking", { });
		public static Blocking: ProgressBarType = new ProgressBarType("Blocking", { });
		protected qualifiedTsTypeName: string = "pages.ProgressBarType";
	}

	export class ReadOnlyStyle extends internal.IEnum {
		public static Inherit: ReadOnlyStyle = new ReadOnlyStyle("Inherit", { });
		public static Control: ReadOnlyStyle = new ReadOnlyStyle("Control", { });
		public static Text: ReadOnlyStyle = new ReadOnlyStyle("Text", { });
		protected qualifiedTsTypeName: string = "pages.ReadOnlyStyle";
	}

	export class ReferenceSelectorRenderModeType extends internal.IEnum {
		public static Form: ReferenceSelectorRenderModeType = new ReferenceSelectorRenderModeType("Form", { });
		public static DropDown: ReferenceSelectorRenderModeType = new ReferenceSelectorRenderModeType("DropDown", { });
		protected qualifiedTsTypeName: string = "pages.ReferenceSelectorRenderModeType";
	}

	export class RenderType extends internal.IEnum {
		public static Button: RenderType = new RenderType("Button", { });
		public static Link: RenderType = new RenderType("Link", { });
		protected qualifiedTsTypeName: string = "pages.RenderType";
	}

	export class ScrollBehavior extends internal.IEnum {
		public static PerRegion: ScrollBehavior = new ScrollBehavior("PerRegion", { });
		public static FullWidget: ScrollBehavior = new ScrollBehavior("FullWidget", { });
		protected qualifiedTsTypeName: string = "pages.ScrollBehavior";
	}

	export class SearchBarTypeEnum extends internal.IEnum {
		public static None: SearchBarTypeEnum = new SearchBarTypeEnum("None", { });
		public static FoldableOpen: SearchBarTypeEnum = new SearchBarTypeEnum("FoldableOpen", { });
		public static FoldableClosed: SearchBarTypeEnum = new SearchBarTypeEnum("FoldableClosed", { });
		public static AlwaysOpen: SearchBarTypeEnum = new SearchBarTypeEnum("AlwaysOpen", { });
		protected qualifiedTsTypeName: string = "pages.SearchBarTypeEnum";
	}

	export class SearchFieldOperator extends internal.IEnum {
		public static Contains: SearchFieldOperator = new SearchFieldOperator("Contains", { });
		public static StartsWith: SearchFieldOperator = new SearchFieldOperator("StartsWith", { });
		public static Greater: SearchFieldOperator = new SearchFieldOperator("Greater", { });
		public static GreaterOrEqual: SearchFieldOperator = new SearchFieldOperator("GreaterOrEqual", { });
		public static Equal: SearchFieldOperator = new SearchFieldOperator("Equal", { });
		public static NotEqual: SearchFieldOperator = new SearchFieldOperator("NotEqual", { });
		public static SmallerOrEqual: SearchFieldOperator = new SearchFieldOperator("SmallerOrEqual", { });
		public static Smaller: SearchFieldOperator = new SearchFieldOperator("Smaller", { });
		protected qualifiedTsTypeName: string = "pages.SearchFieldOperator";
	}

	export class SearchFieldType extends internal.IEnum {
		public static Normal: SearchFieldType = new SearchFieldType("Normal", { });
		public static Hidden: SearchFieldType = new SearchFieldType("Hidden", { });
		public static ReadOnly: SearchFieldType = new SearchFieldType("ReadOnly", { });
		protected qualifiedTsTypeName: string = "pages.SearchFieldType";
	}

	export class SelectionType extends internal.IEnum {
		public static SelectPage: SelectionType = new SelectionType("SelectPage", { });
		public static SelectAll: SelectionType = new SelectionType("SelectAll", { });
		protected qualifiedTsTypeName: string = "pages.SelectionType";
	}

	export class SidebarToggleMode extends internal.IEnum {
		public static PushContentAside: SidebarToggleMode = new SidebarToggleMode("PushContentAside", { });
		public static SlideOverContent: SidebarToggleMode = new SidebarToggleMode("SlideOverContent", { });
		public static ShrinkContent: SidebarToggleMode = new SidebarToggleMode("ShrinkContent", { });
		protected qualifiedTsTypeName: string = "pages.SidebarToggleMode";
	}

	export class SidebarToggleRegion extends internal.IEnum {
		public static Left: SidebarToggleRegion = new SidebarToggleRegion("Left", { });
		public static Right: SidebarToggleRegion = new SidebarToggleRegion("Right", { });
		protected qualifiedTsTypeName: string = "pages.SidebarToggleRegion";
	}

	export class SimpleMenuBarOrientation extends internal.IEnum {
		public static Horizontal: SimpleMenuBarOrientation = new SimpleMenuBarOrientation("Horizontal", { });
		public static Vertical: SimpleMenuBarOrientation = new SimpleMenuBarOrientation("Vertical", { });
		protected qualifiedTsTypeName: string = "pages.SimpleMenuBarOrientation";
	}

	export class SizeMode extends internal.IEnum {
		public static Auto: SizeMode = new SizeMode("Auto", { });
		public static Pixels: SizeMode = new SizeMode("Pixels", { });
		public static Percentage: SizeMode = new SizeMode("Percentage", { });
		protected qualifiedTsTypeName: string = "pages.SizeMode";
	}

	export class SortDirection extends internal.IEnum {
		public static Ascending: SortDirection = new SortDirection("Ascending", { });
		public static Descending: SortDirection = new SortDirection("Descending", { });
		protected qualifiedTsTypeName: string = "pages.SortDirection";
	}

	export class TableCellRenderModeType extends internal.IEnum {
		public static Default: TableCellRenderModeType = new TableCellRenderModeType("Default", { });
		public static Header: TableCellRenderModeType = new TableCellRenderModeType("Header", { });
		public static Title: TableCellRenderModeType = new TableCellRenderModeType("Title", { });
		protected qualifiedTsTypeName: string = "pages.TableCellRenderModeType";
	}

	export class TextRenderMode extends internal.IEnum {
		public static Text: TextRenderMode = new TextRenderMode("Text", { });
		public static Paragraph: TextRenderMode = new TextRenderMode("Paragraph", { });
		public static H1: TextRenderMode = new TextRenderMode("H1", { });
		public static H2: TextRenderMode = new TextRenderMode("H2", { });
		public static H3: TextRenderMode = new TextRenderMode("H3", { });
		public static H4: TextRenderMode = new TextRenderMode("H4", { });
		public static H5: TextRenderMode = new TextRenderMode("H5", { });
		public static H6: TextRenderMode = new TextRenderMode("H6", { });
		protected qualifiedTsTypeName: string = "pages.TextRenderMode";
	}

	export class ToggleMode extends internal.IEnum {
		public static None: ToggleMode = new ToggleMode("None", { });
		public static PushContentAside: ToggleMode = new ToggleMode("PushContentAside", { });
		public static SlideOverContent: ToggleMode = new ToggleMode("SlideOverContent", { });
		public static ShrinkContentInitiallyOpen: ToggleMode = new ToggleMode("ShrinkContentInitiallyOpen", { });
		public static ShrinkContentInitiallyClosed: ToggleMode = new ToggleMode("ShrinkContentInitiallyClosed", { });
		protected qualifiedTsTypeName: string = "pages.ToggleMode";
	}

	export class UnitEnum extends internal.IEnum {
		public static Weight: UnitEnum = new UnitEnum("Weight", { });
		public static Pixels: UnitEnum = new UnitEnum("Pixels", { });
		protected qualifiedTsTypeName: string = "pages.UnitEnum";
	}


	/**
	 * Interfaces and instance classes for types from the Mendix sub meta model `Pages`.
	 */


	/**
	 * See: {@link https://docs.mendix.com/refguide7/pages relevant section in reference guide}
	 */
	export interface IWidget extends internal.IElement {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): Widget;
		load(callback: (element: Widget) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/pages relevant section in reference guide}
	 *
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class Widget extends internal.Element implements IWidget {
		public static typeName: string = "Pages$Widget";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Widget, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __class: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Widget, this, "class", "", internal.PrimitiveTypeEnum.String);
		public get class(): string { return this.__class.get(); }
		public set class(newValue: string) { this.__class.set(newValue); }
		private __style: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Widget, this, "style", "", internal.PrimitiveTypeEnum.String);
		public get style(): string { return this.__style.get(); }
		public set style(newValue: string) { this.__style.set(newValue); }
		private __tabIndex: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(Widget, this, "tabIndex", 0, internal.PrimitiveTypeEnum.Integer);
		public get tabIndex(): number { return this.__tabIndex.get(); }
		public set tabIndex(newValue: number) { this.__tabIndex.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Widget() cannot be invoked directly, please use 'model.pages.createWidget()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IConditionallyVisibleWidget extends IWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): ConditionallyVisibleWidget;
		load(callback: (element: ConditionallyVisibleWidget) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class ConditionallyVisibleWidget extends Widget implements IConditionallyVisibleWidget {
		public static typeName: string = "Pages$ConditionallyVisibleWidget";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __conditionalVisibilitySettings: internal.PartProperty<ConditionalVisibilitySettings> =
			new internal.PartProperty<ConditionalVisibilitySettings>(ConditionallyVisibleWidget, this, "conditionalVisibilitySettings", null, false);
		public get conditionalVisibilitySettings(): ConditionalVisibilitySettings { return this.__conditionalVisibilitySettings.get(); }
		public set conditionalVisibilitySettings(newValue: ConditionalVisibilitySettings) { this.__conditionalVisibilitySettings.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ConditionallyVisibleWidget() cannot be invoked directly, please use 'model.pages.createConditionallyVisibleWidget()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/button-widgets relevant section in reference guide}
	 */
	export interface IButton extends IConditionallyVisibleWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): Button;
		load(callback: (element: Button) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/button-widgets relevant section in reference guide}
	 *
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class Button extends ConditionallyVisibleWidget implements IButton {
		public static typeName: string = "Pages$Button";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"caption" : {
					"required" : {
						"currentValue" : true
					}
				},
				"tooltip" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __caption: internal.PartProperty<ClientTemplate> =
			new internal.PartProperty<ClientTemplate>(Button, this, "caption", null, false);
		public get caption(): ClientTemplate { return this.__caption.get(); }
		public set caption(newValue: ClientTemplate) { this.__caption.set(newValue); }
		private __tooltip: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(Button, this, "tooltip", null, true);
		public get tooltip(): texts.Text { return this.__tooltip.get(); }
		public set tooltip(newValue: texts.Text) { this.__tooltip.set(newValue); }
		private __icon: internal.PartProperty<Icon> =
			new internal.PartProperty<Icon>(Button, this, "icon", null, false);
		public get icon(): Icon { return this.__icon.get(); }
		public set icon(newValue: Icon) { this.__icon.set(newValue); }
		private __renderType: internal.EnumProperty<RenderType> =
			new internal.EnumProperty<RenderType>(Button, this, "renderType", RenderType.Button, RenderType);
		public get renderType(): RenderType { return this.__renderType.get(); }
		public set renderType(newValue: RenderType) { this.__renderType.set(newValue); }
		private __buttonStyle: internal.EnumProperty<ButtonStyle> =
			new internal.EnumProperty<ButtonStyle>(Button, this, "buttonStyle", ButtonStyle.Default, ButtonStyle);
		public get buttonStyle(): ButtonStyle { return this.__buttonStyle.get(); }
		public set buttonStyle(newValue: ButtonStyle) { this.__buttonStyle.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Button() cannot be invoked directly, please use 'model.pages.createButton()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.buttonStyle = ButtonStyle.Default;
			this.renderType = RenderType.Button;
			this.tooltip = texts.Text.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/action-button relevant section in reference guide}
	 */
	export interface IActionButton extends IButton {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): ActionButton;
		load(callback: (element: ActionButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/action-button relevant section in reference guide}
	 */
	export class ActionButton extends Button implements IActionButton {
		public static typeName: string = "Pages$ActionButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"action" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __action: internal.PartProperty<ClientAction> =
			new internal.PartProperty<ClientAction>(ActionButton, this, "action", null, true);
		public get action(): ClientAction { return this.__action.get(); }
		public set action(newValue: ClientAction) { this.__action.set(newValue); }
		private __disabledDuringAction: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(ActionButton, this, "disabledDuringAction", false, internal.PrimitiveTypeEnum.Boolean);
		public get disabledDuringAction(): boolean { return this.__disabledDuringAction.get(); }
		public set disabledDuringAction(newValue: boolean) { this.__disabledDuringAction.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ActionButton() cannot be invoked directly, please use 'model.pages.createActionButton()'"
				);
			}
		}


		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): ActionButton {
			internal.createInVersionCheck(container.model, ActionButton.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, ActionButton, "footerWidget", false);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): ActionButton {
			return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): ActionButton {
			return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): ActionButton {
			return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): ActionButton {
			return internal.instancehelpers.createElement(container, ActionButton, "leftWidget", false);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): ActionButton {
			return internal.instancehelpers.createElement(container, ActionButton, "rightWidget", false);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): ActionButton {
			return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ActionButton {
			return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ActionButton {
			return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): ActionButton {
			return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): ActionButton {
			return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): ActionButton {
			return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ActionButton {
			return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): ActionButton {
			return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): ActionButton {
			return internal.instancehelpers.createElement(container, ActionButton, "firstWidget", false);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): ActionButton {
			return internal.instancehelpers.createElement(container, ActionButton, "secondWidget", false);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): ActionButton {
			return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): ActionButton {
			return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ActionButton {
			return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): ActionButton {
			return internal.instancehelpers.createElement(container, ActionButton, "widgets", true);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): ActionButton {
			internal.createInVersionCheck(container.model, ActionButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ActionButton, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * The new ActionButton will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): ActionButton {
			internal.createInVersionCheck(container.model, ActionButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ActionButton, "reportWidget", false);
		}

		/**
		 * Creates and returns a new ActionButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ActionButton {
			return internal.instancehelpers.createElement(model, ActionButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.action = NoClientAction.create(this.model);
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Action";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Actie";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
		}

	}

	export interface IActionItem extends internal.IElement {
		model: IModel;
		containerAsDropDownButton: IDropDownButton;
		containerAsNavigationList: INavigationList;
		load(): ActionItem;
		load(callback: (element: ActionItem) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class ActionItem extends internal.Element implements IActionItem {
		public static typeName: string = "Pages$ActionItem";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"action" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDropDownButton() { return super.getContainerAs<DropDownButton>(DropDownButton); }
		get containerAsNavigationList() { return super.getContainerAs<NavigationList>(NavigationList); }

		private __action: internal.PartProperty<ClientAction> =
			new internal.PartProperty<ClientAction>(ActionItem, this, "action", null, true);
		public get action(): ClientAction { return this.__action.get(); }
		public set action(newValue: ClientAction) { this.__action.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ActionItem() cannot be invoked directly, please use 'model.pages.createActionItem()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.action = NoClientAction.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/data-sources relevant section in reference guide}
	 */
	export interface IDataSource extends internal.IElement {
		model: IModel;
		containerAsEntityWidget: IEntityWidget;
		load(): DataSource;
		load(callback: (element: DataSource) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/data-sources relevant section in reference guide}
	 *
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class DataSource extends internal.Element implements IDataSource {
		public static typeName: string = "Pages$DataSource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsEntityWidget() { return super.getContainerAs<EntityWidget>(EntityWidget); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataSource() cannot be invoked directly, please use 'model.pages.createDataSource()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IEntityPathSource extends IDataSource {
		model: IModel;
		containerAsEntityWidget: IEntityWidget;
		load(): EntityPathSource;
		load(callback: (element: EntityPathSource) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class EntityPathSource extends DataSource implements IEntityPathSource {
		public static typeName: string = "Pages$EntityPathSource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsEntityWidget() { return super.getContainerAs<EntityWidget>(EntityWidget); }

		private __entityPath: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(EntityPathSource, this, "entityPath", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type paths.EntityPath.
		 */
		public get entityPath(): string { return this.__entityPath.get(); }
		public set entityPath(newValue: string) { this.__entityPath.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new EntityPathSource() cannot be invoked directly, please use 'model.pages.createEntityPathSource()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IAssociationSource extends IEntityPathSource {
		model: IModel;
		containerAsEntityWidget: IEntityWidget;
		load(): AssociationSource;
		load(callback: (element: AssociationSource) => void, forceRefresh?: boolean);
	}

	export class AssociationSource extends EntityPathSource implements IAssociationSource {
		public static typeName: string = "Pages$AssociationSource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsEntityWidget() { return super.getContainerAs<EntityWidget>(EntityWidget); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new AssociationSource() cannot be invoked directly, please use 'model.pages.createAssociationSource()'"
				);
			}
		}

		/**
		 * Creates and returns a new AssociationSource instance in the SDK and on the server.
		 * The new AssociationSource will be automatically stored in the 'dataSource' property
		 * of the parent EntityWidget element passed as argument.
		 */
		public static createIn(container: EntityWidget): AssociationSource {
			return internal.instancehelpers.createElement(container, AssociationSource, "dataSource", false);
		}

		/**
		 * Creates and returns a new AssociationSource instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): AssociationSource {
			return internal.instancehelpers.createElement(model, AssociationSource);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IConditionallyEditableWidget extends IConditionallyVisibleWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): ConditionallyEditableWidget;
		load(callback: (element: ConditionallyEditableWidget) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class ConditionallyEditableWidget extends ConditionallyVisibleWidget implements IConditionallyEditableWidget {
		public static typeName: string = "Pages$ConditionallyEditableWidget";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __conditionalEditabilitySettings: internal.PartProperty<ConditionalEditabilitySettings> =
			new internal.PartProperty<ConditionalEditabilitySettings>(ConditionallyEditableWidget, this, "conditionalEditabilitySettings", null, false);
		public get conditionalEditabilitySettings(): ConditionalEditabilitySettings { return this.__conditionalEditabilitySettings.get(); }
		public set conditionalEditabilitySettings(newValue: ConditionalEditabilitySettings) { this.__conditionalEditabilitySettings.set(newValue); }
		private __editable: internal.EnumProperty<EditableEnum> =
			new internal.EnumProperty<EditableEnum>(ConditionallyEditableWidget, this, "editable", EditableEnum.Always, EditableEnum);
		public get editable(): EditableEnum { return this.__editable.get(); }
		public set editable(newValue: EditableEnum) { this.__editable.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ConditionallyEditableWidget() cannot be invoked directly, please use 'model.pages.createConditionallyEditableWidget()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.editable = EditableEnum.Always;
		}

	}

	export interface IInputWidget extends IConditionallyEditableWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): InputWidget;
		load(callback: (element: InputWidget) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class InputWidget extends ConditionallyEditableWidget implements IInputWidget {
		public static typeName: string = "Pages$InputWidget";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __label: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(InputWidget, this, "label", null, false);
		public get label(): texts.Text { return this.__label.get(); }
		public set label(newValue: texts.Text) { this.__label.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new InputWidget() cannot be invoked directly, please use 'model.pages.createInputWidget()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IMemberWidget extends IInputWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): MemberWidget;
		load(callback: (element: MemberWidget) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class MemberWidget extends InputWidget implements IMemberWidget {
		public static typeName: string = "Pages$MemberWidget";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"readOnlyStyle" : {
					"introduced" : "6.9.0"
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __attributePath: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MemberWidget, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type paths.AttributePath.
		 */
		public get attributePath(): string { return this.__attributePath.get(); }
		public set attributePath(newValue: string) { this.__attributePath.set(newValue); }
		private __readOnlyStyle: internal.EnumProperty<ReadOnlyStyle> =
			new internal.EnumProperty<ReadOnlyStyle>(MemberWidget, this, "readOnlyStyle", ReadOnlyStyle.Inherit, ReadOnlyStyle);
		/**
		 * In version 6.9.0: introduced
		 */
		public get readOnlyStyle(): ReadOnlyStyle { return this.__readOnlyStyle.get(); }
		public set readOnlyStyle(newValue: ReadOnlyStyle) { this.__readOnlyStyle.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MemberWidget() cannot be invoked directly, please use 'model.pages.createMemberWidget()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			if (this.__readOnlyStyle.isAvailable) {
				this.readOnlyStyle = ReadOnlyStyle.Inherit;
			}
		}

	}

	export interface IAssociationWidget extends IMemberWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): AssociationWidget;
		load(callback: (element: AssociationWidget) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class AssociationWidget extends MemberWidget implements IAssociationWidget {
		public static typeName: string = "Pages$AssociationWidget";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"selectorSource" : {
					"required" : {
						"currentValue" : true
					}
				},
				"selectPageSettings" : {
					"required" : {
						"currentValue" : true
					}
				},
				"onChangeMicroflowSettings" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __selectorSource: internal.PartProperty<SelectorSource> =
			new internal.PartProperty<SelectorSource>(AssociationWidget, this, "selectorSource", null, true);
		public get selectorSource(): SelectorSource { return this.__selectorSource.get(); }
		public set selectorSource(newValue: SelectorSource) { this.__selectorSource.set(newValue); }
		private __selectPageSettings: internal.PartProperty<PageSettings> =
			new internal.PartProperty<PageSettings>(AssociationWidget, this, "selectPageSettings", null, true);
		public get selectPageSettings(): PageSettings { return this.__selectPageSettings.get(); }
		public set selectPageSettings(newValue: PageSettings) { this.__selectPageSettings.set(newValue); }
		private __onChangeMicroflowSettings: internal.PartProperty<MicroflowSettings> =
			new internal.PartProperty<MicroflowSettings>(AssociationWidget, this, "onChangeMicroflowSettings", null, true);
		public get onChangeMicroflowSettings(): MicroflowSettings { return this.__onChangeMicroflowSettings.get(); }
		public set onChangeMicroflowSettings(newValue: MicroflowSettings) { this.__onChangeMicroflowSettings.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new AssociationWidget() cannot be invoked directly, please use 'model.pages.createAssociationWidget()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.onChangeMicroflowSettings = MicroflowSettings.create(this.model);
			this.selectPageSettings = PageSettings.create(this.model);
			this.selectorSource = SelectorXPathSource.create(this.model);
		}

	}

	export interface IAttributeWidget extends IMemberWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): AttributeWidget;
		load(callback: (element: AttributeWidget) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class AttributeWidget extends MemberWidget implements IAttributeWidget {
		public static typeName: string = "Pages$AttributeWidget";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"requiredMessage" : {
					"required" : {
						"currentValue" : true
					}
				},
				"onChangeMicroflowSettings" : {
					"required" : {
						"currentValue" : true
					}
				},
				"onEnterMicroflowSettings" : {
					"required" : {
						"currentValue" : true
					}
				},
				"onLeaveMicroflowSettings" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __required: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(AttributeWidget, this, "required", false, internal.PrimitiveTypeEnum.Boolean);
		public get required(): boolean { return this.__required.get(); }
		public set required(newValue: boolean) { this.__required.set(newValue); }
		private __requiredMessage: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(AttributeWidget, this, "requiredMessage", null, true);
		public get requiredMessage(): texts.Text { return this.__requiredMessage.get(); }
		public set requiredMessage(newValue: texts.Text) { this.__requiredMessage.set(newValue); }
		private __onChangeMicroflowSettings: internal.PartProperty<MicroflowSettings> =
			new internal.PartProperty<MicroflowSettings>(AttributeWidget, this, "onChangeMicroflowSettings", null, true);
		public get onChangeMicroflowSettings(): MicroflowSettings { return this.__onChangeMicroflowSettings.get(); }
		public set onChangeMicroflowSettings(newValue: MicroflowSettings) { this.__onChangeMicroflowSettings.set(newValue); }
		private __onEnterMicroflowSettings: internal.PartProperty<MicroflowSettings> =
			new internal.PartProperty<MicroflowSettings>(AttributeWidget, this, "onEnterMicroflowSettings", null, true);
		public get onEnterMicroflowSettings(): MicroflowSettings { return this.__onEnterMicroflowSettings.get(); }
		public set onEnterMicroflowSettings(newValue: MicroflowSettings) { this.__onEnterMicroflowSettings.set(newValue); }
		private __onLeaveMicroflowSettings: internal.PartProperty<MicroflowSettings> =
			new internal.PartProperty<MicroflowSettings>(AttributeWidget, this, "onLeaveMicroflowSettings", null, true);
		public get onLeaveMicroflowSettings(): MicroflowSettings { return this.__onLeaveMicroflowSettings.get(); }
		public set onLeaveMicroflowSettings(newValue: MicroflowSettings) { this.__onLeaveMicroflowSettings.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new AttributeWidget() cannot be invoked directly, please use 'model.pages.createAttributeWidget()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.onChangeMicroflowSettings = MicroflowSettings.create(this.model);
			this.onEnterMicroflowSettings = MicroflowSettings.create(this.model);
			this.onLeaveMicroflowSettings = MicroflowSettings.create(this.model);
			this.requiredMessage = texts.Text.create(this.model);
		}

	}

	export interface IAttributeWidgetWithPlaceholder extends IAttributeWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): AttributeWidgetWithPlaceholder;
		load(callback: (element: AttributeWidgetWithPlaceholder) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class AttributeWidgetWithPlaceholder extends AttributeWidget implements IAttributeWidgetWithPlaceholder {
		public static typeName: string = "Pages$AttributeWidgetWithPlaceholder";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"placeholder" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __placeholder: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(AttributeWidgetWithPlaceholder, this, "placeholder", null, true);
		public get placeholder(): texts.Text { return this.__placeholder.get(); }
		public set placeholder(newValue: texts.Text) { this.__placeholder.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new AttributeWidgetWithPlaceholder() cannot be invoked directly, please use 'model.pages.createAttributeWidgetWithPlaceholder()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.placeholder = texts.Text.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/close-page-button relevant section in reference guide}
	 */
	export interface IBackButton extends IButton {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): BackButton;
		load(callback: (element: BackButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/close-page-button relevant section in reference guide}
	 */
	export class BackButton extends Button implements IBackButton {
		public static typeName: string = "Pages$BackButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new BackButton() cannot be invoked directly, please use 'model.pages.createBackButton()'"
				);
			}
		}


		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): BackButton {
			internal.createInVersionCheck(container.model, BackButton.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, BackButton, "footerWidget", false);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): BackButton {
			return internal.instancehelpers.createElement(container, BackButton, "widget", false);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): BackButton {
			return internal.instancehelpers.createElement(container, BackButton, "widget", false);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): BackButton {
			return internal.instancehelpers.createElement(container, BackButton, "widget", false);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): BackButton {
			return internal.instancehelpers.createElement(container, BackButton, "leftWidget", false);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): BackButton {
			return internal.instancehelpers.createElement(container, BackButton, "rightWidget", false);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): BackButton {
			return internal.instancehelpers.createElement(container, BackButton, "widget", false);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): BackButton {
			return internal.instancehelpers.createElement(container, BackButton, "widget", false);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): BackButton {
			return internal.instancehelpers.createElement(container, BackButton, "widget", false);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): BackButton {
			return internal.instancehelpers.createElement(container, BackButton, "widget", false);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): BackButton {
			return internal.instancehelpers.createElement(container, BackButton, "widget", false);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): BackButton {
			return internal.instancehelpers.createElement(container, BackButton, "widget", false);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): BackButton {
			return internal.instancehelpers.createElement(container, BackButton, "widget", false);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): BackButton {
			return internal.instancehelpers.createElement(container, BackButton, "widget", false);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): BackButton {
			return internal.instancehelpers.createElement(container, BackButton, "firstWidget", false);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): BackButton {
			return internal.instancehelpers.createElement(container, BackButton, "secondWidget", false);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): BackButton {
			return internal.instancehelpers.createElement(container, BackButton, "widget", false);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): BackButton {
			return internal.instancehelpers.createElement(container, BackButton, "widget", false);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): BackButton {
			return internal.instancehelpers.createElement(container, BackButton, "widget", false);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): BackButton {
			return internal.instancehelpers.createElement(container, BackButton, "widgets", true);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): BackButton {
			internal.createInVersionCheck(container.model, BackButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, BackButton, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * The new BackButton will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): BackButton {
			internal.createInVersionCheck(container.model, BackButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, BackButton, "reportWidget", false);
		}

		/**
		 * Creates and returns a new BackButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): BackButton {
			return internal.instancehelpers.createElement(model, BackButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Back";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Terug";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/cancel-button relevant section in reference guide}
	 */
	export interface ICancelButton extends IButton {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): CancelButton;
		load(callback: (element: CancelButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/cancel-button relevant section in reference guide}
	 */
	export class CancelButton extends Button implements ICancelButton {
		public static typeName: string = "Pages$CancelButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"closePage" : {
					"introduced" : "6.7.0"
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __closePage: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(CancelButton, this, "closePage", false, internal.PrimitiveTypeEnum.Boolean);
		/**
		 * In version 6.7.0: introduced
		 */
		public get closePage(): boolean { return this.__closePage.get(); }
		public set closePage(newValue: boolean) { this.__closePage.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new CancelButton() cannot be invoked directly, please use 'model.pages.createCancelButton()'"
				);
			}
		}


		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): CancelButton {
			internal.createInVersionCheck(container.model, CancelButton.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, CancelButton, "footerWidget", false);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): CancelButton {
			return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): CancelButton {
			return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): CancelButton {
			return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): CancelButton {
			return internal.instancehelpers.createElement(container, CancelButton, "leftWidget", false);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): CancelButton {
			return internal.instancehelpers.createElement(container, CancelButton, "rightWidget", false);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): CancelButton {
			return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): CancelButton {
			return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): CancelButton {
			return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): CancelButton {
			return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): CancelButton {
			return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): CancelButton {
			return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): CancelButton {
			return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): CancelButton {
			return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): CancelButton {
			return internal.instancehelpers.createElement(container, CancelButton, "firstWidget", false);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): CancelButton {
			return internal.instancehelpers.createElement(container, CancelButton, "secondWidget", false);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): CancelButton {
			return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): CancelButton {
			return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): CancelButton {
			return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): CancelButton {
			return internal.instancehelpers.createElement(container, CancelButton, "widgets", true);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): CancelButton {
			internal.createInVersionCheck(container.model, CancelButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, CancelButton, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * The new CancelButton will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): CancelButton {
			internal.createInVersionCheck(container.model, CancelButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, CancelButton, "reportWidget", false);
		}

		/**
		 * Creates and returns a new CancelButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): CancelButton {
			return internal.instancehelpers.createElement(model, CancelButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Cancel";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Annuleren";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
			if (this.__closePage.isAvailable) {
				this.closePage = true;
			}
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/check-box relevant section in reference guide}
	 */
	export interface ICheckBox extends IAttributeWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): CheckBox;
		load(callback: (element: CheckBox) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/check-box relevant section in reference guide}
	 */
	export class CheckBox extends AttributeWidget implements ICheckBox {
		public static typeName: string = "Pages$CheckBox";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new CheckBox() cannot be invoked directly, please use 'model.pages.createCheckBox()'"
				);
			}
		}


		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): CheckBox {
			internal.createInVersionCheck(container.model, CheckBox.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, CheckBox, "footerWidget", false);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): CheckBox {
			return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): CheckBox {
			return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): CheckBox {
			return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): CheckBox {
			return internal.instancehelpers.createElement(container, CheckBox, "leftWidget", false);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): CheckBox {
			return internal.instancehelpers.createElement(container, CheckBox, "rightWidget", false);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): CheckBox {
			return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): CheckBox {
			return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): CheckBox {
			return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): CheckBox {
			return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): CheckBox {
			return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): CheckBox {
			return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): CheckBox {
			return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): CheckBox {
			return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): CheckBox {
			return internal.instancehelpers.createElement(container, CheckBox, "firstWidget", false);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): CheckBox {
			return internal.instancehelpers.createElement(container, CheckBox, "secondWidget", false);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): CheckBox {
			return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): CheckBox {
			return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): CheckBox {
			return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): CheckBox {
			return internal.instancehelpers.createElement(container, CheckBox, "widgets", true);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): CheckBox {
			internal.createInVersionCheck(container.model, CheckBox.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, CheckBox, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * The new CheckBox will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): CheckBox {
			internal.createInVersionCheck(container.model, CheckBox.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, CheckBox, "reportWidget", false);
		}

		/**
		 * Creates and returns a new CheckBox instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): CheckBox {
			return internal.instancehelpers.createElement(model, CheckBox);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IClientAction extends internal.IElement {
		model: IModel;
		containerAsMenuItem: menus.IMenuItem;
		containerAsActionButton: IActionButton;
		containerAsActionItem: IActionItem;
		containerAsDataViewActionButton: IDataViewActionButton;
		containerAsGridActionButton: IGridActionButton;
		containerAsListView: IListView;
		containerAsStaticImageViewer: IStaticImageViewer;
		load(): ClientAction;
		load(callback: (element: ClientAction) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class ClientAction extends internal.Element implements IClientAction {
		public static typeName: string = "Pages$ClientAction";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMenuItem() { return super.getContainerAs<menus.MenuItem>(menus.MenuItem); }
		get containerAsActionButton() { return super.getContainerAs<ActionButton>(ActionButton); }
		get containerAsActionItem() { return super.getContainerAs<ActionItem>(ActionItem); }
		get containerAsDataViewActionButton() { return super.getContainerAs<DataViewActionButton>(DataViewActionButton); }
		get containerAsGridActionButton() { return super.getContainerAs<GridActionButton>(GridActionButton); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsStaticImageViewer() { return super.getContainerAs<StaticImageViewer>(StaticImageViewer); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ClientAction() cannot be invoked directly, please use 'model.pages.createClientAction()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IClientTemplate extends internal.IElement {
		model: IModel;
		containerAsButton: IButton;
		containerAsControlBarButton: IControlBarButton;
		containerAsDynamicText: IDynamicText;
		containerAsGroupBox: IGroupBox;
		load(): ClientTemplate;
		load(callback: (element: ClientTemplate) => void, forceRefresh?: boolean);
	}

	export class ClientTemplate extends internal.Element implements IClientTemplate {
		public static typeName: string = "Pages$ClientTemplate";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"template" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsButton() { return super.getContainerAs<Button>(Button); }
		get containerAsControlBarButton() { return super.getContainerAs<ControlBarButton>(ControlBarButton); }
		get containerAsDynamicText() { return super.getContainerAs<DynamicText>(DynamicText); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }

		private __template: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(ClientTemplate, this, "template", null, true);
		public get template(): texts.Text { return this.__template.get(); }
		public set template(newValue: texts.Text) { this.__template.set(newValue); }
		private __parameters: internal.PartListProperty<ClientTemplateParameter> =
			new internal.PartListProperty<ClientTemplateParameter>(ClientTemplate, this, "parameters", []);
		public get parameters(): internal.IList<ClientTemplateParameter> { return this.__parameters.get(); }
		public set parameters(newValue: internal.IList<ClientTemplateParameter>) { this.__parameters.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ClientTemplate() cannot be invoked directly, please use 'model.pages.createClientTemplate()'"
				);
			}
		}


		/**
		 * Creates and returns a new ClientTemplate instance in the SDK and on the server.
		 * The new ClientTemplate will be automatically stored in the 'caption' property
		 * of the parent Button element passed as argument.
		 */
		public static createInButtonUnderCaption(container: Button): ClientTemplate {
			return internal.instancehelpers.createElement(container, ClientTemplate, "caption", false);
		}

		/**
		 * Creates and returns a new ClientTemplate instance in the SDK and on the server.
		 * The new ClientTemplate will be automatically stored in the 'caption' property
		 * of the parent ControlBarButton element passed as argument.
		 */
		public static createInControlBarButtonUnderCaption(container: ControlBarButton): ClientTemplate {
			return internal.instancehelpers.createElement(container, ClientTemplate, "caption", false);
		}

		/**
		 * Creates and returns a new ClientTemplate instance in the SDK and on the server.
		 * The new ClientTemplate will be automatically stored in the 'content' property
		 * of the parent DynamicText element passed as argument.
		 */
		public static createInDynamicTextUnderContent(container: DynamicText): ClientTemplate {
			return internal.instancehelpers.createElement(container, ClientTemplate, "content", false);
		}

		/**
		 * Creates and returns a new ClientTemplate instance in the SDK and on the server.
		 * The new ClientTemplate will be automatically stored in the 'caption' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderCaption(container: GroupBox): ClientTemplate {
			return internal.instancehelpers.createElement(container, ClientTemplate, "caption", false);
		}

		/**
		 * Creates and returns a new ClientTemplate instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ClientTemplate {
			return internal.instancehelpers.createElement(model, ClientTemplate);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.template = texts.Text.create(this.model);
		}

	}

	export interface IClientTemplateParameter extends internal.IElement {
		model: IModel;
		containerAsClientTemplate: IClientTemplate;
		load(): ClientTemplateParameter;
		load(callback: (element: ClientTemplateParameter) => void, forceRefresh?: boolean);
	}

	export class ClientTemplateParameter extends internal.Element implements IClientTemplateParameter {
		public static typeName: string = "Pages$ClientTemplateParameter";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsClientTemplate() { return super.getContainerAs<ClientTemplate>(ClientTemplate); }

		private __attributePath: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ClientTemplateParameter, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type paths.AttributePath.
		 */
		public get attributePath(): string { return this.__attributePath.get(); }
		public set attributePath(newValue: string) { this.__attributePath.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ClientTemplateParameter() cannot be invoked directly, please use 'model.pages.createClientTemplateParameter()'"
				);
			}
		}

		/**
		 * Creates and returns a new ClientTemplateParameter instance in the SDK and on the server.
		 * The new ClientTemplateParameter will be automatically stored in the 'parameters' property
		 * of the parent ClientTemplate element passed as argument.
		 */
		public static createIn(container: ClientTemplate): ClientTemplateParameter {
			return internal.instancehelpers.createElement(container, ClientTemplateParameter, "parameters", true);
		}

		/**
		 * Creates and returns a new ClientTemplateParameter instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ClientTemplateParameter {
			return internal.instancehelpers.createElement(model, ClientTemplateParameter);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IEntityWidget extends IConditionallyVisibleWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): EntityWidget;
		load(callback: (element: EntityWidget) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class EntityWidget extends ConditionallyVisibleWidget implements IEntityWidget {
		public static typeName: string = "Pages$EntityWidget";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"dataSource" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __dataSource: internal.PartProperty<DataSource> =
			new internal.PartProperty<DataSource>(EntityWidget, this, "dataSource", null, false);
		public get dataSource(): DataSource { return this.__dataSource.get(); }
		public set dataSource(newValue: DataSource) { this.__dataSource.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new EntityWidget() cannot be invoked directly, please use 'model.pages.createEntityWidget()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IListenTargetWidget extends IEntityWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): ListenTargetWidget;
		load(callback: (element: ListenTargetWidget) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class ListenTargetWidget extends EntityWidget implements IListenTargetWidget {
		public static typeName: string = "Pages$ListenTargetWidget";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ListenTargetWidget() cannot be invoked directly, please use 'model.pages.createListenTargetWidget()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IGrid extends IListenTargetWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): Grid;
		load(callback: (element: Grid) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class Grid extends ListenTargetWidget implements IGrid {
		public static typeName: string = "Pages$Grid";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"controlBar" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __isControlBarVisible: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(Grid, this, "isControlBarVisible", false, internal.PrimitiveTypeEnum.Boolean);
		public get isControlBarVisible(): boolean { return this.__isControlBarVisible.get(); }
		public set isControlBarVisible(newValue: boolean) { this.__isControlBarVisible.set(newValue); }
		private __isPagingEnabled: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(Grid, this, "isPagingEnabled", false, internal.PrimitiveTypeEnum.Boolean);
		public get isPagingEnabled(): boolean { return this.__isPagingEnabled.get(); }
		public set isPagingEnabled(newValue: boolean) { this.__isPagingEnabled.set(newValue); }
		private __selectionMode: internal.EnumProperty<GridSelectionMode> =
			new internal.EnumProperty<GridSelectionMode>(Grid, this, "selectionMode", GridSelectionMode.Single, GridSelectionMode);
		public get selectionMode(): GridSelectionMode { return this.__selectionMode.get(); }
		public set selectionMode(newValue: GridSelectionMode) { this.__selectionMode.set(newValue); }
		private __selectFirst: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(Grid, this, "selectFirst", false, internal.PrimitiveTypeEnum.Boolean);
		public get selectFirst(): boolean { return this.__selectFirst.get(); }
		public set selectFirst(newValue: boolean) { this.__selectFirst.set(newValue); }
		private __defaultButtonTrigger: internal.EnumProperty<ClickTypeType> =
			new internal.EnumProperty<ClickTypeType>(Grid, this, "defaultButtonTrigger", ClickTypeType.Double, ClickTypeType);
		public get defaultButtonTrigger(): ClickTypeType { return this.__defaultButtonTrigger.get(); }
		public set defaultButtonTrigger(newValue: ClickTypeType) { this.__defaultButtonTrigger.set(newValue); }
		private __refreshTime: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(Grid, this, "refreshTime", 0, internal.PrimitiveTypeEnum.Integer);
		public get refreshTime(): number { return this.__refreshTime.get(); }
		public set refreshTime(newValue: number) { this.__refreshTime.set(newValue); }
		private __controlBar: internal.PartProperty<GridControlBar> =
			new internal.PartProperty<GridControlBar>(Grid, this, "controlBar", null, true);
		public get controlBar(): GridControlBar { return this.__controlBar.get(); }
		public set controlBar(newValue: GridControlBar) { this.__controlBar.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Grid() cannot be invoked directly, please use 'model.pages.createGrid()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.controlBar = GridControlBar.create(this.model);
			this.dataSource = GridXPathSource.create(this.model);
			this.defaultButtonTrigger = ClickTypeType.Double;
			this.isControlBarVisible = true;
			this.isPagingEnabled = true;
			this.selectionMode = GridSelectionMode.Single;
		}

	}

	export interface IColumnGrid extends IGrid {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): ColumnGrid;
		load(callback: (element: ColumnGrid) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class ColumnGrid extends Grid implements IColumnGrid {
		public static typeName: string = "Pages$ColumnGrid";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __columns: internal.PartListProperty<GridColumn> =
			new internal.PartListProperty<GridColumn>(ColumnGrid, this, "columns", []);
		public get columns(): internal.IList<GridColumn> { return this.__columns.get(); }
		public set columns(newValue: internal.IList<GridColumn>) { this.__columns.set(newValue); }
		private __numberOfRows: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(ColumnGrid, this, "numberOfRows", 0, internal.PrimitiveTypeEnum.Integer);
		public get numberOfRows(): number { return this.__numberOfRows.get(); }
		public set numberOfRows(newValue: number) { this.__numberOfRows.set(newValue); }
		private __showEmptyRows: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(ColumnGrid, this, "showEmptyRows", false, internal.PrimitiveTypeEnum.Boolean);
		public get showEmptyRows(): boolean { return this.__showEmptyRows.get(); }
		public set showEmptyRows(newValue: boolean) { this.__showEmptyRows.set(newValue); }
		private __widthUnit: internal.EnumProperty<UnitEnum> =
			new internal.EnumProperty<UnitEnum>(ColumnGrid, this, "widthUnit", UnitEnum.Weight, UnitEnum);
		public get widthUnit(): UnitEnum { return this.__widthUnit.get(); }
		public set widthUnit(newValue: UnitEnum) { this.__widthUnit.set(newValue); }
		private __tooltipPage: internal.ByNameReferenceProperty<IPage> =
			new internal.ByNameReferenceProperty<IPage>(ColumnGrid, this, "tooltipPage", null, "Pages$Page");
		public get tooltipPage(): IPage { return this.__tooltipPage.get(); }
		public set tooltipPage(newValue: IPage) { this.__tooltipPage.set(newValue); }
		get tooltipPageQualifiedName(): string { return this.__tooltipPage.qualifiedName(); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ColumnGrid() cannot be invoked directly, please use 'model.pages.createColumnGrid()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.columns.replace([ ((gridColumn:GridColumn) => {
				gridColumn.width = 1;
				return gridColumn;
			})(GridColumn.create(this.model)) ]);
			this.numberOfRows = 20;
			this.widthUnit = UnitEnum.Weight;
		}

	}

	export interface IControlBarItem extends internal.IElement {
		model: IModel;
		containerAsControlBar: IControlBar;
		containerAsGridControlBar: IGridControlBar;
		load(): ControlBarItem;
		load(callback: (element: ControlBarItem) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class ControlBarItem extends internal.Element implements IControlBarItem {
		public static typeName: string = "Pages$ControlBarItem";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }
		get containerAsGridControlBar() { return super.getContainerAs<GridControlBar>(GridControlBar); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ControlBarItem, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ControlBarItem() cannot be invoked directly, please use 'model.pages.createControlBarItem()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface ISearchField extends IControlBarItem {
		model: IModel;
		containerAsControlBar: IControlBar;
		load(): SearchField;
		load(callback: (element: SearchField) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class SearchField extends ControlBarItem implements ISearchField {
		public static typeName: string = "Pages$SearchField";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"caption" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }

		private __caption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(SearchField, this, "caption", null, true);
		public get caption(): texts.Text { return this.__caption.get(); }
		public set caption(newValue: texts.Text) { this.__caption.set(newValue); }
		private __type: internal.EnumProperty<SearchFieldType> =
			new internal.EnumProperty<SearchFieldType>(SearchField, this, "type", SearchFieldType.Normal, SearchFieldType);
		public get type(): SearchFieldType { return this.__type.get(); }
		public set type(newValue: SearchFieldType) { this.__type.set(newValue); }
		private __defaultValue: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(SearchField, this, "defaultValue", "", internal.PrimitiveTypeEnum.String);
		public get defaultValue(): string { return this.__defaultValue.get(); }
		public set defaultValue(newValue: string) { this.__defaultValue.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new SearchField() cannot be invoked directly, please use 'model.pages.createSearchField()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((text:texts.Text) => {
				text.translations.replace([ ((translation:texts.Translation) => {
					translation.languageCode = "en_US";
					translation.text = "Caption";
					return translation;
				})(texts.Translation.create(this.model)) ]);
				return text;
			})(texts.Text.create(this.model));
			this.type = SearchFieldType.Normal;
		}

	}

	export interface ISingleSearchField extends ISearchField {
		model: IModel;
		containerAsControlBar: IControlBar;
		load(): SingleSearchField;
		load(callback: (element: SingleSearchField) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class SingleSearchField extends SearchField implements ISingleSearchField {
		public static typeName: string = "Pages$SingleSearchField";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }

		private __attributePath: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(SingleSearchField, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type paths.AttributePath.
		 */
		public get attributePath(): string { return this.__attributePath.get(); }
		public set attributePath(newValue: string) { this.__attributePath.set(newValue); }
		private __operator: internal.EnumProperty<SearchFieldOperator> =
			new internal.EnumProperty<SearchFieldOperator>(SingleSearchField, this, "operator", SearchFieldOperator.Contains, SearchFieldOperator);
		public get operator(): SearchFieldOperator { return this.__operator.get(); }
		public set operator(newValue: SearchFieldOperator) { this.__operator.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new SingleSearchField() cannot be invoked directly, please use 'model.pages.createSingleSearchField()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/comparison-search-field relevant section in reference guide}
	 */
	export interface IComparisonSearchField extends ISingleSearchField {
		model: IModel;
		containerAsControlBar: IControlBar;
		load(): ComparisonSearchField;
		load(callback: (element: ComparisonSearchField) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/comparison-search-field relevant section in reference guide}
	 */
	export class ComparisonSearchField extends SingleSearchField implements IComparisonSearchField {
		public static typeName: string = "Pages$ComparisonSearchField";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ComparisonSearchField() cannot be invoked directly, please use 'model.pages.createComparisonSearchField()'"
				);
			}
		}

		/**
		 * Creates and returns a new ComparisonSearchField instance in the SDK and on the server.
		 * The new ComparisonSearchField will be automatically stored in the 'items' property
		 * of the parent ControlBar element passed as argument.
		 */
		public static createIn(container: ControlBar): ComparisonSearchField {
			return internal.instancehelpers.createElement(container, ComparisonSearchField, "items", true);
		}

		/**
		 * Creates and returns a new ComparisonSearchField instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ComparisonSearchField {
			return internal.instancehelpers.createElement(model, ComparisonSearchField);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.operator = SearchFieldOperator.Contains;
		}

	}

	export interface IConditionalSettings extends internal.IElement {
		model: IModel;
		containerAsConditionallyEditableWidget: IConditionallyEditableWidget;
		containerAsConditionallyVisibleWidget: IConditionallyVisibleWidget;
		containerAsControlBarButton: IControlBarButton;
		containerAsLayoutGridRow: ILayoutGridRow;
		containerAsNavigationListItem: INavigationListItem;
		containerAsTabPage: ITabPage;
		containerAsTableRow: ITableRow;
		load(): ConditionalSettings;
		load(callback: (element: ConditionalSettings) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class ConditionalSettings extends internal.Element implements IConditionalSettings {
		public static typeName: string = "Pages$ConditionalSettings";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"expression" : {
					"introduced" : "7.0.1"
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsConditionallyEditableWidget() { return super.getContainerAs<ConditionallyEditableWidget>(ConditionallyEditableWidget); }
		get containerAsConditionallyVisibleWidget() { return super.getContainerAs<ConditionallyVisibleWidget>(ConditionallyVisibleWidget); }
		get containerAsControlBarButton() { return super.getContainerAs<ControlBarButton>(ControlBarButton); }
		get containerAsLayoutGridRow() { return super.getContainerAs<LayoutGridRow>(LayoutGridRow); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableRow() { return super.getContainerAs<TableRow>(TableRow); }

		private __attribute: internal.ByNameReferenceProperty<domainmodels.IAttribute> =
			new internal.ByNameReferenceProperty<domainmodels.IAttribute>(ConditionalSettings, this, "attribute", null, "DomainModels$Attribute");
		public get attribute(): domainmodels.IAttribute { return this.__attribute.get(); }
		public set attribute(newValue: domainmodels.IAttribute) { this.__attribute.set(newValue); }
		get attributeQualifiedName(): string { return this.__attribute.qualifiedName(); }
		private __conditions: internal.PartListProperty<enumerations.Condition> =
			new internal.PartListProperty<enumerations.Condition>(ConditionalSettings, this, "conditions", []);
		public get conditions(): internal.IList<enumerations.Condition> { return this.__conditions.get(); }
		public set conditions(newValue: internal.IList<enumerations.Condition>) { this.__conditions.set(newValue); }
		private __expression: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ConditionalSettings, this, "expression", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
		 *
		 * In version 7.0.1: introduced
		 */
		public get expression(): string { return this.__expression.get(); }
		public set expression(newValue: string) { this.__expression.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ConditionalSettings() cannot be invoked directly, please use 'model.pages.createConditionalSettings()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IConditionalEditabilitySettings extends IConditionalSettings {
		model: IModel;
		containerAsConditionallyEditableWidget: IConditionallyEditableWidget;
		load(): ConditionalEditabilitySettings;
		load(callback: (element: ConditionalEditabilitySettings) => void, forceRefresh?: boolean);
	}

	export class ConditionalEditabilitySettings extends ConditionalSettings implements IConditionalEditabilitySettings {
		public static typeName: string = "Pages$ConditionalEditabilitySettings";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsConditionallyEditableWidget() { return super.getContainerAs<ConditionallyEditableWidget>(ConditionallyEditableWidget); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ConditionalEditabilitySettings() cannot be invoked directly, please use 'model.pages.createConditionalEditabilitySettings()'"
				);
			}
		}

		/**
		 * Creates and returns a new ConditionalEditabilitySettings instance in the SDK and on the server.
		 * The new ConditionalEditabilitySettings will be automatically stored in the 'conditionalEditabilitySettings' property
		 * of the parent ConditionallyEditableWidget element passed as argument.
		 */
		public static createIn(container: ConditionallyEditableWidget): ConditionalEditabilitySettings {
			return internal.instancehelpers.createElement(container, ConditionalEditabilitySettings, "conditionalEditabilitySettings", false);
		}

		/**
		 * Creates and returns a new ConditionalEditabilitySettings instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ConditionalEditabilitySettings {
			return internal.instancehelpers.createElement(model, ConditionalEditabilitySettings);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IConditionalVisibilitySettings extends IConditionalSettings {
		model: IModel;
		containerAsConditionallyVisibleWidget: IConditionallyVisibleWidget;
		containerAsControlBarButton: IControlBarButton;
		containerAsLayoutGridRow: ILayoutGridRow;
		containerAsNavigationListItem: INavigationListItem;
		containerAsTabPage: ITabPage;
		containerAsTableRow: ITableRow;
		load(): ConditionalVisibilitySettings;
		load(callback: (element: ConditionalVisibilitySettings) => void, forceRefresh?: boolean);
	}

	export class ConditionalVisibilitySettings extends ConditionalSettings implements IConditionalVisibilitySettings {
		public static typeName: string = "Pages$ConditionalVisibilitySettings";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsConditionallyVisibleWidget() { return super.getContainerAs<ConditionallyVisibleWidget>(ConditionallyVisibleWidget); }
		get containerAsControlBarButton() { return super.getContainerAs<ControlBarButton>(ControlBarButton); }
		get containerAsLayoutGridRow() { return super.getContainerAs<LayoutGridRow>(LayoutGridRow); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableRow() { return super.getContainerAs<TableRow>(TableRow); }

		private __moduleRoles: internal.ByNameReferenceListProperty<security.IModuleRole> =
			new internal.ByNameReferenceListProperty<security.IModuleRole>(ConditionalVisibilitySettings, this, "moduleRoles", [], "Security$ModuleRole");
		public get moduleRoles(): internal.IList<security.IModuleRole> { return this.__moduleRoles.get(); }
		public set moduleRoles(newValue: internal.IList<security.IModuleRole>) { this.__moduleRoles.set(newValue); }
		get moduleRolesQualifiedNames(): string[] { return this.__moduleRoles.qualifiedNames(); }
		private __ignoreSecurity: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(ConditionalVisibilitySettings, this, "ignoreSecurity", false, internal.PrimitiveTypeEnum.Boolean);
		public get ignoreSecurity(): boolean { return this.__ignoreSecurity.get(); }
		public set ignoreSecurity(newValue: boolean) { this.__ignoreSecurity.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ConditionalVisibilitySettings() cannot be invoked directly, please use 'model.pages.createConditionalVisibilitySettings()'"
				);
			}
		}


		/**
		 * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
		 * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
		 * of the parent ConditionallyVisibleWidget element passed as argument.
		 */
		public static createInConditionallyVisibleWidgetUnderConditionalVisibilitySettings(container: ConditionallyVisibleWidget): ConditionalVisibilitySettings {
			return internal.instancehelpers.createElement(container, ConditionalVisibilitySettings, "conditionalVisibilitySettings", false);
		}

		/**
		 * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
		 * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
		 * of the parent ControlBarButton element passed as argument.
		 */
		public static createInControlBarButtonUnderConditionalVisibilitySettings(container: ControlBarButton): ConditionalVisibilitySettings {
			return internal.instancehelpers.createElement(container, ConditionalVisibilitySettings, "conditionalVisibilitySettings", false);
		}

		/**
		 * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
		 * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
		 * of the parent LayoutGridRow element passed as argument.
		 */
		public static createInLayoutGridRowUnderConditionalVisibilitySettings(container: LayoutGridRow): ConditionalVisibilitySettings {
			return internal.instancehelpers.createElement(container, ConditionalVisibilitySettings, "conditionalVisibilitySettings", false);
		}

		/**
		 * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
		 * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderConditionalVisibilitySettings(container: NavigationListItem): ConditionalVisibilitySettings {
			return internal.instancehelpers.createElement(container, ConditionalVisibilitySettings, "conditionalVisibilitySettings", false);
		}

		/**
		 * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
		 * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderConditionalVisibilitySettings(container: TabPage): ConditionalVisibilitySettings {
			return internal.instancehelpers.createElement(container, ConditionalVisibilitySettings, "conditionalVisibilitySettings", false);
		}

		/**
		 * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
		 * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
		 * of the parent TableRow element passed as argument.
		 */
		public static createInTableRowUnderConditionalVisibilitySettings(container: TableRow): ConditionalVisibilitySettings {
			return internal.instancehelpers.createElement(container, ConditionalVisibilitySettings, "conditionalVisibilitySettings", false);
		}

		/**
		 * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ConditionalVisibilitySettings {
			return internal.instancehelpers.createElement(model, ConditionalVisibilitySettings);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IConfirmationInfo extends internal.IElement {
		model: IModel;
		containerAsMicroflowSettings: IMicroflowSettings;
		load(): ConfirmationInfo;
		load(callback: (element: ConfirmationInfo) => void, forceRefresh?: boolean);
	}

	export class ConfirmationInfo extends internal.Element implements IConfirmationInfo {
		public static typeName: string = "Pages$ConfirmationInfo";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"question" : {
					"required" : {
						"currentValue" : true
					}
				},
				"proceedButtonCaption" : {
					"required" : {
						"currentValue" : true
					}
				},
				"cancelButtonCaption" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsMicroflowSettings() { return super.getContainerAs<MicroflowSettings>(MicroflowSettings); }

		private __question: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(ConfirmationInfo, this, "question", null, true);
		public get question(): texts.Text { return this.__question.get(); }
		public set question(newValue: texts.Text) { this.__question.set(newValue); }
		private __proceedButtonCaption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(ConfirmationInfo, this, "proceedButtonCaption", null, true);
		public get proceedButtonCaption(): texts.Text { return this.__proceedButtonCaption.get(); }
		public set proceedButtonCaption(newValue: texts.Text) { this.__proceedButtonCaption.set(newValue); }
		private __cancelButtonCaption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(ConfirmationInfo, this, "cancelButtonCaption", null, true);
		public get cancelButtonCaption(): texts.Text { return this.__cancelButtonCaption.get(); }
		public set cancelButtonCaption(newValue: texts.Text) { this.__cancelButtonCaption.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ConfirmationInfo() cannot be invoked directly, please use 'model.pages.createConfirmationInfo()'"
				);
			}
		}

		/**
		 * Creates and returns a new ConfirmationInfo instance in the SDK and on the server.
		 * The new ConfirmationInfo will be automatically stored in the 'confirmationInfo' property
		 * of the parent MicroflowSettings element passed as argument.
		 */
		public static createIn(container: MicroflowSettings): ConfirmationInfo {
			return internal.instancehelpers.createElement(container, ConfirmationInfo, "confirmationInfo", false);
		}

		/**
		 * Creates and returns a new ConfirmationInfo instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ConfirmationInfo {
			return internal.instancehelpers.createElement(model, ConfirmationInfo);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.cancelButtonCaption = ((text:texts.Text) => {
				text.translations.replace([ ((translation:texts.Translation) => {
					translation.languageCode = "en_US";
					translation.text = "Cancel";
					return translation;
				})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
					translation.languageCode = "nl_NL";
					translation.text = "Annuleren";
					return translation;
				})(texts.Translation.create(this.model)) ]);
				return text;
			})(texts.Text.create(this.model));
			this.proceedButtonCaption = ((text:texts.Text) => {
				text.translations.replace([ ((translation:texts.Translation) => {
					translation.languageCode = "en_US";
					translation.text = "Proceed";
					return translation;
				})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
					translation.languageCode = "nl_NL";
					translation.text = "Doorgaan";
					return translation;
				})(texts.Translation.create(this.model)) ]);
				return text;
			})(texts.Text.create(this.model));
			this.question = ((text:texts.Text) => {
				text.translations.replace([ ((translation:texts.Translation) => {
					translation.languageCode = "en_US";
					translation.text = "Are you sure?";
					return translation;
				})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
					translation.languageCode = "nl_NL";
					translation.text = "Weet u het zeker?";
					return translation;
				})(texts.Translation.create(this.model)) ]);
				return text;
			})(texts.Text.create(this.model));
		}

	}

	export interface IControlBar extends internal.IElement {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsGrid: IGrid;
		containerAsGridBaseSource: IGridBaseSource;
		containerAsGridDatabaseSource: IGridDatabaseSource;
		load(): ControlBar;
		load(callback: (element: ControlBar) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class ControlBar extends internal.Element implements IControlBar {
		public static typeName: string = "Pages$ControlBar";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsGrid() { return super.getContainerAs<Grid>(Grid); }
		get containerAsGridBaseSource() { return super.getContainerAs<GridBaseSource>(GridBaseSource); }
		get containerAsGridDatabaseSource() { return super.getContainerAs<GridDatabaseSource>(GridDatabaseSource); }

		private __items: internal.PartListProperty<ControlBarItem> =
			new internal.PartListProperty<ControlBarItem>(ControlBar, this, "items", []);
		public get items(): internal.IList<ControlBarItem> { return this.__items.get(); }
		public set items(newValue: internal.IList<ControlBarItem>) { this.__items.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ControlBar() cannot be invoked directly, please use 'model.pages.createControlBar()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IControlBarButton extends IControlBarItem {
		model: IModel;
		containerAsControlBar: IControlBar;
		containerAsGridControlBar: IGridControlBar;
		load(): ControlBarButton;
		load(callback: (element: ControlBarButton) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class ControlBarButton extends ControlBarItem implements IControlBarButton {
		public static typeName: string = "Pages$ControlBarButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"caption" : {
					"required" : {
						"currentValue" : true
					}
				},
				"tooltip" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }
		get containerAsGridControlBar() { return super.getContainerAs<GridControlBar>(GridControlBar); }

		private __caption: internal.PartProperty<ClientTemplate> =
			new internal.PartProperty<ClientTemplate>(ControlBarButton, this, "caption", null, false);
		public get caption(): ClientTemplate { return this.__caption.get(); }
		public set caption(newValue: ClientTemplate) { this.__caption.set(newValue); }
		private __tooltip: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(ControlBarButton, this, "tooltip", null, true);
		public get tooltip(): texts.Text { return this.__tooltip.get(); }
		public set tooltip(newValue: texts.Text) { this.__tooltip.set(newValue); }
		private __icon: internal.PartProperty<Icon> =
			new internal.PartProperty<Icon>(ControlBarButton, this, "icon", null, false);
		public get icon(): Icon { return this.__icon.get(); }
		public set icon(newValue: Icon) { this.__icon.set(newValue); }
		private __class: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ControlBarButton, this, "class", "", internal.PrimitiveTypeEnum.String);
		public get class(): string { return this.__class.get(); }
		public set class(newValue: string) { this.__class.set(newValue); }
		private __style: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ControlBarButton, this, "style", "", internal.PrimitiveTypeEnum.String);
		public get style(): string { return this.__style.get(); }
		public set style(newValue: string) { this.__style.set(newValue); }
		private __conditionalVisibilitySettings: internal.PartProperty<ConditionalVisibilitySettings> =
			new internal.PartProperty<ConditionalVisibilitySettings>(ControlBarButton, this, "conditionalVisibilitySettings", null, false);
		public get conditionalVisibilitySettings(): ConditionalVisibilitySettings { return this.__conditionalVisibilitySettings.get(); }
		public set conditionalVisibilitySettings(newValue: ConditionalVisibilitySettings) { this.__conditionalVisibilitySettings.set(newValue); }
		private __buttonStyle: internal.EnumProperty<ButtonStyle> =
			new internal.EnumProperty<ButtonStyle>(ControlBarButton, this, "buttonStyle", ButtonStyle.Default, ButtonStyle);
		public get buttonStyle(): ButtonStyle { return this.__buttonStyle.get(); }
		public set buttonStyle(newValue: ButtonStyle) { this.__buttonStyle.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ControlBarButton() cannot be invoked directly, please use 'model.pages.createControlBarButton()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.buttonStyle = ButtonStyle.Default;
			this.tooltip = texts.Text.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/data-grid relevant section in reference guide}
	 */
	export interface IDataGrid extends IColumnGrid {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): DataGrid;
		load(callback: (element: DataGrid) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/data-grid relevant section in reference guide}
	 */
	export class DataGrid extends ColumnGrid implements IDataGrid {
		public static typeName: string = "Pages$DataGrid";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataGrid() cannot be invoked directly, please use 'model.pages.createDataGrid()'"
				);
			}
		}


		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): DataGrid {
			internal.createInVersionCheck(container.model, DataGrid.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, DataGrid, "footerWidget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): DataGrid {
			return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): DataGrid {
			return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): DataGrid {
			return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): DataGrid {
			return internal.instancehelpers.createElement(container, DataGrid, "leftWidget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): DataGrid {
			return internal.instancehelpers.createElement(container, DataGrid, "rightWidget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): DataGrid {
			return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DataGrid {
			return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DataGrid {
			return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): DataGrid {
			return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): DataGrid {
			return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): DataGrid {
			return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DataGrid {
			return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): DataGrid {
			return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): DataGrid {
			return internal.instancehelpers.createElement(container, DataGrid, "firstWidget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): DataGrid {
			return internal.instancehelpers.createElement(container, DataGrid, "secondWidget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): DataGrid {
			return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): DataGrid {
			return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DataGrid {
			return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): DataGrid {
			return internal.instancehelpers.createElement(container, DataGrid, "widgets", true);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DataGrid {
			internal.createInVersionCheck(container.model, DataGrid.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, DataGrid, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): DataGrid {
			internal.createInVersionCheck(container.model, DataGrid.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, DataGrid, "reportWidget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DataGrid {
			return internal.instancehelpers.createElement(model, DataGrid);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IGridControlBarButton extends IControlBarButton {
		model: IModel;
		containerAsControlBar: IControlBar;
		containerAsGridControlBar: IGridControlBar;
		load(): GridControlBarButton;
		load(callback: (element: GridControlBarButton) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class GridControlBarButton extends ControlBarButton implements IGridControlBarButton {
		public static typeName: string = "Pages$GridControlBarButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }
		get containerAsGridControlBar() { return super.getContainerAs<GridControlBar>(GridControlBar); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new GridControlBarButton() cannot be invoked directly, please use 'model.pages.createGridControlBarButton()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/add-button relevant section in reference guide}
	 */
	export interface IDataGridAddButton extends IGridControlBarButton {
		model: IModel;
		containerAsControlBar: IControlBar;
		load(): DataGridAddButton;
		load(callback: (element: DataGridAddButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/add-button relevant section in reference guide}
	 */
	export class DataGridAddButton extends GridControlBarButton implements IDataGridAddButton {
		public static typeName: string = "Pages$DataGridAddButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"pageSettings" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }

		private __pageSettings: internal.PartProperty<PageSettings> =
			new internal.PartProperty<PageSettings>(DataGridAddButton, this, "pageSettings", null, true);
		public get pageSettings(): PageSettings { return this.__pageSettings.get(); }
		public set pageSettings(newValue: PageSettings) { this.__pageSettings.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataGridAddButton() cannot be invoked directly, please use 'model.pages.createDataGridAddButton()'"
				);
			}
		}

		/**
		 * Creates and returns a new DataGridAddButton instance in the SDK and on the server.
		 * The new DataGridAddButton will be automatically stored in the 'items' property
		 * of the parent ControlBar element passed as argument.
		 */
		public static createIn(container: ControlBar): DataGridAddButton {
			return internal.instancehelpers.createElement(container, DataGridAddButton, "items", true);
		}

		/**
		 * Creates and returns a new DataGridAddButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DataGridAddButton {
			return internal.instancehelpers.createElement(model, DataGridAddButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Add";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Toevoegen";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
			this.pageSettings = PageSettings.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/export-to-csv-button relevant section in reference guide}
	 */
	export interface IDataGridExportToCSVButton extends IGridControlBarButton {
		model: IModel;
		containerAsControlBar: IControlBar;
		load(): DataGridExportToCSVButton;
		load(callback: (element: DataGridExportToCSVButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/export-to-csv-button relevant section in reference guide}
	 */
	export class DataGridExportToCSVButton extends GridControlBarButton implements IDataGridExportToCSVButton {
		public static typeName: string = "Pages$DataGridExportToCSVButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }

		private __maxNumberOfRows: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(DataGridExportToCSVButton, this, "maxNumberOfRows", 0, internal.PrimitiveTypeEnum.Integer);
		public get maxNumberOfRows(): number { return this.__maxNumberOfRows.get(); }
		public set maxNumberOfRows(newValue: number) { this.__maxNumberOfRows.set(newValue); }
		private __decimalSeparator: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(DataGridExportToCSVButton, this, "decimalSeparator", "", internal.PrimitiveTypeEnum.String);
		public get decimalSeparator(): string { return this.__decimalSeparator.get(); }
		public set decimalSeparator(newValue: string) { this.__decimalSeparator.set(newValue); }
		private __groupSeparator: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(DataGridExportToCSVButton, this, "groupSeparator", "", internal.PrimitiveTypeEnum.String);
		public get groupSeparator(): string { return this.__groupSeparator.get(); }
		public set groupSeparator(newValue: string) { this.__groupSeparator.set(newValue); }
		private __delimiter: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(DataGridExportToCSVButton, this, "delimiter", "", internal.PrimitiveTypeEnum.String);
		public get delimiter(): string { return this.__delimiter.get(); }
		public set delimiter(newValue: string) { this.__delimiter.set(newValue); }
		private __generateExcelHint: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(DataGridExportToCSVButton, this, "generateExcelHint", false, internal.PrimitiveTypeEnum.Boolean);
		public get generateExcelHint(): boolean { return this.__generateExcelHint.get(); }
		public set generateExcelHint(newValue: boolean) { this.__generateExcelHint.set(newValue); }
		private __useGridDateFormat: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(DataGridExportToCSVButton, this, "useGridDateFormat", false, internal.PrimitiveTypeEnum.Boolean);
		public get useGridDateFormat(): boolean { return this.__useGridDateFormat.get(); }
		public set useGridDateFormat(newValue: boolean) { this.__useGridDateFormat.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataGridExportToCSVButton() cannot be invoked directly, please use 'model.pages.createDataGridExportToCSVButton()'"
				);
			}
		}

		/**
		 * Creates and returns a new DataGridExportToCSVButton instance in the SDK and on the server.
		 * The new DataGridExportToCSVButton will be automatically stored in the 'items' property
		 * of the parent ControlBar element passed as argument.
		 */
		public static createIn(container: ControlBar): DataGridExportToCSVButton {
			return internal.instancehelpers.createElement(container, DataGridExportToCSVButton, "items", true);
		}

		/**
		 * Creates and returns a new DataGridExportToCSVButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DataGridExportToCSVButton {
			return internal.instancehelpers.createElement(model, DataGridExportToCSVButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Export to CSV";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Naar CSV exporteren";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
			this.decimalSeparator = ".";
			this.delimiter = ";";
			this.groupSeparator = ",";
			this.maxNumberOfRows = 1000;
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/export-to-excel-button relevant section in reference guide}
	 */
	export interface IDataGridExportToExcelButton extends IGridControlBarButton {
		model: IModel;
		containerAsControlBar: IControlBar;
		load(): DataGridExportToExcelButton;
		load(callback: (element: DataGridExportToExcelButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/export-to-excel-button relevant section in reference guide}
	 */
	export class DataGridExportToExcelButton extends GridControlBarButton implements IDataGridExportToExcelButton {
		public static typeName: string = "Pages$DataGridExportToExcelButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }

		private __maxNumberOfRows: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(DataGridExportToExcelButton, this, "maxNumberOfRows", 0, internal.PrimitiveTypeEnum.Integer);
		public get maxNumberOfRows(): number { return this.__maxNumberOfRows.get(); }
		public set maxNumberOfRows(newValue: number) { this.__maxNumberOfRows.set(newValue); }
		private __useExcelDateType: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(DataGridExportToExcelButton, this, "useExcelDateType", false, internal.PrimitiveTypeEnum.Boolean);
		public get useExcelDateType(): boolean { return this.__useExcelDateType.get(); }
		public set useExcelDateType(newValue: boolean) { this.__useExcelDateType.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataGridExportToExcelButton() cannot be invoked directly, please use 'model.pages.createDataGridExportToExcelButton()'"
				);
			}
		}

		/**
		 * Creates and returns a new DataGridExportToExcelButton instance in the SDK and on the server.
		 * The new DataGridExportToExcelButton will be automatically stored in the 'items' property
		 * of the parent ControlBar element passed as argument.
		 */
		public static createIn(container: ControlBar): DataGridExportToExcelButton {
			return internal.instancehelpers.createElement(container, DataGridExportToExcelButton, "items", true);
		}

		/**
		 * Creates and returns a new DataGridExportToExcelButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DataGridExportToExcelButton {
			return internal.instancehelpers.createElement(model, DataGridExportToExcelButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Export to Excel";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Naar Excel exporteren";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
			this.maxNumberOfRows = 1000;
			this.useExcelDateType = true;
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/remove-button relevant section in reference guide}
	 */
	export interface IDataGridRemoveButton extends IGridControlBarButton {
		model: IModel;
		containerAsControlBar: IControlBar;
		load(): DataGridRemoveButton;
		load(callback: (element: DataGridRemoveButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/remove-button relevant section in reference guide}
	 */
	export class DataGridRemoveButton extends GridControlBarButton implements IDataGridRemoveButton {
		public static typeName: string = "Pages$DataGridRemoveButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataGridRemoveButton() cannot be invoked directly, please use 'model.pages.createDataGridRemoveButton()'"
				);
			}
		}

		/**
		 * Creates and returns a new DataGridRemoveButton instance in the SDK and on the server.
		 * The new DataGridRemoveButton will be automatically stored in the 'items' property
		 * of the parent ControlBar element passed as argument.
		 */
		public static createIn(container: ControlBar): DataGridRemoveButton {
			return internal.instancehelpers.createElement(container, DataGridRemoveButton, "items", true);
		}

		/**
		 * Creates and returns a new DataGridRemoveButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DataGridRemoveButton {
			return internal.instancehelpers.createElement(model, DataGridRemoveButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Remove";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Weghalen";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/data-view relevant section in reference guide}
	 */
	export interface IDataView extends IEntityWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): DataView;
		load(callback: (element: DataView) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/data-view relevant section in reference guide}
	 */
	export class DataView extends EntityWidget implements IDataView {
		public static typeName: string = "Pages$DataView";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"footerWidget" : {
					"introduced" : "6.7.0"
				},
				"showControlBar" : {
					"deleted" : "6.7.0",
					"deletionMessage" : null
				},
				"showFooter" : {
					"introduced" : "6.7.0"
				},
				"closeOnSaveOrCancel" : {
					"deleted" : "6.7.0",
					"deletionMessage" : null
				},
				"noEntityMessage" : {
					"required" : {
						"currentValue" : true
					}
				},
				"controlBar" : {
					"deleted" : "6.7.0",
					"deletionMessage" : null,
					"required" : {
						"currentValue" : false,
						"changedIn" : [
							"6.5.0"
						]
					}
				},
				"readOnlyStyle" : {
					"introduced" : "6.9.0"
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __widget: internal.PartProperty<Widget> =
			new internal.PartProperty<Widget>(DataView, this, "widget", null, false);
		public get widget(): Widget { return this.__widget.get(); }
		public set widget(newValue: Widget) { this.__widget.set(newValue); }
		private __footerWidget: internal.PartProperty<Widget> =
			new internal.PartProperty<Widget>(DataView, this, "footerWidget", null, false);
		/**
		 * In version 6.7.0: introduced
		 */
		public get footerWidget(): Widget { return this.__footerWidget.get(); }
		public set footerWidget(newValue: Widget) { this.__footerWidget.set(newValue); }
		private __editable: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(DataView, this, "editable", false, internal.PrimitiveTypeEnum.Boolean);
		public get editable(): boolean { return this.__editable.get(); }
		public set editable(newValue: boolean) { this.__editable.set(newValue); }
		private __showControlBar: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(DataView, this, "showControlBar", false, internal.PrimitiveTypeEnum.Boolean);
		/**
		 * In version 6.7.0: deleted
		 */
		public get showControlBar(): boolean { return this.__showControlBar.get(); }
		public set showControlBar(newValue: boolean) { this.__showControlBar.set(newValue); }
		private __showFooter: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(DataView, this, "showFooter", false, internal.PrimitiveTypeEnum.Boolean);
		/**
		 * In version 6.7.0: introduced
		 */
		public get showFooter(): boolean { return this.__showFooter.get(); }
		public set showFooter(newValue: boolean) { this.__showFooter.set(newValue); }
		private __closeOnSaveOrCancel: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(DataView, this, "closeOnSaveOrCancel", false, internal.PrimitiveTypeEnum.Boolean);
		/**
		 * In version 6.7.0: deleted
		 */
		public get closeOnSaveOrCancel(): boolean { return this.__closeOnSaveOrCancel.get(); }
		public set closeOnSaveOrCancel(newValue: boolean) { this.__closeOnSaveOrCancel.set(newValue); }
		private __useSchema: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(DataView, this, "useSchema", false, internal.PrimitiveTypeEnum.Boolean);
		public get useSchema(): boolean { return this.__useSchema.get(); }
		public set useSchema(newValue: boolean) { this.__useSchema.set(newValue); }
		private __noEntityMessage: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(DataView, this, "noEntityMessage", null, true);
		public get noEntityMessage(): texts.Text { return this.__noEntityMessage.get(); }
		public set noEntityMessage(newValue: texts.Text) { this.__noEntityMessage.set(newValue); }
		private __labelWidth: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(DataView, this, "labelWidth", 0, internal.PrimitiveTypeEnum.Integer);
		public get labelWidth(): number { return this.__labelWidth.get(); }
		public set labelWidth(newValue: number) { this.__labelWidth.set(newValue); }
		private __controlBar: internal.PartProperty<DataViewControlBar> =
			new internal.PartProperty<DataViewControlBar>(DataView, this, "controlBar", null, false);
		/**
		 * In version 6.7.0: deleted
		 * In version 6.5.0: added optional
		 */
		public get controlBar(): DataViewControlBar { return this.__controlBar.get(); }
		public set controlBar(newValue: DataViewControlBar) { this.__controlBar.set(newValue); }
		private __readOnlyStyle: internal.EnumProperty<DataViewReadOnlyStyle> =
			new internal.EnumProperty<DataViewReadOnlyStyle>(DataView, this, "readOnlyStyle", DataViewReadOnlyStyle.Control, DataViewReadOnlyStyle);
		/**
		 * In version 6.9.0: introduced
		 */
		public get readOnlyStyle(): DataViewReadOnlyStyle { return this.__readOnlyStyle.get(); }
		public set readOnlyStyle(newValue: DataViewReadOnlyStyle) { this.__readOnlyStyle.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataView() cannot be invoked directly, please use 'model.pages.createDataView()'"
				);
			}
		}


		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): DataView {
			internal.createInVersionCheck(container.model, DataView.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, DataView, "footerWidget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): DataView {
			return internal.instancehelpers.createElement(container, DataView, "widget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): DataView {
			return internal.instancehelpers.createElement(container, DataView, "widget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): DataView {
			return internal.instancehelpers.createElement(container, DataView, "widget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): DataView {
			return internal.instancehelpers.createElement(container, DataView, "leftWidget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): DataView {
			return internal.instancehelpers.createElement(container, DataView, "rightWidget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): DataView {
			return internal.instancehelpers.createElement(container, DataView, "widget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DataView {
			return internal.instancehelpers.createElement(container, DataView, "widget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DataView {
			return internal.instancehelpers.createElement(container, DataView, "widget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): DataView {
			return internal.instancehelpers.createElement(container, DataView, "widget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): DataView {
			return internal.instancehelpers.createElement(container, DataView, "widget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): DataView {
			return internal.instancehelpers.createElement(container, DataView, "widget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DataView {
			return internal.instancehelpers.createElement(container, DataView, "widget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): DataView {
			return internal.instancehelpers.createElement(container, DataView, "widget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): DataView {
			return internal.instancehelpers.createElement(container, DataView, "firstWidget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): DataView {
			return internal.instancehelpers.createElement(container, DataView, "secondWidget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): DataView {
			return internal.instancehelpers.createElement(container, DataView, "widget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): DataView {
			return internal.instancehelpers.createElement(container, DataView, "widget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DataView {
			return internal.instancehelpers.createElement(container, DataView, "widget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): DataView {
			return internal.instancehelpers.createElement(container, DataView, "widgets", true);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DataView {
			internal.createInVersionCheck(container.model, DataView.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, DataView, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): DataView {
			internal.createInVersionCheck(container.model, DataView.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, DataView, "reportWidget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DataView {
			return internal.instancehelpers.createElement(model, DataView);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			if (this.__closeOnSaveOrCancel.isAvailable) {
				this.closeOnSaveOrCancel = true;
			}
			if (this.__controlBar.isAvailable) {
				this.controlBar = DataViewControlBar.create(this.model);
			}
			this.dataSource = DataViewSource.create(this.model);
			this.editable = true;
			this.labelWidth = 3;
			this.noEntityMessage = texts.Text.create(this.model);
			if (this.__readOnlyStyle.isAvailable) {
				this.readOnlyStyle = DataViewReadOnlyStyle.Control;
			}
			if (this.__showControlBar.isAvailable) {
				this.showControlBar = true;
			}
			if (this.__showFooter.isAvailable) {
				this.showFooter = true;
			}
		}

	}

	/**
	 * In version 6.7.0: deleted
	 */
	export interface IDataViewControlBarButton extends IControlBarButton {
		model: IModel;
		containerAsControlBar: IControlBar;
		load(): DataViewControlBarButton;
		load(callback: (element: DataViewControlBarButton) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.

	 *
	 * In version 6.7.0: deleted
	 */
	export abstract class DataViewControlBarButton extends ControlBarButton implements IDataViewControlBarButton {
		public static typeName: string = "Pages$DataViewControlBarButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"deleted" : "6.7.0",
			"deletionMessage" : null
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }

		private __tabIndex: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(DataViewControlBarButton, this, "tabIndex", 0, internal.PrimitiveTypeEnum.Integer);
		public get tabIndex(): number { return this.__tabIndex.get(); }
		public set tabIndex(newValue: number) { this.__tabIndex.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataViewControlBarButton() cannot be invoked directly, please use 'model.pages.createDataViewControlBarButton()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/data-view-action-button relevant section in reference guide}
	 *
	 * In version 6.7.0: deleted
	 */
	export interface IDataViewActionButton extends IDataViewControlBarButton {
		model: IModel;
		containerAsControlBar: IControlBar;
		load(): DataViewActionButton;
		load(callback: (element: DataViewActionButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/data-view-action-button relevant section in reference guide}
	 *
	 * In version 6.7.0: deleted
	 */
	export class DataViewActionButton extends DataViewControlBarButton implements IDataViewActionButton {
		public static typeName: string = "Pages$DataViewActionButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"deleted" : "6.7.0",
			"deletionMessage" : "Use 'ActionButton' in data view footer instead.",
			"properties" : {
				"action" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }

		private __action: internal.PartProperty<ClientAction> =
			new internal.PartProperty<ClientAction>(DataViewActionButton, this, "action", null, true);
		public get action(): ClientAction { return this.__action.get(); }
		public set action(newValue: ClientAction) { this.__action.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataViewActionButton() cannot be invoked directly, please use 'model.pages.createDataViewActionButton()'"
				);
			}
		}

		/**
		 * Creates and returns a new DataViewActionButton instance in the SDK and on the server.
		 * The new DataViewActionButton will be automatically stored in the 'items' property
		 * of the parent ControlBar element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
		 */
		public static createIn(container: ControlBar): DataViewActionButton {
			internal.createInVersionCheck(container.model, DataViewActionButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0"]
			);
			return internal.instancehelpers.createElement(container, DataViewActionButton, "items", true);
		}

		/**
		 * Creates and returns a new DataViewActionButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DataViewActionButton {
			return internal.instancehelpers.createElement(model, DataViewActionButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.action = NoClientAction.create(this.model);
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Action";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Actie";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/data-view-cancel-button relevant section in reference guide}
	 *
	 * In version 6.7.0: deleted
	 */
	export interface IDataViewCancelButton extends IDataViewControlBarButton {
		model: IModel;
		containerAsControlBar: IControlBar;
		load(): DataViewCancelButton;
		load(callback: (element: DataViewCancelButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/data-view-cancel-button relevant section in reference guide}
	 *
	 * In version 6.7.0: deleted
	 */
	export class DataViewCancelButton extends DataViewControlBarButton implements IDataViewCancelButton {
		public static typeName: string = "Pages$DataViewCancelButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"deleted" : "6.7.0",
			"deletionMessage" : "Use 'CancelButton' in data view footer instead."
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataViewCancelButton() cannot be invoked directly, please use 'model.pages.createDataViewCancelButton()'"
				);
			}
		}

		/**
		 * Creates and returns a new DataViewCancelButton instance in the SDK and on the server.
		 * The new DataViewCancelButton will be automatically stored in the 'items' property
		 * of the parent ControlBar element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
		 */
		public static createIn(container: ControlBar): DataViewCancelButton {
			internal.createInVersionCheck(container.model, DataViewCancelButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0"]
			);
			return internal.instancehelpers.createElement(container, DataViewCancelButton, "items", true);
		}

		/**
		 * Creates and returns a new DataViewCancelButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DataViewCancelButton {
			return internal.instancehelpers.createElement(model, DataViewCancelButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Cancel";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Annuleren";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/data-view-close-button relevant section in reference guide}
	 *
	 * In version 6.7.0: deleted
	 */
	export interface IDataViewCloseButton extends IDataViewControlBarButton {
		model: IModel;
		containerAsControlBar: IControlBar;
		load(): DataViewCloseButton;
		load(callback: (element: DataViewCloseButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/data-view-close-button relevant section in reference guide}
	 *
	 * In version 6.7.0: deleted
	 */
	export class DataViewCloseButton extends DataViewControlBarButton implements IDataViewCloseButton {
		public static typeName: string = "Pages$DataViewCloseButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"deleted" : "6.7.0",
			"deletionMessage" : "Use 'BackButton' in data view footer instead."
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataViewCloseButton() cannot be invoked directly, please use 'model.pages.createDataViewCloseButton()'"
				);
			}
		}

		/**
		 * Creates and returns a new DataViewCloseButton instance in the SDK and on the server.
		 * The new DataViewCloseButton will be automatically stored in the 'items' property
		 * of the parent ControlBar element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
		 */
		public static createIn(container: ControlBar): DataViewCloseButton {
			internal.createInVersionCheck(container.model, DataViewCloseButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0"]
			);
			return internal.instancehelpers.createElement(container, DataViewCloseButton, "items", true);
		}

		/**
		 * Creates and returns a new DataViewCloseButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DataViewCloseButton {
			return internal.instancehelpers.createElement(model, DataViewCloseButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Close";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Sluiten";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/data-view-control-bar relevant section in reference guide}
	 *
	 * In version 6.7.0: deleted
	 */
	export interface IDataViewControlBar extends IControlBar {
		model: IModel;
		containerAsDataView: IDataView;
		load(): DataViewControlBar;
		load(callback: (element: DataViewControlBar) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/data-view-control-bar relevant section in reference guide}
	 *
	 * In version 6.7.0: deleted
	 */
	export class DataViewControlBar extends ControlBar implements IDataViewControlBar {
		public static typeName: string = "Pages$DataViewControlBar";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"deleted" : "6.7.0",
			"deletionMessage" : "Use the data view footer instead."
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }

		private __closeButton: internal.ByIdReferenceProperty<ControlBarItem> =
			new internal.ByIdReferenceProperty<ControlBarItem>(DataViewControlBar, this, "closeButton", null);
		public get closeButton(): ControlBarItem { return this.__closeButton.get(); }
		public set closeButton(newValue: ControlBarItem) { this.__closeButton.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataViewControlBar() cannot be invoked directly, please use 'model.pages.createDataViewControlBar()'"
				);
			}
		}

		/**
		 * Creates and returns a new DataViewControlBar instance in the SDK and on the server.
		 * The new DataViewControlBar will be automatically stored in the 'controlBar' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
		 */
		public static createIn(container: DataView): DataViewControlBar {
			internal.createInVersionCheck(container.model, DataViewControlBar.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0"]
			);
			return internal.instancehelpers.createElement(container, DataViewControlBar, "controlBar", false);
		}

		/**
		 * Creates and returns a new DataViewControlBar instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DataViewControlBar {
			return internal.instancehelpers.createElement(model, DataViewControlBar);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/data-view-save-button relevant section in reference guide}
	 *
	 * In version 6.7.0: deleted
	 */
	export interface IDataViewSaveButton extends IDataViewControlBarButton {
		model: IModel;
		containerAsControlBar: IControlBar;
		load(): DataViewSaveButton;
		load(callback: (element: DataViewSaveButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/data-view-save-button relevant section in reference guide}
	 *
	 * In version 6.7.0: deleted
	 */
	export class DataViewSaveButton extends DataViewControlBarButton implements IDataViewSaveButton {
		public static typeName: string = "Pages$DataViewSaveButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"deleted" : "6.7.0",
			"deletionMessage" : "Use 'SaveButton' in data view footer instead.",
			"properties" : {
				"syncAutomatically" : {
					"introduced" : "6.6.0"
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }

		private __syncAutomatically: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(DataViewSaveButton, this, "syncAutomatically", false, internal.PrimitiveTypeEnum.Boolean);
		/**
		 * In version 6.6.0: introduced
		 */
		public get syncAutomatically(): boolean { return this.__syncAutomatically.get(); }
		public set syncAutomatically(newValue: boolean) { this.__syncAutomatically.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataViewSaveButton() cannot be invoked directly, please use 'model.pages.createDataViewSaveButton()'"
				);
			}
		}

		/**
		 * Creates and returns a new DataViewSaveButton instance in the SDK and on the server.
		 * The new DataViewSaveButton will be automatically stored in the 'items' property
		 * of the parent ControlBar element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
		 */
		public static createIn(container: ControlBar): DataViewSaveButton {
			internal.createInVersionCheck(container.model, DataViewSaveButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0"]
			);
			return internal.instancehelpers.createElement(container, DataViewSaveButton, "items", true);
		}

		/**
		 * Creates and returns a new DataViewSaveButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DataViewSaveButton {
			return internal.instancehelpers.createElement(model, DataViewSaveButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Save";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Opslaan";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
		}

	}

	export interface IDataViewSource extends IEntityPathSource {
		model: IModel;
		containerAsEntityWidget: IEntityWidget;
		load(): DataViewSource;
		load(callback: (element: DataViewSource) => void, forceRefresh?: boolean);
	}

	export class DataViewSource extends EntityPathSource implements IDataViewSource {
		public static typeName: string = "Pages$DataViewSource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsEntityWidget() { return super.getContainerAs<EntityWidget>(EntityWidget); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataViewSource() cannot be invoked directly, please use 'model.pages.createDataViewSource()'"
				);
			}
		}

		/**
		 * Creates and returns a new DataViewSource instance in the SDK and on the server.
		 * The new DataViewSource will be automatically stored in the 'dataSource' property
		 * of the parent EntityWidget element passed as argument.
		 */
		public static createIn(container: EntityWidget): DataViewSource {
			return internal.instancehelpers.createElement(container, DataViewSource, "dataSource", false);
		}

		/**
		 * Creates and returns a new DataViewSource instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DataViewSource {
			return internal.instancehelpers.createElement(model, DataViewSource);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IDatabaseConstraint extends internal.IElement {
		model: IModel;
		containerAsDatabaseSourceBase: IDatabaseSourceBase;
		containerAsSelectorDatabaseSource: ISelectorDatabaseSource;
		load(): DatabaseConstraint;
		load(callback: (element: DatabaseConstraint) => void, forceRefresh?: boolean);
	}

	export class DatabaseConstraint extends internal.Element implements IDatabaseConstraint {
		public static typeName: string = "Pages$DatabaseConstraint";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDatabaseSourceBase() { return super.getContainerAs<DatabaseSourceBase>(DatabaseSourceBase); }
		get containerAsSelectorDatabaseSource() { return super.getContainerAs<SelectorDatabaseSource>(SelectorDatabaseSource); }

		private __attribute: internal.ByNameReferenceProperty<domainmodels.IAttribute> =
			new internal.ByNameReferenceProperty<domainmodels.IAttribute>(DatabaseConstraint, this, "attribute", null, "DomainModels$Attribute");
		public get attribute(): domainmodels.IAttribute { return this.__attribute.get(); }
		public set attribute(newValue: domainmodels.IAttribute) { this.__attribute.set(newValue); }
		get attributeQualifiedName(): string { return this.__attribute.qualifiedName(); }
		private __operator: internal.EnumProperty<DatabaseConstraintOperator> =
			new internal.EnumProperty<DatabaseConstraintOperator>(DatabaseConstraint, this, "operator", DatabaseConstraintOperator.Equals, DatabaseConstraintOperator);
		public get operator(): DatabaseConstraintOperator { return this.__operator.get(); }
		public set operator(newValue: DatabaseConstraintOperator) { this.__operator.set(newValue); }
		private __value: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(DatabaseConstraint, this, "value", "", internal.PrimitiveTypeEnum.String);
		public get value(): string { return this.__value.get(); }
		public set value(newValue: string) { this.__value.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DatabaseConstraint() cannot be invoked directly, please use 'model.pages.createDatabaseConstraint()'"
				);
			}
		}

		/**
		 * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
		 * The new DatabaseConstraint will be automatically stored in the 'databaseConstraints' property
		 * of the parent DatabaseSourceBase element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1
		 */
		public static createIn(container: DatabaseSourceBase): DatabaseConstraint {
			internal.createInVersionCheck(container.model, DatabaseConstraint.typeName,
				["6.0.0", "6.0.1"]
			);
			return internal.instancehelpers.createElement(container, DatabaseConstraint, "databaseConstraints", true);
		}

		/**
		 * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
		 * The new DatabaseConstraint will be automatically stored in the 'databaseConstraints' property
		 * of the parent DatabaseSourceBase element passed as argument.
		 */
		public static createInDatabaseSourceBaseUnderDatabaseConstraints(container: DatabaseSourceBase): DatabaseConstraint {
			return internal.instancehelpers.createElement(container, DatabaseConstraint, "databaseConstraints", true);
		}

		/**
		 * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
		 * The new DatabaseConstraint will be automatically stored in the 'databaseConstraints' property
		 * of the parent SelectorDatabaseSource element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInSelectorDatabaseSourceUnderDatabaseConstraints(container: SelectorDatabaseSource): DatabaseConstraint {
			internal.createInVersionCheck(container.model, DatabaseConstraint.typeName,
				["6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, DatabaseConstraint, "databaseConstraints", true);
		}

		/**
		 * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DatabaseConstraint {
			return internal.instancehelpers.createElement(model, DatabaseConstraint);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.operator = DatabaseConstraintOperator.Equals;
		}

	}

	export interface ISortableEntityPathSource extends IEntityPathSource {
		model: IModel;
		containerAsEntityWidget: IEntityWidget;
		load(): SortableEntityPathSource;
		load(callback: (element: SortableEntityPathSource) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class SortableEntityPathSource extends EntityPathSource implements ISortableEntityPathSource {
		public static typeName: string = "Pages$SortableEntityPathSource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"sortBar" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsEntityWidget() { return super.getContainerAs<EntityWidget>(EntityWidget); }

		private __sortBar: internal.PartProperty<GridSortBar> =
			new internal.PartProperty<GridSortBar>(SortableEntityPathSource, this, "sortBar", null, true);
		public get sortBar(): GridSortBar { return this.__sortBar.get(); }
		public set sortBar(newValue: GridSortBar) { this.__sortBar.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new SortableEntityPathSource() cannot be invoked directly, please use 'model.pages.createSortableEntityPathSource()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.sortBar = GridSortBar.create(this.model);
		}

	}

	export interface IDatabaseSourceBase extends ISortableEntityPathSource {
		model: IModel;
		containerAsEntityWidget: IEntityWidget;
		load(): DatabaseSourceBase;
		load(callback: (element: DatabaseSourceBase) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class DatabaseSourceBase extends SortableEntityPathSource implements IDatabaseSourceBase {
		public static typeName: string = "Pages$DatabaseSourceBase";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsEntityWidget() { return super.getContainerAs<EntityWidget>(EntityWidget); }

		private __databaseConstraints: internal.PartListProperty<DatabaseConstraint> =
			new internal.PartListProperty<DatabaseConstraint>(DatabaseSourceBase, this, "databaseConstraints", []);
		public get databaseConstraints(): internal.IList<DatabaseConstraint> { return this.__databaseConstraints.get(); }
		public set databaseConstraints(newValue: internal.IList<DatabaseConstraint>) { this.__databaseConstraints.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DatabaseSourceBase() cannot be invoked directly, please use 'model.pages.createDatabaseSourceBase()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/date-picker relevant section in reference guide}
	 */
	export interface IDatePicker extends IAttributeWidgetWithPlaceholder {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): DatePicker;
		load(callback: (element: DatePicker) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/date-picker relevant section in reference guide}
	 */
	export class DatePicker extends AttributeWidgetWithPlaceholder implements IDatePicker {
		public static typeName: string = "Pages$DatePicker";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"formattingInfo" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __formattingInfo: internal.PartProperty<FormattingInfo> =
			new internal.PartProperty<FormattingInfo>(DatePicker, this, "formattingInfo", null, true);
		public get formattingInfo(): FormattingInfo { return this.__formattingInfo.get(); }
		public set formattingInfo(newValue: FormattingInfo) { this.__formattingInfo.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DatePicker() cannot be invoked directly, please use 'model.pages.createDatePicker()'"
				);
			}
		}


		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): DatePicker {
			internal.createInVersionCheck(container.model, DatePicker.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, DatePicker, "footerWidget", false);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): DatePicker {
			return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): DatePicker {
			return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): DatePicker {
			return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): DatePicker {
			return internal.instancehelpers.createElement(container, DatePicker, "leftWidget", false);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): DatePicker {
			return internal.instancehelpers.createElement(container, DatePicker, "rightWidget", false);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): DatePicker {
			return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DatePicker {
			return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DatePicker {
			return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): DatePicker {
			return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): DatePicker {
			return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): DatePicker {
			return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DatePicker {
			return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): DatePicker {
			return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): DatePicker {
			return internal.instancehelpers.createElement(container, DatePicker, "firstWidget", false);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): DatePicker {
			return internal.instancehelpers.createElement(container, DatePicker, "secondWidget", false);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): DatePicker {
			return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): DatePicker {
			return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DatePicker {
			return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): DatePicker {
			return internal.instancehelpers.createElement(container, DatePicker, "widgets", true);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DatePicker {
			internal.createInVersionCheck(container.model, DatePicker.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, DatePicker, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * The new DatePicker will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): DatePicker {
			internal.createInVersionCheck(container.model, DatePicker.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, DatePicker, "reportWidget", false);
		}

		/**
		 * Creates and returns a new DatePicker instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DatePicker {
			return internal.instancehelpers.createElement(model, DatePicker);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.formattingInfo = FormattingInfo.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/container relevant section in reference guide}
	 */
	export interface IDivContainer extends IConditionallyVisibleWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): DivContainer;
		load(callback: (element: DivContainer) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/container relevant section in reference guide}
	 */
	export class DivContainer extends ConditionallyVisibleWidget implements IDivContainer {
		public static typeName: string = "Pages$DivContainer";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __widget: internal.PartProperty<Widget> =
			new internal.PartProperty<Widget>(DivContainer, this, "widget", null, false);
		public get widget(): Widget { return this.__widget.get(); }
		public set widget(newValue: Widget) { this.__widget.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DivContainer() cannot be invoked directly, please use 'model.pages.createDivContainer()'"
				);
			}
		}


		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): DivContainer {
			internal.createInVersionCheck(container.model, DivContainer.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, DivContainer, "footerWidget", false);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): DivContainer {
			return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): DivContainer {
			return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): DivContainer {
			return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): DivContainer {
			return internal.instancehelpers.createElement(container, DivContainer, "leftWidget", false);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): DivContainer {
			return internal.instancehelpers.createElement(container, DivContainer, "rightWidget", false);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): DivContainer {
			return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DivContainer {
			return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DivContainer {
			return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): DivContainer {
			return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): DivContainer {
			return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): DivContainer {
			return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DivContainer {
			return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): DivContainer {
			return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): DivContainer {
			return internal.instancehelpers.createElement(container, DivContainer, "firstWidget", false);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): DivContainer {
			return internal.instancehelpers.createElement(container, DivContainer, "secondWidget", false);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): DivContainer {
			return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): DivContainer {
			return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DivContainer {
			return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): DivContainer {
			return internal.instancehelpers.createElement(container, DivContainer, "widgets", true);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DivContainer {
			internal.createInVersionCheck(container.model, DivContainer.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, DivContainer, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * The new DivContainer will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): DivContainer {
			internal.createInVersionCheck(container.model, DivContainer.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, DivContainer, "reportWidget", false);
		}

		/**
		 * Creates and returns a new DivContainer instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DivContainer {
			return internal.instancehelpers.createElement(model, DivContainer);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/drop-down-widget relevant section in reference guide}
	 */
	export interface IDropDown extends IAttributeWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): DropDown;
		load(callback: (element: DropDown) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/drop-down-widget relevant section in reference guide}
	 */
	export class DropDown extends AttributeWidget implements IDropDown {
		public static typeName: string = "Pages$DropDown";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DropDown() cannot be invoked directly, please use 'model.pages.createDropDown()'"
				);
			}
		}


		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): DropDown {
			internal.createInVersionCheck(container.model, DropDown.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, DropDown, "footerWidget", false);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): DropDown {
			return internal.instancehelpers.createElement(container, DropDown, "widget", false);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): DropDown {
			return internal.instancehelpers.createElement(container, DropDown, "widget", false);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): DropDown {
			return internal.instancehelpers.createElement(container, DropDown, "widget", false);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): DropDown {
			return internal.instancehelpers.createElement(container, DropDown, "leftWidget", false);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): DropDown {
			return internal.instancehelpers.createElement(container, DropDown, "rightWidget", false);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): DropDown {
			return internal.instancehelpers.createElement(container, DropDown, "widget", false);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DropDown {
			return internal.instancehelpers.createElement(container, DropDown, "widget", false);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DropDown {
			return internal.instancehelpers.createElement(container, DropDown, "widget", false);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): DropDown {
			return internal.instancehelpers.createElement(container, DropDown, "widget", false);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): DropDown {
			return internal.instancehelpers.createElement(container, DropDown, "widget", false);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): DropDown {
			return internal.instancehelpers.createElement(container, DropDown, "widget", false);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DropDown {
			return internal.instancehelpers.createElement(container, DropDown, "widget", false);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): DropDown {
			return internal.instancehelpers.createElement(container, DropDown, "widget", false);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): DropDown {
			return internal.instancehelpers.createElement(container, DropDown, "firstWidget", false);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): DropDown {
			return internal.instancehelpers.createElement(container, DropDown, "secondWidget", false);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): DropDown {
			return internal.instancehelpers.createElement(container, DropDown, "widget", false);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): DropDown {
			return internal.instancehelpers.createElement(container, DropDown, "widget", false);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DropDown {
			return internal.instancehelpers.createElement(container, DropDown, "widget", false);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): DropDown {
			return internal.instancehelpers.createElement(container, DropDown, "widgets", true);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DropDown {
			internal.createInVersionCheck(container.model, DropDown.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, DropDown, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * The new DropDown will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): DropDown {
			internal.createInVersionCheck(container.model, DropDown.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, DropDown, "reportWidget", false);
		}

		/**
		 * Creates and returns a new DropDown instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DropDown {
			return internal.instancehelpers.createElement(model, DropDown);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/drop-down-button relevant section in reference guide}
	 */
	export interface IDropDownButton extends IButton {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): DropDownButton;
		load(callback: (element: DropDownButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/drop-down-button relevant section in reference guide}
	 */
	export class DropDownButton extends Button implements IDropDownButton {
		public static typeName: string = "Pages$DropDownButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __items: internal.PartListProperty<DropDownButtonItem> =
			new internal.PartListProperty<DropDownButtonItem>(DropDownButton, this, "items", []);
		public get items(): internal.IList<DropDownButtonItem> { return this.__items.get(); }
		public set items(newValue: internal.IList<DropDownButtonItem>) { this.__items.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DropDownButton() cannot be invoked directly, please use 'model.pages.createDropDownButton()'"
				);
			}
		}


		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): DropDownButton {
			internal.createInVersionCheck(container.model, DropDownButton.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, DropDownButton, "footerWidget", false);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): DropDownButton {
			return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): DropDownButton {
			return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): DropDownButton {
			return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): DropDownButton {
			return internal.instancehelpers.createElement(container, DropDownButton, "leftWidget", false);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): DropDownButton {
			return internal.instancehelpers.createElement(container, DropDownButton, "rightWidget", false);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): DropDownButton {
			return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DropDownButton {
			return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DropDownButton {
			return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): DropDownButton {
			return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): DropDownButton {
			return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): DropDownButton {
			return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DropDownButton {
			return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): DropDownButton {
			return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): DropDownButton {
			return internal.instancehelpers.createElement(container, DropDownButton, "firstWidget", false);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): DropDownButton {
			return internal.instancehelpers.createElement(container, DropDownButton, "secondWidget", false);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): DropDownButton {
			return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): DropDownButton {
			return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DropDownButton {
			return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): DropDownButton {
			return internal.instancehelpers.createElement(container, DropDownButton, "widgets", true);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DropDownButton {
			internal.createInVersionCheck(container.model, DropDownButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, DropDownButton, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * The new DropDownButton will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): DropDownButton {
			internal.createInVersionCheck(container.model, DropDownButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, DropDownButton, "reportWidget", false);
		}

		/**
		 * Creates and returns a new DropDownButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DropDownButton {
			return internal.instancehelpers.createElement(model, DropDownButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Drop down";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Uitklappen";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
		}

	}

	export interface IDropDownButtonItem extends IActionItem {
		model: IModel;
		containerAsDropDownButton: IDropDownButton;
		load(): DropDownButtonItem;
		load(callback: (element: DropDownButtonItem) => void, forceRefresh?: boolean);
	}

	export class DropDownButtonItem extends ActionItem implements IDropDownButtonItem {
		public static typeName: string = "Pages$DropDownButtonItem";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"caption" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDropDownButton() { return super.getContainerAs<DropDownButton>(DropDownButton); }

		private __caption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(DropDownButtonItem, this, "caption", null, true);
		public get caption(): texts.Text { return this.__caption.get(); }
		public set caption(newValue: texts.Text) { this.__caption.set(newValue); }
		private __image: internal.ByNameReferenceProperty<images.IImage> =
			new internal.ByNameReferenceProperty<images.IImage>(DropDownButtonItem, this, "image", null, "Images$Image");
		public get image(): images.IImage { return this.__image.get(); }
		public set image(newValue: images.IImage) { this.__image.set(newValue); }
		get imageQualifiedName(): string { return this.__image.qualifiedName(); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DropDownButtonItem() cannot be invoked directly, please use 'model.pages.createDropDownButtonItem()'"
				);
			}
		}

		/**
		 * Creates and returns a new DropDownButtonItem instance in the SDK and on the server.
		 * The new DropDownButtonItem will be automatically stored in the 'items' property
		 * of the parent DropDownButton element passed as argument.
		 */
		public static createIn(container: DropDownButton): DropDownButtonItem {
			return internal.instancehelpers.createElement(container, DropDownButtonItem, "items", true);
		}

		/**
		 * Creates and returns a new DropDownButtonItem instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DropDownButtonItem {
			return internal.instancehelpers.createElement(model, DropDownButtonItem);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((text:texts.Text) => {
				text.translations.replace([ ((translation:texts.Translation) => {
					translation.languageCode = "en_US";
					translation.text = "Item";
					return translation;
				})(texts.Translation.create(this.model)) ]);
				return text;
			})(texts.Text.create(this.model));
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/drop-down-search-field relevant section in reference guide}
	 */
	export interface IDropDownSearchField extends ISingleSearchField {
		model: IModel;
		containerAsControlBar: IControlBar;
		load(): DropDownSearchField;
		load(callback: (element: DropDownSearchField) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/drop-down-search-field relevant section in reference guide}
	 */
	export class DropDownSearchField extends SingleSearchField implements IDropDownSearchField {
		public static typeName: string = "Pages$DropDownSearchField";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"sortBar" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }

		private __sortBar: internal.PartProperty<GridSortBar> =
			new internal.PartProperty<GridSortBar>(DropDownSearchField, this, "sortBar", null, true);
		public get sortBar(): GridSortBar { return this.__sortBar.get(); }
		public set sortBar(newValue: GridSortBar) { this.__sortBar.set(newValue); }
		private __xPathConstraint: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(DropDownSearchField, this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
		 */
		public get xPathConstraint(): string { return this.__xPathConstraint.get(); }
		public set xPathConstraint(newValue: string) { this.__xPathConstraint.set(newValue); }
		private __allowMultipleSelect: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(DropDownSearchField, this, "allowMultipleSelect", false, internal.PrimitiveTypeEnum.Boolean);
		public get allowMultipleSelect(): boolean { return this.__allowMultipleSelect.get(); }
		public set allowMultipleSelect(newValue: boolean) { this.__allowMultipleSelect.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DropDownSearchField() cannot be invoked directly, please use 'model.pages.createDropDownSearchField()'"
				);
			}
		}

		/**
		 * Creates and returns a new DropDownSearchField instance in the SDK and on the server.
		 * The new DropDownSearchField will be automatically stored in the 'items' property
		 * of the parent ControlBar element passed as argument.
		 */
		public static createIn(container: ControlBar): DropDownSearchField {
			return internal.instancehelpers.createElement(container, DropDownSearchField, "items", true);
		}

		/**
		 * Creates and returns a new DropDownSearchField instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DropDownSearchField {
			return internal.instancehelpers.createElement(model, DropDownSearchField);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.operator = SearchFieldOperator.Equal;
			this.sortBar = GridSortBar.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/image-viewer relevant section in reference guide}
	 */
	export interface IDynamicImageViewer extends IEntityWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): DynamicImageViewer;
		load(callback: (element: DynamicImageViewer) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/image-viewer relevant section in reference guide}
	 */
	export class DynamicImageViewer extends EntityWidget implements IDynamicImageViewer {
		public static typeName: string = "Pages$DynamicImageViewer";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"onClickBehavior" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __defaultImage: internal.ByNameReferenceProperty<images.IImage> =
			new internal.ByNameReferenceProperty<images.IImage>(DynamicImageViewer, this, "defaultImage", null, "Images$Image");
		public get defaultImage(): images.IImage { return this.__defaultImage.get(); }
		public set defaultImage(newValue: images.IImage) { this.__defaultImage.set(newValue); }
		get defaultImageQualifiedName(): string { return this.__defaultImage.qualifiedName(); }
		private __widthUnit: internal.EnumProperty<ImageSizeUnit> =
			new internal.EnumProperty<ImageSizeUnit>(DynamicImageViewer, this, "widthUnit", ImageSizeUnit.Percentage, ImageSizeUnit);
		public get widthUnit(): ImageSizeUnit { return this.__widthUnit.get(); }
		public set widthUnit(newValue: ImageSizeUnit) { this.__widthUnit.set(newValue); }
		private __heightUnit: internal.EnumProperty<ImageSizeUnit> =
			new internal.EnumProperty<ImageSizeUnit>(DynamicImageViewer, this, "heightUnit", ImageSizeUnit.Auto, ImageSizeUnit);
		public get heightUnit(): ImageSizeUnit { return this.__heightUnit.get(); }
		public set heightUnit(newValue: ImageSizeUnit) { this.__heightUnit.set(newValue); }
		private __width: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(DynamicImageViewer, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
		public get width(): number { return this.__width.get(); }
		public set width(newValue: number) { this.__width.set(newValue); }
		private __height: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(DynamicImageViewer, this, "height", 0, internal.PrimitiveTypeEnum.Integer);
		public get height(): number { return this.__height.get(); }
		public set height(newValue: number) { this.__height.set(newValue); }
		private __responsive: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(DynamicImageViewer, this, "responsive", false, internal.PrimitiveTypeEnum.Boolean);
		public get responsive(): boolean { return this.__responsive.get(); }
		public set responsive(newValue: boolean) { this.__responsive.set(newValue); }
		private __showAsThumbnail: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(DynamicImageViewer, this, "showAsThumbnail", false, internal.PrimitiveTypeEnum.Boolean);
		public get showAsThumbnail(): boolean { return this.__showAsThumbnail.get(); }
		public set showAsThumbnail(newValue: boolean) { this.__showAsThumbnail.set(newValue); }
		private __onClickBehavior: internal.PartProperty<OnClickBehavior> =
			new internal.PartProperty<OnClickBehavior>(DynamicImageViewer, this, "onClickBehavior", null, true);
		public get onClickBehavior(): OnClickBehavior { return this.__onClickBehavior.get(); }
		public set onClickBehavior(newValue: OnClickBehavior) { this.__onClickBehavior.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DynamicImageViewer() cannot be invoked directly, please use 'model.pages.createDynamicImageViewer()'"
				);
			}
		}


		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): DynamicImageViewer {
			internal.createInVersionCheck(container.model, DynamicImageViewer.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "footerWidget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): DynamicImageViewer {
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): DynamicImageViewer {
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): DynamicImageViewer {
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): DynamicImageViewer {
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "leftWidget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): DynamicImageViewer {
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "rightWidget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): DynamicImageViewer {
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DynamicImageViewer {
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DynamicImageViewer {
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): DynamicImageViewer {
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): DynamicImageViewer {
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): DynamicImageViewer {
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DynamicImageViewer {
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): DynamicImageViewer {
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): DynamicImageViewer {
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "firstWidget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): DynamicImageViewer {
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "secondWidget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): DynamicImageViewer {
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): DynamicImageViewer {
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DynamicImageViewer {
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): DynamicImageViewer {
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "widgets", true);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DynamicImageViewer {
			internal.createInVersionCheck(container.model, DynamicImageViewer.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): DynamicImageViewer {
			internal.createInVersionCheck(container.model, DynamicImageViewer.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "reportWidget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DynamicImageViewer {
			return internal.instancehelpers.createElement(model, DynamicImageViewer);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.dataSource = ImageViewerSource.create(this.model);
			this.heightUnit = ImageSizeUnit.Auto;
			this.onClickBehavior = OnClickNothing.create(this.model);
			this.responsive = true;
			this.showAsThumbnail = true;
			this.width = 100;
			this.widthUnit = ImageSizeUnit.Percentage;
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/text relevant section in reference guide}
	 */
	export interface IDynamicText extends IConditionallyVisibleWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): DynamicText;
		load(callback: (element: DynamicText) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/text relevant section in reference guide}
	 */
	export class DynamicText extends ConditionallyVisibleWidget implements IDynamicText {
		public static typeName: string = "Pages$DynamicText";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"content" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __content: internal.PartProperty<ClientTemplate> =
			new internal.PartProperty<ClientTemplate>(DynamicText, this, "content", null, true);
		public get content(): ClientTemplate { return this.__content.get(); }
		public set content(newValue: ClientTemplate) { this.__content.set(newValue); }
		private __renderMode: internal.EnumProperty<TextRenderMode> =
			new internal.EnumProperty<TextRenderMode>(DynamicText, this, "renderMode", TextRenderMode.Text, TextRenderMode);
		public get renderMode(): TextRenderMode { return this.__renderMode.get(); }
		public set renderMode(newValue: TextRenderMode) { this.__renderMode.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DynamicText() cannot be invoked directly, please use 'model.pages.createDynamicText()'"
				);
			}
		}


		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): DynamicText {
			internal.createInVersionCheck(container.model, DynamicText.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, DynamicText, "footerWidget", false);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): DynamicText {
			return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): DynamicText {
			return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): DynamicText {
			return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): DynamicText {
			return internal.instancehelpers.createElement(container, DynamicText, "leftWidget", false);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): DynamicText {
			return internal.instancehelpers.createElement(container, DynamicText, "rightWidget", false);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): DynamicText {
			return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DynamicText {
			return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DynamicText {
			return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): DynamicText {
			return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): DynamicText {
			return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): DynamicText {
			return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DynamicText {
			return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): DynamicText {
			return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): DynamicText {
			return internal.instancehelpers.createElement(container, DynamicText, "firstWidget", false);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): DynamicText {
			return internal.instancehelpers.createElement(container, DynamicText, "secondWidget", false);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): DynamicText {
			return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): DynamicText {
			return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DynamicText {
			return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): DynamicText {
			return internal.instancehelpers.createElement(container, DynamicText, "widgets", true);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DynamicText {
			internal.createInVersionCheck(container.model, DynamicText.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, DynamicText, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * The new DynamicText will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): DynamicText {
			internal.createInVersionCheck(container.model, DynamicText.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, DynamicText, "reportWidget", false);
		}

		/**
		 * Creates and returns a new DynamicText instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DynamicText {
			return internal.instancehelpers.createElement(model, DynamicText);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.content = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Text";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Tekst";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
			this.renderMode = TextRenderMode.Text;
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/file-manager relevant section in reference guide}
	 */
	export interface IFileManager extends IInputWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): FileManager;
		load(callback: (element: FileManager) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/file-manager relevant section in reference guide}
	 */
	export class FileManager extends InputWidget implements IFileManager {
		public static typeName: string = "Pages$FileManager";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __allowedExtensions: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(FileManager, this, "allowedExtensions", "", internal.PrimitiveTypeEnum.String);
		public get allowedExtensions(): string { return this.__allowedExtensions.get(); }
		public set allowedExtensions(newValue: string) { this.__allowedExtensions.set(newValue); }
		private __type: internal.EnumProperty<FileManagerType> =
			new internal.EnumProperty<FileManagerType>(FileManager, this, "type", FileManagerType.Both, FileManagerType);
		public get type(): FileManagerType { return this.__type.get(); }
		public set type(newValue: FileManagerType) { this.__type.set(newValue); }
		private __maxFileSize: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(FileManager, this, "maxFileSize", 0, internal.PrimitiveTypeEnum.Integer);
		public get maxFileSize(): number { return this.__maxFileSize.get(); }
		public set maxFileSize(newValue: number) { this.__maxFileSize.set(newValue); }
		private __showFileInBrowser: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(FileManager, this, "showFileInBrowser", false, internal.PrimitiveTypeEnum.Boolean);
		public get showFileInBrowser(): boolean { return this.__showFileInBrowser.get(); }
		public set showFileInBrowser(newValue: boolean) { this.__showFileInBrowser.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new FileManager() cannot be invoked directly, please use 'model.pages.createFileManager()'"
				);
			}
		}


		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): FileManager {
			internal.createInVersionCheck(container.model, FileManager.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, FileManager, "footerWidget", false);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): FileManager {
			return internal.instancehelpers.createElement(container, FileManager, "widget", false);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): FileManager {
			return internal.instancehelpers.createElement(container, FileManager, "widget", false);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): FileManager {
			return internal.instancehelpers.createElement(container, FileManager, "widget", false);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): FileManager {
			return internal.instancehelpers.createElement(container, FileManager, "leftWidget", false);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): FileManager {
			return internal.instancehelpers.createElement(container, FileManager, "rightWidget", false);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): FileManager {
			return internal.instancehelpers.createElement(container, FileManager, "widget", false);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): FileManager {
			return internal.instancehelpers.createElement(container, FileManager, "widget", false);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): FileManager {
			return internal.instancehelpers.createElement(container, FileManager, "widget", false);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): FileManager {
			return internal.instancehelpers.createElement(container, FileManager, "widget", false);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): FileManager {
			return internal.instancehelpers.createElement(container, FileManager, "widget", false);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): FileManager {
			return internal.instancehelpers.createElement(container, FileManager, "widget", false);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): FileManager {
			return internal.instancehelpers.createElement(container, FileManager, "widget", false);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): FileManager {
			return internal.instancehelpers.createElement(container, FileManager, "widget", false);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): FileManager {
			return internal.instancehelpers.createElement(container, FileManager, "firstWidget", false);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): FileManager {
			return internal.instancehelpers.createElement(container, FileManager, "secondWidget", false);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): FileManager {
			return internal.instancehelpers.createElement(container, FileManager, "widget", false);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): FileManager {
			return internal.instancehelpers.createElement(container, FileManager, "widget", false);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): FileManager {
			return internal.instancehelpers.createElement(container, FileManager, "widget", false);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): FileManager {
			return internal.instancehelpers.createElement(container, FileManager, "widgets", true);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): FileManager {
			internal.createInVersionCheck(container.model, FileManager.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, FileManager, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * The new FileManager will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): FileManager {
			internal.createInVersionCheck(container.model, FileManager.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, FileManager, "reportWidget", false);
		}

		/**
		 * Creates and returns a new FileManager instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): FileManager {
			return internal.instancehelpers.createElement(model, FileManager);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.label = ((text:texts.Text) => {
				text.translations.replace([ ((translation:texts.Translation) => {
					translation.languageCode = "en_US";
					translation.text = "File";
					return translation;
				})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
					translation.languageCode = "nl_NL";
					translation.text = "Bestand";
					return translation;
				})(texts.Translation.create(this.model)) ]);
				return text;
			})(texts.Text.create(this.model));
			this.maxFileSize = 5;
			this.type = FileManagerType.Both;
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/pages relevant section in reference guide}
	 */
	export interface IFormBase extends projects.IDocument {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		load(): FormBase;
		load(callback: (element: FormBase) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/pages relevant section in reference guide}
	 *
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class FormBase extends projects.Document implements IFormBase {
		public static typeName: string = "Pages$FormBase";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }

		private __canvasWidth: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(FormBase, this, "canvasWidth", 0, internal.PrimitiveTypeEnum.Integer);
		public get canvasWidth(): number { return this.__canvasWidth.get(); }
		public set canvasWidth(newValue: number) { this.__canvasWidth.set(newValue); }
		private __canvasHeight: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(FormBase, this, "canvasHeight", 0, internal.PrimitiveTypeEnum.Integer);
		public get canvasHeight(): number { return this.__canvasHeight.get(); }
		public set canvasHeight(newValue: number) { this.__canvasHeight.set(newValue); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.canvasHeight = 600;
			this.canvasWidth = 800;
		}

	}

	export interface IFormattingInfo extends internal.IElement {
		model: IModel;
		containerAsDataGridColumn: documenttemplates.IDataGridColumn;
		containerAsDynamicLabel: documenttemplates.IDynamicLabel;
		containerAsDatePicker: IDatePicker;
		containerAsGridColumn: IGridColumn;
		containerAsReferenceSelector: IReferenceSelector;
		containerAsTextBox: ITextBox;
		load(): FormattingInfo;
		load(callback: (element: FormattingInfo) => void, forceRefresh?: boolean);
	}

	export class FormattingInfo extends internal.Element implements IFormattingInfo {
		public static typeName: string = "Pages$FormattingInfo";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataGridColumn() { return super.getContainerAs<documenttemplates.DataGridColumn>(documenttemplates.DataGridColumn); }
		get containerAsDynamicLabel() { return super.getContainerAs<documenttemplates.DynamicLabel>(documenttemplates.DynamicLabel); }
		get containerAsDatePicker() { return super.getContainerAs<DatePicker>(DatePicker); }
		get containerAsGridColumn() { return super.getContainerAs<GridColumn>(GridColumn); }
		get containerAsReferenceSelector() { return super.getContainerAs<ReferenceSelector>(ReferenceSelector); }
		get containerAsTextBox() { return super.getContainerAs<TextBox>(TextBox); }

		private __decimalPrecision: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(FormattingInfo, this, "decimalPrecision", 0, internal.PrimitiveTypeEnum.Integer);
		public get decimalPrecision(): number { return this.__decimalPrecision.get(); }
		public set decimalPrecision(newValue: number) { this.__decimalPrecision.set(newValue); }
		private __groupDigits: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(FormattingInfo, this, "groupDigits", false, internal.PrimitiveTypeEnum.Boolean);
		public get groupDigits(): boolean { return this.__groupDigits.get(); }
		public set groupDigits(newValue: boolean) { this.__groupDigits.set(newValue); }
		private __enumFormat: internal.EnumProperty<EnumFormat> =
			new internal.EnumProperty<EnumFormat>(FormattingInfo, this, "enumFormat", EnumFormat.Text, EnumFormat);
		public get enumFormat(): EnumFormat { return this.__enumFormat.get(); }
		public set enumFormat(newValue: EnumFormat) { this.__enumFormat.set(newValue); }
		private __dateFormat: internal.EnumProperty<DateFormat> =
			new internal.EnumProperty<DateFormat>(FormattingInfo, this, "dateFormat", DateFormat.Date, DateFormat);
		public get dateFormat(): DateFormat { return this.__dateFormat.get(); }
		public set dateFormat(newValue: DateFormat) { this.__dateFormat.set(newValue); }
		private __customDateFormat: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(FormattingInfo, this, "customDateFormat", "", internal.PrimitiveTypeEnum.String);
		public get customDateFormat(): string { return this.__customDateFormat.get(); }
		public set customDateFormat(newValue: string) { this.__customDateFormat.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new FormattingInfo() cannot be invoked directly, please use 'model.pages.createFormattingInfo()'"
				);
			}
		}


		/**
		 * Creates and returns a new FormattingInfo instance in the SDK and on the server.
		 * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
		 * of the parent documenttemplates.DataGridColumn element passed as argument.
		 */
		public static createInDataGridColumnUnderFormattingInfo(container: documenttemplates.DataGridColumn): FormattingInfo {
			return internal.instancehelpers.createElement(container, FormattingInfo, "formattingInfo", false);
		}

		/**
		 * Creates and returns a new FormattingInfo instance in the SDK and on the server.
		 * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
		 * of the parent documenttemplates.DynamicLabel element passed as argument.
		 */
		public static createInDynamicLabelUnderFormattingInfo(container: documenttemplates.DynamicLabel): FormattingInfo {
			return internal.instancehelpers.createElement(container, FormattingInfo, "formattingInfo", false);
		}

		/**
		 * Creates and returns a new FormattingInfo instance in the SDK and on the server.
		 * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
		 * of the parent DatePicker element passed as argument.
		 */
		public static createInDatePickerUnderFormattingInfo(container: DatePicker): FormattingInfo {
			return internal.instancehelpers.createElement(container, FormattingInfo, "formattingInfo", false);
		}

		/**
		 * Creates and returns a new FormattingInfo instance in the SDK and on the server.
		 * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
		 * of the parent GridColumn element passed as argument.
		 */
		public static createInGridColumnUnderFormattingInfo(container: GridColumn): FormattingInfo {
			return internal.instancehelpers.createElement(container, FormattingInfo, "formattingInfo", false);
		}

		/**
		 * Creates and returns a new FormattingInfo instance in the SDK and on the server.
		 * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
		 * of the parent ReferenceSelector element passed as argument.
		 */
		public static createInReferenceSelectorUnderFormattingInfo(container: ReferenceSelector): FormattingInfo {
			return internal.instancehelpers.createElement(container, FormattingInfo, "formattingInfo", false);
		}

		/**
		 * Creates and returns a new FormattingInfo instance in the SDK and on the server.
		 * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
		 * of the parent TextBox element passed as argument.
		 */
		public static createInTextBoxUnderFormattingInfo(container: TextBox): FormattingInfo {
			return internal.instancehelpers.createElement(container, FormattingInfo, "formattingInfo", false);
		}

		/**
		 * Creates and returns a new FormattingInfo instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): FormattingInfo {
			return internal.instancehelpers.createElement(model, FormattingInfo);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.dateFormat = DateFormat.Date;
			this.decimalPrecision = 2;
			this.enumFormat = EnumFormat.Text;
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/image-property relevant section in reference guide}
	 */
	export interface IIcon extends internal.IElement {
		model: IModel;
		containerAsMenuItem: menus.IMenuItem;
		containerAsButton: IButton;
		containerAsControlBarButton: IControlBarButton;
		load(): Icon;
		load(callback: (element: Icon) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/image-property relevant section in reference guide}
	 *
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class Icon extends internal.Element implements IIcon {
		public static typeName: string = "Pages$Icon";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMenuItem() { return super.getContainerAs<menus.MenuItem>(menus.MenuItem); }
		get containerAsButton() { return super.getContainerAs<Button>(Button); }
		get containerAsControlBarButton() { return super.getContainerAs<ControlBarButton>(ControlBarButton); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Icon() cannot be invoked directly, please use 'model.pages.createIcon()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IGlyphIcon extends IIcon {
		model: IModel;
		containerAsMenuItem: menus.IMenuItem;
		containerAsButton: IButton;
		containerAsControlBarButton: IControlBarButton;
		load(): GlyphIcon;
		load(callback: (element: GlyphIcon) => void, forceRefresh?: boolean);
	}

	export class GlyphIcon extends Icon implements IGlyphIcon {
		public static typeName: string = "Pages$GlyphIcon";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMenuItem() { return super.getContainerAs<menus.MenuItem>(menus.MenuItem); }
		get containerAsButton() { return super.getContainerAs<Button>(Button); }
		get containerAsControlBarButton() { return super.getContainerAs<ControlBarButton>(ControlBarButton); }

		private __code: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(GlyphIcon, this, "code", 0, internal.PrimitiveTypeEnum.Integer);
		public get code(): number { return this.__code.get(); }
		public set code(newValue: number) { this.__code.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new GlyphIcon() cannot be invoked directly, please use 'model.pages.createGlyphIcon()'"
				);
			}
		}


		/**
		 * Creates and returns a new GlyphIcon instance in the SDK and on the server.
		 * The new GlyphIcon will be automatically stored in the 'icon' property
		 * of the parent menus.MenuItem element passed as argument.
		 */
		public static createInMenuItemUnderIcon(container: menus.MenuItem): GlyphIcon {
			return internal.instancehelpers.createElement(container, GlyphIcon, "icon", false);
		}

		/**
		 * Creates and returns a new GlyphIcon instance in the SDK and on the server.
		 * The new GlyphIcon will be automatically stored in the 'icon' property
		 * of the parent Button element passed as argument.
		 */
		public static createInButtonUnderIcon(container: Button): GlyphIcon {
			return internal.instancehelpers.createElement(container, GlyphIcon, "icon", false);
		}

		/**
		 * Creates and returns a new GlyphIcon instance in the SDK and on the server.
		 * The new GlyphIcon will be automatically stored in the 'icon' property
		 * of the parent ControlBarButton element passed as argument.
		 */
		public static createInControlBarButtonUnderIcon(container: ControlBarButton): GlyphIcon {
			return internal.instancehelpers.createElement(container, GlyphIcon, "icon", false);
		}

		/**
		 * Creates and returns a new GlyphIcon instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): GlyphIcon {
			return internal.instancehelpers.createElement(model, GlyphIcon);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.code = -1;
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/grid-action-button relevant section in reference guide}
	 */
	export interface IGridActionButton extends IGridControlBarButton {
		model: IModel;
		containerAsControlBar: IControlBar;
		load(): GridActionButton;
		load(callback: (element: GridActionButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/grid-action-button relevant section in reference guide}
	 */
	export class GridActionButton extends GridControlBarButton implements IGridActionButton {
		public static typeName: string = "Pages$GridActionButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"action" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }

		private __action: internal.PartProperty<ClientAction> =
			new internal.PartProperty<ClientAction>(GridActionButton, this, "action", null, true);
		public get action(): ClientAction { return this.__action.get(); }
		public set action(newValue: ClientAction) { this.__action.set(newValue); }
		private __maintainSelectionAfterMicroflow: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(GridActionButton, this, "maintainSelectionAfterMicroflow", false, internal.PrimitiveTypeEnum.Boolean);
		public get maintainSelectionAfterMicroflow(): boolean { return this.__maintainSelectionAfterMicroflow.get(); }
		public set maintainSelectionAfterMicroflow(newValue: boolean) { this.__maintainSelectionAfterMicroflow.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new GridActionButton() cannot be invoked directly, please use 'model.pages.createGridActionButton()'"
				);
			}
		}

		/**
		 * Creates and returns a new GridActionButton instance in the SDK and on the server.
		 * The new GridActionButton will be automatically stored in the 'items' property
		 * of the parent ControlBar element passed as argument.
		 */
		public static createIn(container: ControlBar): GridActionButton {
			return internal.instancehelpers.createElement(container, GridActionButton, "items", true);
		}

		/**
		 * Creates and returns a new GridActionButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): GridActionButton {
			return internal.instancehelpers.createElement(model, GridActionButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.action = NoClientAction.create(this.model);
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Action";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Actie";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
		}

	}

	export interface IGridBaseSource extends ISortableEntityPathSource {
		model: IModel;
		containerAsEntityWidget: IEntityWidget;
		load(): GridBaseSource;
		load(callback: (element: GridBaseSource) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class GridBaseSource extends SortableEntityPathSource implements IGridBaseSource {
		public static typeName: string = "Pages$GridBaseSource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"searchBar" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsEntityWidget() { return super.getContainerAs<EntityWidget>(EntityWidget); }

		private __searchBar: internal.PartProperty<SearchBar> =
			new internal.PartProperty<SearchBar>(GridBaseSource, this, "searchBar", null, true);
		public get searchBar(): SearchBar { return this.__searchBar.get(); }
		public set searchBar(newValue: SearchBar) { this.__searchBar.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new GridBaseSource() cannot be invoked directly, please use 'model.pages.createGridBaseSource()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.searchBar = SearchBar.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/columns relevant section in reference guide}
	 */
	export interface IGridColumn extends internal.IElement {
		model: IModel;
		containerAsColumnGrid: IColumnGrid;
		load(): GridColumn;
		load(callback: (element: GridColumn) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/columns relevant section in reference guide}
	 */
	export class GridColumn extends internal.Element implements IGridColumn {
		public static typeName: string = "Pages$GridColumn";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"caption" : {
					"required" : {
						"currentValue" : true
					}
				},
				"formattingInfo" : {
					"required" : {
						"currentValue" : true
					}
				},
				"aggregateCaption" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsColumnGrid() { return super.getContainerAs<ColumnGrid>(ColumnGrid); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(GridColumn, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __caption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(GridColumn, this, "caption", null, true);
		public get caption(): texts.Text { return this.__caption.get(); }
		public set caption(newValue: texts.Text) { this.__caption.set(newValue); }
		private __attributePath: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(GridColumn, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type paths.AttributePath.
		 */
		public get attributePath(): string { return this.__attributePath.get(); }
		public set attributePath(newValue: string) { this.__attributePath.set(newValue); }
		private __formattingInfo: internal.PartProperty<FormattingInfo> =
			new internal.PartProperty<FormattingInfo>(GridColumn, this, "formattingInfo", null, true);
		public get formattingInfo(): FormattingInfo { return this.__formattingInfo.get(); }
		public set formattingInfo(newValue: FormattingInfo) { this.__formattingInfo.set(newValue); }
		private __showTooltip: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(GridColumn, this, "showTooltip", false, internal.PrimitiveTypeEnum.Boolean);
		public get showTooltip(): boolean { return this.__showTooltip.get(); }
		public set showTooltip(newValue: boolean) { this.__showTooltip.set(newValue); }
		private __aggregateCaption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(GridColumn, this, "aggregateCaption", null, true);
		public get aggregateCaption(): texts.Text { return this.__aggregateCaption.get(); }
		public set aggregateCaption(newValue: texts.Text) { this.__aggregateCaption.set(newValue); }
		private __aggregateFunction: internal.EnumProperty<AggregateFunction> =
			new internal.EnumProperty<AggregateFunction>(GridColumn, this, "aggregateFunction", AggregateFunction.None, AggregateFunction);
		public get aggregateFunction(): AggregateFunction { return this.__aggregateFunction.get(); }
		public set aggregateFunction(newValue: AggregateFunction) { this.__aggregateFunction.set(newValue); }
		private __editable: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(GridColumn, this, "editable", false, internal.PrimitiveTypeEnum.Boolean);
		public get editable(): boolean { return this.__editable.get(); }
		public set editable(newValue: boolean) { this.__editable.set(newValue); }
		private __width: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(GridColumn, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
		public get width(): number { return this.__width.get(); }
		public set width(newValue: number) { this.__width.set(newValue); }
		private __class: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(GridColumn, this, "class", "", internal.PrimitiveTypeEnum.String);
		public get class(): string { return this.__class.get(); }
		public set class(newValue: string) { this.__class.set(newValue); }
		private __style: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(GridColumn, this, "style", "", internal.PrimitiveTypeEnum.String);
		public get style(): string { return this.__style.get(); }
		public set style(newValue: string) { this.__style.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new GridColumn() cannot be invoked directly, please use 'model.pages.createGridColumn()'"
				);
			}
		}

		/**
		 * Creates and returns a new GridColumn instance in the SDK and on the server.
		 * The new GridColumn will be automatically stored in the 'columns' property
		 * of the parent ColumnGrid element passed as argument.
		 */
		public static createIn(container: ColumnGrid): GridColumn {
			return internal.instancehelpers.createElement(container, GridColumn, "columns", true);
		}

		/**
		 * Creates and returns a new GridColumn instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): GridColumn {
			return internal.instancehelpers.createElement(model, GridColumn);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.aggregateCaption = texts.Text.create(this.model);
			this.aggregateFunction = AggregateFunction.None;
			this.caption = ((text:texts.Text) => {
				text.translations.replace([ ((translation:texts.Translation) => {
					translation.languageCode = "en_US";
					translation.text = "Column";
					return translation;
				})(texts.Translation.create(this.model)) ]);
				return text;
			})(texts.Text.create(this.model));
			this.formattingInfo = FormattingInfo.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/control-bar relevant section in reference guide}
	 */
	export interface IGridControlBar extends IControlBar {
		model: IModel;
		containerAsGrid: IGrid;
		load(): GridControlBar;
		load(callback: (element: GridControlBar) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/control-bar relevant section in reference guide}
	 */
	export class GridControlBar extends ControlBar implements IGridControlBar {
		public static typeName: string = "Pages$GridControlBar";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"searchButton" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsGrid() { return super.getContainerAs<Grid>(Grid); }

		private __searchButton: internal.PartProperty<GridSearchButton> =
			new internal.PartProperty<GridSearchButton>(GridControlBar, this, "searchButton", null, true);
		public get searchButton(): GridSearchButton { return this.__searchButton.get(); }
		public set searchButton(newValue: GridSearchButton) { this.__searchButton.set(newValue); }
		private __defaultButton: internal.ByIdReferenceProperty<ControlBarItem> =
			new internal.ByIdReferenceProperty<ControlBarItem>(GridControlBar, this, "defaultButton", null);
		public get defaultButton(): ControlBarItem { return this.__defaultButton.get(); }
		public set defaultButton(newValue: ControlBarItem) { this.__defaultButton.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new GridControlBar() cannot be invoked directly, please use 'model.pages.createGridControlBar()'"
				);
			}
		}

		/**
		 * Creates and returns a new GridControlBar instance in the SDK and on the server.
		 * The new GridControlBar will be automatically stored in the 'controlBar' property
		 * of the parent Grid element passed as argument.
		 */
		public static createIn(container: Grid): GridControlBar {
			return internal.instancehelpers.createElement(container, GridControlBar, "controlBar", false);
		}

		/**
		 * Creates and returns a new GridControlBar instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): GridControlBar {
			return internal.instancehelpers.createElement(model, GridControlBar);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.searchButton = GridSearchButton.create(this.model);
		}

	}

	export interface IGridDatabaseSource extends IDatabaseSourceBase {
		model: IModel;
		containerAsEntityWidget: IEntityWidget;
		load(): GridDatabaseSource;
		load(callback: (element: GridDatabaseSource) => void, forceRefresh?: boolean);
	}

	export class GridDatabaseSource extends DatabaseSourceBase implements IGridDatabaseSource {
		public static typeName: string = "Pages$GridDatabaseSource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"searchBar" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsEntityWidget() { return super.getContainerAs<EntityWidget>(EntityWidget); }

		private __searchBar: internal.PartProperty<SearchBar> =
			new internal.PartProperty<SearchBar>(GridDatabaseSource, this, "searchBar", null, true);
		public get searchBar(): SearchBar { return this.__searchBar.get(); }
		public set searchBar(newValue: SearchBar) { this.__searchBar.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new GridDatabaseSource() cannot be invoked directly, please use 'model.pages.createGridDatabaseSource()'"
				);
			}
		}

		/**
		 * Creates and returns a new GridDatabaseSource instance in the SDK and on the server.
		 * The new GridDatabaseSource will be automatically stored in the 'dataSource' property
		 * of the parent EntityWidget element passed as argument.
		 */
		public static createIn(container: EntityWidget): GridDatabaseSource {
			return internal.instancehelpers.createElement(container, GridDatabaseSource, "dataSource", false);
		}

		/**
		 * Creates and returns a new GridDatabaseSource instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): GridDatabaseSource {
			return internal.instancehelpers.createElement(model, GridDatabaseSource);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.searchBar = SearchBar.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/delete-button relevant section in reference guide}
	 */
	export interface IGridDeleteButton extends IGridControlBarButton {
		model: IModel;
		containerAsControlBar: IControlBar;
		load(): GridDeleteButton;
		load(callback: (element: GridDeleteButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/delete-button relevant section in reference guide}
	 */
	export class GridDeleteButton extends GridControlBarButton implements IGridDeleteButton {
		public static typeName: string = "Pages$GridDeleteButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new GridDeleteButton() cannot be invoked directly, please use 'model.pages.createGridDeleteButton()'"
				);
			}
		}

		/**
		 * Creates and returns a new GridDeleteButton instance in the SDK and on the server.
		 * The new GridDeleteButton will be automatically stored in the 'items' property
		 * of the parent ControlBar element passed as argument.
		 */
		public static createIn(container: ControlBar): GridDeleteButton {
			return internal.instancehelpers.createElement(container, GridDeleteButton, "items", true);
		}

		/**
		 * Creates and returns a new GridDeleteButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): GridDeleteButton {
			return internal.instancehelpers.createElement(model, GridDeleteButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Delete";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Verwijderen";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/deselect-all-button relevant section in reference guide}
	 */
	export interface IGridDeselectAllButton extends IGridControlBarButton {
		model: IModel;
		containerAsControlBar: IControlBar;
		load(): GridDeselectAllButton;
		load(callback: (element: GridDeselectAllButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/deselect-all-button relevant section in reference guide}
	 */
	export class GridDeselectAllButton extends GridControlBarButton implements IGridDeselectAllButton {
		public static typeName: string = "Pages$GridDeselectAllButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new GridDeselectAllButton() cannot be invoked directly, please use 'model.pages.createGridDeselectAllButton()'"
				);
			}
		}

		/**
		 * Creates and returns a new GridDeselectAllButton instance in the SDK and on the server.
		 * The new GridDeselectAllButton will be automatically stored in the 'items' property
		 * of the parent ControlBar element passed as argument.
		 */
		public static createIn(container: ControlBar): GridDeselectAllButton {
			return internal.instancehelpers.createElement(container, GridDeselectAllButton, "items", true);
		}

		/**
		 * Creates and returns a new GridDeselectAllButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): GridDeselectAllButton {
			return internal.instancehelpers.createElement(model, GridDeselectAllButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Deselect all";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Alles deselecteren";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/edit-button relevant section in reference guide}
	 */
	export interface IGridEditButton extends IGridControlBarButton {
		model: IModel;
		containerAsControlBar: IControlBar;
		load(): GridEditButton;
		load(callback: (element: GridEditButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/edit-button relevant section in reference guide}
	 */
	export class GridEditButton extends GridControlBarButton implements IGridEditButton {
		public static typeName: string = "Pages$GridEditButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"pageSettings" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }

		private __pageSettings: internal.PartProperty<PageSettings> =
			new internal.PartProperty<PageSettings>(GridEditButton, this, "pageSettings", null, true);
		public get pageSettings(): PageSettings { return this.__pageSettings.get(); }
		public set pageSettings(newValue: PageSettings) { this.__pageSettings.set(newValue); }
		private __pagesForSpecializations: internal.PartListProperty<PageForSpecialization> =
			new internal.PartListProperty<PageForSpecialization>(GridEditButton, this, "pagesForSpecializations", []);
		public get pagesForSpecializations(): internal.IList<PageForSpecialization> { return this.__pagesForSpecializations.get(); }
		public set pagesForSpecializations(newValue: internal.IList<PageForSpecialization>) { this.__pagesForSpecializations.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new GridEditButton() cannot be invoked directly, please use 'model.pages.createGridEditButton()'"
				);
			}
		}

		/**
		 * Creates and returns a new GridEditButton instance in the SDK and on the server.
		 * The new GridEditButton will be automatically stored in the 'items' property
		 * of the parent ControlBar element passed as argument.
		 */
		public static createIn(container: ControlBar): GridEditButton {
			return internal.instancehelpers.createElement(container, GridEditButton, "items", true);
		}

		/**
		 * Creates and returns a new GridEditButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): GridEditButton {
			return internal.instancehelpers.createElement(model, GridEditButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Edit";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Bewerken";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
			this.pageSettings = PageSettings.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/grid-new-button relevant section in reference guide}
	 */
	export interface IGridNewButton extends IGridControlBarButton {
		model: IModel;
		containerAsControlBar: IControlBar;
		load(): GridNewButton;
		load(callback: (element: GridNewButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/grid-new-button relevant section in reference guide}
	 */
	export class GridNewButton extends GridControlBarButton implements IGridNewButton {
		public static typeName: string = "Pages$GridNewButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"pageSettings" : {
					"required" : {
						"currentValue" : true
					}
				},
				"isPersistent" : {
					"deprecated" : "6.0.0",
					"deprecationMessage" : "Persistent 'New' buttons are not supported in Mendix 6.",
					"deleted" : "6.2.0",
					"deletionMessage" : null
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }

		private __entity: internal.ByNameReferenceProperty<domainmodels.IEntity> =
			new internal.ByNameReferenceProperty<domainmodels.IEntity>(GridNewButton, this, "entity", null, "DomainModels$Entity");
		public get entity(): domainmodels.IEntity { return this.__entity.get(); }
		public set entity(newValue: domainmodels.IEntity) { this.__entity.set(newValue); }
		get entityQualifiedName(): string { return this.__entity.qualifiedName(); }
		private __editLocation: internal.EnumProperty<NewButtonEditLocation> =
			new internal.EnumProperty<NewButtonEditLocation>(GridNewButton, this, "editLocation", NewButtonEditLocation.Form, NewButtonEditLocation);
		public get editLocation(): NewButtonEditLocation { return this.__editLocation.get(); }
		public set editLocation(newValue: NewButtonEditLocation) { this.__editLocation.set(newValue); }
		private __pageSettings: internal.PartProperty<PageSettings> =
			new internal.PartProperty<PageSettings>(GridNewButton, this, "pageSettings", null, true);
		public get pageSettings(): PageSettings { return this.__pageSettings.get(); }
		public set pageSettings(newValue: PageSettings) { this.__pageSettings.set(newValue); }
		private __isPersistent: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(GridNewButton, this, "isPersistent", false, internal.PrimitiveTypeEnum.Boolean);
		/**
		 * In version 6.2.0: deleted
		 * In version 6.0.0: deprecated
		 */
		public get isPersistent(): boolean { return this.__isPersistent.get(); }
		public set isPersistent(newValue: boolean) { this.__isPersistent.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new GridNewButton() cannot be invoked directly, please use 'model.pages.createGridNewButton()'"
				);
			}
		}

		/**
		 * Creates and returns a new GridNewButton instance in the SDK and on the server.
		 * The new GridNewButton will be automatically stored in the 'items' property
		 * of the parent ControlBar element passed as argument.
		 */
		public static createIn(container: ControlBar): GridNewButton {
			return internal.instancehelpers.createElement(container, GridNewButton, "items", true);
		}

		/**
		 * Creates and returns a new GridNewButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): GridNewButton {
			return internal.instancehelpers.createElement(model, GridNewButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "New";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Nieuw";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
			this.editLocation = NewButtonEditLocation.Form;
			this.pageSettings = PageSettings.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/search-button relevant section in reference guide}
	 */
	export interface IGridSearchButton extends IGridControlBarButton {
		model: IModel;
		containerAsControlBar: IControlBar;
		containerAsGridControlBar: IGridControlBar;
		load(): GridSearchButton;
		load(callback: (element: GridSearchButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/search-button relevant section in reference guide}
	 */
	export class GridSearchButton extends GridControlBarButton implements IGridSearchButton {
		public static typeName: string = "Pages$GridSearchButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }
		get containerAsGridControlBar() { return super.getContainerAs<GridControlBar>(GridControlBar); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new GridSearchButton() cannot be invoked directly, please use 'model.pages.createGridSearchButton()'"
				);
			}
		}


		/**
		 * Creates and returns a new GridSearchButton instance in the SDK and on the server.
		 * The new GridSearchButton will be automatically stored in the 'items' property
		 * of the parent ControlBar element passed as argument.
		 */
		public static createInControlBarUnderItems(container: ControlBar): GridSearchButton {
			return internal.instancehelpers.createElement(container, GridSearchButton, "items", true);
		}

		/**
		 * Creates and returns a new GridSearchButton instance in the SDK and on the server.
		 * The new GridSearchButton will be automatically stored in the 'searchButton' property
		 * of the parent GridControlBar element passed as argument.
		 */
		public static createInGridControlBarUnderSearchButton(container: GridControlBar): GridSearchButton {
			return internal.instancehelpers.createElement(container, GridSearchButton, "searchButton", false);
		}

		/**
		 * Creates and returns a new GridSearchButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): GridSearchButton {
			return internal.instancehelpers.createElement(model, GridSearchButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Search";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Zoeken";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/select-all-button relevant section in reference guide}
	 */
	export interface IGridSelectAllButton extends IGridControlBarButton {
		model: IModel;
		containerAsControlBar: IControlBar;
		load(): GridSelectAllButton;
		load(callback: (element: GridSelectAllButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/select-all-button relevant section in reference guide}
	 */
	export class GridSelectAllButton extends GridControlBarButton implements IGridSelectAllButton {
		public static typeName: string = "Pages$GridSelectAllButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }

		private __selectionType: internal.EnumProperty<SelectionType> =
			new internal.EnumProperty<SelectionType>(GridSelectAllButton, this, "selectionType", SelectionType.SelectPage, SelectionType);
		public get selectionType(): SelectionType { return this.__selectionType.get(); }
		public set selectionType(newValue: SelectionType) { this.__selectionType.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new GridSelectAllButton() cannot be invoked directly, please use 'model.pages.createGridSelectAllButton()'"
				);
			}
		}

		/**
		 * Creates and returns a new GridSelectAllButton instance in the SDK and on the server.
		 * The new GridSelectAllButton will be automatically stored in the 'items' property
		 * of the parent ControlBar element passed as argument.
		 */
		public static createIn(container: ControlBar): GridSelectAllButton {
			return internal.instancehelpers.createElement(container, GridSelectAllButton, "items", true);
		}

		/**
		 * Creates and returns a new GridSelectAllButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): GridSelectAllButton {
			return internal.instancehelpers.createElement(model, GridSelectAllButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Select all";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Alles selecteren";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
			this.selectionType = SelectionType.SelectPage;
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/sort-bar relevant section in reference guide}
	 */
	export interface IGridSortBar extends internal.IElement {
		model: IModel;
		containerAsDropDownSearchField: IDropDownSearchField;
		containerAsSelectorDatabaseSource: ISelectorDatabaseSource;
		containerAsSelectorXPathSource: ISelectorXPathSource;
		containerAsSortableEntityPathSource: ISortableEntityPathSource;
		load(): GridSortBar;
		load(callback: (element: GridSortBar) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/sort-bar relevant section in reference guide}
	 */
	export class GridSortBar extends internal.Element implements IGridSortBar {
		public static typeName: string = "Pages$GridSortBar";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDropDownSearchField() { return super.getContainerAs<DropDownSearchField>(DropDownSearchField); }
		get containerAsSelectorDatabaseSource() { return super.getContainerAs<SelectorDatabaseSource>(SelectorDatabaseSource); }
		get containerAsSelectorXPathSource() { return super.getContainerAs<SelectorXPathSource>(SelectorXPathSource); }
		get containerAsSortableEntityPathSource() { return super.getContainerAs<SortableEntityPathSource>(SortableEntityPathSource); }

		private __sortItems: internal.PartListProperty<GridSortItem> =
			new internal.PartListProperty<GridSortItem>(GridSortBar, this, "sortItems", []);
		public get sortItems(): internal.IList<GridSortItem> { return this.__sortItems.get(); }
		public set sortItems(newValue: internal.IList<GridSortItem>) { this.__sortItems.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new GridSortBar() cannot be invoked directly, please use 'model.pages.createGridSortBar()'"
				);
			}
		}


		/**
		 * Creates and returns a new GridSortBar instance in the SDK and on the server.
		 * The new GridSortBar will be automatically stored in the 'sortBar' property
		 * of the parent DropDownSearchField element passed as argument.
		 */
		public static createInDropDownSearchFieldUnderSortBar(container: DropDownSearchField): GridSortBar {
			return internal.instancehelpers.createElement(container, GridSortBar, "sortBar", false);
		}

		/**
		 * Creates and returns a new GridSortBar instance in the SDK and on the server.
		 * The new GridSortBar will be automatically stored in the 'sortBar' property
		 * of the parent SelectorDatabaseSource element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInSelectorDatabaseSourceUnderSortBar(container: SelectorDatabaseSource): GridSortBar {
			internal.createInVersionCheck(container.model, GridSortBar.typeName,
				["6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, GridSortBar, "sortBar", false);
		}

		/**
		 * Creates and returns a new GridSortBar instance in the SDK and on the server.
		 * The new GridSortBar will be automatically stored in the 'sortBar' property
		 * of the parent SelectorXPathSource element passed as argument.
		 */
		public static createInSelectorXPathSourceUnderSortBar(container: SelectorXPathSource): GridSortBar {
			return internal.instancehelpers.createElement(container, GridSortBar, "sortBar", false);
		}

		/**
		 * Creates and returns a new GridSortBar instance in the SDK and on the server.
		 * The new GridSortBar will be automatically stored in the 'sortBar' property
		 * of the parent SortableEntityPathSource element passed as argument.
		 */
		public static createInSortableEntityPathSourceUnderSortBar(container: SortableEntityPathSource): GridSortBar {
			return internal.instancehelpers.createElement(container, GridSortBar, "sortBar", false);
		}

		/**
		 * Creates and returns a new GridSortBar instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): GridSortBar {
			return internal.instancehelpers.createElement(model, GridSortBar);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IGridSortItem extends internal.IElement {
		model: IModel;
		containerAsGridSortBar: IGridSortBar;
		load(): GridSortItem;
		load(callback: (element: GridSortItem) => void, forceRefresh?: boolean);
	}

	export class GridSortItem extends internal.Element implements IGridSortItem {
		public static typeName: string = "Pages$GridSortItem";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"attributePath" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsGridSortBar() { return super.getContainerAs<GridSortBar>(GridSortBar); }

		private __attributePath: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(GridSortItem, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type paths.AttributePath.
		 */
		public get attributePath(): string { return this.__attributePath.get(); }
		public set attributePath(newValue: string) { this.__attributePath.set(newValue); }
		private __sortDirection: internal.EnumProperty<SortDirection> =
			new internal.EnumProperty<SortDirection>(GridSortItem, this, "sortDirection", SortDirection.Ascending, SortDirection);
		public get sortDirection(): SortDirection { return this.__sortDirection.get(); }
		public set sortDirection(newValue: SortDirection) { this.__sortDirection.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new GridSortItem() cannot be invoked directly, please use 'model.pages.createGridSortItem()'"
				);
			}
		}

		/**
		 * Creates and returns a new GridSortItem instance in the SDK and on the server.
		 * The new GridSortItem will be automatically stored in the 'sortItems' property
		 * of the parent GridSortBar element passed as argument.
		 */
		public static createIn(container: GridSortBar): GridSortItem {
			return internal.instancehelpers.createElement(container, GridSortItem, "sortItems", true);
		}

		/**
		 * Creates and returns a new GridSortItem instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): GridSortItem {
			return internal.instancehelpers.createElement(model, GridSortItem);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.attributePath = "";
			this.sortDirection = SortDirection.Ascending;
		}

	}

	export interface IGridXPathSource extends IGridBaseSource {
		model: IModel;
		containerAsEntityWidget: IEntityWidget;
		load(): GridXPathSource;
		load(callback: (element: GridXPathSource) => void, forceRefresh?: boolean);
	}

	export class GridXPathSource extends GridBaseSource implements IGridXPathSource {
		public static typeName: string = "Pages$GridXPathSource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsEntityWidget() { return super.getContainerAs<EntityWidget>(EntityWidget); }

		private __xPathConstraint: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(GridXPathSource, this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
		 */
		public get xPathConstraint(): string { return this.__xPathConstraint.get(); }
		public set xPathConstraint(newValue: string) { this.__xPathConstraint.set(newValue); }
		private __applyContext: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(GridXPathSource, this, "applyContext", false, internal.PrimitiveTypeEnum.Boolean);
		public get applyContext(): boolean { return this.__applyContext.get(); }
		public set applyContext(newValue: boolean) { this.__applyContext.set(newValue); }
		private __removeAllFromContext: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(GridXPathSource, this, "removeAllFromContext", false, internal.PrimitiveTypeEnum.Boolean);
		public get removeAllFromContext(): boolean { return this.__removeAllFromContext.get(); }
		public set removeAllFromContext(newValue: boolean) { this.__removeAllFromContext.set(newValue); }
		private __removeFromContextIds: internal.ByNameReferenceListProperty<domainmodels.IEntity> =
			new internal.ByNameReferenceListProperty<domainmodels.IEntity>(GridXPathSource, this, "removeFromContextIds", [], "DomainModels$Entity");
		public get removeFromContextIds(): internal.IList<domainmodels.IEntity> { return this.__removeFromContextIds.get(); }
		public set removeFromContextIds(newValue: internal.IList<domainmodels.IEntity>) { this.__removeFromContextIds.set(newValue); }
		get removeFromContextIdsQualifiedNames(): string[] { return this.__removeFromContextIds.qualifiedNames(); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new GridXPathSource() cannot be invoked directly, please use 'model.pages.createGridXPathSource()'"
				);
			}
		}

		/**
		 * Creates and returns a new GridXPathSource instance in the SDK and on the server.
		 * The new GridXPathSource will be automatically stored in the 'dataSource' property
		 * of the parent EntityWidget element passed as argument.
		 */
		public static createIn(container: EntityWidget): GridXPathSource {
			return internal.instancehelpers.createElement(container, GridXPathSource, "dataSource", false);
		}

		/**
		 * Creates and returns a new GridXPathSource instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): GridXPathSource {
			return internal.instancehelpers.createElement(model, GridXPathSource);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/group-box relevant section in reference guide}
	 */
	export interface IGroupBox extends IConditionallyVisibleWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): GroupBox;
		load(callback: (element: GroupBox) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/group-box relevant section in reference guide}
	 */
	export class GroupBox extends ConditionallyVisibleWidget implements IGroupBox {
		public static typeName: string = "Pages$GroupBox";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __caption: internal.PartProperty<ClientTemplate> =
			new internal.PartProperty<ClientTemplate>(GroupBox, this, "caption", null, true);
		public get caption(): ClientTemplate { return this.__caption.get(); }
		public set caption(newValue: ClientTemplate) { this.__caption.set(newValue); }
		private __collapsible: internal.EnumProperty<GroupBoxCollapsible> =
			new internal.EnumProperty<GroupBoxCollapsible>(GroupBox, this, "collapsible", GroupBoxCollapsible.YesInitiallyExpanded, GroupBoxCollapsible);
		public get collapsible(): GroupBoxCollapsible { return this.__collapsible.get(); }
		public set collapsible(newValue: GroupBoxCollapsible) { this.__collapsible.set(newValue); }
		private __widget: internal.PartProperty<Widget> =
			new internal.PartProperty<Widget>(GroupBox, this, "widget", null, false);
		public get widget(): Widget { return this.__widget.get(); }
		public set widget(newValue: Widget) { this.__widget.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new GroupBox() cannot be invoked directly, please use 'model.pages.createGroupBox()'"
				);
			}
		}


		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): GroupBox {
			internal.createInVersionCheck(container.model, GroupBox.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, GroupBox, "footerWidget", false);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): GroupBox {
			return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): GroupBox {
			return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): GroupBox {
			return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): GroupBox {
			return internal.instancehelpers.createElement(container, GroupBox, "leftWidget", false);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): GroupBox {
			return internal.instancehelpers.createElement(container, GroupBox, "rightWidget", false);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): GroupBox {
			return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): GroupBox {
			return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): GroupBox {
			return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): GroupBox {
			return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): GroupBox {
			return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): GroupBox {
			return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): GroupBox {
			return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): GroupBox {
			return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): GroupBox {
			return internal.instancehelpers.createElement(container, GroupBox, "firstWidget", false);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): GroupBox {
			return internal.instancehelpers.createElement(container, GroupBox, "secondWidget", false);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): GroupBox {
			return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): GroupBox {
			return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): GroupBox {
			return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): GroupBox {
			return internal.instancehelpers.createElement(container, GroupBox, "widgets", true);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): GroupBox {
			internal.createInVersionCheck(container.model, GroupBox.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, GroupBox, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * The new GroupBox will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): GroupBox {
			internal.createInVersionCheck(container.model, GroupBox.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, GroupBox, "reportWidget", false);
		}

		/**
		 * Creates and returns a new GroupBox instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): GroupBox {
			return internal.instancehelpers.createElement(model, GroupBox);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Group box";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Group box";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
			this.collapsible = GroupBoxCollapsible.YesInitiallyExpanded;
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/header relevant section in reference guide}
	 */
	export interface IHeader extends IWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): Header;
		load(callback: (element: Header) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/header relevant section in reference guide}
	 */
	export class Header extends Widget implements IHeader {
		public static typeName: string = "Pages$Header";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __leftWidget: internal.PartProperty<Widget> =
			new internal.PartProperty<Widget>(Header, this, "leftWidget", null, false);
		public get leftWidget(): Widget { return this.__leftWidget.get(); }
		public set leftWidget(newValue: Widget) { this.__leftWidget.set(newValue); }
		private __rightWidget: internal.PartProperty<Widget> =
			new internal.PartProperty<Widget>(Header, this, "rightWidget", null, false);
		public get rightWidget(): Widget { return this.__rightWidget.get(); }
		public set rightWidget(newValue: Widget) { this.__rightWidget.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Header() cannot be invoked directly, please use 'model.pages.createHeader()'"
				);
			}
		}


		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): Header {
			internal.createInVersionCheck(container.model, Header.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, Header, "footerWidget", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): Header {
			return internal.instancehelpers.createElement(container, Header, "widget", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): Header {
			return internal.instancehelpers.createElement(container, Header, "widget", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): Header {
			return internal.instancehelpers.createElement(container, Header, "widget", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): Header {
			return internal.instancehelpers.createElement(container, Header, "leftWidget", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): Header {
			return internal.instancehelpers.createElement(container, Header, "rightWidget", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): Header {
			return internal.instancehelpers.createElement(container, Header, "widget", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): Header {
			return internal.instancehelpers.createElement(container, Header, "widget", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): Header {
			return internal.instancehelpers.createElement(container, Header, "widget", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): Header {
			return internal.instancehelpers.createElement(container, Header, "widget", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): Header {
			return internal.instancehelpers.createElement(container, Header, "widget", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): Header {
			return internal.instancehelpers.createElement(container, Header, "widget", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): Header {
			return internal.instancehelpers.createElement(container, Header, "widget", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): Header {
			return internal.instancehelpers.createElement(container, Header, "widget", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): Header {
			return internal.instancehelpers.createElement(container, Header, "firstWidget", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): Header {
			return internal.instancehelpers.createElement(container, Header, "secondWidget", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): Header {
			return internal.instancehelpers.createElement(container, Header, "widget", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): Header {
			return internal.instancehelpers.createElement(container, Header, "widget", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): Header {
			return internal.instancehelpers.createElement(container, Header, "widget", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): Header {
			return internal.instancehelpers.createElement(container, Header, "widgets", true);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): Header {
			internal.createInVersionCheck(container.model, Header.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, Header, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): Header {
			internal.createInVersionCheck(container.model, Header.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, Header, "reportWidget", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): Header {
			return internal.instancehelpers.createElement(model, Header);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface ISplitPane extends IWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): SplitPane;
		load(callback: (element: SplitPane) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class SplitPane extends Widget implements ISplitPane {
		public static typeName: string = "Pages$SplitPane";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __firstWidget: internal.PartProperty<Widget> =
			new internal.PartProperty<Widget>(SplitPane, this, "firstWidget", null, false);
		public get firstWidget(): Widget { return this.__firstWidget.get(); }
		public set firstWidget(newValue: Widget) { this.__firstWidget.set(newValue); }
		private __secondWidget: internal.PartProperty<Widget> =
			new internal.PartProperty<Widget>(SplitPane, this, "secondWidget", null, false);
		public get secondWidget(): Widget { return this.__secondWidget.get(); }
		public set secondWidget(newValue: Widget) { this.__secondWidget.set(newValue); }
		private __animatedResize: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(SplitPane, this, "animatedResize", false, internal.PrimitiveTypeEnum.Boolean);
		public get animatedResize(): boolean { return this.__animatedResize.get(); }
		public set animatedResize(newValue: boolean) { this.__animatedResize.set(newValue); }
		private __height: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(SplitPane, this, "height", 0, internal.PrimitiveTypeEnum.Integer);
		public get height(): number { return this.__height.get(); }
		public set height(newValue: number) { this.__height.set(newValue); }
		private __position: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(SplitPane, this, "position", 0, internal.PrimitiveTypeEnum.Integer);
		public get position(): number { return this.__position.get(); }
		public set position(newValue: number) { this.__position.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new SplitPane() cannot be invoked directly, please use 'model.pages.createSplitPane()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.position = 50;
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/horizontal-split-pane relevant section in reference guide}
	 */
	export interface IHorizontalSplitPane extends ISplitPane {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): HorizontalSplitPane;
		load(callback: (element: HorizontalSplitPane) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/horizontal-split-pane relevant section in reference guide}
	 */
	export class HorizontalSplitPane extends SplitPane implements IHorizontalSplitPane {
		public static typeName: string = "Pages$HorizontalSplitPane";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new HorizontalSplitPane() cannot be invoked directly, please use 'model.pages.createHorizontalSplitPane()'"
				);
			}
		}


		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): HorizontalSplitPane {
			internal.createInVersionCheck(container.model, HorizontalSplitPane.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "footerWidget", false);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): HorizontalSplitPane {
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): HorizontalSplitPane {
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): HorizontalSplitPane {
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): HorizontalSplitPane {
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "leftWidget", false);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): HorizontalSplitPane {
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "rightWidget", false);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): HorizontalSplitPane {
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): HorizontalSplitPane {
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): HorizontalSplitPane {
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): HorizontalSplitPane {
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): HorizontalSplitPane {
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): HorizontalSplitPane {
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): HorizontalSplitPane {
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): HorizontalSplitPane {
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): HorizontalSplitPane {
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "firstWidget", false);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): HorizontalSplitPane {
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "secondWidget", false);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): HorizontalSplitPane {
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): HorizontalSplitPane {
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): HorizontalSplitPane {
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): HorizontalSplitPane {
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widgets", true);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): HorizontalSplitPane {
			internal.createInVersionCheck(container.model, HorizontalSplitPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * The new HorizontalSplitPane will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): HorizontalSplitPane {
			internal.createInVersionCheck(container.model, HorizontalSplitPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, HorizontalSplitPane, "reportWidget", false);
		}

		/**
		 * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): HorizontalSplitPane {
			return internal.instancehelpers.createElement(model, HorizontalSplitPane);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IImageIcon extends IIcon {
		model: IModel;
		containerAsMenuItem: menus.IMenuItem;
		containerAsButton: IButton;
		containerAsControlBarButton: IControlBarButton;
		load(): ImageIcon;
		load(callback: (element: ImageIcon) => void, forceRefresh?: boolean);
	}

	export class ImageIcon extends Icon implements IImageIcon {
		public static typeName: string = "Pages$ImageIcon";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"image" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsMenuItem() { return super.getContainerAs<menus.MenuItem>(menus.MenuItem); }
		get containerAsButton() { return super.getContainerAs<Button>(Button); }
		get containerAsControlBarButton() { return super.getContainerAs<ControlBarButton>(ControlBarButton); }

		private __image: internal.ByNameReferenceProperty<images.IImage> =
			new internal.ByNameReferenceProperty<images.IImage>(ImageIcon, this, "image", null, "Images$Image");
		public get image(): images.IImage { return this.__image.get(); }
		public set image(newValue: images.IImage) { this.__image.set(newValue); }
		get imageQualifiedName(): string { return this.__image.qualifiedName(); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ImageIcon() cannot be invoked directly, please use 'model.pages.createImageIcon()'"
				);
			}
		}


		/**
		 * Creates and returns a new ImageIcon instance in the SDK and on the server.
		 * The new ImageIcon will be automatically stored in the 'icon' property
		 * of the parent menus.MenuItem element passed as argument.
		 */
		public static createInMenuItemUnderIcon(container: menus.MenuItem): ImageIcon {
			return internal.instancehelpers.createElement(container, ImageIcon, "icon", false);
		}

		/**
		 * Creates and returns a new ImageIcon instance in the SDK and on the server.
		 * The new ImageIcon will be automatically stored in the 'icon' property
		 * of the parent Button element passed as argument.
		 */
		public static createInButtonUnderIcon(container: Button): ImageIcon {
			return internal.instancehelpers.createElement(container, ImageIcon, "icon", false);
		}

		/**
		 * Creates and returns a new ImageIcon instance in the SDK and on the server.
		 * The new ImageIcon will be automatically stored in the 'icon' property
		 * of the parent ControlBarButton element passed as argument.
		 */
		public static createInControlBarButtonUnderIcon(container: ControlBarButton): ImageIcon {
			return internal.instancehelpers.createElement(container, ImageIcon, "icon", false);
		}

		/**
		 * Creates and returns a new ImageIcon instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ImageIcon {
			return internal.instancehelpers.createElement(model, ImageIcon);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/image-uploader relevant section in reference guide}
	 */
	export interface IImageUploader extends IInputWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): ImageUploader;
		load(callback: (element: ImageUploader) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/image-uploader relevant section in reference guide}
	 */
	export class ImageUploader extends InputWidget implements IImageUploader {
		public static typeName: string = "Pages$ImageUploader";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __allowedExtensions: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ImageUploader, this, "allowedExtensions", "", internal.PrimitiveTypeEnum.String);
		public get allowedExtensions(): string { return this.__allowedExtensions.get(); }
		public set allowedExtensions(newValue: string) { this.__allowedExtensions.set(newValue); }
		private __thumbnailSize: internal.PrimitiveProperty<common.ISize> =
			new internal.PrimitiveProperty<common.ISize>(ImageUploader, this, "thumbnailSize", { width: 0, height: 0 }, internal.PrimitiveTypeEnum.Size);
		public get thumbnailSize(): common.ISize { return this.__thumbnailSize.get(); }
		public set thumbnailSize(newValue: common.ISize) { this.__thumbnailSize.set(newValue); }
		private __maxFileSize: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(ImageUploader, this, "maxFileSize", 0, internal.PrimitiveTypeEnum.Integer);
		public get maxFileSize(): number { return this.__maxFileSize.get(); }
		public set maxFileSize(newValue: number) { this.__maxFileSize.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ImageUploader() cannot be invoked directly, please use 'model.pages.createImageUploader()'"
				);
			}
		}


		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): ImageUploader {
			internal.createInVersionCheck(container.model, ImageUploader.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, ImageUploader, "footerWidget", false);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): ImageUploader {
			return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): ImageUploader {
			return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): ImageUploader {
			return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): ImageUploader {
			return internal.instancehelpers.createElement(container, ImageUploader, "leftWidget", false);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): ImageUploader {
			return internal.instancehelpers.createElement(container, ImageUploader, "rightWidget", false);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): ImageUploader {
			return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ImageUploader {
			return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ImageUploader {
			return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): ImageUploader {
			return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): ImageUploader {
			return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): ImageUploader {
			return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ImageUploader {
			return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): ImageUploader {
			return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): ImageUploader {
			return internal.instancehelpers.createElement(container, ImageUploader, "firstWidget", false);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): ImageUploader {
			return internal.instancehelpers.createElement(container, ImageUploader, "secondWidget", false);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): ImageUploader {
			return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): ImageUploader {
			return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ImageUploader {
			return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): ImageUploader {
			return internal.instancehelpers.createElement(container, ImageUploader, "widgets", true);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): ImageUploader {
			internal.createInVersionCheck(container.model, ImageUploader.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ImageUploader, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * The new ImageUploader will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): ImageUploader {
			internal.createInVersionCheck(container.model, ImageUploader.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ImageUploader, "reportWidget", false);
		}

		/**
		 * Creates and returns a new ImageUploader instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ImageUploader {
			return internal.instancehelpers.createElement(model, ImageUploader);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.label = ((text:texts.Text) => {
				text.translations.replace([ ((translation:texts.Translation) => {
					translation.languageCode = "en_US";
					translation.text = "Upload image";
					return translation;
				})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
					translation.languageCode = "nl_NL";
					translation.text = "Upload afbeelding";
					return translation;
				})(texts.Translation.create(this.model)) ]);
				return text;
			})(texts.Text.create(this.model));
			this.maxFileSize = 5;
			this.thumbnailSize = { width: 100, height: 75 };
		}

	}

	export interface IImageViewerSource extends IEntityPathSource {
		model: IModel;
		containerAsEntityWidget: IEntityWidget;
		load(): ImageViewerSource;
		load(callback: (element: ImageViewerSource) => void, forceRefresh?: boolean);
	}

	export class ImageViewerSource extends EntityPathSource implements IImageViewerSource {
		public static typeName: string = "Pages$ImageViewerSource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsEntityWidget() { return super.getContainerAs<EntityWidget>(EntityWidget); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ImageViewerSource() cannot be invoked directly, please use 'model.pages.createImageViewerSource()'"
				);
			}
		}

		/**
		 * Creates and returns a new ImageViewerSource instance in the SDK and on the server.
		 * The new ImageViewerSource will be automatically stored in the 'dataSource' property
		 * of the parent EntityWidget element passed as argument.
		 */
		public static createIn(container: EntityWidget): ImageViewerSource {
			return internal.instancehelpers.createElement(container, ImageViewerSource, "dataSource", false);
		}

		/**
		 * Creates and returns a new ImageViewerSource instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ImageViewerSource {
			return internal.instancehelpers.createElement(model, ImageViewerSource);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/input-reference-set-selector relevant section in reference guide}
	 */
	export interface IInputReferenceSetSelector extends IAssociationWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): InputReferenceSetSelector;
		load(callback: (element: InputReferenceSetSelector) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/input-reference-set-selector relevant section in reference guide}
	 */
	export class InputReferenceSetSelector extends AssociationWidget implements IInputReferenceSetSelector {
		public static typeName: string = "Pages$InputReferenceSetSelector";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new InputReferenceSetSelector() cannot be invoked directly, please use 'model.pages.createInputReferenceSetSelector()'"
				);
			}
		}


		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): InputReferenceSetSelector {
			internal.createInVersionCheck(container.model, InputReferenceSetSelector.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "footerWidget", false);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): InputReferenceSetSelector {
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): InputReferenceSetSelector {
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): InputReferenceSetSelector {
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): InputReferenceSetSelector {
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "leftWidget", false);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): InputReferenceSetSelector {
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "rightWidget", false);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): InputReferenceSetSelector {
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): InputReferenceSetSelector {
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): InputReferenceSetSelector {
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): InputReferenceSetSelector {
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): InputReferenceSetSelector {
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): InputReferenceSetSelector {
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): InputReferenceSetSelector {
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): InputReferenceSetSelector {
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): InputReferenceSetSelector {
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "firstWidget", false);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): InputReferenceSetSelector {
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "secondWidget", false);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): InputReferenceSetSelector {
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): InputReferenceSetSelector {
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): InputReferenceSetSelector {
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): InputReferenceSetSelector {
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widgets", true);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): InputReferenceSetSelector {
			internal.createInVersionCheck(container.model, InputReferenceSetSelector.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * The new InputReferenceSetSelector will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): InputReferenceSetSelector {
			internal.createInVersionCheck(container.model, InputReferenceSetSelector.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "reportWidget", false);
		}

		/**
		 * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): InputReferenceSetSelector {
			return internal.instancehelpers.createElement(model, InputReferenceSetSelector);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/label relevant section in reference guide}
	 */
	export interface ILabel extends IConditionallyVisibleWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): Label;
		load(callback: (element: Label) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/label relevant section in reference guide}
	 */
	export class Label extends ConditionallyVisibleWidget implements ILabel {
		public static typeName: string = "Pages$Label";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"caption" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __caption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(Label, this, "caption", null, true);
		public get caption(): texts.Text { return this.__caption.get(); }
		public set caption(newValue: texts.Text) { this.__caption.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Label() cannot be invoked directly, please use 'model.pages.createLabel()'"
				);
			}
		}


		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): Label {
			internal.createInVersionCheck(container.model, Label.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, Label, "footerWidget", false);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): Label {
			return internal.instancehelpers.createElement(container, Label, "widget", false);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): Label {
			return internal.instancehelpers.createElement(container, Label, "widget", false);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): Label {
			return internal.instancehelpers.createElement(container, Label, "widget", false);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): Label {
			return internal.instancehelpers.createElement(container, Label, "leftWidget", false);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): Label {
			return internal.instancehelpers.createElement(container, Label, "rightWidget", false);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): Label {
			return internal.instancehelpers.createElement(container, Label, "widget", false);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): Label {
			return internal.instancehelpers.createElement(container, Label, "widget", false);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): Label {
			return internal.instancehelpers.createElement(container, Label, "widget", false);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): Label {
			return internal.instancehelpers.createElement(container, Label, "widget", false);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): Label {
			return internal.instancehelpers.createElement(container, Label, "widget", false);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): Label {
			return internal.instancehelpers.createElement(container, Label, "widget", false);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): Label {
			return internal.instancehelpers.createElement(container, Label, "widget", false);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): Label {
			return internal.instancehelpers.createElement(container, Label, "widget", false);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): Label {
			return internal.instancehelpers.createElement(container, Label, "firstWidget", false);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): Label {
			return internal.instancehelpers.createElement(container, Label, "secondWidget", false);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): Label {
			return internal.instancehelpers.createElement(container, Label, "widget", false);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): Label {
			return internal.instancehelpers.createElement(container, Label, "widget", false);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): Label {
			return internal.instancehelpers.createElement(container, Label, "widget", false);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): Label {
			return internal.instancehelpers.createElement(container, Label, "widgets", true);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): Label {
			internal.createInVersionCheck(container.model, Label.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, Label, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * The new Label will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): Label {
			internal.createInVersionCheck(container.model, Label.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, Label, "reportWidget", false);
		}

		/**
		 * Creates and returns a new Label instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): Label {
			return internal.instancehelpers.createElement(model, Label);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((text:texts.Text) => {
				text.translations.replace([ ((translation:texts.Translation) => {
					translation.languageCode = "en_US";
					translation.text = "Label";
					return translation;
				})(texts.Translation.create(this.model)) ]);
				return text;
			})(texts.Text.create(this.model));
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/layout relevant section in reference guide}
	 */
	export interface ILayout extends IFormBase {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		/**
		 * In version 6.8.0: added public
		 */
		layoutType: LayoutType;
		load(): Layout;
		load(callback: (element: Layout) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/layout relevant section in reference guide}
	 */
	export class Layout extends FormBase implements ILayout {
		public static typeName: string = "Pages$Layout";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"layoutCall" : {
					"required" : {
						"currentValue" : false,
						"changedIn" : [
							"6.8.0"
						]
					}
				},
				"layoutType" : {
					"public" : {
						"currentValue" : true,
						"changedIn" : [
							"6.8.0"
						]
					}
				},
				"mainPlaceholder" : {
					"deleted" : "6.8.0",
					"deletionMessage" : null
				},
				"acceptButtonPlaceholder" : {
					"deleted" : "6.8.0",
					"deletionMessage" : null
				},
				"cancelButtonPlaceholder" : {
					"deleted" : "6.8.0",
					"deletionMessage" : null
				},
				"mainPlaceholderName" : {
					"introduced" : "6.8.0"
				},
				"acceptPlaceholderName" : {
					"introduced" : "6.8.0"
				},
				"cancelPlaceholderName" : {
					"introduced" : "6.8.0"
				}
			}
		}, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }

		private __widget: internal.PartProperty<Widget> =
			new internal.PartProperty<Widget>(Layout, this, "widget", null, false);
		public get widget(): Widget { return this.__widget.get(); }
		public set widget(newValue: Widget) { this.__widget.set(newValue); }
		private __layoutCall: internal.PartProperty<LayoutCall> =
			new internal.PartProperty<LayoutCall>(Layout, this, "layoutCall", null, false);
		/**
		 * In version 6.8.0: added optional
		 */
		public get layoutCall(): LayoutCall { return this.__layoutCall.get(); }
		public set layoutCall(newValue: LayoutCall) { this.__layoutCall.set(newValue); }
		private __layoutType: internal.EnumProperty<LayoutType> =
			new internal.EnumProperty<LayoutType>(Layout, this, "layoutType", LayoutType.Responsive, LayoutType);
		/**
		 * In version 6.8.0: added public
		 */
		public get layoutType(): LayoutType { return this.__layoutType.get(); }
		public set layoutType(newValue: LayoutType) { this.__layoutType.set(newValue); }
		private __mainPlaceholder: internal.ByNameReferenceProperty<ILayoutParameter> =
			new internal.ByNameReferenceProperty<ILayoutParameter>(Layout, this, "mainPlaceholder", null, "Pages$LayoutParameter");
		/**
		 * In version 6.8.0: deleted
		 */
		public get mainPlaceholder(): ILayoutParameter { return this.__mainPlaceholder.get(); }
		public set mainPlaceholder(newValue: ILayoutParameter) { this.__mainPlaceholder.set(newValue); }
		get mainPlaceholderQualifiedName(): string { return this.__mainPlaceholder.qualifiedName(); }
		private __acceptButtonPlaceholder: internal.ByNameReferenceProperty<ILayoutParameter> =
			new internal.ByNameReferenceProperty<ILayoutParameter>(Layout, this, "acceptButtonPlaceholder", null, "Pages$LayoutParameter");
		/**
		 * In version 6.8.0: deleted
		 */
		public get acceptButtonPlaceholder(): ILayoutParameter { return this.__acceptButtonPlaceholder.get(); }
		public set acceptButtonPlaceholder(newValue: ILayoutParameter) { this.__acceptButtonPlaceholder.set(newValue); }
		get acceptButtonPlaceholderQualifiedName(): string { return this.__acceptButtonPlaceholder.qualifiedName(); }
		private __cancelButtonPlaceholder: internal.ByNameReferenceProperty<ILayoutParameter> =
			new internal.ByNameReferenceProperty<ILayoutParameter>(Layout, this, "cancelButtonPlaceholder", null, "Pages$LayoutParameter");
		/**
		 * In version 6.8.0: deleted
		 */
		public get cancelButtonPlaceholder(): ILayoutParameter { return this.__cancelButtonPlaceholder.get(); }
		public set cancelButtonPlaceholder(newValue: ILayoutParameter) { this.__cancelButtonPlaceholder.set(newValue); }
		get cancelButtonPlaceholderQualifiedName(): string { return this.__cancelButtonPlaceholder.qualifiedName(); }
		private __mainPlaceholderName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Layout, this, "mainPlaceholderName", "", internal.PrimitiveTypeEnum.String);
		/**
		 * In version 6.8.0: introduced
		 */
		public get mainPlaceholderName(): string { return this.__mainPlaceholderName.get(); }
		public set mainPlaceholderName(newValue: string) { this.__mainPlaceholderName.set(newValue); }
		private __acceptPlaceholderName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Layout, this, "acceptPlaceholderName", "", internal.PrimitiveTypeEnum.String);
		/**
		 * In version 6.8.0: introduced
		 */
		public get acceptPlaceholderName(): string { return this.__acceptPlaceholderName.get(); }
		public set acceptPlaceholderName(newValue: string) { this.__acceptPlaceholderName.set(newValue); }
		private __cancelPlaceholderName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Layout, this, "cancelPlaceholderName", "", internal.PrimitiveTypeEnum.String);
		/**
		 * In version 6.8.0: introduced
		 */
		public get cancelPlaceholderName(): string { return this.__cancelPlaceholderName.get(); }
		public set cancelPlaceholderName(newValue: string) { this.__cancelPlaceholderName.set(newValue); }
		private __useMainPlaceholderForPopups: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(Layout, this, "useMainPlaceholderForPopups", false, internal.PrimitiveTypeEnum.Boolean);
		public get useMainPlaceholderForPopups(): boolean { return this.__useMainPlaceholderForPopups.get(); }
		public set useMainPlaceholderForPopups(newValue: boolean) { this.__useMainPlaceholderForPopups.set(newValue); }
		private __class: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Layout, this, "class", "", internal.PrimitiveTypeEnum.String);
		public get class(): string { return this.__class.get(); }
		public set class(newValue: string) { this.__class.set(newValue); }
		private __style: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Layout, this, "style", "", internal.PrimitiveTypeEnum.String);
		public get style(): string { return this.__style.get(); }
		public set style(newValue: string) { this.__style.set(newValue); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "documents";
		}

		/**
		 * Creates a new Layout unit in the SDK and on the server.
		 * Expects one argument, the projects.IFolderBase in which this unit is contained.
		 */
		public static createIn(container: projects.IFolderBase): Layout {
			return internal.instancehelpers.createUnit(container, Layout);
		}

		_isByNameReferrable() { return true; }

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.layoutCall = LayoutCall.create(this.model);
			this.layoutType = LayoutType.Responsive;
		}

	}

	export interface ILayoutCall extends internal.IElement {
		model: IModel;
		containerAsLayout: ILayout;
		containerAsPage: IPage;
		load(): LayoutCall;
		load(callback: (element: LayoutCall) => void, forceRefresh?: boolean);
	}

	export class LayoutCall extends internal.Element implements ILayoutCall {
		public static typeName: string = "Pages$LayoutCall";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsPage() { return super.getContainerAs<Page>(Page); }

		private __layout: internal.ByNameReferenceProperty<ILayout> =
			new internal.ByNameReferenceProperty<ILayout>(LayoutCall, this, "layout", null, "Pages$Layout");
		public get layout(): ILayout { return this.__layout.get(); }
		public set layout(newValue: ILayout) { this.__layout.set(newValue); }
		get layoutQualifiedName(): string { return this.__layout.qualifiedName(); }
		private __arguments: internal.PartListProperty<LayoutCallArgument> =
			new internal.PartListProperty<LayoutCallArgument>(LayoutCall, this, "arguments", []);
		public get arguments(): internal.IList<LayoutCallArgument> { return this.__arguments.get(); }
		public set arguments(newValue: internal.IList<LayoutCallArgument>) { this.__arguments.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new LayoutCall() cannot be invoked directly, please use 'model.pages.createLayoutCall()'"
				);
			}
		}


		/**
		 * Creates and returns a new LayoutCall instance in the SDK and on the server.
		 * The new LayoutCall will be automatically stored in the 'layoutCall' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderLayoutCall(container: Layout): LayoutCall {
			return internal.instancehelpers.createElement(container, LayoutCall, "layoutCall", false);
		}

		/**
		 * Creates and returns a new LayoutCall instance in the SDK and on the server.
		 * The new LayoutCall will be automatically stored in the 'layoutCall' property
		 * of the parent Page element passed as argument.
		 */
		public static createInPageUnderLayoutCall(container: Page): LayoutCall {
			return internal.instancehelpers.createElement(container, LayoutCall, "layoutCall", false);
		}

		/**
		 * Creates and returns a new LayoutCall instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): LayoutCall {
			return internal.instancehelpers.createElement(model, LayoutCall);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface ILayoutCallArgument extends internal.IElement {
		model: IModel;
		containerAsLayoutCall: ILayoutCall;
		load(): LayoutCallArgument;
		load(callback: (element: LayoutCallArgument) => void, forceRefresh?: boolean);
	}

	export class LayoutCallArgument extends internal.Element implements ILayoutCallArgument {
		public static typeName: string = "Pages$LayoutCallArgument";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"parameterName" : {
					"deleted" : "6.8.0",
					"deletionMessage" : null
				},
				"parameter" : {
					"introduced" : "6.8.0",
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsLayoutCall() { return super.getContainerAs<LayoutCall>(LayoutCall); }

		private __parameterName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(LayoutCallArgument, this, "parameterName", "", internal.PrimitiveTypeEnum.String);
		/**
		 * In version 6.8.0: deleted
		 */
		public get parameterName(): string { return this.__parameterName.get(); }
		public set parameterName(newValue: string) { this.__parameterName.set(newValue); }
		private __parameter: internal.ByNameReferenceProperty<ILayoutParameter> =
			new internal.ByNameReferenceProperty<ILayoutParameter>(LayoutCallArgument, this, "parameter", null, "Pages$LayoutParameter");
		/**
		 * In version 6.8.0: introduced
		 */
		public get parameter(): ILayoutParameter { return this.__parameter.get(); }
		public set parameter(newValue: ILayoutParameter) { this.__parameter.set(newValue); }
		get parameterQualifiedName(): string { return this.__parameter.qualifiedName(); }
		private __widget: internal.PartProperty<Widget> =
			new internal.PartProperty<Widget>(LayoutCallArgument, this, "widget", null, false);
		public get widget(): Widget { return this.__widget.get(); }
		public set widget(newValue: Widget) { this.__widget.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new LayoutCallArgument() cannot be invoked directly, please use 'model.pages.createLayoutCallArgument()'"
				);
			}
		}

		/**
		 * Creates and returns a new LayoutCallArgument instance in the SDK and on the server.
		 * The new LayoutCallArgument will be automatically stored in the 'arguments' property
		 * of the parent LayoutCall element passed as argument.
		 */
		public static createIn(container: LayoutCall): LayoutCallArgument {
			return internal.instancehelpers.createElement(container, LayoutCallArgument, "arguments", true);
		}

		/**
		 * Creates and returns a new LayoutCallArgument instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): LayoutCallArgument {
			return internal.instancehelpers.createElement(model, LayoutCallArgument);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/layout-grid relevant section in reference guide}
	 */
	export interface ILayoutGrid extends IConditionallyVisibleWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): LayoutGrid;
		load(callback: (element: LayoutGrid) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/layout-grid relevant section in reference guide}
	 */
	export class LayoutGrid extends ConditionallyVisibleWidget implements ILayoutGrid {
		public static typeName: string = "Pages$LayoutGrid";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __width: internal.EnumProperty<ContainerWidth> =
			new internal.EnumProperty<ContainerWidth>(LayoutGrid, this, "width", ContainerWidth.FullWidth, ContainerWidth);
		public get width(): ContainerWidth { return this.__width.get(); }
		public set width(newValue: ContainerWidth) { this.__width.set(newValue); }
		private __rows: internal.PartListProperty<LayoutGridRow> =
			new internal.PartListProperty<LayoutGridRow>(LayoutGrid, this, "rows", []);
		public get rows(): internal.IList<LayoutGridRow> { return this.__rows.get(); }
		public set rows(newValue: internal.IList<LayoutGridRow>) { this.__rows.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new LayoutGrid() cannot be invoked directly, please use 'model.pages.createLayoutGrid()'"
				);
			}
		}


		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): LayoutGrid {
			internal.createInVersionCheck(container.model, LayoutGrid.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, LayoutGrid, "footerWidget", false);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): LayoutGrid {
			return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): LayoutGrid {
			return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): LayoutGrid {
			return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): LayoutGrid {
			return internal.instancehelpers.createElement(container, LayoutGrid, "leftWidget", false);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): LayoutGrid {
			return internal.instancehelpers.createElement(container, LayoutGrid, "rightWidget", false);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): LayoutGrid {
			return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): LayoutGrid {
			return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): LayoutGrid {
			return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): LayoutGrid {
			return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): LayoutGrid {
			return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): LayoutGrid {
			return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): LayoutGrid {
			return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): LayoutGrid {
			return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): LayoutGrid {
			return internal.instancehelpers.createElement(container, LayoutGrid, "firstWidget", false);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): LayoutGrid {
			return internal.instancehelpers.createElement(container, LayoutGrid, "secondWidget", false);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): LayoutGrid {
			return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): LayoutGrid {
			return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): LayoutGrid {
			return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): LayoutGrid {
			return internal.instancehelpers.createElement(container, LayoutGrid, "widgets", true);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): LayoutGrid {
			internal.createInVersionCheck(container.model, LayoutGrid.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, LayoutGrid, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * The new LayoutGrid will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): LayoutGrid {
			internal.createInVersionCheck(container.model, LayoutGrid.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, LayoutGrid, "reportWidget", false);
		}

		/**
		 * Creates and returns a new LayoutGrid instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): LayoutGrid {
			return internal.instancehelpers.createElement(model, LayoutGrid);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.rows.replace([ LayoutGridRow.create(this.model) ]);
			this.width = ContainerWidth.FullWidth;
		}

	}

	export interface ILayoutGridColumn extends internal.IElement {
		model: IModel;
		containerAsLayoutGridRow: ILayoutGridRow;
		load(): LayoutGridColumn;
		load(callback: (element: LayoutGridColumn) => void, forceRefresh?: boolean);
	}

	export class LayoutGridColumn extends internal.Element implements ILayoutGridColumn {
		public static typeName: string = "Pages$LayoutGridColumn";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsLayoutGridRow() { return super.getContainerAs<LayoutGridRow>(LayoutGridRow); }

		private __weight: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(LayoutGridColumn, this, "weight", 0, internal.PrimitiveTypeEnum.Integer);
		public get weight(): number { return this.__weight.get(); }
		public set weight(newValue: number) { this.__weight.set(newValue); }
		private __widget: internal.PartProperty<Widget> =
			new internal.PartProperty<Widget>(LayoutGridColumn, this, "widget", null, false);
		public get widget(): Widget { return this.__widget.get(); }
		public set widget(newValue: Widget) { this.__widget.set(newValue); }
		private __class: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(LayoutGridColumn, this, "class", "", internal.PrimitiveTypeEnum.String);
		public get class(): string { return this.__class.get(); }
		public set class(newValue: string) { this.__class.set(newValue); }
		private __style: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(LayoutGridColumn, this, "style", "", internal.PrimitiveTypeEnum.String);
		public get style(): string { return this.__style.get(); }
		public set style(newValue: string) { this.__style.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new LayoutGridColumn() cannot be invoked directly, please use 'model.pages.createLayoutGridColumn()'"
				);
			}
		}

		/**
		 * Creates and returns a new LayoutGridColumn instance in the SDK and on the server.
		 * The new LayoutGridColumn will be automatically stored in the 'columns' property
		 * of the parent LayoutGridRow element passed as argument.
		 */
		public static createIn(container: LayoutGridRow): LayoutGridColumn {
			return internal.instancehelpers.createElement(container, LayoutGridColumn, "columns", true);
		}

		/**
		 * Creates and returns a new LayoutGridColumn instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): LayoutGridColumn {
			return internal.instancehelpers.createElement(model, LayoutGridColumn);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.weight = 1;
		}

	}

	export interface ILayoutGridRow extends internal.IElement {
		model: IModel;
		containerAsLayoutGrid: ILayoutGrid;
		load(): LayoutGridRow;
		load(callback: (element: LayoutGridRow) => void, forceRefresh?: boolean);
	}

	export class LayoutGridRow extends internal.Element implements ILayoutGridRow {
		public static typeName: string = "Pages$LayoutGridRow";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsLayoutGrid() { return super.getContainerAs<LayoutGrid>(LayoutGrid); }

		private __columns: internal.PartListProperty<LayoutGridColumn> =
			new internal.PartListProperty<LayoutGridColumn>(LayoutGridRow, this, "columns", []);
		public get columns(): internal.IList<LayoutGridColumn> { return this.__columns.get(); }
		public set columns(newValue: internal.IList<LayoutGridColumn>) { this.__columns.set(newValue); }
		private __conditionalVisibilitySettings: internal.PartProperty<ConditionalVisibilitySettings> =
			new internal.PartProperty<ConditionalVisibilitySettings>(LayoutGridRow, this, "conditionalVisibilitySettings", null, false);
		public get conditionalVisibilitySettings(): ConditionalVisibilitySettings { return this.__conditionalVisibilitySettings.get(); }
		public set conditionalVisibilitySettings(newValue: ConditionalVisibilitySettings) { this.__conditionalVisibilitySettings.set(newValue); }
		private __class: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(LayoutGridRow, this, "class", "", internal.PrimitiveTypeEnum.String);
		public get class(): string { return this.__class.get(); }
		public set class(newValue: string) { this.__class.set(newValue); }
		private __style: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(LayoutGridRow, this, "style", "", internal.PrimitiveTypeEnum.String);
		public get style(): string { return this.__style.get(); }
		public set style(newValue: string) { this.__style.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new LayoutGridRow() cannot be invoked directly, please use 'model.pages.createLayoutGridRow()'"
				);
			}
		}

		/**
		 * Creates and returns a new LayoutGridRow instance in the SDK and on the server.
		 * The new LayoutGridRow will be automatically stored in the 'rows' property
		 * of the parent LayoutGrid element passed as argument.
		 */
		public static createIn(container: LayoutGrid): LayoutGridRow {
			return internal.instancehelpers.createElement(container, LayoutGridRow, "rows", true);
		}

		/**
		 * Creates and returns a new LayoutGridRow instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): LayoutGridRow {
			return internal.instancehelpers.createElement(model, LayoutGridRow);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.columns.replace([ ((layoutGridColumn:LayoutGridColumn) => {
				layoutGridColumn.weight = 12;
				return layoutGridColumn;
			})(LayoutGridColumn.create(this.model)) ]);
		}

	}

	export interface ILayoutParameter extends internal.IElement {
		model: IModel;
		containerAsLayout: ILayout;
		name: string;
		load(): LayoutParameter;
		load(callback: (element: LayoutParameter) => void, forceRefresh?: boolean);
	}

	export class LayoutParameter extends internal.Element implements ILayoutParameter {
		public static typeName: string = "Pages$LayoutParameter";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"name" : {
					"public" : {
						"currentValue" : true
					}
				}
			},
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(LayoutParameter, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new LayoutParameter() cannot be invoked directly, please use 'model.pages.createLayoutParameter()'"
				);
			}
		}

		_isByNameReferrable() { return true; }

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/link-button relevant section in reference guide}
	 */
	export interface ILinkButton extends IButton {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): LinkButton;
		load(callback: (element: LinkButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/link-button relevant section in reference guide}
	 */
	export class LinkButton extends Button implements ILinkButton {
		public static typeName: string = "Pages$LinkButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"address" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __linkType: internal.EnumProperty<LinkType> =
			new internal.EnumProperty<LinkType>(LinkButton, this, "linkType", LinkType.Web, LinkType);
		public get linkType(): LinkType { return this.__linkType.get(); }
		public set linkType(newValue: LinkType) { this.__linkType.set(newValue); }
		private __address: internal.PartProperty<StaticOrDynamicString> =
			new internal.PartProperty<StaticOrDynamicString>(LinkButton, this, "address", null, true);
		public get address(): StaticOrDynamicString { return this.__address.get(); }
		public set address(newValue: StaticOrDynamicString) { this.__address.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new LinkButton() cannot be invoked directly, please use 'model.pages.createLinkButton()'"
				);
			}
		}


		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): LinkButton {
			internal.createInVersionCheck(container.model, LinkButton.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, LinkButton, "footerWidget", false);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): LinkButton {
			return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): LinkButton {
			return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): LinkButton {
			return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): LinkButton {
			return internal.instancehelpers.createElement(container, LinkButton, "leftWidget", false);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): LinkButton {
			return internal.instancehelpers.createElement(container, LinkButton, "rightWidget", false);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): LinkButton {
			return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): LinkButton {
			return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): LinkButton {
			return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): LinkButton {
			return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): LinkButton {
			return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): LinkButton {
			return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): LinkButton {
			return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): LinkButton {
			return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): LinkButton {
			return internal.instancehelpers.createElement(container, LinkButton, "firstWidget", false);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): LinkButton {
			return internal.instancehelpers.createElement(container, LinkButton, "secondWidget", false);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): LinkButton {
			return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): LinkButton {
			return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): LinkButton {
			return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): LinkButton {
			return internal.instancehelpers.createElement(container, LinkButton, "widgets", true);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): LinkButton {
			internal.createInVersionCheck(container.model, LinkButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, LinkButton, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * The new LinkButton will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): LinkButton {
			internal.createInVersionCheck(container.model, LinkButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, LinkButton, "reportWidget", false);
		}

		/**
		 * Creates and returns a new LinkButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): LinkButton {
			return internal.instancehelpers.createElement(model, LinkButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.address = ((staticOrDynamicString:StaticOrDynamicString) => {
				staticOrDynamicString.value = "http://www.mendix.com/";
				return staticOrDynamicString;
			})(StaticOrDynamicString.create(this.model));
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Link";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Koppeling";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
			this.linkType = LinkType.Web;
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/list-view relevant section in reference guide}
	 */
	export interface IListView extends IListenTargetWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): ListView;
		load(callback: (element: ListView) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/list-view relevant section in reference guide}
	 */
	export class ListView extends ListenTargetWidget implements IListView {
		public static typeName: string = "Pages$ListView";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"clickAction" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __widget: internal.PartProperty<Widget> =
			new internal.PartProperty<Widget>(ListView, this, "widget", null, false);
		public get widget(): Widget { return this.__widget.get(); }
		public set widget(newValue: Widget) { this.__widget.set(newValue); }
		private __pageSize: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(ListView, this, "pageSize", 0, internal.PrimitiveTypeEnum.Integer);
		public get pageSize(): number { return this.__pageSize.get(); }
		public set pageSize(newValue: number) { this.__pageSize.set(newValue); }
		private __clickAction: internal.PartProperty<ClientAction> =
			new internal.PartProperty<ClientAction>(ListView, this, "clickAction", null, true);
		public get clickAction(): ClientAction { return this.__clickAction.get(); }
		public set clickAction(newValue: ClientAction) { this.__clickAction.set(newValue); }
		private __editable: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(ListView, this, "editable", false, internal.PrimitiveTypeEnum.Boolean);
		public get editable(): boolean { return this.__editable.get(); }
		public set editable(newValue: boolean) { this.__editable.set(newValue); }
		private __templates: internal.PartListProperty<ListViewTemplate> =
			new internal.PartListProperty<ListViewTemplate>(ListView, this, "templates", []);
		public get templates(): internal.IList<ListViewTemplate> { return this.__templates.get(); }
		public set templates(newValue: internal.IList<ListViewTemplate>) { this.__templates.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ListView() cannot be invoked directly, please use 'model.pages.createListView()'"
				);
			}
		}


		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): ListView {
			internal.createInVersionCheck(container.model, ListView.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, ListView, "footerWidget", false);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): ListView {
			return internal.instancehelpers.createElement(container, ListView, "widget", false);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): ListView {
			return internal.instancehelpers.createElement(container, ListView, "widget", false);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): ListView {
			return internal.instancehelpers.createElement(container, ListView, "widget", false);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): ListView {
			return internal.instancehelpers.createElement(container, ListView, "leftWidget", false);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): ListView {
			return internal.instancehelpers.createElement(container, ListView, "rightWidget", false);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): ListView {
			return internal.instancehelpers.createElement(container, ListView, "widget", false);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ListView {
			return internal.instancehelpers.createElement(container, ListView, "widget", false);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ListView {
			return internal.instancehelpers.createElement(container, ListView, "widget", false);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): ListView {
			return internal.instancehelpers.createElement(container, ListView, "widget", false);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): ListView {
			return internal.instancehelpers.createElement(container, ListView, "widget", false);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): ListView {
			return internal.instancehelpers.createElement(container, ListView, "widget", false);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ListView {
			return internal.instancehelpers.createElement(container, ListView, "widget", false);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): ListView {
			return internal.instancehelpers.createElement(container, ListView, "widget", false);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): ListView {
			return internal.instancehelpers.createElement(container, ListView, "firstWidget", false);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): ListView {
			return internal.instancehelpers.createElement(container, ListView, "secondWidget", false);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): ListView {
			return internal.instancehelpers.createElement(container, ListView, "widget", false);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): ListView {
			return internal.instancehelpers.createElement(container, ListView, "widget", false);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ListView {
			return internal.instancehelpers.createElement(container, ListView, "widget", false);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): ListView {
			return internal.instancehelpers.createElement(container, ListView, "widgets", true);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): ListView {
			internal.createInVersionCheck(container.model, ListView.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ListView, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * The new ListView will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): ListView {
			internal.createInVersionCheck(container.model, ListView.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ListView, "reportWidget", false);
		}

		/**
		 * Creates and returns a new ListView instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ListView {
			return internal.instancehelpers.createElement(model, ListView);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.clickAction = NoClientAction.create(this.model);
			this.dataSource = ListViewDatabaseSource.create(this.model);
			this.pageSize = 10;
		}

	}

	export interface IListViewDatabaseSource extends IDatabaseSourceBase {
		model: IModel;
		containerAsEntityWidget: IEntityWidget;
		load(): ListViewDatabaseSource;
		load(callback: (element: ListViewDatabaseSource) => void, forceRefresh?: boolean);
	}

	export class ListViewDatabaseSource extends DatabaseSourceBase implements IListViewDatabaseSource {
		public static typeName: string = "Pages$ListViewDatabaseSource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"search" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsEntityWidget() { return super.getContainerAs<EntityWidget>(EntityWidget); }

		private __search: internal.PartProperty<ListViewSearch> =
			new internal.PartProperty<ListViewSearch>(ListViewDatabaseSource, this, "search", null, true);
		public get search(): ListViewSearch { return this.__search.get(); }
		public set search(newValue: ListViewSearch) { this.__search.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ListViewDatabaseSource() cannot be invoked directly, please use 'model.pages.createListViewDatabaseSource()'"
				);
			}
		}

		/**
		 * Creates and returns a new ListViewDatabaseSource instance in the SDK and on the server.
		 * The new ListViewDatabaseSource will be automatically stored in the 'dataSource' property
		 * of the parent EntityWidget element passed as argument.
		 */
		public static createIn(container: EntityWidget): ListViewDatabaseSource {
			return internal.instancehelpers.createElement(container, ListViewDatabaseSource, "dataSource", false);
		}

		/**
		 * Creates and returns a new ListViewDatabaseSource instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ListViewDatabaseSource {
			return internal.instancehelpers.createElement(model, ListViewDatabaseSource);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.search = ListViewSearch.create(this.model);
		}

	}

	export interface IListViewSearch extends internal.IElement {
		model: IModel;
		containerAsListViewDatabaseSource: IListViewDatabaseSource;
		containerAsListViewXPathSource: IListViewXPathSource;
		load(): ListViewSearch;
		load(callback: (element: ListViewSearch) => void, forceRefresh?: boolean);
	}

	export class ListViewSearch extends internal.Element implements IListViewSearch {
		public static typeName: string = "Pages$ListViewSearch";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsListViewDatabaseSource() { return super.getContainerAs<ListViewDatabaseSource>(ListViewDatabaseSource); }
		get containerAsListViewXPathSource() { return super.getContainerAs<ListViewXPathSource>(ListViewXPathSource); }

		private __searchPaths: internal.PrimitiveListProperty<string> =
			new internal.PrimitiveListProperty<string>(ListViewSearch, this, "searchPaths", [], internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type paths.AttributePath.
		 */
		public get searchPaths(): internal.IList<string> { return this.__searchPaths.get(); }
		public set searchPaths(newValue: internal.IList<string>) { this.__searchPaths.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ListViewSearch() cannot be invoked directly, please use 'model.pages.createListViewSearch()'"
				);
			}
		}


		/**
		 * Creates and returns a new ListViewSearch instance in the SDK and on the server.
		 * The new ListViewSearch will be automatically stored in the 'search' property
		 * of the parent ListViewDatabaseSource element passed as argument.
		 */
		public static createInListViewDatabaseSourceUnderSearch(container: ListViewDatabaseSource): ListViewSearch {
			return internal.instancehelpers.createElement(container, ListViewSearch, "search", false);
		}

		/**
		 * Creates and returns a new ListViewSearch instance in the SDK and on the server.
		 * The new ListViewSearch will be automatically stored in the 'search' property
		 * of the parent ListViewXPathSource element passed as argument.
		 */
		public static createInListViewXPathSourceUnderSearch(container: ListViewXPathSource): ListViewSearch {
			return internal.instancehelpers.createElement(container, ListViewSearch, "search", false);
		}

		/**
		 * Creates and returns a new ListViewSearch instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ListViewSearch {
			return internal.instancehelpers.createElement(model, ListViewSearch);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IListViewTemplate extends internal.IElement {
		model: IModel;
		containerAsListView: IListView;
		load(): ListViewTemplate;
		load(callback: (element: ListViewTemplate) => void, forceRefresh?: boolean);
	}

	export class ListViewTemplate extends internal.Element implements IListViewTemplate {
		public static typeName: string = "Pages$ListViewTemplate";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"specialization" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }

		private __specialization: internal.ByNameReferenceProperty<domainmodels.IEntity> =
			new internal.ByNameReferenceProperty<domainmodels.IEntity>(ListViewTemplate, this, "specialization", null, "DomainModels$Entity");
		public get specialization(): domainmodels.IEntity { return this.__specialization.get(); }
		public set specialization(newValue: domainmodels.IEntity) { this.__specialization.set(newValue); }
		get specializationQualifiedName(): string { return this.__specialization.qualifiedName(); }
		private __widget: internal.PartProperty<Widget> =
			new internal.PartProperty<Widget>(ListViewTemplate, this, "widget", null, false);
		public get widget(): Widget { return this.__widget.get(); }
		public set widget(newValue: Widget) { this.__widget.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ListViewTemplate() cannot be invoked directly, please use 'model.pages.createListViewTemplate()'"
				);
			}
		}

		/**
		 * Creates and returns a new ListViewTemplate instance in the SDK and on the server.
		 * The new ListViewTemplate will be automatically stored in the 'templates' property
		 * of the parent ListView element passed as argument.
		 */
		public static createIn(container: ListView): ListViewTemplate {
			return internal.instancehelpers.createElement(container, ListViewTemplate, "templates", true);
		}

		/**
		 * Creates and returns a new ListViewTemplate instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ListViewTemplate {
			return internal.instancehelpers.createElement(model, ListViewTemplate);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IListViewXPathSource extends ISortableEntityPathSource {
		model: IModel;
		containerAsEntityWidget: IEntityWidget;
		load(): ListViewXPathSource;
		load(callback: (element: ListViewXPathSource) => void, forceRefresh?: boolean);
	}

	export class ListViewXPathSource extends SortableEntityPathSource implements IListViewXPathSource {
		public static typeName: string = "Pages$ListViewXPathSource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"search" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsEntityWidget() { return super.getContainerAs<EntityWidget>(EntityWidget); }

		private __search: internal.PartProperty<ListViewSearch> =
			new internal.PartProperty<ListViewSearch>(ListViewXPathSource, this, "search", null, true);
		public get search(): ListViewSearch { return this.__search.get(); }
		public set search(newValue: ListViewSearch) { this.__search.set(newValue); }
		private __xPathConstraint: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ListViewXPathSource, this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
		 */
		public get xPathConstraint(): string { return this.__xPathConstraint.get(); }
		public set xPathConstraint(newValue: string) { this.__xPathConstraint.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ListViewXPathSource() cannot be invoked directly, please use 'model.pages.createListViewXPathSource()'"
				);
			}
		}

		/**
		 * Creates and returns a new ListViewXPathSource instance in the SDK and on the server.
		 * The new ListViewXPathSource will be automatically stored in the 'dataSource' property
		 * of the parent EntityWidget element passed as argument.
		 */
		public static createIn(container: EntityWidget): ListViewXPathSource {
			return internal.instancehelpers.createElement(container, ListViewXPathSource, "dataSource", false);
		}

		/**
		 * Creates and returns a new ListViewXPathSource instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ListViewXPathSource {
			return internal.instancehelpers.createElement(model, ListViewXPathSource);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.search = ListViewSearch.create(this.model);
		}

	}

	export interface IListenTargetSource extends IDataSource {
		model: IModel;
		containerAsEntityWidget: IEntityWidget;
		load(): ListenTargetSource;
		load(callback: (element: ListenTargetSource) => void, forceRefresh?: boolean);
	}

	export class ListenTargetSource extends DataSource implements IListenTargetSource {
		public static typeName: string = "Pages$ListenTargetSource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsEntityWidget() { return super.getContainerAs<EntityWidget>(EntityWidget); }

		private __listenTarget: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ListenTargetSource, this, "listenTarget", "", internal.PrimitiveTypeEnum.String);
		public get listenTarget(): string { return this.__listenTarget.get(); }
		public set listenTarget(newValue: string) { this.__listenTarget.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ListenTargetSource() cannot be invoked directly, please use 'model.pages.createListenTargetSource()'"
				);
			}
		}

		/**
		 * Creates and returns a new ListenTargetSource instance in the SDK and on the server.
		 * The new ListenTargetSource will be automatically stored in the 'dataSource' property
		 * of the parent EntityWidget element passed as argument.
		 */
		public static createIn(container: EntityWidget): ListenTargetSource {
			return internal.instancehelpers.createElement(container, ListenTargetSource, "dataSource", false);
		}

		/**
		 * Creates and returns a new ListenTargetSource instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ListenTargetSource {
			return internal.instancehelpers.createElement(model, ListenTargetSource);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/sign-out-button relevant section in reference guide}
	 */
	export interface ILogoutButton extends IButton {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): LogoutButton;
		load(callback: (element: LogoutButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/sign-out-button relevant section in reference guide}
	 */
	export class LogoutButton extends Button implements ILogoutButton {
		public static typeName: string = "Pages$LogoutButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new LogoutButton() cannot be invoked directly, please use 'model.pages.createLogoutButton()'"
				);
			}
		}


		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): LogoutButton {
			internal.createInVersionCheck(container.model, LogoutButton.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, LogoutButton, "footerWidget", false);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): LogoutButton {
			return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): LogoutButton {
			return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): LogoutButton {
			return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): LogoutButton {
			return internal.instancehelpers.createElement(container, LogoutButton, "leftWidget", false);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): LogoutButton {
			return internal.instancehelpers.createElement(container, LogoutButton, "rightWidget", false);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): LogoutButton {
			return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): LogoutButton {
			return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): LogoutButton {
			return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): LogoutButton {
			return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): LogoutButton {
			return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): LogoutButton {
			return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): LogoutButton {
			return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): LogoutButton {
			return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): LogoutButton {
			return internal.instancehelpers.createElement(container, LogoutButton, "firstWidget", false);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): LogoutButton {
			return internal.instancehelpers.createElement(container, LogoutButton, "secondWidget", false);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): LogoutButton {
			return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): LogoutButton {
			return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): LogoutButton {
			return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): LogoutButton {
			return internal.instancehelpers.createElement(container, LogoutButton, "widgets", true);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): LogoutButton {
			internal.createInVersionCheck(container.model, LogoutButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, LogoutButton, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * The new LogoutButton will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): LogoutButton {
			internal.createInVersionCheck(container.model, LogoutButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, LogoutButton, "reportWidget", false);
		}

		/**
		 * Creates and returns a new LogoutButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): LogoutButton {
			return internal.instancehelpers.createElement(model, LogoutButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Sign out";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Afmelden";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/menu-widgets relevant section in reference guide}
	 */
	export interface IMenuWidget extends IWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): MenuWidget;
		load(callback: (element: MenuWidget) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/menu-widgets relevant section in reference guide}
	 *
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class MenuWidget extends Widget implements IMenuWidget {
		public static typeName: string = "Pages$MenuWidget";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"menuSource" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __menuSource: internal.PartProperty<MenuSource> =
			new internal.PartProperty<MenuSource>(MenuWidget, this, "menuSource", null, true);
		public get menuSource(): MenuSource { return this.__menuSource.get(); }
		public set menuSource(newValue: MenuSource) { this.__menuSource.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MenuWidget() cannot be invoked directly, please use 'model.pages.createMenuWidget()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.menuSource = NavigationSource.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/menu-bar relevant section in reference guide}
	 */
	export interface IMenuBar extends IMenuWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): MenuBar;
		load(callback: (element: MenuBar) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/menu-bar relevant section in reference guide}
	 */
	export class MenuBar extends MenuWidget implements IMenuBar {
		public static typeName: string = "Pages$MenuBar";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MenuBar() cannot be invoked directly, please use 'model.pages.createMenuBar()'"
				);
			}
		}


		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): MenuBar {
			internal.createInVersionCheck(container.model, MenuBar.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, MenuBar, "footerWidget", false);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): MenuBar {
			return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): MenuBar {
			return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): MenuBar {
			return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): MenuBar {
			return internal.instancehelpers.createElement(container, MenuBar, "leftWidget", false);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): MenuBar {
			return internal.instancehelpers.createElement(container, MenuBar, "rightWidget", false);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): MenuBar {
			return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): MenuBar {
			return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): MenuBar {
			return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): MenuBar {
			return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): MenuBar {
			return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): MenuBar {
			return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): MenuBar {
			return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): MenuBar {
			return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): MenuBar {
			return internal.instancehelpers.createElement(container, MenuBar, "firstWidget", false);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): MenuBar {
			return internal.instancehelpers.createElement(container, MenuBar, "secondWidget", false);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): MenuBar {
			return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): MenuBar {
			return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): MenuBar {
			return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): MenuBar {
			return internal.instancehelpers.createElement(container, MenuBar, "widgets", true);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): MenuBar {
			internal.createInVersionCheck(container.model, MenuBar.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, MenuBar, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * The new MenuBar will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): MenuBar {
			internal.createInVersionCheck(container.model, MenuBar.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, MenuBar, "reportWidget", false);
		}

		/**
		 * Creates and returns a new MenuBar instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): MenuBar {
			return internal.instancehelpers.createElement(model, MenuBar);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IMenuSource extends internal.IElement {
		model: IModel;
		containerAsMenuWidget: IMenuWidget;
		load(): MenuSource;
		load(callback: (element: MenuSource) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class MenuSource extends internal.Element implements IMenuSource {
		public static typeName: string = "Pages$MenuSource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMenuWidget() { return super.getContainerAs<MenuWidget>(MenuWidget); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MenuSource() cannot be invoked directly, please use 'model.pages.createMenuSource()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IMenuDocumentSource extends IMenuSource {
		model: IModel;
		containerAsMenuWidget: IMenuWidget;
		load(): MenuDocumentSource;
		load(callback: (element: MenuDocumentSource) => void, forceRefresh?: boolean);
	}

	export class MenuDocumentSource extends MenuSource implements IMenuDocumentSource {
		public static typeName: string = "Pages$MenuDocumentSource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMenuWidget() { return super.getContainerAs<MenuWidget>(MenuWidget); }

		private __menu: internal.ByNameReferenceProperty<menus.IMenuDocument> =
			new internal.ByNameReferenceProperty<menus.IMenuDocument>(MenuDocumentSource, this, "menu", null, "Menus$MenuDocument");
		public get menu(): menus.IMenuDocument { return this.__menu.get(); }
		public set menu(newValue: menus.IMenuDocument) { this.__menu.set(newValue); }
		get menuQualifiedName(): string { return this.__menu.qualifiedName(); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MenuDocumentSource() cannot be invoked directly, please use 'model.pages.createMenuDocumentSource()'"
				);
			}
		}

		/**
		 * Creates and returns a new MenuDocumentSource instance in the SDK and on the server.
		 * The new MenuDocumentSource will be automatically stored in the 'menuSource' property
		 * of the parent MenuWidget element passed as argument.
		 */
		public static createIn(container: MenuWidget): MenuDocumentSource {
			return internal.instancehelpers.createElement(container, MenuDocumentSource, "menuSource", false);
		}

		/**
		 * Creates and returns a new MenuDocumentSource instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): MenuDocumentSource {
			return internal.instancehelpers.createElement(model, MenuDocumentSource);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IMicroflowClientAction extends IClientAction {
		model: IModel;
		containerAsMenuItem: menus.IMenuItem;
		containerAsActionButton: IActionButton;
		containerAsActionItem: IActionItem;
		containerAsDataViewActionButton: IDataViewActionButton;
		containerAsGridActionButton: IGridActionButton;
		containerAsListView: IListView;
		containerAsStaticImageViewer: IStaticImageViewer;
		load(): MicroflowClientAction;
		load(callback: (element: MicroflowClientAction) => void, forceRefresh?: boolean);
	}

	export class MicroflowClientAction extends ClientAction implements IMicroflowClientAction {
		public static typeName: string = "Pages$MicroflowClientAction";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"microflowSettings" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsMenuItem() { return super.getContainerAs<menus.MenuItem>(menus.MenuItem); }
		get containerAsActionButton() { return super.getContainerAs<ActionButton>(ActionButton); }
		get containerAsActionItem() { return super.getContainerAs<ActionItem>(ActionItem); }
		get containerAsDataViewActionButton() { return super.getContainerAs<DataViewActionButton>(DataViewActionButton); }
		get containerAsGridActionButton() { return super.getContainerAs<GridActionButton>(GridActionButton); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsStaticImageViewer() { return super.getContainerAs<StaticImageViewer>(StaticImageViewer); }

		private __microflowSettings: internal.PartProperty<MicroflowSettings> =
			new internal.PartProperty<MicroflowSettings>(MicroflowClientAction, this, "microflowSettings", null, true);
		public get microflowSettings(): MicroflowSettings { return this.__microflowSettings.get(); }
		public set microflowSettings(newValue: MicroflowSettings) { this.__microflowSettings.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MicroflowClientAction() cannot be invoked directly, please use 'model.pages.createMicroflowClientAction()'"
				);
			}
		}


		/**
		 * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
		 * The new MicroflowClientAction will be automatically stored in the 'action' property
		 * of the parent menus.MenuItem element passed as argument.
		 */
		public static createInMenuItemUnderAction(container: menus.MenuItem): MicroflowClientAction {
			return internal.instancehelpers.createElement(container, MicroflowClientAction, "action", false);
		}

		/**
		 * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
		 * The new MicroflowClientAction will be automatically stored in the 'action' property
		 * of the parent ActionButton element passed as argument.
		 */
		public static createInActionButtonUnderAction(container: ActionButton): MicroflowClientAction {
			return internal.instancehelpers.createElement(container, MicroflowClientAction, "action", false);
		}

		/**
		 * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
		 * The new MicroflowClientAction will be automatically stored in the 'action' property
		 * of the parent ActionItem element passed as argument.
		 */
		public static createInActionItemUnderAction(container: ActionItem): MicroflowClientAction {
			return internal.instancehelpers.createElement(container, MicroflowClientAction, "action", false);
		}

		/**
		 * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
		 * The new MicroflowClientAction will be automatically stored in the 'action' property
		 * of the parent DataViewActionButton element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
		 */
		public static createInDataViewActionButtonUnderAction(container: DataViewActionButton): MicroflowClientAction {
			internal.createInVersionCheck(container.model, MicroflowClientAction.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0"]
			);
			return internal.instancehelpers.createElement(container, MicroflowClientAction, "action", false);
		}

		/**
		 * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
		 * The new MicroflowClientAction will be automatically stored in the 'action' property
		 * of the parent GridActionButton element passed as argument.
		 */
		public static createInGridActionButtonUnderAction(container: GridActionButton): MicroflowClientAction {
			return internal.instancehelpers.createElement(container, MicroflowClientAction, "action", false);
		}

		/**
		 * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
		 * The new MicroflowClientAction will be automatically stored in the 'clickAction' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderClickAction(container: ListView): MicroflowClientAction {
			return internal.instancehelpers.createElement(container, MicroflowClientAction, "clickAction", false);
		}

		/**
		 * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
		 * The new MicroflowClientAction will be automatically stored in the 'clickAction' property
		 * of the parent StaticImageViewer element passed as argument.
		 */
		public static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): MicroflowClientAction {
			return internal.instancehelpers.createElement(container, MicroflowClientAction, "clickAction", false);
		}

		/**
		 * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): MicroflowClientAction {
			return internal.instancehelpers.createElement(model, MicroflowClientAction);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.microflowSettings = MicroflowSettings.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/starting-microflows relevant section in reference guide}
	 */
	export interface IMicroflowSettings extends internal.IElement {
		model: IModel;
		containerAsAssociationWidget: IAssociationWidget;
		containerAsAttributeWidget: IAttributeWidget;
		containerAsMicroflowClientAction: IMicroflowClientAction;
		containerAsMicroflowSource: IMicroflowSource;
		containerAsOnClickMicroflow: IOnClickMicroflow;
		containerAsReferenceSetSelector: IReferenceSetSelector;
		containerAsSelectorMicroflowSource: ISelectorMicroflowSource;
		load(): MicroflowSettings;
		load(callback: (element: MicroflowSettings) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/starting-microflows relevant section in reference guide}
	 */
	export class MicroflowSettings extends internal.Element implements IMicroflowSettings {
		public static typeName: string = "Pages$MicroflowSettings";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsAssociationWidget() { return super.getContainerAs<AssociationWidget>(AssociationWidget); }
		get containerAsAttributeWidget() { return super.getContainerAs<AttributeWidget>(AttributeWidget); }
		get containerAsMicroflowClientAction() { return super.getContainerAs<MicroflowClientAction>(MicroflowClientAction); }
		get containerAsMicroflowSource() { return super.getContainerAs<MicroflowSource>(MicroflowSource); }
		get containerAsOnClickMicroflow() { return super.getContainerAs<OnClickMicroflow>(OnClickMicroflow); }
		get containerAsReferenceSetSelector() { return super.getContainerAs<ReferenceSetSelector>(ReferenceSetSelector); }
		get containerAsSelectorMicroflowSource() { return super.getContainerAs<SelectorMicroflowSource>(SelectorMicroflowSource); }

		private __microflow: internal.ByNameReferenceProperty<microflows.IMicroflow> =
			new internal.ByNameReferenceProperty<microflows.IMicroflow>(MicroflowSettings, this, "microflow", null, "Microflows$Microflow");
		public get microflow(): microflows.IMicroflow { return this.__microflow.get(); }
		public set microflow(newValue: microflows.IMicroflow) { this.__microflow.set(newValue); }
		get microflowQualifiedName(): string { return this.__microflow.qualifiedName(); }
		private __useAllPages: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(MicroflowSettings, this, "useAllPages", false, internal.PrimitiveTypeEnum.Boolean);
		public get useAllPages(): boolean { return this.__useAllPages.get(); }
		public set useAllPages(newValue: boolean) { this.__useAllPages.set(newValue); }
		private __progressBar: internal.EnumProperty<ProgressBarType> =
			new internal.EnumProperty<ProgressBarType>(MicroflowSettings, this, "progressBar", ProgressBarType.None, ProgressBarType);
		public get progressBar(): ProgressBarType { return this.__progressBar.get(); }
		public set progressBar(newValue: ProgressBarType) { this.__progressBar.set(newValue); }
		private __progressMessage: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(MicroflowSettings, this, "progressMessage", null, false);
		public get progressMessage(): texts.Text { return this.__progressMessage.get(); }
		public set progressMessage(newValue: texts.Text) { this.__progressMessage.set(newValue); }
		private __asynchronous: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(MicroflowSettings, this, "asynchronous", false, internal.PrimitiveTypeEnum.Boolean);
		public get asynchronous(): boolean { return this.__asynchronous.get(); }
		public set asynchronous(newValue: boolean) { this.__asynchronous.set(newValue); }
		private __formValidations: internal.EnumProperty<FormValidations> =
			new internal.EnumProperty<FormValidations>(MicroflowSettings, this, "formValidations", FormValidations.All, FormValidations);
		public get formValidations(): FormValidations { return this.__formValidations.get(); }
		public set formValidations(newValue: FormValidations) { this.__formValidations.set(newValue); }
		private __confirmationInfo: internal.PartProperty<ConfirmationInfo> =
			new internal.PartProperty<ConfirmationInfo>(MicroflowSettings, this, "confirmationInfo", null, false);
		public get confirmationInfo(): ConfirmationInfo { return this.__confirmationInfo.get(); }
		public set confirmationInfo(newValue: ConfirmationInfo) { this.__confirmationInfo.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MicroflowSettings() cannot be invoked directly, please use 'model.pages.createMicroflowSettings()'"
				);
			}
		}


		/**
		 * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
		 * The new MicroflowSettings will be automatically stored in the 'onChangeMicroflowSettings' property
		 * of the parent AssociationWidget element passed as argument.
		 */
		public static createInAssociationWidgetUnderOnChangeMicroflowSettings(container: AssociationWidget): MicroflowSettings {
			return internal.instancehelpers.createElement(container, MicroflowSettings, "onChangeMicroflowSettings", false);
		}

		/**
		 * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
		 * The new MicroflowSettings will be automatically stored in the 'onChangeMicroflowSettings' property
		 * of the parent AttributeWidget element passed as argument.
		 */
		public static createInAttributeWidgetUnderOnChangeMicroflowSettings(container: AttributeWidget): MicroflowSettings {
			return internal.instancehelpers.createElement(container, MicroflowSettings, "onChangeMicroflowSettings", false);
		}

		/**
		 * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
		 * The new MicroflowSettings will be automatically stored in the 'onEnterMicroflowSettings' property
		 * of the parent AttributeWidget element passed as argument.
		 */
		public static createInAttributeWidgetUnderOnEnterMicroflowSettings(container: AttributeWidget): MicroflowSettings {
			return internal.instancehelpers.createElement(container, MicroflowSettings, "onEnterMicroflowSettings", false);
		}

		/**
		 * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
		 * The new MicroflowSettings will be automatically stored in the 'onLeaveMicroflowSettings' property
		 * of the parent AttributeWidget element passed as argument.
		 */
		public static createInAttributeWidgetUnderOnLeaveMicroflowSettings(container: AttributeWidget): MicroflowSettings {
			return internal.instancehelpers.createElement(container, MicroflowSettings, "onLeaveMicroflowSettings", false);
		}

		/**
		 * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
		 * The new MicroflowSettings will be automatically stored in the 'microflowSettings' property
		 * of the parent MicroflowClientAction element passed as argument.
		 */
		public static createInMicroflowClientActionUnderMicroflowSettings(container: MicroflowClientAction): MicroflowSettings {
			return internal.instancehelpers.createElement(container, MicroflowSettings, "microflowSettings", false);
		}

		/**
		 * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
		 * The new MicroflowSettings will be automatically stored in the 'microflowSettings' property
		 * of the parent MicroflowSource element passed as argument.
		 */
		public static createInMicroflowSourceUnderMicroflowSettings(container: MicroflowSource): MicroflowSettings {
			return internal.instancehelpers.createElement(container, MicroflowSettings, "microflowSettings", false);
		}

		/**
		 * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
		 * The new MicroflowSettings will be automatically stored in the 'microflowSettings' property
		 * of the parent OnClickMicroflow element passed as argument.
		 */
		public static createInOnClickMicroflowUnderMicroflowSettings(container: OnClickMicroflow): MicroflowSettings {
			return internal.instancehelpers.createElement(container, MicroflowSettings, "microflowSettings", false);
		}

		/**
		 * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
		 * The new MicroflowSettings will be automatically stored in the 'onChangeMicroflowSettings' property
		 * of the parent ReferenceSetSelector element passed as argument.
		 */
		public static createInReferenceSetSelectorUnderOnChangeMicroflowSettings(container: ReferenceSetSelector): MicroflowSettings {
			return internal.instancehelpers.createElement(container, MicroflowSettings, "onChangeMicroflowSettings", false);
		}

		/**
		 * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
		 * The new MicroflowSettings will be automatically stored in the 'dataSourceMicroflowSettings' property
		 * of the parent SelectorMicroflowSource element passed as argument.
		 */
		public static createInSelectorMicroflowSourceUnderDataSourceMicroflowSettings(container: SelectorMicroflowSource): MicroflowSettings {
			return internal.instancehelpers.createElement(container, MicroflowSettings, "dataSourceMicroflowSettings", false);
		}

		/**
		 * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): MicroflowSettings {
			return internal.instancehelpers.createElement(model, MicroflowSettings);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.formValidations = FormValidations.All;
			this.progressBar = ProgressBarType.None;
		}

	}

	export interface IMicroflowSource extends IDataSource {
		model: IModel;
		containerAsEntityWidget: IEntityWidget;
		load(): MicroflowSource;
		load(callback: (element: MicroflowSource) => void, forceRefresh?: boolean);
	}

	export class MicroflowSource extends DataSource implements IMicroflowSource {
		public static typeName: string = "Pages$MicroflowSource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"microflowSettings" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsEntityWidget() { return super.getContainerAs<EntityWidget>(EntityWidget); }

		private __microflowSettings: internal.PartProperty<MicroflowSettings> =
			new internal.PartProperty<MicroflowSettings>(MicroflowSource, this, "microflowSettings", null, true);
		public get microflowSettings(): MicroflowSettings { return this.__microflowSettings.get(); }
		public set microflowSettings(newValue: MicroflowSettings) { this.__microflowSettings.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MicroflowSource() cannot be invoked directly, please use 'model.pages.createMicroflowSource()'"
				);
			}
		}

		/**
		 * Creates and returns a new MicroflowSource instance in the SDK and on the server.
		 * The new MicroflowSource will be automatically stored in the 'dataSource' property
		 * of the parent EntityWidget element passed as argument.
		 */
		public static createIn(container: EntityWidget): MicroflowSource {
			return internal.instancehelpers.createElement(container, MicroflowSource, "dataSource", false);
		}

		/**
		 * Creates and returns a new MicroflowSource instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): MicroflowSource {
			return internal.instancehelpers.createElement(model, MicroflowSource);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.microflowSettings = MicroflowSettings.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/navigation-list relevant section in reference guide}
	 */
	export interface INavigationList extends IConditionallyVisibleWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): NavigationList;
		load(callback: (element: NavigationList) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/navigation-list relevant section in reference guide}
	 */
	export class NavigationList extends ConditionallyVisibleWidget implements INavigationList {
		public static typeName: string = "Pages$NavigationList";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __items: internal.PartListProperty<NavigationListItem> =
			new internal.PartListProperty<NavigationListItem>(NavigationList, this, "items", []);
		public get items(): internal.IList<NavigationListItem> { return this.__items.get(); }
		public set items(newValue: internal.IList<NavigationListItem>) { this.__items.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new NavigationList() cannot be invoked directly, please use 'model.pages.createNavigationList()'"
				);
			}
		}


		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): NavigationList {
			internal.createInVersionCheck(container.model, NavigationList.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, NavigationList, "footerWidget", false);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): NavigationList {
			return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): NavigationList {
			return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): NavigationList {
			return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): NavigationList {
			return internal.instancehelpers.createElement(container, NavigationList, "leftWidget", false);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): NavigationList {
			return internal.instancehelpers.createElement(container, NavigationList, "rightWidget", false);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): NavigationList {
			return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): NavigationList {
			return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): NavigationList {
			return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): NavigationList {
			return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): NavigationList {
			return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): NavigationList {
			return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): NavigationList {
			return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): NavigationList {
			return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): NavigationList {
			return internal.instancehelpers.createElement(container, NavigationList, "firstWidget", false);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): NavigationList {
			return internal.instancehelpers.createElement(container, NavigationList, "secondWidget", false);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): NavigationList {
			return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): NavigationList {
			return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): NavigationList {
			return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): NavigationList {
			return internal.instancehelpers.createElement(container, NavigationList, "widgets", true);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): NavigationList {
			internal.createInVersionCheck(container.model, NavigationList.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, NavigationList, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * The new NavigationList will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): NavigationList {
			internal.createInVersionCheck(container.model, NavigationList.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, NavigationList, "reportWidget", false);
		}

		/**
		 * Creates and returns a new NavigationList instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): NavigationList {
			return internal.instancehelpers.createElement(model, NavigationList);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.items.replace([ NavigationListItem.create(this.model), NavigationListItem.create(this.model), NavigationListItem.create(this.model) ]);
		}

	}

	export interface INavigationListItem extends IActionItem {
		model: IModel;
		containerAsNavigationList: INavigationList;
		load(): NavigationListItem;
		load(callback: (element: NavigationListItem) => void, forceRefresh?: boolean);
	}

	export class NavigationListItem extends ActionItem implements INavigationListItem {
		public static typeName: string = "Pages$NavigationListItem";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsNavigationList() { return super.getContainerAs<NavigationList>(NavigationList); }

		private __widget: internal.PartProperty<Widget> =
			new internal.PartProperty<Widget>(NavigationListItem, this, "widget", null, false);
		public get widget(): Widget { return this.__widget.get(); }
		public set widget(newValue: Widget) { this.__widget.set(newValue); }
		private __class: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(NavigationListItem, this, "class", "", internal.PrimitiveTypeEnum.String);
		public get class(): string { return this.__class.get(); }
		public set class(newValue: string) { this.__class.set(newValue); }
		private __style: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(NavigationListItem, this, "style", "", internal.PrimitiveTypeEnum.String);
		public get style(): string { return this.__style.get(); }
		public set style(newValue: string) { this.__style.set(newValue); }
		private __conditionalVisibilitySettings: internal.PartProperty<ConditionalVisibilitySettings> =
			new internal.PartProperty<ConditionalVisibilitySettings>(NavigationListItem, this, "conditionalVisibilitySettings", null, false);
		public get conditionalVisibilitySettings(): ConditionalVisibilitySettings { return this.__conditionalVisibilitySettings.get(); }
		public set conditionalVisibilitySettings(newValue: ConditionalVisibilitySettings) { this.__conditionalVisibilitySettings.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new NavigationListItem() cannot be invoked directly, please use 'model.pages.createNavigationListItem()'"
				);
			}
		}

		/**
		 * Creates and returns a new NavigationListItem instance in the SDK and on the server.
		 * The new NavigationListItem will be automatically stored in the 'items' property
		 * of the parent NavigationList element passed as argument.
		 */
		public static createIn(container: NavigationList): NavigationListItem {
			return internal.instancehelpers.createElement(container, NavigationListItem, "items", true);
		}

		/**
		 * Creates and returns a new NavigationListItem instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): NavigationListItem {
			return internal.instancehelpers.createElement(model, NavigationListItem);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface INavigationSource extends IMenuSource {
		model: IModel;
		containerAsMenuWidget: IMenuWidget;
		load(): NavigationSource;
		load(callback: (element: NavigationSource) => void, forceRefresh?: boolean);
	}

	export class NavigationSource extends MenuSource implements INavigationSource {
		public static typeName: string = "Pages$NavigationSource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMenuWidget() { return super.getContainerAs<MenuWidget>(MenuWidget); }

		private __profileType: internal.EnumProperty<navigation.ProfileType> =
			new internal.EnumProperty<navigation.ProfileType>(NavigationSource, this, "profileType", navigation.ProfileType.Desktop, navigation.ProfileType);
		public get profileType(): navigation.ProfileType { return this.__profileType.get(); }
		public set profileType(newValue: navigation.ProfileType) { this.__profileType.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new NavigationSource() cannot be invoked directly, please use 'model.pages.createNavigationSource()'"
				);
			}
		}

		/**
		 * Creates and returns a new NavigationSource instance in the SDK and on the server.
		 * The new NavigationSource will be automatically stored in the 'menuSource' property
		 * of the parent MenuWidget element passed as argument.
		 */
		public static createIn(container: MenuWidget): NavigationSource {
			return internal.instancehelpers.createElement(container, NavigationSource, "menuSource", false);
		}

		/**
		 * Creates and returns a new NavigationSource instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): NavigationSource {
			return internal.instancehelpers.createElement(model, NavigationSource);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.profileType = navigation.ProfileType.Desktop;
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/navigation-tree relevant section in reference guide}
	 */
	export interface INavigationTree extends IMenuWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): NavigationTree;
		load(callback: (element: NavigationTree) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/navigation-tree relevant section in reference guide}
	 */
	export class NavigationTree extends MenuWidget implements INavigationTree {
		public static typeName: string = "Pages$NavigationTree";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new NavigationTree() cannot be invoked directly, please use 'model.pages.createNavigationTree()'"
				);
			}
		}


		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): NavigationTree {
			internal.createInVersionCheck(container.model, NavigationTree.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, NavigationTree, "footerWidget", false);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): NavigationTree {
			return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): NavigationTree {
			return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): NavigationTree {
			return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): NavigationTree {
			return internal.instancehelpers.createElement(container, NavigationTree, "leftWidget", false);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): NavigationTree {
			return internal.instancehelpers.createElement(container, NavigationTree, "rightWidget", false);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): NavigationTree {
			return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): NavigationTree {
			return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): NavigationTree {
			return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): NavigationTree {
			return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): NavigationTree {
			return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): NavigationTree {
			return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): NavigationTree {
			return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): NavigationTree {
			return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): NavigationTree {
			return internal.instancehelpers.createElement(container, NavigationTree, "firstWidget", false);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): NavigationTree {
			return internal.instancehelpers.createElement(container, NavigationTree, "secondWidget", false);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): NavigationTree {
			return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): NavigationTree {
			return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): NavigationTree {
			return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): NavigationTree {
			return internal.instancehelpers.createElement(container, NavigationTree, "widgets", true);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): NavigationTree {
			internal.createInVersionCheck(container.model, NavigationTree.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, NavigationTree, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * The new NavigationTree will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): NavigationTree {
			internal.createInVersionCheck(container.model, NavigationTree.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, NavigationTree, "reportWidget", false);
		}

		/**
		 * Creates and returns a new NavigationTree instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): NavigationTree {
			return internal.instancehelpers.createElement(model, NavigationTree);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/new-button relevant section in reference guide}
	 */
	export interface INewButton extends IButton {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): NewButton;
		load(callback: (element: NewButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/new-button relevant section in reference guide}
	 */
	export class NewButton extends Button implements INewButton {
		public static typeName: string = "Pages$NewButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"entity" : {
					"deleted" : "6.3.0",
					"deletionMessage" : "Use 'entityPath' instead."
				},
				"entityPath" : {
					"introduced" : "6.3.0"
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __entity: internal.ByNameReferenceProperty<domainmodels.IEntity> =
			new internal.ByNameReferenceProperty<domainmodels.IEntity>(NewButton, this, "entity", null, "DomainModels$Entity");
		/**
		 * In version 6.3.0: deleted
		 */
		public get entity(): domainmodels.IEntity { return this.__entity.get(); }
		public set entity(newValue: domainmodels.IEntity) { this.__entity.set(newValue); }
		get entityQualifiedName(): string { return this.__entity.qualifiedName(); }
		private __entityPath: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(NewButton, this, "entityPath", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type paths.EntityPath.
		 *
		 * In version 6.3.0: introduced
		 */
		public get entityPath(): string { return this.__entityPath.get(); }
		public set entityPath(newValue: string) { this.__entityPath.set(newValue); }
		private __pageSettings: internal.PartProperty<PageSettings> =
			new internal.PartProperty<PageSettings>(NewButton, this, "pageSettings", null, false);
		public get pageSettings(): PageSettings { return this.__pageSettings.get(); }
		public set pageSettings(newValue: PageSettings) { this.__pageSettings.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new NewButton() cannot be invoked directly, please use 'model.pages.createNewButton()'"
				);
			}
		}


		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): NewButton {
			internal.createInVersionCheck(container.model, NewButton.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, NewButton, "footerWidget", false);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): NewButton {
			return internal.instancehelpers.createElement(container, NewButton, "widget", false);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): NewButton {
			return internal.instancehelpers.createElement(container, NewButton, "widget", false);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): NewButton {
			return internal.instancehelpers.createElement(container, NewButton, "widget", false);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): NewButton {
			return internal.instancehelpers.createElement(container, NewButton, "leftWidget", false);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): NewButton {
			return internal.instancehelpers.createElement(container, NewButton, "rightWidget", false);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): NewButton {
			return internal.instancehelpers.createElement(container, NewButton, "widget", false);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): NewButton {
			return internal.instancehelpers.createElement(container, NewButton, "widget", false);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): NewButton {
			return internal.instancehelpers.createElement(container, NewButton, "widget", false);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): NewButton {
			return internal.instancehelpers.createElement(container, NewButton, "widget", false);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): NewButton {
			return internal.instancehelpers.createElement(container, NewButton, "widget", false);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): NewButton {
			return internal.instancehelpers.createElement(container, NewButton, "widget", false);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): NewButton {
			return internal.instancehelpers.createElement(container, NewButton, "widget", false);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): NewButton {
			return internal.instancehelpers.createElement(container, NewButton, "widget", false);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): NewButton {
			return internal.instancehelpers.createElement(container, NewButton, "firstWidget", false);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): NewButton {
			return internal.instancehelpers.createElement(container, NewButton, "secondWidget", false);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): NewButton {
			return internal.instancehelpers.createElement(container, NewButton, "widget", false);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): NewButton {
			return internal.instancehelpers.createElement(container, NewButton, "widget", false);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): NewButton {
			return internal.instancehelpers.createElement(container, NewButton, "widget", false);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): NewButton {
			return internal.instancehelpers.createElement(container, NewButton, "widgets", true);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): NewButton {
			internal.createInVersionCheck(container.model, NewButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, NewButton, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * The new NewButton will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): NewButton {
			internal.createInVersionCheck(container.model, NewButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, NewButton, "reportWidget", false);
		}

		/**
		 * Creates and returns a new NewButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): NewButton {
			return internal.instancehelpers.createElement(model, NewButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "New";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Nieuw";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
		}

	}

	export interface INoClientAction extends IClientAction {
		model: IModel;
		containerAsMenuItem: menus.IMenuItem;
		containerAsActionButton: IActionButton;
		containerAsActionItem: IActionItem;
		containerAsDataViewActionButton: IDataViewActionButton;
		containerAsGridActionButton: IGridActionButton;
		containerAsListView: IListView;
		containerAsStaticImageViewer: IStaticImageViewer;
		load(): NoClientAction;
		load(callback: (element: NoClientAction) => void, forceRefresh?: boolean);
	}

	export class NoClientAction extends ClientAction implements INoClientAction {
		public static typeName: string = "Pages$NoClientAction";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMenuItem() { return super.getContainerAs<menus.MenuItem>(menus.MenuItem); }
		get containerAsActionButton() { return super.getContainerAs<ActionButton>(ActionButton); }
		get containerAsActionItem() { return super.getContainerAs<ActionItem>(ActionItem); }
		get containerAsDataViewActionButton() { return super.getContainerAs<DataViewActionButton>(DataViewActionButton); }
		get containerAsGridActionButton() { return super.getContainerAs<GridActionButton>(GridActionButton); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsStaticImageViewer() { return super.getContainerAs<StaticImageViewer>(StaticImageViewer); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new NoClientAction() cannot be invoked directly, please use 'model.pages.createNoClientAction()'"
				);
			}
		}


		/**
		 * Creates and returns a new NoClientAction instance in the SDK and on the server.
		 * The new NoClientAction will be automatically stored in the 'action' property
		 * of the parent menus.MenuItem element passed as argument.
		 */
		public static createInMenuItemUnderAction(container: menus.MenuItem): NoClientAction {
			return internal.instancehelpers.createElement(container, NoClientAction, "action", false);
		}

		/**
		 * Creates and returns a new NoClientAction instance in the SDK and on the server.
		 * The new NoClientAction will be automatically stored in the 'action' property
		 * of the parent ActionButton element passed as argument.
		 */
		public static createInActionButtonUnderAction(container: ActionButton): NoClientAction {
			return internal.instancehelpers.createElement(container, NoClientAction, "action", false);
		}

		/**
		 * Creates and returns a new NoClientAction instance in the SDK and on the server.
		 * The new NoClientAction will be automatically stored in the 'action' property
		 * of the parent ActionItem element passed as argument.
		 */
		public static createInActionItemUnderAction(container: ActionItem): NoClientAction {
			return internal.instancehelpers.createElement(container, NoClientAction, "action", false);
		}

		/**
		 * Creates and returns a new NoClientAction instance in the SDK and on the server.
		 * The new NoClientAction will be automatically stored in the 'action' property
		 * of the parent DataViewActionButton element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
		 */
		public static createInDataViewActionButtonUnderAction(container: DataViewActionButton): NoClientAction {
			internal.createInVersionCheck(container.model, NoClientAction.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0"]
			);
			return internal.instancehelpers.createElement(container, NoClientAction, "action", false);
		}

		/**
		 * Creates and returns a new NoClientAction instance in the SDK and on the server.
		 * The new NoClientAction will be automatically stored in the 'action' property
		 * of the parent GridActionButton element passed as argument.
		 */
		public static createInGridActionButtonUnderAction(container: GridActionButton): NoClientAction {
			return internal.instancehelpers.createElement(container, NoClientAction, "action", false);
		}

		/**
		 * Creates and returns a new NoClientAction instance in the SDK and on the server.
		 * The new NoClientAction will be automatically stored in the 'clickAction' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderClickAction(container: ListView): NoClientAction {
			return internal.instancehelpers.createElement(container, NoClientAction, "clickAction", false);
		}

		/**
		 * Creates and returns a new NoClientAction instance in the SDK and on the server.
		 * The new NoClientAction will be automatically stored in the 'clickAction' property
		 * of the parent StaticImageViewer element passed as argument.
		 */
		public static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): NoClientAction {
			return internal.instancehelpers.createElement(container, NoClientAction, "clickAction", false);
		}

		/**
		 * Creates and returns a new NoClientAction instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): NoClientAction {
			return internal.instancehelpers.createElement(model, NoClientAction);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IOfflineSchema extends internal.IElement {
		model: IModel;
		load(): OfflineSchema;
		load(callback: (element: OfflineSchema) => void, forceRefresh?: boolean);
	}

	export class OfflineSchema extends internal.Element implements IOfflineSchema {
		public static typeName: string = "Pages$OfflineSchema";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"tables" : {
					"introduced" : "6.4.0"
				}
			}
		}, internal.StructureType.Element);
		model: IModel;


		private __role: internal.ByNameReferenceProperty<security.IUserRole> =
			new internal.ByNameReferenceProperty<security.IUserRole>(OfflineSchema, this, "role", null, "Security$UserRole");
		public get role(): security.IUserRole { return this.__role.get(); }
		public set role(newValue: security.IUserRole) { this.__role.set(newValue); }
		get roleQualifiedName(): string { return this.__role.qualifiedName(); }
		private __tables: internal.PrimitiveListProperty<string> =
			new internal.PrimitiveListProperty<string>(OfflineSchema, this, "tables", [], internal.PrimitiveTypeEnum.String);
		/**
		 * In version 6.4.0: introduced
		 */
		public get tables(): internal.IList<string> { return this.__tables.get(); }
		public set tables(newValue: internal.IList<string>) { this.__tables.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new OfflineSchema() cannot be invoked directly, please use 'model.pages.createOfflineSchema()'"
				);
			}
		}


		/**
		 * Creates and returns a new OfflineSchema instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): OfflineSchema {
			return internal.instancehelpers.createElement(model, OfflineSchema);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IOfflineSchemaFetchInstruction extends internal.IElement {
		model: IModel;
		load(): OfflineSchemaFetchInstruction;
		load(callback: (element: OfflineSchemaFetchInstruction) => void, forceRefresh?: boolean);
	}

	export class OfflineSchemaFetchInstruction extends internal.Element implements IOfflineSchemaFetchInstruction {
		public static typeName: string = "Pages$OfflineSchemaFetchInstruction";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;


		private __tableName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(OfflineSchemaFetchInstruction, this, "tableName", "", internal.PrimitiveTypeEnum.String);
		public get tableName(): string { return this.__tableName.get(); }
		public set tableName(newValue: string) { this.__tableName.set(newValue); }
		private __xPath: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(OfflineSchemaFetchInstruction, this, "xPath", "", internal.PrimitiveTypeEnum.String);
		public get xPath(): string { return this.__xPath.get(); }
		public set xPath(newValue: string) { this.__xPath.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new OfflineSchemaFetchInstruction() cannot be invoked directly, please use 'model.pages.createOfflineSchemaFetchInstruction()'"
				);
			}
		}


		/**
		 * Creates and returns a new OfflineSchemaFetchInstruction instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): OfflineSchemaFetchInstruction {
			return internal.instancehelpers.createElement(model, OfflineSchemaFetchInstruction);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IOnClickBehavior extends internal.IElement {
		model: IModel;
		containerAsDynamicImageViewer: IDynamicImageViewer;
		load(): OnClickBehavior;
		load(callback: (element: OnClickBehavior) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class OnClickBehavior extends internal.Element implements IOnClickBehavior {
		public static typeName: string = "Pages$OnClickBehavior";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDynamicImageViewer() { return super.getContainerAs<DynamicImageViewer>(DynamicImageViewer); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new OnClickBehavior() cannot be invoked directly, please use 'model.pages.createOnClickBehavior()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IOnClickEnlarge extends IOnClickBehavior {
		model: IModel;
		containerAsDynamicImageViewer: IDynamicImageViewer;
		load(): OnClickEnlarge;
		load(callback: (element: OnClickEnlarge) => void, forceRefresh?: boolean);
	}

	export class OnClickEnlarge extends OnClickBehavior implements IOnClickEnlarge {
		public static typeName: string = "Pages$OnClickEnlarge";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDynamicImageViewer() { return super.getContainerAs<DynamicImageViewer>(DynamicImageViewer); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new OnClickEnlarge() cannot be invoked directly, please use 'model.pages.createOnClickEnlarge()'"
				);
			}
		}

		/**
		 * Creates and returns a new OnClickEnlarge instance in the SDK and on the server.
		 * The new OnClickEnlarge will be automatically stored in the 'onClickBehavior' property
		 * of the parent DynamicImageViewer element passed as argument.
		 */
		public static createIn(container: DynamicImageViewer): OnClickEnlarge {
			return internal.instancehelpers.createElement(container, OnClickEnlarge, "onClickBehavior", false);
		}

		/**
		 * Creates and returns a new OnClickEnlarge instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): OnClickEnlarge {
			return internal.instancehelpers.createElement(model, OnClickEnlarge);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IOnClickMicroflow extends IOnClickBehavior {
		model: IModel;
		containerAsDynamicImageViewer: IDynamicImageViewer;
		load(): OnClickMicroflow;
		load(callback: (element: OnClickMicroflow) => void, forceRefresh?: boolean);
	}

	export class OnClickMicroflow extends OnClickBehavior implements IOnClickMicroflow {
		public static typeName: string = "Pages$OnClickMicroflow";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"microflowSettings" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDynamicImageViewer() { return super.getContainerAs<DynamicImageViewer>(DynamicImageViewer); }

		private __microflowSettings: internal.PartProperty<MicroflowSettings> =
			new internal.PartProperty<MicroflowSettings>(OnClickMicroflow, this, "microflowSettings", null, true);
		public get microflowSettings(): MicroflowSettings { return this.__microflowSettings.get(); }
		public set microflowSettings(newValue: MicroflowSettings) { this.__microflowSettings.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new OnClickMicroflow() cannot be invoked directly, please use 'model.pages.createOnClickMicroflow()'"
				);
			}
		}

		/**
		 * Creates and returns a new OnClickMicroflow instance in the SDK and on the server.
		 * The new OnClickMicroflow will be automatically stored in the 'onClickBehavior' property
		 * of the parent DynamicImageViewer element passed as argument.
		 */
		public static createIn(container: DynamicImageViewer): OnClickMicroflow {
			return internal.instancehelpers.createElement(container, OnClickMicroflow, "onClickBehavior", false);
		}

		/**
		 * Creates and returns a new OnClickMicroflow instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): OnClickMicroflow {
			return internal.instancehelpers.createElement(model, OnClickMicroflow);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.microflowSettings = MicroflowSettings.create(this.model);
		}

	}

	export interface IOnClickNothing extends IOnClickBehavior {
		model: IModel;
		containerAsDynamicImageViewer: IDynamicImageViewer;
		load(): OnClickNothing;
		load(callback: (element: OnClickNothing) => void, forceRefresh?: boolean);
	}

	export class OnClickNothing extends OnClickBehavior implements IOnClickNothing {
		public static typeName: string = "Pages$OnClickNothing";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDynamicImageViewer() { return super.getContainerAs<DynamicImageViewer>(DynamicImageViewer); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new OnClickNothing() cannot be invoked directly, please use 'model.pages.createOnClickNothing()'"
				);
			}
		}

		/**
		 * Creates and returns a new OnClickNothing instance in the SDK and on the server.
		 * The new OnClickNothing will be automatically stored in the 'onClickBehavior' property
		 * of the parent DynamicImageViewer element passed as argument.
		 */
		public static createIn(container: DynamicImageViewer): OnClickNothing {
			return internal.instancehelpers.createElement(container, OnClickNothing, "onClickBehavior", false);
		}

		/**
		 * Creates and returns a new OnClickNothing instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): OnClickNothing {
			return internal.instancehelpers.createElement(model, OnClickNothing);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/page relevant section in reference guide}
	 */
	export interface IPage extends IFormBase {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		load(): Page;
		load(callback: (element: Page) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/page relevant section in reference guide}
	 */
	export class Page extends FormBase implements IPage {
		public static typeName: string = "Pages$Page";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"layoutCall" : {
					"required" : {
						"currentValue" : true
					}
				},
				"title" : {
					"required" : {
						"currentValue" : true
					}
				},
				"popupCloseAction" : {
					"introduced" : "6.7.0"
				},
				"url" : {
					"introduced" : "6.7.0"
				}
			}
		}, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }

		private __layoutCall: internal.PartProperty<LayoutCall> =
			new internal.PartProperty<LayoutCall>(Page, this, "layoutCall", null, true);
		public get layoutCall(): LayoutCall { return this.__layoutCall.get(); }
		public set layoutCall(newValue: LayoutCall) { this.__layoutCall.set(newValue); }
		private __title: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(Page, this, "title", null, true);
		public get title(): texts.Text { return this.__title.get(); }
		public set title(newValue: texts.Text) { this.__title.set(newValue); }
		private __class: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Page, this, "class", "", internal.PrimitiveTypeEnum.String);
		public get class(): string { return this.__class.get(); }
		public set class(newValue: string) { this.__class.set(newValue); }
		private __style: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Page, this, "style", "", internal.PrimitiveTypeEnum.String);
		public get style(): string { return this.__style.get(); }
		public set style(newValue: string) { this.__style.set(newValue); }
		private __allowedRoles: internal.ByNameReferenceListProperty<security.IModuleRole> =
			new internal.ByNameReferenceListProperty<security.IModuleRole>(Page, this, "allowedRoles", [], "Security$ModuleRole");
		public get allowedRoles(): internal.IList<security.IModuleRole> { return this.__allowedRoles.get(); }
		public set allowedRoles(newValue: internal.IList<security.IModuleRole>) { this.__allowedRoles.set(newValue); }
		get allowedRolesQualifiedNames(): string[] { return this.__allowedRoles.qualifiedNames(); }
		private __popupCloseAction: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Page, this, "popupCloseAction", "", internal.PrimitiveTypeEnum.String);
		/**
		 * In version 6.7.0: introduced
		 */
		public get popupCloseAction(): string { return this.__popupCloseAction.get(); }
		public set popupCloseAction(newValue: string) { this.__popupCloseAction.set(newValue); }
		private __popupWidth: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(Page, this, "popupWidth", 0, internal.PrimitiveTypeEnum.Integer);
		public get popupWidth(): number { return this.__popupWidth.get(); }
		public set popupWidth(newValue: number) { this.__popupWidth.set(newValue); }
		private __popupHeight: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(Page, this, "popupHeight", 0, internal.PrimitiveTypeEnum.Integer);
		public get popupHeight(): number { return this.__popupHeight.get(); }
		public set popupHeight(newValue: number) { this.__popupHeight.set(newValue); }
		private __popupResizable: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(Page, this, "popupResizable", false, internal.PrimitiveTypeEnum.Boolean);
		public get popupResizable(): boolean { return this.__popupResizable.get(); }
		public set popupResizable(newValue: boolean) { this.__popupResizable.set(newValue); }
		private __markAsUsed: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(Page, this, "markAsUsed", false, internal.PrimitiveTypeEnum.Boolean);
		public get markAsUsed(): boolean { return this.__markAsUsed.get(); }
		public set markAsUsed(newValue: boolean) { this.__markAsUsed.set(newValue); }
		private __url: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Page, this, "url", "", internal.PrimitiveTypeEnum.String);
		/**
		 * In version 6.7.0: introduced
		 */
		public get url(): string { return this.__url.get(); }
		public set url(newValue: string) { this.__url.set(newValue); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "documents";
		}

		/**
		 * Creates a new Page unit in the SDK and on the server.
		 * Expects one argument, the projects.IFolderBase in which this unit is contained.
		 */
		public static createIn(container: projects.IFolderBase): Page {
			return internal.instancehelpers.createUnit(container, Page);
		}

		_isByNameReferrable() { return true; }

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.layoutCall = LayoutCall.create(this.model);
			this.popupResizable = true;
			this.title = ((text:texts.Text) => {
				text.translations.replace([ ((translation:texts.Translation) => {
					translation.languageCode = "en_US";
					translation.text = "Page Title";
					return translation;
				})(texts.Translation.create(this.model)) ]);
				return text;
			})(texts.Text.create(this.model));
		}

	}

	export interface IPageClientAction extends IClientAction {
		model: IModel;
		containerAsMenuItem: menus.IMenuItem;
		containerAsActionButton: IActionButton;
		containerAsActionItem: IActionItem;
		containerAsDataViewActionButton: IDataViewActionButton;
		containerAsGridActionButton: IGridActionButton;
		containerAsListView: IListView;
		containerAsStaticImageViewer: IStaticImageViewer;
		load(): PageClientAction;
		load(callback: (element: PageClientAction) => void, forceRefresh?: boolean);
	}

	export class PageClientAction extends ClientAction implements IPageClientAction {
		public static typeName: string = "Pages$PageClientAction";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"pageSettings" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsMenuItem() { return super.getContainerAs<menus.MenuItem>(menus.MenuItem); }
		get containerAsActionButton() { return super.getContainerAs<ActionButton>(ActionButton); }
		get containerAsActionItem() { return super.getContainerAs<ActionItem>(ActionItem); }
		get containerAsDataViewActionButton() { return super.getContainerAs<DataViewActionButton>(DataViewActionButton); }
		get containerAsGridActionButton() { return super.getContainerAs<GridActionButton>(GridActionButton); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsStaticImageViewer() { return super.getContainerAs<StaticImageViewer>(StaticImageViewer); }

		private __pageSettings: internal.PartProperty<PageSettings> =
			new internal.PartProperty<PageSettings>(PageClientAction, this, "pageSettings", null, true);
		public get pageSettings(): PageSettings { return this.__pageSettings.get(); }
		public set pageSettings(newValue: PageSettings) { this.__pageSettings.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new PageClientAction() cannot be invoked directly, please use 'model.pages.createPageClientAction()'"
				);
			}
		}


		/**
		 * Creates and returns a new PageClientAction instance in the SDK and on the server.
		 * The new PageClientAction will be automatically stored in the 'action' property
		 * of the parent menus.MenuItem element passed as argument.
		 */
		public static createInMenuItemUnderAction(container: menus.MenuItem): PageClientAction {
			return internal.instancehelpers.createElement(container, PageClientAction, "action", false);
		}

		/**
		 * Creates and returns a new PageClientAction instance in the SDK and on the server.
		 * The new PageClientAction will be automatically stored in the 'action' property
		 * of the parent ActionButton element passed as argument.
		 */
		public static createInActionButtonUnderAction(container: ActionButton): PageClientAction {
			return internal.instancehelpers.createElement(container, PageClientAction, "action", false);
		}

		/**
		 * Creates and returns a new PageClientAction instance in the SDK and on the server.
		 * The new PageClientAction will be automatically stored in the 'action' property
		 * of the parent ActionItem element passed as argument.
		 */
		public static createInActionItemUnderAction(container: ActionItem): PageClientAction {
			return internal.instancehelpers.createElement(container, PageClientAction, "action", false);
		}

		/**
		 * Creates and returns a new PageClientAction instance in the SDK and on the server.
		 * The new PageClientAction will be automatically stored in the 'action' property
		 * of the parent DataViewActionButton element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
		 */
		public static createInDataViewActionButtonUnderAction(container: DataViewActionButton): PageClientAction {
			internal.createInVersionCheck(container.model, PageClientAction.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0"]
			);
			return internal.instancehelpers.createElement(container, PageClientAction, "action", false);
		}

		/**
		 * Creates and returns a new PageClientAction instance in the SDK and on the server.
		 * The new PageClientAction will be automatically stored in the 'action' property
		 * of the parent GridActionButton element passed as argument.
		 */
		public static createInGridActionButtonUnderAction(container: GridActionButton): PageClientAction {
			return internal.instancehelpers.createElement(container, PageClientAction, "action", false);
		}

		/**
		 * Creates and returns a new PageClientAction instance in the SDK and on the server.
		 * The new PageClientAction will be automatically stored in the 'clickAction' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderClickAction(container: ListView): PageClientAction {
			return internal.instancehelpers.createElement(container, PageClientAction, "clickAction", false);
		}

		/**
		 * Creates and returns a new PageClientAction instance in the SDK and on the server.
		 * The new PageClientAction will be automatically stored in the 'clickAction' property
		 * of the parent StaticImageViewer element passed as argument.
		 */
		public static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): PageClientAction {
			return internal.instancehelpers.createElement(container, PageClientAction, "clickAction", false);
		}

		/**
		 * Creates and returns a new PageClientAction instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): PageClientAction {
			return internal.instancehelpers.createElement(model, PageClientAction);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.pageSettings = PageSettings.create(this.model);
		}

	}

	export interface IPageForSpecialization extends internal.IElement {
		model: IModel;
		containerAsGridEditButton: IGridEditButton;
		load(): PageForSpecialization;
		load(callback: (element: PageForSpecialization) => void, forceRefresh?: boolean);
	}

	export class PageForSpecialization extends internal.Element implements IPageForSpecialization {
		public static typeName: string = "Pages$PageForSpecialization";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"entity" : {
					"required" : {
						"currentValue" : true
					}
				},
				"pageSettings" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsGridEditButton() { return super.getContainerAs<GridEditButton>(GridEditButton); }

		private __entity: internal.ByNameReferenceProperty<domainmodels.IEntity> =
			new internal.ByNameReferenceProperty<domainmodels.IEntity>(PageForSpecialization, this, "entity", null, "DomainModels$Entity");
		public get entity(): domainmodels.IEntity { return this.__entity.get(); }
		public set entity(newValue: domainmodels.IEntity) { this.__entity.set(newValue); }
		get entityQualifiedName(): string { return this.__entity.qualifiedName(); }
		private __pageSettings: internal.PartProperty<PageSettings> =
			new internal.PartProperty<PageSettings>(PageForSpecialization, this, "pageSettings", null, true);
		public get pageSettings(): PageSettings { return this.__pageSettings.get(); }
		public set pageSettings(newValue: PageSettings) { this.__pageSettings.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new PageForSpecialization() cannot be invoked directly, please use 'model.pages.createPageForSpecialization()'"
				);
			}
		}

		/**
		 * Creates and returns a new PageForSpecialization instance in the SDK and on the server.
		 * The new PageForSpecialization will be automatically stored in the 'pagesForSpecializations' property
		 * of the parent GridEditButton element passed as argument.
		 */
		public static createIn(container: GridEditButton): PageForSpecialization {
			return internal.instancehelpers.createElement(container, PageForSpecialization, "pagesForSpecializations", true);
		}

		/**
		 * Creates and returns a new PageForSpecialization instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): PageForSpecialization {
			return internal.instancehelpers.createElement(model, PageForSpecialization);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.pageSettings = PageSettings.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/opening-pages relevant section in reference guide}
	 */
	export interface IPageSettings extends internal.IElement {
		model: IModel;
		containerAsShowPageAction: microflows.IShowPageAction;
		containerAsAssociationWidget: IAssociationWidget;
		containerAsDataGridAddButton: IDataGridAddButton;
		containerAsGridEditButton: IGridEditButton;
		containerAsGridNewButton: IGridNewButton;
		containerAsNewButton: INewButton;
		containerAsPageClientAction: IPageClientAction;
		containerAsPageForSpecialization: IPageForSpecialization;
		containerAsReferenceSelector: IReferenceSelector;
		load(): PageSettings;
		load(callback: (element: PageSettings) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/opening-pages relevant section in reference guide}
	 */
	export class PageSettings extends internal.Element implements IPageSettings {
		public static typeName: string = "Pages$PageSettings";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsShowPageAction() { return super.getContainerAs<microflows.ShowPageAction>(microflows.ShowPageAction); }
		get containerAsAssociationWidget() { return super.getContainerAs<AssociationWidget>(AssociationWidget); }
		get containerAsDataGridAddButton() { return super.getContainerAs<DataGridAddButton>(DataGridAddButton); }
		get containerAsGridEditButton() { return super.getContainerAs<GridEditButton>(GridEditButton); }
		get containerAsGridNewButton() { return super.getContainerAs<GridNewButton>(GridNewButton); }
		get containerAsNewButton() { return super.getContainerAs<NewButton>(NewButton); }
		get containerAsPageClientAction() { return super.getContainerAs<PageClientAction>(PageClientAction); }
		get containerAsPageForSpecialization() { return super.getContainerAs<PageForSpecialization>(PageForSpecialization); }
		get containerAsReferenceSelector() { return super.getContainerAs<ReferenceSelector>(ReferenceSelector); }

		private __page: internal.ByNameReferenceProperty<IPage> =
			new internal.ByNameReferenceProperty<IPage>(PageSettings, this, "page", null, "Pages$Page");
		public get page(): IPage { return this.__page.get(); }
		public set page(newValue: IPage) { this.__page.set(newValue); }
		get pageQualifiedName(): string { return this.__page.qualifiedName(); }
		private __formTitle: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(PageSettings, this, "formTitle", null, false);
		public get formTitle(): texts.Text { return this.__formTitle.get(); }
		public set formTitle(newValue: texts.Text) { this.__formTitle.set(newValue); }
		private __location: internal.EnumProperty<FormLocation> =
			new internal.EnumProperty<FormLocation>(PageSettings, this, "location", FormLocation.Popup, FormLocation);
		public get location(): FormLocation { return this.__location.get(); }
		public set location(newValue: FormLocation) { this.__location.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new PageSettings() cannot be invoked directly, please use 'model.pages.createPageSettings()'"
				);
			}
		}


		/**
		 * Creates and returns a new PageSettings instance in the SDK and on the server.
		 * The new PageSettings will be automatically stored in the 'pageSettings' property
		 * of the parent microflows.ShowPageAction element passed as argument.
		 */
		public static createInShowPageActionUnderPageSettings(container: microflows.ShowPageAction): PageSettings {
			return internal.instancehelpers.createElement(container, PageSettings, "pageSettings", false);
		}

		/**
		 * Creates and returns a new PageSettings instance in the SDK and on the server.
		 * The new PageSettings will be automatically stored in the 'selectPageSettings' property
		 * of the parent AssociationWidget element passed as argument.
		 */
		public static createInAssociationWidgetUnderSelectPageSettings(container: AssociationWidget): PageSettings {
			return internal.instancehelpers.createElement(container, PageSettings, "selectPageSettings", false);
		}

		/**
		 * Creates and returns a new PageSettings instance in the SDK and on the server.
		 * The new PageSettings will be automatically stored in the 'pageSettings' property
		 * of the parent DataGridAddButton element passed as argument.
		 */
		public static createInDataGridAddButtonUnderPageSettings(container: DataGridAddButton): PageSettings {
			return internal.instancehelpers.createElement(container, PageSettings, "pageSettings", false);
		}

		/**
		 * Creates and returns a new PageSettings instance in the SDK and on the server.
		 * The new PageSettings will be automatically stored in the 'pageSettings' property
		 * of the parent GridEditButton element passed as argument.
		 */
		public static createInGridEditButtonUnderPageSettings(container: GridEditButton): PageSettings {
			return internal.instancehelpers.createElement(container, PageSettings, "pageSettings", false);
		}

		/**
		 * Creates and returns a new PageSettings instance in the SDK and on the server.
		 * The new PageSettings will be automatically stored in the 'pageSettings' property
		 * of the parent GridNewButton element passed as argument.
		 */
		public static createInGridNewButtonUnderPageSettings(container: GridNewButton): PageSettings {
			return internal.instancehelpers.createElement(container, PageSettings, "pageSettings", false);
		}

		/**
		 * Creates and returns a new PageSettings instance in the SDK and on the server.
		 * The new PageSettings will be automatically stored in the 'pageSettings' property
		 * of the parent NewButton element passed as argument.
		 */
		public static createInNewButtonUnderPageSettings(container: NewButton): PageSettings {
			return internal.instancehelpers.createElement(container, PageSettings, "pageSettings", false);
		}

		/**
		 * Creates and returns a new PageSettings instance in the SDK and on the server.
		 * The new PageSettings will be automatically stored in the 'pageSettings' property
		 * of the parent PageClientAction element passed as argument.
		 */
		public static createInPageClientActionUnderPageSettings(container: PageClientAction): PageSettings {
			return internal.instancehelpers.createElement(container, PageSettings, "pageSettings", false);
		}

		/**
		 * Creates and returns a new PageSettings instance in the SDK and on the server.
		 * The new PageSettings will be automatically stored in the 'pageSettings' property
		 * of the parent PageForSpecialization element passed as argument.
		 */
		public static createInPageForSpecializationUnderPageSettings(container: PageForSpecialization): PageSettings {
			return internal.instancehelpers.createElement(container, PageSettings, "pageSettings", false);
		}

		/**
		 * Creates and returns a new PageSettings instance in the SDK and on the server.
		 * The new PageSettings will be automatically stored in the 'gotoPageSettings' property
		 * of the parent ReferenceSelector element passed as argument.
		 */
		public static createInReferenceSelectorUnderGotoPageSettings(container: ReferenceSelector): PageSettings {
			return internal.instancehelpers.createElement(container, PageSettings, "gotoPageSettings", false);
		}

		/**
		 * Creates and returns a new PageSettings instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): PageSettings {
			return internal.instancehelpers.createElement(model, PageSettings);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.location = FormLocation.Popup;
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/placeholder relevant section in reference guide}
	 */
	export interface IPlaceholder extends IWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): Placeholder;
		load(callback: (element: Placeholder) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/placeholder relevant section in reference guide}
	 */
	export class Placeholder extends Widget implements IPlaceholder {
		public static typeName: string = "Pages$Placeholder";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Placeholder() cannot be invoked directly, please use 'model.pages.createPlaceholder()'"
				);
			}
		}


		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): Placeholder {
			internal.createInVersionCheck(container.model, Placeholder.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, Placeholder, "footerWidget", false);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): Placeholder {
			return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): Placeholder {
			return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): Placeholder {
			return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): Placeholder {
			return internal.instancehelpers.createElement(container, Placeholder, "leftWidget", false);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): Placeholder {
			return internal.instancehelpers.createElement(container, Placeholder, "rightWidget", false);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): Placeholder {
			return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): Placeholder {
			return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): Placeholder {
			return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): Placeholder {
			return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): Placeholder {
			return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): Placeholder {
			return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): Placeholder {
			return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): Placeholder {
			return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): Placeholder {
			return internal.instancehelpers.createElement(container, Placeholder, "firstWidget", false);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): Placeholder {
			return internal.instancehelpers.createElement(container, Placeholder, "secondWidget", false);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): Placeholder {
			return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): Placeholder {
			return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): Placeholder {
			return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): Placeholder {
			return internal.instancehelpers.createElement(container, Placeholder, "widgets", true);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): Placeholder {
			internal.createInVersionCheck(container.model, Placeholder.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, Placeholder, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * The new Placeholder will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): Placeholder {
			internal.createInVersionCheck(container.model, Placeholder.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, Placeholder, "reportWidget", false);
		}

		/**
		 * Creates and returns a new Placeholder instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): Placeholder {
			return internal.instancehelpers.createElement(model, Placeholder);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IRadioButtonGroup extends IAttributeWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): RadioButtonGroup;
		load(callback: (element: RadioButtonGroup) => void, forceRefresh?: boolean);
	}

	export class RadioButtonGroup extends AttributeWidget implements IRadioButtonGroup {
		public static typeName: string = "Pages$RadioButtonGroup";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __renderHorizontal: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(RadioButtonGroup, this, "renderHorizontal", false, internal.PrimitiveTypeEnum.Boolean);
		public get renderHorizontal(): boolean { return this.__renderHorizontal.get(); }
		public set renderHorizontal(newValue: boolean) { this.__renderHorizontal.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new RadioButtonGroup() cannot be invoked directly, please use 'model.pages.createRadioButtonGroup()'"
				);
			}
		}


		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): RadioButtonGroup {
			internal.createInVersionCheck(container.model, RadioButtonGroup.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "footerWidget", false);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): RadioButtonGroup {
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): RadioButtonGroup {
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): RadioButtonGroup {
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): RadioButtonGroup {
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "leftWidget", false);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): RadioButtonGroup {
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "rightWidget", false);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): RadioButtonGroup {
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): RadioButtonGroup {
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): RadioButtonGroup {
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): RadioButtonGroup {
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): RadioButtonGroup {
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): RadioButtonGroup {
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): RadioButtonGroup {
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): RadioButtonGroup {
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): RadioButtonGroup {
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "firstWidget", false);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): RadioButtonGroup {
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "secondWidget", false);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): RadioButtonGroup {
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): RadioButtonGroup {
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): RadioButtonGroup {
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): RadioButtonGroup {
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "widgets", true);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): RadioButtonGroup {
			internal.createInVersionCheck(container.model, RadioButtonGroup.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * The new RadioButtonGroup will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): RadioButtonGroup {
			internal.createInVersionCheck(container.model, RadioButtonGroup.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, RadioButtonGroup, "reportWidget", false);
		}

		/**
		 * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): RadioButtonGroup {
			return internal.instancehelpers.createElement(model, RadioButtonGroup);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.renderHorizontal = true;
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/range-search-field relevant section in reference guide}
	 */
	export interface IRangeSearchField extends ISearchField {
		model: IModel;
		containerAsControlBar: IControlBar;
		load(): RangeSearchField;
		load(callback: (element: RangeSearchField) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/range-search-field relevant section in reference guide}
	 */
	export class RangeSearchField extends SearchField implements IRangeSearchField {
		public static typeName: string = "Pages$RangeSearchField";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }

		private __lowerBound: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(RangeSearchField, this, "lowerBound", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type paths.AttributePath.
		 */
		public get lowerBound(): string { return this.__lowerBound.get(); }
		public set lowerBound(newValue: string) { this.__lowerBound.set(newValue); }
		private __upperBound: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(RangeSearchField, this, "upperBound", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type paths.AttributePath.
		 */
		public get upperBound(): string { return this.__upperBound.get(); }
		public set upperBound(newValue: string) { this.__upperBound.set(newValue); }
		private __includeLower: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(RangeSearchField, this, "includeLower", false, internal.PrimitiveTypeEnum.Boolean);
		public get includeLower(): boolean { return this.__includeLower.get(); }
		public set includeLower(newValue: boolean) { this.__includeLower.set(newValue); }
		private __includeUpper: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(RangeSearchField, this, "includeUpper", false, internal.PrimitiveTypeEnum.Boolean);
		public get includeUpper(): boolean { return this.__includeUpper.get(); }
		public set includeUpper(newValue: boolean) { this.__includeUpper.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new RangeSearchField() cannot be invoked directly, please use 'model.pages.createRangeSearchField()'"
				);
			}
		}

		/**
		 * Creates and returns a new RangeSearchField instance in the SDK and on the server.
		 * The new RangeSearchField will be automatically stored in the 'items' property
		 * of the parent ControlBar element passed as argument.
		 */
		public static createIn(container: ControlBar): RangeSearchField {
			return internal.instancehelpers.createElement(container, RangeSearchField, "items", true);
		}

		/**
		 * Creates and returns a new RangeSearchField instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): RangeSearchField {
			return internal.instancehelpers.createElement(model, RangeSearchField);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/reference-selector relevant section in reference guide}
	 */
	export interface IReferenceSelector extends IAssociationWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): ReferenceSelector;
		load(callback: (element: ReferenceSelector) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/reference-selector relevant section in reference guide}
	 */
	export class ReferenceSelector extends AssociationWidget implements IReferenceSelector {
		public static typeName: string = "Pages$ReferenceSelector";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"requiredMessage" : {
					"required" : {
						"currentValue" : true
					}
				},
				"gotoPageSettings" : {
					"required" : {
						"currentValue" : true
					}
				},
				"formattingInfo" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __required: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(ReferenceSelector, this, "required", false, internal.PrimitiveTypeEnum.Boolean);
		public get required(): boolean { return this.__required.get(); }
		public set required(newValue: boolean) { this.__required.set(newValue); }
		private __requiredMessage: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(ReferenceSelector, this, "requiredMessage", null, true);
		public get requiredMessage(): texts.Text { return this.__requiredMessage.get(); }
		public set requiredMessage(newValue: texts.Text) { this.__requiredMessage.set(newValue); }
		private __renderMode: internal.EnumProperty<ReferenceSelectorRenderModeType> =
			new internal.EnumProperty<ReferenceSelectorRenderModeType>(ReferenceSelector, this, "renderMode", ReferenceSelectorRenderModeType.DropDown, ReferenceSelectorRenderModeType);
		public get renderMode(): ReferenceSelectorRenderModeType { return this.__renderMode.get(); }
		public set renderMode(newValue: ReferenceSelectorRenderModeType) { this.__renderMode.set(newValue); }
		private __gotoPageSettings: internal.PartProperty<PageSettings> =
			new internal.PartProperty<PageSettings>(ReferenceSelector, this, "gotoPageSettings", null, true);
		public get gotoPageSettings(): PageSettings { return this.__gotoPageSettings.get(); }
		public set gotoPageSettings(newValue: PageSettings) { this.__gotoPageSettings.set(newValue); }
		private __formattingInfo: internal.PartProperty<FormattingInfo> =
			new internal.PartProperty<FormattingInfo>(ReferenceSelector, this, "formattingInfo", null, true);
		public get formattingInfo(): FormattingInfo { return this.__formattingInfo.get(); }
		public set formattingInfo(newValue: FormattingInfo) { this.__formattingInfo.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ReferenceSelector() cannot be invoked directly, please use 'model.pages.createReferenceSelector()'"
				);
			}
		}


		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): ReferenceSelector {
			internal.createInVersionCheck(container.model, ReferenceSelector.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, ReferenceSelector, "footerWidget", false);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): ReferenceSelector {
			return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): ReferenceSelector {
			return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): ReferenceSelector {
			return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): ReferenceSelector {
			return internal.instancehelpers.createElement(container, ReferenceSelector, "leftWidget", false);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): ReferenceSelector {
			return internal.instancehelpers.createElement(container, ReferenceSelector, "rightWidget", false);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): ReferenceSelector {
			return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ReferenceSelector {
			return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ReferenceSelector {
			return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): ReferenceSelector {
			return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): ReferenceSelector {
			return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): ReferenceSelector {
			return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ReferenceSelector {
			return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): ReferenceSelector {
			return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): ReferenceSelector {
			return internal.instancehelpers.createElement(container, ReferenceSelector, "firstWidget", false);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): ReferenceSelector {
			return internal.instancehelpers.createElement(container, ReferenceSelector, "secondWidget", false);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): ReferenceSelector {
			return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): ReferenceSelector {
			return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ReferenceSelector {
			return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): ReferenceSelector {
			return internal.instancehelpers.createElement(container, ReferenceSelector, "widgets", true);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): ReferenceSelector {
			internal.createInVersionCheck(container.model, ReferenceSelector.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReferenceSelector, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * The new ReferenceSelector will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): ReferenceSelector {
			internal.createInVersionCheck(container.model, ReferenceSelector.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReferenceSelector, "reportWidget", false);
		}

		/**
		 * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ReferenceSelector {
			return internal.instancehelpers.createElement(model, ReferenceSelector);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.formattingInfo = FormattingInfo.create(this.model);
			this.gotoPageSettings = PageSettings.create(this.model);
			this.renderMode = ReferenceSelectorRenderModeType.DropDown;
			this.requiredMessage = texts.Text.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/reference-set-selector relevant section in reference guide}
	 */
	export interface IReferenceSetSelector extends IColumnGrid {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): ReferenceSetSelector;
		load(callback: (element: ReferenceSetSelector) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/reference-set-selector relevant section in reference guide}
	 */
	export class ReferenceSetSelector extends ColumnGrid implements IReferenceSetSelector {
		public static typeName: string = "Pages$ReferenceSetSelector";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"onChangeMicroflowSettings" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __onChangeMicroflowSettings: internal.PartProperty<MicroflowSettings> =
			new internal.PartProperty<MicroflowSettings>(ReferenceSetSelector, this, "onChangeMicroflowSettings", null, true);
		public get onChangeMicroflowSettings(): MicroflowSettings { return this.__onChangeMicroflowSettings.get(); }
		public set onChangeMicroflowSettings(newValue: MicroflowSettings) { this.__onChangeMicroflowSettings.set(newValue); }
		private __constrainedBy: internal.PrimitiveListProperty<string> =
			new internal.PrimitiveListProperty<string>(ReferenceSetSelector, this, "constrainedBy", [], internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type paths.EntityPath.
		 */
		public get constrainedBy(): internal.IList<string> { return this.__constrainedBy.get(); }
		public set constrainedBy(newValue: internal.IList<string>) { this.__constrainedBy.set(newValue); }
		private __xPathConstraint: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ReferenceSetSelector, this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
		 */
		public get xPathConstraint(): string { return this.__xPathConstraint.get(); }
		public set xPathConstraint(newValue: string) { this.__xPathConstraint.set(newValue); }
		private __removeAllFromContext: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(ReferenceSetSelector, this, "removeAllFromContext", false, internal.PrimitiveTypeEnum.Boolean);
		public get removeAllFromContext(): boolean { return this.__removeAllFromContext.get(); }
		public set removeAllFromContext(newValue: boolean) { this.__removeAllFromContext.set(newValue); }
		private __removeFromContextEntities: internal.ByNameReferenceListProperty<domainmodels.IEntity> =
			new internal.ByNameReferenceListProperty<domainmodels.IEntity>(ReferenceSetSelector, this, "removeFromContextEntities", [], "DomainModels$Entity");
		public get removeFromContextEntities(): internal.IList<domainmodels.IEntity> { return this.__removeFromContextEntities.get(); }
		public set removeFromContextEntities(newValue: internal.IList<domainmodels.IEntity>) { this.__removeFromContextEntities.set(newValue); }
		get removeFromContextEntitiesQualifiedNames(): string[] { return this.__removeFromContextEntities.qualifiedNames(); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ReferenceSetSelector() cannot be invoked directly, please use 'model.pages.createReferenceSetSelector()'"
				);
			}
		}


		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): ReferenceSetSelector {
			internal.createInVersionCheck(container.model, ReferenceSetSelector.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "footerWidget", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): ReferenceSetSelector {
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): ReferenceSetSelector {
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): ReferenceSetSelector {
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): ReferenceSetSelector {
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "leftWidget", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): ReferenceSetSelector {
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "rightWidget", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): ReferenceSetSelector {
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ReferenceSetSelector {
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ReferenceSetSelector {
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): ReferenceSetSelector {
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): ReferenceSetSelector {
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): ReferenceSetSelector {
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ReferenceSetSelector {
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): ReferenceSetSelector {
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): ReferenceSetSelector {
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "firstWidget", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): ReferenceSetSelector {
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "secondWidget", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): ReferenceSetSelector {
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): ReferenceSetSelector {
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ReferenceSetSelector {
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): ReferenceSetSelector {
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widgets", true);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): ReferenceSetSelector {
			internal.createInVersionCheck(container.model, ReferenceSetSelector.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * The new ReferenceSetSelector will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): ReferenceSetSelector {
			internal.createInVersionCheck(container.model, ReferenceSetSelector.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReferenceSetSelector, "reportWidget", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ReferenceSetSelector {
			return internal.instancehelpers.createElement(model, ReferenceSetSelector);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.dataSource = ReferenceSetSource.create(this.model);
			this.onChangeMicroflowSettings = MicroflowSettings.create(this.model);
		}

	}

	export interface IReferenceSetSource extends IGridBaseSource {
		model: IModel;
		containerAsEntityWidget: IEntityWidget;
		load(): ReferenceSetSource;
		load(callback: (element: ReferenceSetSource) => void, forceRefresh?: boolean);
	}

	export class ReferenceSetSource extends GridBaseSource implements IReferenceSetSource {
		public static typeName: string = "Pages$ReferenceSetSource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsEntityWidget() { return super.getContainerAs<EntityWidget>(EntityWidget); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ReferenceSetSource() cannot be invoked directly, please use 'model.pages.createReferenceSetSource()'"
				);
			}
		}

		/**
		 * Creates and returns a new ReferenceSetSource instance in the SDK and on the server.
		 * The new ReferenceSetSource will be automatically stored in the 'dataSource' property
		 * of the parent EntityWidget element passed as argument.
		 */
		public static createIn(container: EntityWidget): ReferenceSetSource {
			return internal.instancehelpers.createElement(container, ReferenceSetSource, "dataSource", false);
		}

		/**
		 * Creates and returns a new ReferenceSetSource instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ReferenceSetSource {
			return internal.instancehelpers.createElement(model, ReferenceSetSource);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * In version 6.2.0: introduced
	 */
	export interface IRetrievalSchema extends internal.IElement {
		model: IModel;
		load(): RetrievalSchema;
		load(callback: (element: RetrievalSchema) => void, forceRefresh?: boolean);
	}

	/**
	 * In version 6.2.0: introduced
	 */
	export class RetrievalSchema extends internal.Element implements IRetrievalSchema {
		public static typeName: string = "Pages$RetrievalSchema";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.2.0"
		}, internal.StructureType.Element);
		model: IModel;


		private __usedAttributes: internal.PrimitiveListProperty<string> =
			new internal.PrimitiveListProperty<string>(RetrievalSchema, this, "usedAttributes", [], internal.PrimitiveTypeEnum.String);
		public get usedAttributes(): internal.IList<string> { return this.__usedAttributes.get(); }
		public set usedAttributes(newValue: internal.IList<string>) { this.__usedAttributes.set(newValue); }
		private __entity: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(RetrievalSchema, this, "entity", "", internal.PrimitiveTypeEnum.String);
		public get entity(): string { return this.__entity.get(); }
		public set entity(newValue: string) { this.__entity.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new RetrievalSchema() cannot be invoked directly, please use 'model.pages.createRetrievalSchema()'"
				);
			}
		}


		/**
		 * Creates and returns a new RetrievalSchema instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): RetrievalSchema {
			return internal.instancehelpers.createElement(model, RetrievalSchema);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/save-button relevant section in reference guide}
	 */
	export interface ISaveButton extends IButton {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): SaveButton;
		load(callback: (element: SaveButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/save-button relevant section in reference guide}
	 */
	export class SaveButton extends Button implements ISaveButton {
		public static typeName: string = "Pages$SaveButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"syncAutomatically" : {
					"introduced" : "6.6.0"
				},
				"closePage" : {
					"introduced" : "6.7.0"
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __syncAutomatically: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(SaveButton, this, "syncAutomatically", false, internal.PrimitiveTypeEnum.Boolean);
		/**
		 * In version 6.6.0: introduced
		 */
		public get syncAutomatically(): boolean { return this.__syncAutomatically.get(); }
		public set syncAutomatically(newValue: boolean) { this.__syncAutomatically.set(newValue); }
		private __closePage: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(SaveButton, this, "closePage", false, internal.PrimitiveTypeEnum.Boolean);
		/**
		 * In version 6.7.0: introduced
		 */
		public get closePage(): boolean { return this.__closePage.get(); }
		public set closePage(newValue: boolean) { this.__closePage.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new SaveButton() cannot be invoked directly, please use 'model.pages.createSaveButton()'"
				);
			}
		}


		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): SaveButton {
			internal.createInVersionCheck(container.model, SaveButton.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, SaveButton, "footerWidget", false);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): SaveButton {
			return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): SaveButton {
			return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): SaveButton {
			return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): SaveButton {
			return internal.instancehelpers.createElement(container, SaveButton, "leftWidget", false);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): SaveButton {
			return internal.instancehelpers.createElement(container, SaveButton, "rightWidget", false);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): SaveButton {
			return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): SaveButton {
			return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): SaveButton {
			return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): SaveButton {
			return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): SaveButton {
			return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): SaveButton {
			return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): SaveButton {
			return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): SaveButton {
			return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): SaveButton {
			return internal.instancehelpers.createElement(container, SaveButton, "firstWidget", false);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): SaveButton {
			return internal.instancehelpers.createElement(container, SaveButton, "secondWidget", false);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): SaveButton {
			return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): SaveButton {
			return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): SaveButton {
			return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): SaveButton {
			return internal.instancehelpers.createElement(container, SaveButton, "widgets", true);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): SaveButton {
			internal.createInVersionCheck(container.model, SaveButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, SaveButton, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * The new SaveButton will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): SaveButton {
			internal.createInVersionCheck(container.model, SaveButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, SaveButton, "reportWidget", false);
		}

		/**
		 * Creates and returns a new SaveButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): SaveButton {
			return internal.instancehelpers.createElement(model, SaveButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Save";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Opslaan";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
			if (this.__closePage.isAvailable) {
				this.closePage = true;
			}
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/scroll-container relevant section in reference guide}
	 */
	export interface IScrollContainer extends IWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): ScrollContainer;
		load(callback: (element: ScrollContainer) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/scroll-container relevant section in reference guide}
	 */
	export class ScrollContainer extends Widget implements IScrollContainer {
		public static typeName: string = "Pages$ScrollContainer";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"center" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __center: internal.PartProperty<ScrollContainerRegion> =
			new internal.PartProperty<ScrollContainerRegion>(ScrollContainer, this, "center", null, true);
		public get center(): ScrollContainerRegion { return this.__center.get(); }
		public set center(newValue: ScrollContainerRegion) { this.__center.set(newValue); }
		private __left: internal.PartProperty<ScrollContainerRegion> =
			new internal.PartProperty<ScrollContainerRegion>(ScrollContainer, this, "left", null, false);
		public get left(): ScrollContainerRegion { return this.__left.get(); }
		public set left(newValue: ScrollContainerRegion) { this.__left.set(newValue); }
		private __right: internal.PartProperty<ScrollContainerRegion> =
			new internal.PartProperty<ScrollContainerRegion>(ScrollContainer, this, "right", null, false);
		public get right(): ScrollContainerRegion { return this.__right.get(); }
		public set right(newValue: ScrollContainerRegion) { this.__right.set(newValue); }
		private __top: internal.PartProperty<ScrollContainerRegion> =
			new internal.PartProperty<ScrollContainerRegion>(ScrollContainer, this, "top", null, false);
		public get top(): ScrollContainerRegion { return this.__top.get(); }
		public set top(newValue: ScrollContainerRegion) { this.__top.set(newValue); }
		private __bottom: internal.PartProperty<ScrollContainerRegion> =
			new internal.PartProperty<ScrollContainerRegion>(ScrollContainer, this, "bottom", null, false);
		public get bottom(): ScrollContainerRegion { return this.__bottom.get(); }
		public set bottom(newValue: ScrollContainerRegion) { this.__bottom.set(newValue); }
		private __layoutMode: internal.EnumProperty<LayoutModeType> =
			new internal.EnumProperty<LayoutModeType>(ScrollContainer, this, "layoutMode", LayoutModeType.Headline, LayoutModeType);
		public get layoutMode(): LayoutModeType { return this.__layoutMode.get(); }
		public set layoutMode(newValue: LayoutModeType) { this.__layoutMode.set(newValue); }
		private __widthMode: internal.EnumProperty<SizeMode> =
			new internal.EnumProperty<SizeMode>(ScrollContainer, this, "widthMode", SizeMode.Auto, SizeMode);
		public get widthMode(): SizeMode { return this.__widthMode.get(); }
		public set widthMode(newValue: SizeMode) { this.__widthMode.set(newValue); }
		private __width: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(ScrollContainer, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
		public get width(): number { return this.__width.get(); }
		public set width(newValue: number) { this.__width.set(newValue); }
		private __alignment: internal.EnumProperty<AlignmentEnum> =
			new internal.EnumProperty<AlignmentEnum>(ScrollContainer, this, "alignment", AlignmentEnum.Center, AlignmentEnum);
		public get alignment(): AlignmentEnum { return this.__alignment.get(); }
		public set alignment(newValue: AlignmentEnum) { this.__alignment.set(newValue); }
		private __scrollBehavior: internal.EnumProperty<ScrollBehavior> =
			new internal.EnumProperty<ScrollBehavior>(ScrollContainer, this, "scrollBehavior", ScrollBehavior.PerRegion, ScrollBehavior);
		public get scrollBehavior(): ScrollBehavior { return this.__scrollBehavior.get(); }
		public set scrollBehavior(newValue: ScrollBehavior) { this.__scrollBehavior.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ScrollContainer() cannot be invoked directly, please use 'model.pages.createScrollContainer()'"
				);
			}
		}


		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): ScrollContainer {
			internal.createInVersionCheck(container.model, ScrollContainer.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, ScrollContainer, "footerWidget", false);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): ScrollContainer {
			return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): ScrollContainer {
			return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): ScrollContainer {
			return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): ScrollContainer {
			return internal.instancehelpers.createElement(container, ScrollContainer, "leftWidget", false);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): ScrollContainer {
			return internal.instancehelpers.createElement(container, ScrollContainer, "rightWidget", false);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): ScrollContainer {
			return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ScrollContainer {
			return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ScrollContainer {
			return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): ScrollContainer {
			return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): ScrollContainer {
			return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): ScrollContainer {
			return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ScrollContainer {
			return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): ScrollContainer {
			return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): ScrollContainer {
			return internal.instancehelpers.createElement(container, ScrollContainer, "firstWidget", false);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): ScrollContainer {
			return internal.instancehelpers.createElement(container, ScrollContainer, "secondWidget", false);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): ScrollContainer {
			return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): ScrollContainer {
			return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ScrollContainer {
			return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): ScrollContainer {
			return internal.instancehelpers.createElement(container, ScrollContainer, "widgets", true);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): ScrollContainer {
			internal.createInVersionCheck(container.model, ScrollContainer.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ScrollContainer, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * The new ScrollContainer will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): ScrollContainer {
			internal.createInVersionCheck(container.model, ScrollContainer.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ScrollContainer, "reportWidget", false);
		}

		/**
		 * Creates and returns a new ScrollContainer instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ScrollContainer {
			return internal.instancehelpers.createElement(model, ScrollContainer);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.alignment = AlignmentEnum.Center;
			this.center = ScrollContainerRegion.create(this.model);
			this.layoutMode = LayoutModeType.Headline;
			this.scrollBehavior = ScrollBehavior.PerRegion;
			this.width = 960;
			this.widthMode = SizeMode.Auto;
		}

	}

	export interface IScrollContainerRegion extends internal.IElement {
		model: IModel;
		containerAsScrollContainer: IScrollContainer;
		load(): ScrollContainerRegion;
		load(callback: (element: ScrollContainerRegion) => void, forceRefresh?: boolean);
	}

	export class ScrollContainerRegion extends internal.Element implements IScrollContainerRegion {
		public static typeName: string = "Pages$ScrollContainerRegion";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"toggleMode" : {
					"introduced" : "6.10.0"
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsScrollContainer() { return super.getContainerAs<ScrollContainer>(ScrollContainer); }

		private __widget: internal.PartProperty<Widget> =
			new internal.PartProperty<Widget>(ScrollContainerRegion, this, "widget", null, false);
		public get widget(): Widget { return this.__widget.get(); }
		public set widget(newValue: Widget) { this.__widget.set(newValue); }
		private __sizeMode: internal.EnumProperty<SizeMode> =
			new internal.EnumProperty<SizeMode>(ScrollContainerRegion, this, "sizeMode", SizeMode.Auto, SizeMode);
		public get sizeMode(): SizeMode { return this.__sizeMode.get(); }
		public set sizeMode(newValue: SizeMode) { this.__sizeMode.set(newValue); }
		private __size: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(ScrollContainerRegion, this, "size", 0, internal.PrimitiveTypeEnum.Integer);
		public get size(): number { return this.__size.get(); }
		public set size(newValue: number) { this.__size.set(newValue); }
		private __class: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ScrollContainerRegion, this, "class", "", internal.PrimitiveTypeEnum.String);
		public get class(): string { return this.__class.get(); }
		public set class(newValue: string) { this.__class.set(newValue); }
		private __style: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ScrollContainerRegion, this, "style", "", internal.PrimitiveTypeEnum.String);
		public get style(): string { return this.__style.get(); }
		public set style(newValue: string) { this.__style.set(newValue); }
		private __toggleMode: internal.EnumProperty<ToggleMode> =
			new internal.EnumProperty<ToggleMode>(ScrollContainerRegion, this, "toggleMode", ToggleMode.None, ToggleMode);
		/**
		 * In version 6.10.0: introduced
		 */
		public get toggleMode(): ToggleMode { return this.__toggleMode.get(); }
		public set toggleMode(newValue: ToggleMode) { this.__toggleMode.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ScrollContainerRegion() cannot be invoked directly, please use 'model.pages.createScrollContainerRegion()'"
				);
			}
		}


		/**
		 * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
		 * The new ScrollContainerRegion will be automatically stored in the 'bottom' property
		 * of the parent ScrollContainer element passed as argument.
		 */
		public static createInScrollContainerUnderBottom(container: ScrollContainer): ScrollContainerRegion {
			return internal.instancehelpers.createElement(container, ScrollContainerRegion, "bottom", false);
		}

		/**
		 * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
		 * The new ScrollContainerRegion will be automatically stored in the 'center' property
		 * of the parent ScrollContainer element passed as argument.
		 */
		public static createInScrollContainerUnderCenter(container: ScrollContainer): ScrollContainerRegion {
			return internal.instancehelpers.createElement(container, ScrollContainerRegion, "center", false);
		}

		/**
		 * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
		 * The new ScrollContainerRegion will be automatically stored in the 'left' property
		 * of the parent ScrollContainer element passed as argument.
		 */
		public static createInScrollContainerUnderLeft(container: ScrollContainer): ScrollContainerRegion {
			return internal.instancehelpers.createElement(container, ScrollContainerRegion, "left", false);
		}

		/**
		 * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
		 * The new ScrollContainerRegion will be automatically stored in the 'right' property
		 * of the parent ScrollContainer element passed as argument.
		 */
		public static createInScrollContainerUnderRight(container: ScrollContainer): ScrollContainerRegion {
			return internal.instancehelpers.createElement(container, ScrollContainerRegion, "right", false);
		}

		/**
		 * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
		 * The new ScrollContainerRegion will be automatically stored in the 'top' property
		 * of the parent ScrollContainer element passed as argument.
		 */
		public static createInScrollContainerUnderTop(container: ScrollContainer): ScrollContainerRegion {
			return internal.instancehelpers.createElement(container, ScrollContainerRegion, "top", false);
		}

		/**
		 * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ScrollContainerRegion {
			return internal.instancehelpers.createElement(model, ScrollContainerRegion);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.size = 200;
			this.sizeMode = SizeMode.Auto;
			if (this.__toggleMode.isAvailable) {
				this.toggleMode = ToggleMode.None;
			}
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/search-bar relevant section in reference guide}
	 */
	export interface ISearchBar extends IControlBar {
		model: IModel;
		containerAsGridBaseSource: IGridBaseSource;
		containerAsGridDatabaseSource: IGridDatabaseSource;
		load(): SearchBar;
		load(callback: (element: SearchBar) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/search-bar relevant section in reference guide}
	 */
	export class SearchBar extends ControlBar implements ISearchBar {
		public static typeName: string = "Pages$SearchBar";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsGridBaseSource() { return super.getContainerAs<GridBaseSource>(GridBaseSource); }
		get containerAsGridDatabaseSource() { return super.getContainerAs<GridDatabaseSource>(GridDatabaseSource); }

		private __type: internal.EnumProperty<SearchBarTypeEnum> =
			new internal.EnumProperty<SearchBarTypeEnum>(SearchBar, this, "type", SearchBarTypeEnum.FoldableClosed, SearchBarTypeEnum);
		public get type(): SearchBarTypeEnum { return this.__type.get(); }
		public set type(newValue: SearchBarTypeEnum) { this.__type.set(newValue); }
		private __waitForSearch: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(SearchBar, this, "waitForSearch", false, internal.PrimitiveTypeEnum.Boolean);
		public get waitForSearch(): boolean { return this.__waitForSearch.get(); }
		public set waitForSearch(newValue: boolean) { this.__waitForSearch.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new SearchBar() cannot be invoked directly, please use 'model.pages.createSearchBar()'"
				);
			}
		}


		/**
		 * Creates and returns a new SearchBar instance in the SDK and on the server.
		 * The new SearchBar will be automatically stored in the 'searchBar' property
		 * of the parent GridBaseSource element passed as argument.
		 */
		public static createInGridBaseSourceUnderSearchBar(container: GridBaseSource): SearchBar {
			return internal.instancehelpers.createElement(container, SearchBar, "searchBar", false);
		}

		/**
		 * Creates and returns a new SearchBar instance in the SDK and on the server.
		 * The new SearchBar will be automatically stored in the 'searchBar' property
		 * of the parent GridDatabaseSource element passed as argument.
		 */
		public static createInGridDatabaseSourceUnderSearchBar(container: GridDatabaseSource): SearchBar {
			return internal.instancehelpers.createElement(container, SearchBar, "searchBar", false);
		}

		/**
		 * Creates and returns a new SearchBar instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): SearchBar {
			return internal.instancehelpers.createElement(model, SearchBar);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.type = SearchBarTypeEnum.FoldableClosed;
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/select-button relevant section in reference guide}
	 */
	export interface ISelectButton extends IGridControlBarButton {
		model: IModel;
		containerAsControlBar: IControlBar;
		load(): SelectButton;
		load(callback: (element: SelectButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/select-button relevant section in reference guide}
	 */
	export class SelectButton extends GridControlBarButton implements ISelectButton {
		public static typeName: string = "Pages$SelectButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsControlBar() { return super.getContainerAs<ControlBar>(ControlBar); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new SelectButton() cannot be invoked directly, please use 'model.pages.createSelectButton()'"
				);
			}
		}

		/**
		 * Creates and returns a new SelectButton instance in the SDK and on the server.
		 * The new SelectButton will be automatically stored in the 'items' property
		 * of the parent ControlBar element passed as argument.
		 */
		public static createIn(container: ControlBar): SelectButton {
			return internal.instancehelpers.createElement(container, SelectButton, "items", true);
		}

		/**
		 * Creates and returns a new SelectButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): SelectButton {
			return internal.instancehelpers.createElement(model, SelectButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Select";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Selecteren";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
		}

	}

	export interface ISelectorSource extends internal.IElement {
		model: IModel;
		containerAsAssociationWidget: IAssociationWidget;
		load(): SelectorSource;
		load(callback: (element: SelectorSource) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class SelectorSource extends internal.Element implements ISelectorSource {
		public static typeName: string = "Pages$SelectorSource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsAssociationWidget() { return super.getContainerAs<AssociationWidget>(AssociationWidget); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new SelectorSource() cannot be invoked directly, please use 'model.pages.createSelectorSource()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * In version 6.1.0: introduced
	 */
	export interface ISelectorDatabaseSource extends ISelectorSource {
		model: IModel;
		containerAsAssociationWidget: IAssociationWidget;
		load(): SelectorDatabaseSource;
		load(callback: (element: SelectorDatabaseSource) => void, forceRefresh?: boolean);
	}

	/**
	 * In version 6.1.0: introduced
	 */
	export class SelectorDatabaseSource extends SelectorSource implements ISelectorDatabaseSource {
		public static typeName: string = "Pages$SelectorDatabaseSource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.1.0",
			"properties" : {
				"sortBar" : {
					"introduced" : "6.2.0",
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsAssociationWidget() { return super.getContainerAs<AssociationWidget>(AssociationWidget); }

		private __databaseConstraints: internal.PartListProperty<DatabaseConstraint> =
			new internal.PartListProperty<DatabaseConstraint>(SelectorDatabaseSource, this, "databaseConstraints", []);
		public get databaseConstraints(): internal.IList<DatabaseConstraint> { return this.__databaseConstraints.get(); }
		public set databaseConstraints(newValue: internal.IList<DatabaseConstraint>) { this.__databaseConstraints.set(newValue); }
		private __sortBar: internal.PartProperty<GridSortBar> =
			new internal.PartProperty<GridSortBar>(SelectorDatabaseSource, this, "sortBar", null, true);
		/**
		 * In version 6.2.0: introduced
		 */
		public get sortBar(): GridSortBar { return this.__sortBar.get(); }
		public set sortBar(newValue: GridSortBar) { this.__sortBar.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new SelectorDatabaseSource() cannot be invoked directly, please use 'model.pages.createSelectorDatabaseSource()'"
				);
			}
		}

		/**
		 * Creates and returns a new SelectorDatabaseSource instance in the SDK and on the server.
		 * The new SelectorDatabaseSource will be automatically stored in the 'selectorSource' property
		 * of the parent AssociationWidget element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createIn(container: AssociationWidget): SelectorDatabaseSource {
			internal.createInVersionCheck(container.model, SelectorDatabaseSource.typeName,
				["6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, SelectorDatabaseSource, "selectorSource", false);
		}

		/**
		 * Creates and returns a new SelectorDatabaseSource instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): SelectorDatabaseSource {
			return internal.instancehelpers.createElement(model, SelectorDatabaseSource);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			if (this.__sortBar.isAvailable) {
				this.sortBar = GridSortBar.create(this.model);
			}
		}

	}

	export interface ISelectorMicroflowSource extends ISelectorSource {
		model: IModel;
		containerAsAssociationWidget: IAssociationWidget;
		load(): SelectorMicroflowSource;
		load(callback: (element: SelectorMicroflowSource) => void, forceRefresh?: boolean);
	}

	export class SelectorMicroflowSource extends SelectorSource implements ISelectorMicroflowSource {
		public static typeName: string = "Pages$SelectorMicroflowSource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"dataSourceMicroflowSettings" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsAssociationWidget() { return super.getContainerAs<AssociationWidget>(AssociationWidget); }

		private __dataSourceMicroflowSettings: internal.PartProperty<MicroflowSettings> =
			new internal.PartProperty<MicroflowSettings>(SelectorMicroflowSource, this, "dataSourceMicroflowSettings", null, true);
		public get dataSourceMicroflowSettings(): MicroflowSettings { return this.__dataSourceMicroflowSettings.get(); }
		public set dataSourceMicroflowSettings(newValue: MicroflowSettings) { this.__dataSourceMicroflowSettings.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new SelectorMicroflowSource() cannot be invoked directly, please use 'model.pages.createSelectorMicroflowSource()'"
				);
			}
		}

		/**
		 * Creates and returns a new SelectorMicroflowSource instance in the SDK and on the server.
		 * The new SelectorMicroflowSource will be automatically stored in the 'selectorSource' property
		 * of the parent AssociationWidget element passed as argument.
		 */
		public static createIn(container: AssociationWidget): SelectorMicroflowSource {
			return internal.instancehelpers.createElement(container, SelectorMicroflowSource, "selectorSource", false);
		}

		/**
		 * Creates and returns a new SelectorMicroflowSource instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): SelectorMicroflowSource {
			return internal.instancehelpers.createElement(model, SelectorMicroflowSource);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.dataSourceMicroflowSettings = MicroflowSettings.create(this.model);
		}

	}

	export interface ISelectorXPathSource extends ISelectorSource {
		model: IModel;
		containerAsAssociationWidget: IAssociationWidget;
		load(): SelectorXPathSource;
		load(callback: (element: SelectorXPathSource) => void, forceRefresh?: boolean);
	}

	export class SelectorXPathSource extends SelectorSource implements ISelectorXPathSource {
		public static typeName: string = "Pages$SelectorXPathSource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"sortBar" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsAssociationWidget() { return super.getContainerAs<AssociationWidget>(AssociationWidget); }

		private __sortBar: internal.PartProperty<GridSortBar> =
			new internal.PartProperty<GridSortBar>(SelectorXPathSource, this, "sortBar", null, true);
		public get sortBar(): GridSortBar { return this.__sortBar.get(); }
		public set sortBar(newValue: GridSortBar) { this.__sortBar.set(newValue); }
		private __xPathConstraint: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(SelectorXPathSource, this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
		 */
		public get xPathConstraint(): string { return this.__xPathConstraint.get(); }
		public set xPathConstraint(newValue: string) { this.__xPathConstraint.set(newValue); }
		private __constrainedBy: internal.PrimitiveListProperty<string> =
			new internal.PrimitiveListProperty<string>(SelectorXPathSource, this, "constrainedBy", [], internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type paths.EntityPath.
		 */
		public get constrainedBy(): internal.IList<string> { return this.__constrainedBy.get(); }
		public set constrainedBy(newValue: internal.IList<string>) { this.__constrainedBy.set(newValue); }
		private __applyContext: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(SelectorXPathSource, this, "applyContext", false, internal.PrimitiveTypeEnum.Boolean);
		public get applyContext(): boolean { return this.__applyContext.get(); }
		public set applyContext(newValue: boolean) { this.__applyContext.set(newValue); }
		private __removeAllFromContext: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(SelectorXPathSource, this, "removeAllFromContext", false, internal.PrimitiveTypeEnum.Boolean);
		public get removeAllFromContext(): boolean { return this.__removeAllFromContext.get(); }
		public set removeAllFromContext(newValue: boolean) { this.__removeAllFromContext.set(newValue); }
		private __removeFromContextEntities: internal.ByNameReferenceListProperty<domainmodels.IEntity> =
			new internal.ByNameReferenceListProperty<domainmodels.IEntity>(SelectorXPathSource, this, "removeFromContextEntities", [], "DomainModels$Entity");
		public get removeFromContextEntities(): internal.IList<domainmodels.IEntity> { return this.__removeFromContextEntities.get(); }
		public set removeFromContextEntities(newValue: internal.IList<domainmodels.IEntity>) { this.__removeFromContextEntities.set(newValue); }
		get removeFromContextEntitiesQualifiedNames(): string[] { return this.__removeFromContextEntities.qualifiedNames(); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new SelectorXPathSource() cannot be invoked directly, please use 'model.pages.createSelectorXPathSource()'"
				);
			}
		}

		/**
		 * Creates and returns a new SelectorXPathSource instance in the SDK and on the server.
		 * The new SelectorXPathSource will be automatically stored in the 'selectorSource' property
		 * of the parent AssociationWidget element passed as argument.
		 */
		public static createIn(container: AssociationWidget): SelectorXPathSource {
			return internal.instancehelpers.createElement(container, SelectorXPathSource, "selectorSource", false);
		}

		/**
		 * Creates and returns a new SelectorXPathSource instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): SelectorXPathSource {
			return internal.instancehelpers.createElement(model, SelectorXPathSource);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.sortBar = GridSortBar.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/sidebar-toggle-button relevant section in reference guide}
	 */
	export interface ISidebarToggleButton extends IButton {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): SidebarToggleButton;
		load(callback: (element: SidebarToggleButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/sidebar-toggle-button relevant section in reference guide}
	 */
	export class SidebarToggleButton extends Button implements ISidebarToggleButton {
		public static typeName: string = "Pages$SidebarToggleButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"region" : {
					"deleted" : "6.10.0",
					"deletionMessage" : null
				},
				"mode" : {
					"deleted" : "6.10.0",
					"deletionMessage" : null
				},
				"initiallyOpen" : {
					"deleted" : "6.10.0",
					"deletionMessage" : null
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __region: internal.EnumProperty<SidebarToggleRegion> =
			new internal.EnumProperty<SidebarToggleRegion>(SidebarToggleButton, this, "region", SidebarToggleRegion.Left, SidebarToggleRegion);
		/**
		 * In version 6.10.0: deleted
		 */
		public get region(): SidebarToggleRegion { return this.__region.get(); }
		public set region(newValue: SidebarToggleRegion) { this.__region.set(newValue); }
		private __mode: internal.EnumProperty<SidebarToggleMode> =
			new internal.EnumProperty<SidebarToggleMode>(SidebarToggleButton, this, "mode", SidebarToggleMode.PushContentAside, SidebarToggleMode);
		/**
		 * In version 6.10.0: deleted
		 */
		public get mode(): SidebarToggleMode { return this.__mode.get(); }
		public set mode(newValue: SidebarToggleMode) { this.__mode.set(newValue); }
		private __initiallyOpen: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(SidebarToggleButton, this, "initiallyOpen", false, internal.PrimitiveTypeEnum.Boolean);
		/**
		 * In version 6.10.0: deleted
		 */
		public get initiallyOpen(): boolean { return this.__initiallyOpen.get(); }
		public set initiallyOpen(newValue: boolean) { this.__initiallyOpen.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new SidebarToggleButton() cannot be invoked directly, please use 'model.pages.createSidebarToggleButton()'"
				);
			}
		}


		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): SidebarToggleButton {
			internal.createInVersionCheck(container.model, SidebarToggleButton.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "footerWidget", false);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): SidebarToggleButton {
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): SidebarToggleButton {
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): SidebarToggleButton {
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): SidebarToggleButton {
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "leftWidget", false);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): SidebarToggleButton {
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "rightWidget", false);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): SidebarToggleButton {
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): SidebarToggleButton {
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): SidebarToggleButton {
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): SidebarToggleButton {
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): SidebarToggleButton {
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): SidebarToggleButton {
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): SidebarToggleButton {
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): SidebarToggleButton {
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): SidebarToggleButton {
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "firstWidget", false);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): SidebarToggleButton {
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "secondWidget", false);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): SidebarToggleButton {
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): SidebarToggleButton {
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): SidebarToggleButton {
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): SidebarToggleButton {
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "widgets", true);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): SidebarToggleButton {
			internal.createInVersionCheck(container.model, SidebarToggleButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * The new SidebarToggleButton will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): SidebarToggleButton {
			internal.createInVersionCheck(container.model, SidebarToggleButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, SidebarToggleButton, "reportWidget", false);
		}

		/**
		 * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): SidebarToggleButton {
			return internal.instancehelpers.createElement(model, SidebarToggleButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Toggle";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Toggle";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
			if (this.__mode.isAvailable) {
				this.mode = SidebarToggleMode.PushContentAside;
			}
			if (this.__region.isAvailable) {
				this.region = SidebarToggleRegion.Left;
			}
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/simple-menu-bar relevant section in reference guide}
	 */
	export interface ISimpleMenuBar extends IMenuWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): SimpleMenuBar;
		load(callback: (element: SimpleMenuBar) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/simple-menu-bar relevant section in reference guide}
	 */
	export class SimpleMenuBar extends MenuWidget implements ISimpleMenuBar {
		public static typeName: string = "Pages$SimpleMenuBar";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __orientation: internal.EnumProperty<SimpleMenuBarOrientation> =
			new internal.EnumProperty<SimpleMenuBarOrientation>(SimpleMenuBar, this, "orientation", SimpleMenuBarOrientation.Horizontal, SimpleMenuBarOrientation);
		public get orientation(): SimpleMenuBarOrientation { return this.__orientation.get(); }
		public set orientation(newValue: SimpleMenuBarOrientation) { this.__orientation.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new SimpleMenuBar() cannot be invoked directly, please use 'model.pages.createSimpleMenuBar()'"
				);
			}
		}


		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): SimpleMenuBar {
			internal.createInVersionCheck(container.model, SimpleMenuBar.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "footerWidget", false);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): SimpleMenuBar {
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): SimpleMenuBar {
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): SimpleMenuBar {
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): SimpleMenuBar {
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "leftWidget", false);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): SimpleMenuBar {
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "rightWidget", false);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): SimpleMenuBar {
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): SimpleMenuBar {
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): SimpleMenuBar {
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): SimpleMenuBar {
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): SimpleMenuBar {
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): SimpleMenuBar {
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): SimpleMenuBar {
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): SimpleMenuBar {
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): SimpleMenuBar {
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "firstWidget", false);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): SimpleMenuBar {
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "secondWidget", false);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): SimpleMenuBar {
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): SimpleMenuBar {
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): SimpleMenuBar {
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): SimpleMenuBar {
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "widgets", true);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): SimpleMenuBar {
			internal.createInVersionCheck(container.model, SimpleMenuBar.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * The new SimpleMenuBar will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): SimpleMenuBar {
			internal.createInVersionCheck(container.model, SimpleMenuBar.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, SimpleMenuBar, "reportWidget", false);
		}

		/**
		 * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): SimpleMenuBar {
			return internal.instancehelpers.createElement(model, SimpleMenuBar);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.orientation = SimpleMenuBarOrientation.Horizontal;
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/snippet relevant section in reference guide}
	 */
	export interface ISnippet extends IFormBase {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		entity: domainmodels.IEntity;
		entityQualifiedName: string;
		load(): Snippet;
		load(callback: (element: Snippet) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/snippet relevant section in reference guide}
	 */
	export class Snippet extends FormBase implements ISnippet {
		public static typeName: string = "Pages$Snippet";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"entity" : {
					"public" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }

		private __entity: internal.ByNameReferenceProperty<domainmodels.IEntity> =
			new internal.ByNameReferenceProperty<domainmodels.IEntity>(Snippet, this, "entity", null, "DomainModels$Entity");
		public get entity(): domainmodels.IEntity { return this.__entity.get(); }
		public set entity(newValue: domainmodels.IEntity) { this.__entity.set(newValue); }
		get entityQualifiedName(): string { return this.__entity.qualifiedName(); }
		private __widget: internal.PartProperty<Widget> =
			new internal.PartProperty<Widget>(Snippet, this, "widget", null, false);
		public get widget(): Widget { return this.__widget.get(); }
		public set widget(newValue: Widget) { this.__widget.set(newValue); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "documents";
		}

		/**
		 * Creates a new Snippet unit in the SDK and on the server.
		 * Expects one argument, the projects.IFolderBase in which this unit is contained.
		 */
		public static createIn(container: projects.IFolderBase): Snippet {
			return internal.instancehelpers.createUnit(container, Snippet);
		}

		_isByNameReferrable() { return true; }

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface ISnippetCall extends internal.IElement {
		model: IModel;
		containerAsSnippetCallWidget: ISnippetCallWidget;
		load(): SnippetCall;
		load(callback: (element: SnippetCall) => void, forceRefresh?: boolean);
	}

	export class SnippetCall extends internal.Element implements ISnippetCall {
		public static typeName: string = "Pages$SnippetCall";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsSnippetCallWidget() { return super.getContainerAs<SnippetCallWidget>(SnippetCallWidget); }

		private __snippet: internal.ByNameReferenceProperty<ISnippet> =
			new internal.ByNameReferenceProperty<ISnippet>(SnippetCall, this, "snippet", null, "Pages$Snippet");
		public get snippet(): ISnippet { return this.__snippet.get(); }
		public set snippet(newValue: ISnippet) { this.__snippet.set(newValue); }
		get snippetQualifiedName(): string { return this.__snippet.qualifiedName(); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new SnippetCall() cannot be invoked directly, please use 'model.pages.createSnippetCall()'"
				);
			}
		}

		/**
		 * Creates and returns a new SnippetCall instance in the SDK and on the server.
		 * The new SnippetCall will be automatically stored in the 'snippetCall' property
		 * of the parent SnippetCallWidget element passed as argument.
		 */
		public static createIn(container: SnippetCallWidget): SnippetCall {
			return internal.instancehelpers.createElement(container, SnippetCall, "snippetCall", false);
		}

		/**
		 * Creates and returns a new SnippetCall instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): SnippetCall {
			return internal.instancehelpers.createElement(model, SnippetCall);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/snippet-call relevant section in reference guide}
	 */
	export interface ISnippetCallWidget extends IWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): SnippetCallWidget;
		load(callback: (element: SnippetCallWidget) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/snippet-call relevant section in reference guide}
	 */
	export class SnippetCallWidget extends Widget implements ISnippetCallWidget {
		public static typeName: string = "Pages$SnippetCallWidget";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"snippetCall" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __snippetCall: internal.PartProperty<SnippetCall> =
			new internal.PartProperty<SnippetCall>(SnippetCallWidget, this, "snippetCall", null, true);
		public get snippetCall(): SnippetCall { return this.__snippetCall.get(); }
		public set snippetCall(newValue: SnippetCall) { this.__snippetCall.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new SnippetCallWidget() cannot be invoked directly, please use 'model.pages.createSnippetCallWidget()'"
				);
			}
		}


		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): SnippetCallWidget {
			internal.createInVersionCheck(container.model, SnippetCallWidget.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "footerWidget", false);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): SnippetCallWidget {
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): SnippetCallWidget {
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): SnippetCallWidget {
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): SnippetCallWidget {
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "leftWidget", false);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): SnippetCallWidget {
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "rightWidget", false);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): SnippetCallWidget {
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): SnippetCallWidget {
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): SnippetCallWidget {
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): SnippetCallWidget {
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): SnippetCallWidget {
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): SnippetCallWidget {
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): SnippetCallWidget {
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): SnippetCallWidget {
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): SnippetCallWidget {
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "firstWidget", false);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): SnippetCallWidget {
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "secondWidget", false);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): SnippetCallWidget {
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): SnippetCallWidget {
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): SnippetCallWidget {
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): SnippetCallWidget {
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "widgets", true);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): SnippetCallWidget {
			internal.createInVersionCheck(container.model, SnippetCallWidget.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * The new SnippetCallWidget will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): SnippetCallWidget {
			internal.createInVersionCheck(container.model, SnippetCallWidget.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, SnippetCallWidget, "reportWidget", false);
		}

		/**
		 * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): SnippetCallWidget {
			return internal.instancehelpers.createElement(model, SnippetCallWidget);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.snippetCall = SnippetCall.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/image relevant section in reference guide}
	 */
	export interface IStaticImageViewer extends IConditionallyVisibleWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): StaticImageViewer;
		load(callback: (element: StaticImageViewer) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/image relevant section in reference guide}
	 */
	export class StaticImageViewer extends ConditionallyVisibleWidget implements IStaticImageViewer {
		public static typeName: string = "Pages$StaticImageViewer";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"clickAction" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __image: internal.ByNameReferenceProperty<images.IImage> =
			new internal.ByNameReferenceProperty<images.IImage>(StaticImageViewer, this, "image", null, "Images$Image");
		public get image(): images.IImage { return this.__image.get(); }
		public set image(newValue: images.IImage) { this.__image.set(newValue); }
		get imageQualifiedName(): string { return this.__image.qualifiedName(); }
		private __widthUnit: internal.EnumProperty<ImageSizeUnit> =
			new internal.EnumProperty<ImageSizeUnit>(StaticImageViewer, this, "widthUnit", ImageSizeUnit.Auto, ImageSizeUnit);
		public get widthUnit(): ImageSizeUnit { return this.__widthUnit.get(); }
		public set widthUnit(newValue: ImageSizeUnit) { this.__widthUnit.set(newValue); }
		private __heightUnit: internal.EnumProperty<ImageSizeUnit> =
			new internal.EnumProperty<ImageSizeUnit>(StaticImageViewer, this, "heightUnit", ImageSizeUnit.Auto, ImageSizeUnit);
		public get heightUnit(): ImageSizeUnit { return this.__heightUnit.get(); }
		public set heightUnit(newValue: ImageSizeUnit) { this.__heightUnit.set(newValue); }
		private __width: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(StaticImageViewer, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
		public get width(): number { return this.__width.get(); }
		public set width(newValue: number) { this.__width.set(newValue); }
		private __height: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(StaticImageViewer, this, "height", 0, internal.PrimitiveTypeEnum.Integer);
		public get height(): number { return this.__height.get(); }
		public set height(newValue: number) { this.__height.set(newValue); }
		private __clickAction: internal.PartProperty<ClientAction> =
			new internal.PartProperty<ClientAction>(StaticImageViewer, this, "clickAction", null, true);
		public get clickAction(): ClientAction { return this.__clickAction.get(); }
		public set clickAction(newValue: ClientAction) { this.__clickAction.set(newValue); }
		private __responsive: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(StaticImageViewer, this, "responsive", false, internal.PrimitiveTypeEnum.Boolean);
		public get responsive(): boolean { return this.__responsive.get(); }
		public set responsive(newValue: boolean) { this.__responsive.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new StaticImageViewer() cannot be invoked directly, please use 'model.pages.createStaticImageViewer()'"
				);
			}
		}


		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): StaticImageViewer {
			internal.createInVersionCheck(container.model, StaticImageViewer.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, StaticImageViewer, "footerWidget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): StaticImageViewer {
			return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): StaticImageViewer {
			return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): StaticImageViewer {
			return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): StaticImageViewer {
			return internal.instancehelpers.createElement(container, StaticImageViewer, "leftWidget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): StaticImageViewer {
			return internal.instancehelpers.createElement(container, StaticImageViewer, "rightWidget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): StaticImageViewer {
			return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): StaticImageViewer {
			return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): StaticImageViewer {
			return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): StaticImageViewer {
			return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): StaticImageViewer {
			return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): StaticImageViewer {
			return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): StaticImageViewer {
			return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): StaticImageViewer {
			return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): StaticImageViewer {
			return internal.instancehelpers.createElement(container, StaticImageViewer, "firstWidget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): StaticImageViewer {
			return internal.instancehelpers.createElement(container, StaticImageViewer, "secondWidget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): StaticImageViewer {
			return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): StaticImageViewer {
			return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): StaticImageViewer {
			return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): StaticImageViewer {
			return internal.instancehelpers.createElement(container, StaticImageViewer, "widgets", true);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): StaticImageViewer {
			internal.createInVersionCheck(container.model, StaticImageViewer.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, StaticImageViewer, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): StaticImageViewer {
			internal.createInVersionCheck(container.model, StaticImageViewer.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, StaticImageViewer, "reportWidget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): StaticImageViewer {
			return internal.instancehelpers.createElement(model, StaticImageViewer);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.clickAction = NoClientAction.create(this.model);
			this.heightUnit = ImageSizeUnit.Auto;
			this.responsive = true;
			this.widthUnit = ImageSizeUnit.Auto;
		}

	}

	export interface IStaticOrDynamicString extends internal.IElement {
		model: IModel;
		containerAsLinkButton: ILinkButton;
		load(): StaticOrDynamicString;
		load(callback: (element: StaticOrDynamicString) => void, forceRefresh?: boolean);
	}

	export class StaticOrDynamicString extends internal.Element implements IStaticOrDynamicString {
		public static typeName: string = "Pages$StaticOrDynamicString";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsLinkButton() { return super.getContainerAs<LinkButton>(LinkButton); }

		private __isDynamic: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(StaticOrDynamicString, this, "isDynamic", false, internal.PrimitiveTypeEnum.Boolean);
		public get isDynamic(): boolean { return this.__isDynamic.get(); }
		public set isDynamic(newValue: boolean) { this.__isDynamic.set(newValue); }
		private __value: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(StaticOrDynamicString, this, "value", "", internal.PrimitiveTypeEnum.String);
		public get value(): string { return this.__value.get(); }
		public set value(newValue: string) { this.__value.set(newValue); }
		private __attribute: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(StaticOrDynamicString, this, "attribute", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type paths.AttributePath.
		 */
		public get attribute(): string { return this.__attribute.get(); }
		public set attribute(newValue: string) { this.__attribute.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new StaticOrDynamicString() cannot be invoked directly, please use 'model.pages.createStaticOrDynamicString()'"
				);
			}
		}

		/**
		 * Creates and returns a new StaticOrDynamicString instance in the SDK and on the server.
		 * The new StaticOrDynamicString will be automatically stored in the 'address' property
		 * of the parent LinkButton element passed as argument.
		 */
		public static createIn(container: LinkButton): StaticOrDynamicString {
			return internal.instancehelpers.createElement(container, StaticOrDynamicString, "address", false);
		}

		/**
		 * Creates and returns a new StaticOrDynamicString instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): StaticOrDynamicString {
			return internal.instancehelpers.createElement(model, StaticOrDynamicString);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface ISyncButton extends IButton {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): SyncButton;
		load(callback: (element: SyncButton) => void, forceRefresh?: boolean);
	}

	export class SyncButton extends Button implements ISyncButton {
		public static typeName: string = "Pages$SyncButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new SyncButton() cannot be invoked directly, please use 'model.pages.createSyncButton()'"
				);
			}
		}


		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): SyncButton {
			internal.createInVersionCheck(container.model, SyncButton.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, SyncButton, "footerWidget", false);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): SyncButton {
			return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): SyncButton {
			return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): SyncButton {
			return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): SyncButton {
			return internal.instancehelpers.createElement(container, SyncButton, "leftWidget", false);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): SyncButton {
			return internal.instancehelpers.createElement(container, SyncButton, "rightWidget", false);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): SyncButton {
			return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): SyncButton {
			return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): SyncButton {
			return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): SyncButton {
			return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): SyncButton {
			return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): SyncButton {
			return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): SyncButton {
			return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): SyncButton {
			return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): SyncButton {
			return internal.instancehelpers.createElement(container, SyncButton, "firstWidget", false);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): SyncButton {
			return internal.instancehelpers.createElement(container, SyncButton, "secondWidget", false);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): SyncButton {
			return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): SyncButton {
			return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): SyncButton {
			return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): SyncButton {
			return internal.instancehelpers.createElement(container, SyncButton, "widgets", true);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): SyncButton {
			internal.createInVersionCheck(container.model, SyncButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, SyncButton, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * The new SyncButton will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): SyncButton {
			internal.createInVersionCheck(container.model, SyncButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, SyncButton, "reportWidget", false);
		}

		/**
		 * Creates and returns a new SyncButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): SyncButton {
			return internal.instancehelpers.createElement(model, SyncButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((clientTemplate:ClientTemplate) => {
				clientTemplate.template = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Synchronize";
						return translation;
					})(texts.Translation.create(this.model)), ((translation:texts.Translation) => {
						translation.languageCode = "nl_NL";
						translation.text = "Synchroniseren";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return clientTemplate;
			})(ClientTemplate.create(this.model));
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/tab-container relevant section in reference guide}
	 */
	export interface ITabContainer extends IConditionallyVisibleWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): TabContainer;
		load(callback: (element: TabContainer) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/tab-container relevant section in reference guide}
	 */
	export class TabContainer extends ConditionallyVisibleWidget implements ITabContainer {
		public static typeName: string = "Pages$TabContainer";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __tabPages: internal.PartListProperty<TabPage> =
			new internal.PartListProperty<TabPage>(TabContainer, this, "tabPages", []);
		public get tabPages(): internal.IList<TabPage> { return this.__tabPages.get(); }
		public set tabPages(newValue: internal.IList<TabPage>) { this.__tabPages.set(newValue); }
		private __defaultPage: internal.ByIdReferenceProperty<TabPage> =
			new internal.ByIdReferenceProperty<TabPage>(TabContainer, this, "defaultPage", null);
		public get defaultPage(): TabPage { return this.__defaultPage.get(); }
		public set defaultPage(newValue: TabPage) { this.__defaultPage.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new TabContainer() cannot be invoked directly, please use 'model.pages.createTabContainer()'"
				);
			}
		}


		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): TabContainer {
			internal.createInVersionCheck(container.model, TabContainer.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, TabContainer, "footerWidget", false);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): TabContainer {
			return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): TabContainer {
			return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): TabContainer {
			return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): TabContainer {
			return internal.instancehelpers.createElement(container, TabContainer, "leftWidget", false);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): TabContainer {
			return internal.instancehelpers.createElement(container, TabContainer, "rightWidget", false);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): TabContainer {
			return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): TabContainer {
			return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): TabContainer {
			return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): TabContainer {
			return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): TabContainer {
			return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): TabContainer {
			return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): TabContainer {
			return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): TabContainer {
			return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): TabContainer {
			return internal.instancehelpers.createElement(container, TabContainer, "firstWidget", false);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): TabContainer {
			return internal.instancehelpers.createElement(container, TabContainer, "secondWidget", false);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): TabContainer {
			return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): TabContainer {
			return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): TabContainer {
			return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): TabContainer {
			return internal.instancehelpers.createElement(container, TabContainer, "widgets", true);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): TabContainer {
			internal.createInVersionCheck(container.model, TabContainer.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, TabContainer, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * The new TabContainer will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): TabContainer {
			internal.createInVersionCheck(container.model, TabContainer.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, TabContainer, "reportWidget", false);
		}

		/**
		 * Creates and returns a new TabContainer instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): TabContainer {
			return internal.instancehelpers.createElement(model, TabContainer);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/tab-page relevant section in reference guide}
	 */
	export interface ITabPage extends internal.IElement {
		model: IModel;
		containerAsTabContainer: ITabContainer;
		load(): TabPage;
		load(callback: (element: TabPage) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/tab-page relevant section in reference guide}
	 */
	export class TabPage extends internal.Element implements ITabPage {
		public static typeName: string = "Pages$TabPage";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"caption" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsTabContainer() { return super.getContainerAs<TabContainer>(TabContainer); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(TabPage, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __caption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(TabPage, this, "caption", null, true);
		public get caption(): texts.Text { return this.__caption.get(); }
		public set caption(newValue: texts.Text) { this.__caption.set(newValue); }
		private __refreshOnShow: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(TabPage, this, "refreshOnShow", false, internal.PrimitiveTypeEnum.Boolean);
		public get refreshOnShow(): boolean { return this.__refreshOnShow.get(); }
		public set refreshOnShow(newValue: boolean) { this.__refreshOnShow.set(newValue); }
		private __conditionalVisibilitySettings: internal.PartProperty<ConditionalVisibilitySettings> =
			new internal.PartProperty<ConditionalVisibilitySettings>(TabPage, this, "conditionalVisibilitySettings", null, false);
		public get conditionalVisibilitySettings(): ConditionalVisibilitySettings { return this.__conditionalVisibilitySettings.get(); }
		public set conditionalVisibilitySettings(newValue: ConditionalVisibilitySettings) { this.__conditionalVisibilitySettings.set(newValue); }
		private __widget: internal.PartProperty<Widget> =
			new internal.PartProperty<Widget>(TabPage, this, "widget", null, false);
		public get widget(): Widget { return this.__widget.get(); }
		public set widget(newValue: Widget) { this.__widget.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new TabPage() cannot be invoked directly, please use 'model.pages.createTabPage()'"
				);
			}
		}

		/**
		 * Creates and returns a new TabPage instance in the SDK and on the server.
		 * The new TabPage will be automatically stored in the 'tabPages' property
		 * of the parent TabContainer element passed as argument.
		 */
		public static createIn(container: TabContainer): TabPage {
			return internal.instancehelpers.createElement(container, TabPage, "tabPages", true);
		}

		/**
		 * Creates and returns a new TabPage instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): TabPage {
			return internal.instancehelpers.createElement(model, TabPage);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((text:texts.Text) => {
				text.translations.replace([ ((translation:texts.Translation) => {
					translation.languageCode = "en_US";
					translation.text = "TabPage";
					return translation;
				})(texts.Translation.create(this.model)) ]);
				return text;
			})(texts.Text.create(this.model));
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/table relevant section in reference guide}
	 */
	export interface ITable extends IConditionallyVisibleWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): Table;
		load(callback: (element: Table) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/table relevant section in reference guide}
	 */
	export class Table extends ConditionallyVisibleWidget implements ITable {
		public static typeName: string = "Pages$Table";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __cells: internal.PartListProperty<TableCell> =
			new internal.PartListProperty<TableCell>(Table, this, "cells", []);
		public get cells(): internal.IList<TableCell> { return this.__cells.get(); }
		public set cells(newValue: internal.IList<TableCell>) { this.__cells.set(newValue); }
		private __columns: internal.PartListProperty<TableColumn> =
			new internal.PartListProperty<TableColumn>(Table, this, "columns", []);
		public get columns(): internal.IList<TableColumn> { return this.__columns.get(); }
		public set columns(newValue: internal.IList<TableColumn>) { this.__columns.set(newValue); }
		private __widthUnit: internal.EnumProperty<UnitEnum> =
			new internal.EnumProperty<UnitEnum>(Table, this, "widthUnit", UnitEnum.Weight, UnitEnum);
		public get widthUnit(): UnitEnum { return this.__widthUnit.get(); }
		public set widthUnit(newValue: UnitEnum) { this.__widthUnit.set(newValue); }
		private __rows: internal.PartListProperty<TableRow> =
			new internal.PartListProperty<TableRow>(Table, this, "rows", []);
		public get rows(): internal.IList<TableRow> { return this.__rows.get(); }
		public set rows(newValue: internal.IList<TableRow>) { this.__rows.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Table() cannot be invoked directly, please use 'model.pages.createTable()'"
				);
			}
		}


		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): Table {
			internal.createInVersionCheck(container.model, Table.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, Table, "footerWidget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): Table {
			return internal.instancehelpers.createElement(container, Table, "widget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): Table {
			return internal.instancehelpers.createElement(container, Table, "widget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): Table {
			return internal.instancehelpers.createElement(container, Table, "widget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): Table {
			return internal.instancehelpers.createElement(container, Table, "leftWidget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): Table {
			return internal.instancehelpers.createElement(container, Table, "rightWidget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): Table {
			return internal.instancehelpers.createElement(container, Table, "widget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): Table {
			return internal.instancehelpers.createElement(container, Table, "widget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): Table {
			return internal.instancehelpers.createElement(container, Table, "widget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): Table {
			return internal.instancehelpers.createElement(container, Table, "widget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): Table {
			return internal.instancehelpers.createElement(container, Table, "widget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): Table {
			return internal.instancehelpers.createElement(container, Table, "widget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): Table {
			return internal.instancehelpers.createElement(container, Table, "widget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): Table {
			return internal.instancehelpers.createElement(container, Table, "widget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): Table {
			return internal.instancehelpers.createElement(container, Table, "firstWidget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): Table {
			return internal.instancehelpers.createElement(container, Table, "secondWidget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): Table {
			return internal.instancehelpers.createElement(container, Table, "widget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): Table {
			return internal.instancehelpers.createElement(container, Table, "widget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): Table {
			return internal.instancehelpers.createElement(container, Table, "widget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): Table {
			return internal.instancehelpers.createElement(container, Table, "widgets", true);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): Table {
			internal.createInVersionCheck(container.model, Table.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, Table, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): Table {
			internal.createInVersionCheck(container.model, Table.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, Table, "reportWidget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): Table {
			return internal.instancehelpers.createElement(model, Table);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.widthUnit = UnitEnum.Weight;
		}

	}

	export interface ITableCell extends internal.IElement {
		model: IModel;
		containerAsTable: ITable;
		load(): TableCell;
		load(callback: (element: TableCell) => void, forceRefresh?: boolean);
	}

	export class TableCell extends internal.Element implements ITableCell {
		public static typeName: string = "Pages$TableCell";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsTable() { return super.getContainerAs<Table>(Table); }

		private __class: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(TableCell, this, "class", "", internal.PrimitiveTypeEnum.String);
		public get class(): string { return this.__class.get(); }
		public set class(newValue: string) { this.__class.set(newValue); }
		private __style: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(TableCell, this, "style", "", internal.PrimitiveTypeEnum.String);
		public get style(): string { return this.__style.get(); }
		public set style(newValue: string) { this.__style.set(newValue); }
		private __isHeader: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(TableCell, this, "isHeader", false, internal.PrimitiveTypeEnum.Boolean);
		public get isHeader(): boolean { return this.__isHeader.get(); }
		public set isHeader(newValue: boolean) { this.__isHeader.set(newValue); }
		private __widget: internal.PartProperty<Widget> =
			new internal.PartProperty<Widget>(TableCell, this, "widget", null, false);
		public get widget(): Widget { return this.__widget.get(); }
		public set widget(newValue: Widget) { this.__widget.set(newValue); }
		private __leftColumnIndex: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(TableCell, this, "leftColumnIndex", 0, internal.PrimitiveTypeEnum.Integer);
		public get leftColumnIndex(): number { return this.__leftColumnIndex.get(); }
		public set leftColumnIndex(newValue: number) { this.__leftColumnIndex.set(newValue); }
		private __topRowIndex: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(TableCell, this, "topRowIndex", 0, internal.PrimitiveTypeEnum.Integer);
		public get topRowIndex(): number { return this.__topRowIndex.get(); }
		public set topRowIndex(newValue: number) { this.__topRowIndex.set(newValue); }
		private __width: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(TableCell, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
		public get width(): number { return this.__width.get(); }
		public set width(newValue: number) { this.__width.set(newValue); }
		private __height: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(TableCell, this, "height", 0, internal.PrimitiveTypeEnum.Integer);
		public get height(): number { return this.__height.get(); }
		public set height(newValue: number) { this.__height.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new TableCell() cannot be invoked directly, please use 'model.pages.createTableCell()'"
				);
			}
		}

		/**
		 * Creates and returns a new TableCell instance in the SDK and on the server.
		 * The new TableCell will be automatically stored in the 'cells' property
		 * of the parent Table element passed as argument.
		 */
		public static createIn(container: Table): TableCell {
			return internal.instancehelpers.createElement(container, TableCell, "cells", true);
		}

		/**
		 * Creates and returns a new TableCell instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): TableCell {
			return internal.instancehelpers.createElement(model, TableCell);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface ITableColumn extends internal.IElement {
		model: IModel;
		containerAsTable: ITable;
		load(): TableColumn;
		load(callback: (element: TableColumn) => void, forceRefresh?: boolean);
	}

	export class TableColumn extends internal.Element implements ITableColumn {
		public static typeName: string = "Pages$TableColumn";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsTable() { return super.getContainerAs<Table>(Table); }

		private __width: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(TableColumn, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
		public get width(): number { return this.__width.get(); }
		public set width(newValue: number) { this.__width.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new TableColumn() cannot be invoked directly, please use 'model.pages.createTableColumn()'"
				);
			}
		}

		/**
		 * Creates and returns a new TableColumn instance in the SDK and on the server.
		 * The new TableColumn will be automatically stored in the 'columns' property
		 * of the parent Table element passed as argument.
		 */
		public static createIn(container: Table): TableColumn {
			return internal.instancehelpers.createElement(container, TableColumn, "columns", true);
		}

		/**
		 * Creates and returns a new TableColumn instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): TableColumn {
			return internal.instancehelpers.createElement(model, TableColumn);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface ITableRow extends internal.IElement {
		model: IModel;
		containerAsTable: ITable;
		load(): TableRow;
		load(callback: (element: TableRow) => void, forceRefresh?: boolean);
	}

	export class TableRow extends internal.Element implements ITableRow {
		public static typeName: string = "Pages$TableRow";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsTable() { return super.getContainerAs<Table>(Table); }

		private __class: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(TableRow, this, "class", "", internal.PrimitiveTypeEnum.String);
		public get class(): string { return this.__class.get(); }
		public set class(newValue: string) { this.__class.set(newValue); }
		private __style: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(TableRow, this, "style", "", internal.PrimitiveTypeEnum.String);
		public get style(): string { return this.__style.get(); }
		public set style(newValue: string) { this.__style.set(newValue); }
		private __conditionalVisibilitySettings: internal.PartProperty<ConditionalVisibilitySettings> =
			new internal.PartProperty<ConditionalVisibilitySettings>(TableRow, this, "conditionalVisibilitySettings", null, false);
		public get conditionalVisibilitySettings(): ConditionalVisibilitySettings { return this.__conditionalVisibilitySettings.get(); }
		public set conditionalVisibilitySettings(newValue: ConditionalVisibilitySettings) { this.__conditionalVisibilitySettings.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new TableRow() cannot be invoked directly, please use 'model.pages.createTableRow()'"
				);
			}
		}

		/**
		 * Creates and returns a new TableRow instance in the SDK and on the server.
		 * The new TableRow will be automatically stored in the 'rows' property
		 * of the parent Table element passed as argument.
		 */
		public static createIn(container: Table): TableRow {
			return internal.instancehelpers.createElement(container, TableRow, "rows", true);
		}

		/**
		 * Creates and returns a new TableRow instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): TableRow {
			return internal.instancehelpers.createElement(model, TableRow);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/template-grid relevant section in reference guide}
	 */
	export interface ITemplateGrid extends IGrid {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): TemplateGrid;
		load(callback: (element: TemplateGrid) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/template-grid relevant section in reference guide}
	 */
	export class TemplateGrid extends Grid implements ITemplateGrid {
		public static typeName: string = "Pages$TemplateGrid";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"contents" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __contents: internal.PartProperty<TemplateGridContents> =
			new internal.PartProperty<TemplateGridContents>(TemplateGrid, this, "contents", null, true);
		public get contents(): TemplateGridContents { return this.__contents.get(); }
		public set contents(newValue: TemplateGridContents) { this.__contents.set(newValue); }
		private __numberOfRows: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(TemplateGrid, this, "numberOfRows", 0, internal.PrimitiveTypeEnum.Integer);
		public get numberOfRows(): number { return this.__numberOfRows.get(); }
		public set numberOfRows(newValue: number) { this.__numberOfRows.set(newValue); }
		private __numberOfColumns: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(TemplateGrid, this, "numberOfColumns", 0, internal.PrimitiveTypeEnum.Integer);
		public get numberOfColumns(): number { return this.__numberOfColumns.get(); }
		public set numberOfColumns(newValue: number) { this.__numberOfColumns.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new TemplateGrid() cannot be invoked directly, please use 'model.pages.createTemplateGrid()'"
				);
			}
		}


		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): TemplateGrid {
			internal.createInVersionCheck(container.model, TemplateGrid.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, TemplateGrid, "footerWidget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): TemplateGrid {
			return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): TemplateGrid {
			return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): TemplateGrid {
			return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): TemplateGrid {
			return internal.instancehelpers.createElement(container, TemplateGrid, "leftWidget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): TemplateGrid {
			return internal.instancehelpers.createElement(container, TemplateGrid, "rightWidget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): TemplateGrid {
			return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): TemplateGrid {
			return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): TemplateGrid {
			return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): TemplateGrid {
			return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): TemplateGrid {
			return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): TemplateGrid {
			return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): TemplateGrid {
			return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): TemplateGrid {
			return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): TemplateGrid {
			return internal.instancehelpers.createElement(container, TemplateGrid, "firstWidget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): TemplateGrid {
			return internal.instancehelpers.createElement(container, TemplateGrid, "secondWidget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): TemplateGrid {
			return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): TemplateGrid {
			return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): TemplateGrid {
			return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): TemplateGrid {
			return internal.instancehelpers.createElement(container, TemplateGrid, "widgets", true);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): TemplateGrid {
			internal.createInVersionCheck(container.model, TemplateGrid.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, TemplateGrid, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): TemplateGrid {
			internal.createInVersionCheck(container.model, TemplateGrid.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, TemplateGrid, "reportWidget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): TemplateGrid {
			return internal.instancehelpers.createElement(model, TemplateGrid);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.contents = TemplateGridContents.create(this.model);
			this.numberOfColumns = 2;
			this.numberOfRows = 3;
		}

	}

	export interface ITemplateGridContents extends internal.IElement {
		model: IModel;
		containerAsTemplateGrid: ITemplateGrid;
		load(): TemplateGridContents;
		load(callback: (element: TemplateGridContents) => void, forceRefresh?: boolean);
	}

	export class TemplateGridContents extends internal.Element implements ITemplateGridContents {
		public static typeName: string = "Pages$TemplateGridContents";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsTemplateGrid() { return super.getContainerAs<TemplateGrid>(TemplateGrid); }

		private __widget: internal.PartProperty<Widget> =
			new internal.PartProperty<Widget>(TemplateGridContents, this, "widget", null, false);
		public get widget(): Widget { return this.__widget.get(); }
		public set widget(newValue: Widget) { this.__widget.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new TemplateGridContents() cannot be invoked directly, please use 'model.pages.createTemplateGridContents()'"
				);
			}
		}

		/**
		 * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
		 * The new TemplateGridContents will be automatically stored in the 'contents' property
		 * of the parent TemplateGrid element passed as argument.
		 */
		public static createIn(container: TemplateGrid): TemplateGridContents {
			return internal.instancehelpers.createElement(container, TemplateGridContents, "contents", false);
		}

		/**
		 * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): TemplateGridContents {
			return internal.instancehelpers.createElement(model, TemplateGridContents);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface ITextWidget extends IAttributeWidgetWithPlaceholder {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): TextWidget;
		load(callback: (element: TextWidget) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class TextWidget extends AttributeWidgetWithPlaceholder implements ITextWidget {
		public static typeName: string = "Pages$TextWidget";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __maxLengthCode: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(TextWidget, this, "maxLengthCode", 0, internal.PrimitiveTypeEnum.Integer);
		public get maxLengthCode(): number { return this.__maxLengthCode.get(); }
		public set maxLengthCode(newValue: number) { this.__maxLengthCode.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new TextWidget() cannot be invoked directly, please use 'model.pages.createTextWidget()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.maxLengthCode = -1;
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/text-area relevant section in reference guide}
	 */
	export interface ITextArea extends ITextWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): TextArea;
		load(callback: (element: TextArea) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/text-area relevant section in reference guide}
	 */
	export class TextArea extends TextWidget implements ITextArea {
		public static typeName: string = "Pages$TextArea";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"counterMessage" : {
					"required" : {
						"currentValue" : true
					}
				},
				"textTooLongMessage" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __numberOfLines: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(TextArea, this, "numberOfLines", 0, internal.PrimitiveTypeEnum.Integer);
		public get numberOfLines(): number { return this.__numberOfLines.get(); }
		public set numberOfLines(newValue: number) { this.__numberOfLines.set(newValue); }
		private __counterMessage: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(TextArea, this, "counterMessage", null, true);
		public get counterMessage(): texts.Text { return this.__counterMessage.get(); }
		public set counterMessage(newValue: texts.Text) { this.__counterMessage.set(newValue); }
		private __textTooLongMessage: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(TextArea, this, "textTooLongMessage", null, true);
		public get textTooLongMessage(): texts.Text { return this.__textTooLongMessage.get(); }
		public set textTooLongMessage(newValue: texts.Text) { this.__textTooLongMessage.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new TextArea() cannot be invoked directly, please use 'model.pages.createTextArea()'"
				);
			}
		}


		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): TextArea {
			internal.createInVersionCheck(container.model, TextArea.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, TextArea, "footerWidget", false);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): TextArea {
			return internal.instancehelpers.createElement(container, TextArea, "widget", false);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): TextArea {
			return internal.instancehelpers.createElement(container, TextArea, "widget", false);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): TextArea {
			return internal.instancehelpers.createElement(container, TextArea, "widget", false);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): TextArea {
			return internal.instancehelpers.createElement(container, TextArea, "leftWidget", false);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): TextArea {
			return internal.instancehelpers.createElement(container, TextArea, "rightWidget", false);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): TextArea {
			return internal.instancehelpers.createElement(container, TextArea, "widget", false);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): TextArea {
			return internal.instancehelpers.createElement(container, TextArea, "widget", false);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): TextArea {
			return internal.instancehelpers.createElement(container, TextArea, "widget", false);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): TextArea {
			return internal.instancehelpers.createElement(container, TextArea, "widget", false);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): TextArea {
			return internal.instancehelpers.createElement(container, TextArea, "widget", false);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): TextArea {
			return internal.instancehelpers.createElement(container, TextArea, "widget", false);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): TextArea {
			return internal.instancehelpers.createElement(container, TextArea, "widget", false);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): TextArea {
			return internal.instancehelpers.createElement(container, TextArea, "widget", false);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): TextArea {
			return internal.instancehelpers.createElement(container, TextArea, "firstWidget", false);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): TextArea {
			return internal.instancehelpers.createElement(container, TextArea, "secondWidget", false);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): TextArea {
			return internal.instancehelpers.createElement(container, TextArea, "widget", false);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): TextArea {
			return internal.instancehelpers.createElement(container, TextArea, "widget", false);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): TextArea {
			return internal.instancehelpers.createElement(container, TextArea, "widget", false);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): TextArea {
			return internal.instancehelpers.createElement(container, TextArea, "widgets", true);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): TextArea {
			internal.createInVersionCheck(container.model, TextArea.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, TextArea, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * The new TextArea will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): TextArea {
			internal.createInVersionCheck(container.model, TextArea.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, TextArea, "reportWidget", false);
		}

		/**
		 * Creates and returns a new TextArea instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): TextArea {
			return internal.instancehelpers.createElement(model, TextArea);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.counterMessage = texts.Text.create(this.model);
			this.numberOfLines = 5;
			this.textTooLongMessage = texts.Text.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/text-box relevant section in reference guide}
	 */
	export interface ITextBox extends ITextWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): TextBox;
		load(callback: (element: TextBox) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/text-box relevant section in reference guide}
	 */
	export class TextBox extends TextWidget implements ITextBox {
		public static typeName: string = "Pages$TextBox";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"formattingInfo" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __inputMask: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(TextBox, this, "inputMask", "", internal.PrimitiveTypeEnum.String);
		public get inputMask(): string { return this.__inputMask.get(); }
		public set inputMask(newValue: string) { this.__inputMask.set(newValue); }
		private __formattingInfo: internal.PartProperty<FormattingInfo> =
			new internal.PartProperty<FormattingInfo>(TextBox, this, "formattingInfo", null, true);
		public get formattingInfo(): FormattingInfo { return this.__formattingInfo.get(); }
		public set formattingInfo(newValue: FormattingInfo) { this.__formattingInfo.set(newValue); }
		private __isPasswordBox: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(TextBox, this, "isPasswordBox", false, internal.PrimitiveTypeEnum.Boolean);
		public get isPasswordBox(): boolean { return this.__isPasswordBox.get(); }
		public set isPasswordBox(newValue: boolean) { this.__isPasswordBox.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new TextBox() cannot be invoked directly, please use 'model.pages.createTextBox()'"
				);
			}
		}


		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): TextBox {
			internal.createInVersionCheck(container.model, TextBox.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, TextBox, "footerWidget", false);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): TextBox {
			return internal.instancehelpers.createElement(container, TextBox, "widget", false);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): TextBox {
			return internal.instancehelpers.createElement(container, TextBox, "widget", false);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): TextBox {
			return internal.instancehelpers.createElement(container, TextBox, "widget", false);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): TextBox {
			return internal.instancehelpers.createElement(container, TextBox, "leftWidget", false);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): TextBox {
			return internal.instancehelpers.createElement(container, TextBox, "rightWidget", false);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): TextBox {
			return internal.instancehelpers.createElement(container, TextBox, "widget", false);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): TextBox {
			return internal.instancehelpers.createElement(container, TextBox, "widget", false);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): TextBox {
			return internal.instancehelpers.createElement(container, TextBox, "widget", false);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): TextBox {
			return internal.instancehelpers.createElement(container, TextBox, "widget", false);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): TextBox {
			return internal.instancehelpers.createElement(container, TextBox, "widget", false);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): TextBox {
			return internal.instancehelpers.createElement(container, TextBox, "widget", false);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): TextBox {
			return internal.instancehelpers.createElement(container, TextBox, "widget", false);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): TextBox {
			return internal.instancehelpers.createElement(container, TextBox, "widget", false);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): TextBox {
			return internal.instancehelpers.createElement(container, TextBox, "firstWidget", false);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): TextBox {
			return internal.instancehelpers.createElement(container, TextBox, "secondWidget", false);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): TextBox {
			return internal.instancehelpers.createElement(container, TextBox, "widget", false);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): TextBox {
			return internal.instancehelpers.createElement(container, TextBox, "widget", false);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): TextBox {
			return internal.instancehelpers.createElement(container, TextBox, "widget", false);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): TextBox {
			return internal.instancehelpers.createElement(container, TextBox, "widgets", true);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): TextBox {
			internal.createInVersionCheck(container.model, TextBox.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, TextBox, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * The new TextBox will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): TextBox {
			internal.createInVersionCheck(container.model, TextBox.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, TextBox, "reportWidget", false);
		}

		/**
		 * Creates and returns a new TextBox instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): TextBox {
			return internal.instancehelpers.createElement(model, TextBox);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.formattingInfo = FormattingInfo.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/page-title relevant section in reference guide}
	 */
	export interface ITitle extends IConditionallyVisibleWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): Title;
		load(callback: (element: Title) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/page-title relevant section in reference guide}
	 */
	export class Title extends ConditionallyVisibleWidget implements ITitle {
		public static typeName: string = "Pages$Title";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Title() cannot be invoked directly, please use 'model.pages.createTitle()'"
				);
			}
		}


		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): Title {
			internal.createInVersionCheck(container.model, Title.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, Title, "footerWidget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): Title {
			return internal.instancehelpers.createElement(container, Title, "widget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): Title {
			return internal.instancehelpers.createElement(container, Title, "widget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): Title {
			return internal.instancehelpers.createElement(container, Title, "widget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): Title {
			return internal.instancehelpers.createElement(container, Title, "leftWidget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): Title {
			return internal.instancehelpers.createElement(container, Title, "rightWidget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): Title {
			return internal.instancehelpers.createElement(container, Title, "widget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): Title {
			return internal.instancehelpers.createElement(container, Title, "widget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): Title {
			return internal.instancehelpers.createElement(container, Title, "widget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): Title {
			return internal.instancehelpers.createElement(container, Title, "widget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): Title {
			return internal.instancehelpers.createElement(container, Title, "widget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): Title {
			return internal.instancehelpers.createElement(container, Title, "widget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): Title {
			return internal.instancehelpers.createElement(container, Title, "widget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): Title {
			return internal.instancehelpers.createElement(container, Title, "widget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): Title {
			return internal.instancehelpers.createElement(container, Title, "firstWidget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): Title {
			return internal.instancehelpers.createElement(container, Title, "secondWidget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): Title {
			return internal.instancehelpers.createElement(container, Title, "widget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): Title {
			return internal.instancehelpers.createElement(container, Title, "widget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): Title {
			return internal.instancehelpers.createElement(container, Title, "widget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): Title {
			return internal.instancehelpers.createElement(container, Title, "widgets", true);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): Title {
			internal.createInVersionCheck(container.model, Title.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, Title, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): Title {
			internal.createInVersionCheck(container.model, Title.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, Title, "reportWidget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): Title {
			return internal.instancehelpers.createElement(model, Title);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IVerticalFlow extends IWidget {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): VerticalFlow;
		load(callback: (element: VerticalFlow) => void, forceRefresh?: boolean);
	}

	export class VerticalFlow extends Widget implements IVerticalFlow {
		public static typeName: string = "Pages$VerticalFlow";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __widgets: internal.PartListProperty<Widget> =
			new internal.PartListProperty<Widget>(VerticalFlow, this, "widgets", []);
		public get widgets(): internal.IList<Widget> { return this.__widgets.get(); }
		public set widgets(newValue: internal.IList<Widget>) { this.__widgets.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new VerticalFlow() cannot be invoked directly, please use 'model.pages.createVerticalFlow()'"
				);
			}
		}


		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): VerticalFlow {
			internal.createInVersionCheck(container.model, VerticalFlow.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, VerticalFlow, "footerWidget", false);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): VerticalFlow {
			return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): VerticalFlow {
			return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): VerticalFlow {
			return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): VerticalFlow {
			return internal.instancehelpers.createElement(container, VerticalFlow, "leftWidget", false);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): VerticalFlow {
			return internal.instancehelpers.createElement(container, VerticalFlow, "rightWidget", false);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): VerticalFlow {
			return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): VerticalFlow {
			return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): VerticalFlow {
			return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): VerticalFlow {
			return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): VerticalFlow {
			return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): VerticalFlow {
			return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): VerticalFlow {
			return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): VerticalFlow {
			return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): VerticalFlow {
			return internal.instancehelpers.createElement(container, VerticalFlow, "firstWidget", false);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): VerticalFlow {
			return internal.instancehelpers.createElement(container, VerticalFlow, "secondWidget", false);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): VerticalFlow {
			return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): VerticalFlow {
			return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): VerticalFlow {
			return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): VerticalFlow {
			return internal.instancehelpers.createElement(container, VerticalFlow, "widgets", true);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): VerticalFlow {
			internal.createInVersionCheck(container.model, VerticalFlow.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, VerticalFlow, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * The new VerticalFlow will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): VerticalFlow {
			internal.createInVersionCheck(container.model, VerticalFlow.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, VerticalFlow, "reportWidget", false);
		}

		/**
		 * Creates and returns a new VerticalFlow instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): VerticalFlow {
			return internal.instancehelpers.createElement(model, VerticalFlow);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/vertical-split-pane relevant section in reference guide}
	 */
	export interface IVerticalSplitPane extends ISplitPane {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDivContainer: IDivContainer;
		containerAsGroupBox: IGroupBox;
		containerAsHeader: IHeader;
		containerAsLayout: ILayout;
		containerAsLayoutCallArgument: ILayoutCallArgument;
		containerAsLayoutGridColumn: ILayoutGridColumn;
		containerAsListView: IListView;
		containerAsListViewTemplate: IListViewTemplate;
		containerAsNavigationListItem: INavigationListItem;
		containerAsScrollContainerRegion: IScrollContainerRegion;
		containerAsSnippet: ISnippet;
		containerAsSplitPane: ISplitPane;
		containerAsTabPage: ITabPage;
		containerAsTableCell: ITableCell;
		containerAsTemplateGridContents: ITemplateGridContents;
		containerAsVerticalFlow: IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): VerticalSplitPane;
		load(callback: (element: VerticalSplitPane) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/vertical-split-pane relevant section in reference guide}
	 */
	export class VerticalSplitPane extends SplitPane implements IVerticalSplitPane {
		public static typeName: string = "Pages$VerticalSplitPane";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDivContainer() { return super.getContainerAs<DivContainer>(DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<GroupBox>(GroupBox); }
		get containerAsHeader() { return super.getContainerAs<Header>(Header); }
		get containerAsLayout() { return super.getContainerAs<Layout>(Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<LayoutCallArgument>(LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<LayoutGridColumn>(LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<ListView>(ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<ListViewTemplate>(ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<NavigationListItem>(NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<ScrollContainerRegion>(ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<Snippet>(Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<SplitPane>(SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<TabPage>(TabPage); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<TemplateGridContents>(TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<VerticalFlow>(VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new VerticalSplitPane() cannot be invoked directly, please use 'model.pages.createVerticalSplitPane()'"
				);
			}
		}


		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'footerWidget' property
		 * of the parent DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: DataView): VerticalSplitPane {
			internal.createInVersionCheck(container.model, VerticalSplitPane.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "footerWidget", false);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'widget' property
		 * of the parent DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: DataView): VerticalSplitPane {
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'widget' property
		 * of the parent DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: DivContainer): VerticalSplitPane {
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'widget' property
		 * of the parent GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: GroupBox): VerticalSplitPane {
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'leftWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: Header): VerticalSplitPane {
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "leftWidget", false);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'rightWidget' property
		 * of the parent Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: Header): VerticalSplitPane {
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "rightWidget", false);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'widget' property
		 * of the parent Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: Layout): VerticalSplitPane {
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'widget' property
		 * of the parent LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): VerticalSplitPane {
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'widget' property
		 * of the parent LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): VerticalSplitPane {
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'widget' property
		 * of the parent ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: ListView): VerticalSplitPane {
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'widget' property
		 * of the parent ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: ListViewTemplate): VerticalSplitPane {
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'widget' property
		 * of the parent NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: NavigationListItem): VerticalSplitPane {
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'widget' property
		 * of the parent ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): VerticalSplitPane {
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'widget' property
		 * of the parent Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: Snippet): VerticalSplitPane {
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'firstWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: SplitPane): VerticalSplitPane {
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "firstWidget", false);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'secondWidget' property
		 * of the parent SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: SplitPane): VerticalSplitPane {
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "secondWidget", false);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'widget' property
		 * of the parent TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: TabPage): VerticalSplitPane {
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'widget' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: TableCell): VerticalSplitPane {
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'widget' property
		 * of the parent TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): VerticalSplitPane {
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'widgets' property
		 * of the parent VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: VerticalFlow): VerticalSplitPane {
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "widgets", true);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): VerticalSplitPane {
			internal.createInVersionCheck(container.model, VerticalSplitPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * The new VerticalSplitPane will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): VerticalSplitPane {
			internal.createInVersionCheck(container.model, VerticalSplitPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, VerticalSplitPane, "reportWidget", false);
		}

		/**
		 * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): VerticalSplitPane {
			return internal.instancehelpers.createElement(model, VerticalSplitPane);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}
}

import {documenttemplates} from "./documenttemplates";
import {domainmodels} from "./domainmodels";
import {enumerations} from "./enumerations";
import {images} from "./images";
import {menus} from "./menus";
import {microflows} from "./microflows";
import {navigation} from "./navigation";
import {reports} from "./reports";
import {security} from "./security";
import {texts} from "./texts";

import {IModel} from "./base-model";
