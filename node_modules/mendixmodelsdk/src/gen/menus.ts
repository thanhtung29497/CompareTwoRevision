/* tslint:disable */

import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;

import {projects} from "./projects";

export namespace menus {


	/**
	 * Interfaces and instance classes for types from the Mendix sub meta model `Menus`.
	 */


	/**
	 * See: {@link https://docs.mendix.com/refguide7/menu relevant section in reference guide}
	 */
	export interface IMenuDocument extends projects.IDocument {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		load(): MenuDocument;
		load(callback: (element: MenuDocument) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/menu relevant section in reference guide}
	 */
	export class MenuDocument extends projects.Document implements IMenuDocument {
		public static typeName: string = "Menus$MenuDocument";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"itemCollection" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }

		private __itemCollection: internal.PartProperty<MenuItemCollection> =
			new internal.PartProperty<MenuItemCollection>(MenuDocument, this, "itemCollection", null, true);
		public get itemCollection(): MenuItemCollection { return this.__itemCollection.get(); }
		public set itemCollection(newValue: MenuItemCollection) { this.__itemCollection.set(newValue); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "documents";
		}

		/**
		 * Creates a new MenuDocument unit in the SDK and on the server.
		 * Expects one argument, the projects.IFolderBase in which this unit is contained.
		 */
		public static createIn(container: projects.IFolderBase): MenuDocument {
			return internal.instancehelpers.createUnit(container, MenuDocument);
		}

		_isByNameReferrable() { return true; }

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.itemCollection = MenuItemCollection.create(this.model);
		}

	}

	export interface IMenuItemContainer extends internal.IElement {
		model: IModel;
		containerAsMenuDocument: IMenuDocument;
		containerAsMenuItemContainer: IMenuItemContainer;
		containerAsNavigationProfile: navigation.INavigationProfile;
		load(): MenuItemContainer;
		load(callback: (element: MenuItemContainer) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class MenuItemContainer extends internal.Element implements IMenuItemContainer {
		public static typeName: string = "Menus$MenuItemContainer";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMenuDocument() { return super.getContainerAs<MenuDocument>(MenuDocument); }
		get containerAsMenuItemContainer() { return super.getContainerAs<MenuItemContainer>(MenuItemContainer); }
		get containerAsNavigationProfile() { return super.getContainerAs<navigation.NavigationProfile>(navigation.NavigationProfile); }

		private __items: internal.PartListProperty<MenuItem> =
			new internal.PartListProperty<MenuItem>(MenuItemContainer, this, "items", []);
		public get items(): internal.IList<MenuItem> { return this.__items.get(); }
		public set items(newValue: internal.IList<MenuItem>) { this.__items.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MenuItemContainer() cannot be invoked directly, please use 'model.menus.createMenuItemContainer()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/menu-item relevant section in reference guide}
	 */
	export interface IMenuItem extends IMenuItemContainer {
		model: IModel;
		containerAsMenuItemContainer: IMenuItemContainer;
		load(): MenuItem;
		load(callback: (element: MenuItem) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/menu-item relevant section in reference guide}
	 */
	export class MenuItem extends MenuItemContainer implements IMenuItem {
		public static typeName: string = "Menus$MenuItem";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"caption" : {
					"required" : {
						"currentValue" : true
					}
				},
				"action" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsMenuItemContainer() { return super.getContainerAs<MenuItemContainer>(MenuItemContainer); }

		private __caption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(MenuItem, this, "caption", null, true);
		public get caption(): texts.Text { return this.__caption.get(); }
		public set caption(newValue: texts.Text) { this.__caption.set(newValue); }
		private __icon: internal.PartProperty<pages.Icon> =
			new internal.PartProperty<pages.Icon>(MenuItem, this, "icon", null, false);
		public get icon(): pages.Icon { return this.__icon.get(); }
		public set icon(newValue: pages.Icon) { this.__icon.set(newValue); }
		private __action: internal.PartProperty<pages.ClientAction> =
			new internal.PartProperty<pages.ClientAction>(MenuItem, this, "action", null, true);
		public get action(): pages.ClientAction { return this.__action.get(); }
		public set action(newValue: pages.ClientAction) { this.__action.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MenuItem() cannot be invoked directly, please use 'model.menus.createMenuItem()'"
				);
			}
		}


		/**
		 * Creates and returns a new MenuItem instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): MenuItem {
			return internal.instancehelpers.createElement(model, MenuItem);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.action = pages.NoClientAction.create(this.model);
			this.caption = texts.Text.create(this.model);
		}

	}

	export interface IMenuItemCollection extends IMenuItemContainer {
		model: IModel;
		containerAsMenuDocument: IMenuDocument;
		containerAsNavigationProfile: navigation.INavigationProfile;
		load(): MenuItemCollection;
		load(callback: (element: MenuItemCollection) => void, forceRefresh?: boolean);
	}

	export class MenuItemCollection extends MenuItemContainer implements IMenuItemCollection {
		public static typeName: string = "Menus$MenuItemCollection";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMenuDocument() { return super.getContainerAs<MenuDocument>(MenuDocument); }
		get containerAsNavigationProfile() { return super.getContainerAs<navigation.NavigationProfile>(navigation.NavigationProfile); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MenuItemCollection() cannot be invoked directly, please use 'model.menus.createMenuItemCollection()'"
				);
			}
		}


		/**
		 * Creates and returns a new MenuItemCollection instance in the SDK and on the server.
		 * The new MenuItemCollection will be automatically stored in the 'itemCollection' property
		 * of the parent MenuDocument element passed as argument.
		 */
		public static createInMenuDocumentUnderItemCollection(container: MenuDocument): MenuItemCollection {
			return internal.instancehelpers.createElement(container, MenuItemCollection, "itemCollection", false);
		}

		/**
		 * Creates and returns a new MenuItemCollection instance in the SDK and on the server.
		 * The new MenuItemCollection will be automatically stored in the 'menuItemCollection' property
		 * of the parent navigation.NavigationProfile element passed as argument.
		 */
		public static createInNavigationProfileUnderMenuItemCollection(container: navigation.NavigationProfile): MenuItemCollection {
			return internal.instancehelpers.createElement(container, MenuItemCollection, "menuItemCollection", false);
		}

		/**
		 * Creates and returns a new MenuItemCollection instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): MenuItemCollection {
			return internal.instancehelpers.createElement(model, MenuItemCollection);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}
}

import {navigation} from "./navigation";
import {pages} from "./pages";
import {texts} from "./texts";

import {IModel} from "./base-model";
