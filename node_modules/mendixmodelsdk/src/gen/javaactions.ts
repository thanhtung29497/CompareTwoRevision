/* tslint:disable */

import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;

import {projects} from "./projects";

export namespace javaactions {


	/**
	 * Interfaces and instance classes for types from the Mendix sub meta model `JavaActions`.
	 */


	/**
	 * In version 6.7.0: introduced
	 */
	export interface IParameterType extends internal.IElement {
		model: IModel;
		containerAsJavaActionParameter: IJavaActionParameter;
		load(): ParameterType;
		load(callback: (element: ParameterType) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.

	 *
	 * In version 6.7.0: introduced
	 */
	export abstract class ParameterType extends internal.Element implements IParameterType {
		public static typeName: string = "JavaActions$ParameterType";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.7.0",
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsJavaActionParameter() { return super.getContainerAs<JavaActionParameter>(JavaActionParameter); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ParameterType() cannot be invoked directly, please use 'model.javaactions.createParameterType()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * In version 6.7.0: introduced
	 */
	export interface IBasicParameterType extends IParameterType {
		model: IModel;
		containerAsJavaActionParameter: IJavaActionParameter;
		/**
		 * This property is required and cannot be set to null.
		 */
		type: IType;
		load(): BasicParameterType;
		load(callback: (element: BasicParameterType) => void, forceRefresh?: boolean);
	}

	/**
	 * In version 6.7.0: introduced
	 */
	export class BasicParameterType extends ParameterType implements IBasicParameterType {
		public static typeName: string = "JavaActions$BasicParameterType";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.7.0",
			"properties" : {
				"type" : {
					"public" : {
						"currentValue" : true
					},
					"required" : {
						"currentValue" : true
					}
				}
			},
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsJavaActionParameter() { return super.getContainerAs<JavaActionParameter>(JavaActionParameter); }

		private __type: internal.PartProperty<Type> =
			new internal.PartProperty<Type>(BasicParameterType, this, "type", null, true);
		public get type(): Type { return this.__type.get(); }
		public set type(newValue: Type) { this.__type.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new BasicParameterType() cannot be invoked directly, please use 'model.javaactions.createBasicParameterType()'"
				);
			}
		}


		/**
		 * Creates and returns a new BasicParameterType instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): BasicParameterType {
			return internal.instancehelpers.createElement(model, BasicParameterType);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.type = StringType.create(this.model);
		}

	}

	/**
	 * In version 6.6.0: introduced
	 */
	export interface IType extends internal.IElement {
		model: IModel;
		containerAsBasicParameterType: IBasicParameterType;
		containerAsJavaAction: IJavaAction;
		containerAsJavaActionParameter: IJavaActionParameter;
		containerAsListType: IListType;
		load(): Type;
		load(callback: (element: Type) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.

	 *
	 * In version 6.6.0: introduced
	 */
	export abstract class Type extends internal.Element implements IType {
		public static typeName: string = "JavaActions$Type";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.6.0",
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsBasicParameterType() { return super.getContainerAs<BasicParameterType>(BasicParameterType); }
		get containerAsJavaAction() { return super.getContainerAs<JavaAction>(JavaAction); }
		get containerAsJavaActionParameter() { return super.getContainerAs<JavaActionParameter>(JavaActionParameter); }
		get containerAsListType() { return super.getContainerAs<ListType>(ListType); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Type() cannot be invoked directly, please use 'model.javaactions.createType()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * In version 6.6.0: introduced
	 */
	export interface IPrimitiveType extends IType {
		model: IModel;
		containerAsBasicParameterType: IBasicParameterType;
		containerAsJavaAction: IJavaAction;
		containerAsJavaActionParameter: IJavaActionParameter;
		load(): PrimitiveType;
		load(callback: (element: PrimitiveType) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.

	 *
	 * In version 6.6.0: introduced
	 */
	export abstract class PrimitiveType extends Type implements IPrimitiveType {
		public static typeName: string = "JavaActions$PrimitiveType";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.6.0",
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsBasicParameterType() { return super.getContainerAs<BasicParameterType>(BasicParameterType); }
		get containerAsJavaAction() { return super.getContainerAs<JavaAction>(JavaAction); }
		get containerAsJavaActionParameter() { return super.getContainerAs<JavaActionParameter>(JavaActionParameter); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new PrimitiveType() cannot be invoked directly, please use 'model.javaactions.createPrimitiveType()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * In version 6.6.0: introduced
	 */
	export interface IBooleanType extends IPrimitiveType {
		model: IModel;
		containerAsBasicParameterType: IBasicParameterType;
		containerAsJavaAction: IJavaAction;
		containerAsJavaActionParameter: IJavaActionParameter;
		load(): BooleanType;
		load(callback: (element: BooleanType) => void, forceRefresh?: boolean);
	}

	/**
	 * In version 6.6.0: introduced
	 */
	export class BooleanType extends PrimitiveType implements IBooleanType {
		public static typeName: string = "JavaActions$BooleanType";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.6.0",
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsBasicParameterType() { return super.getContainerAs<BasicParameterType>(BasicParameterType); }
		get containerAsJavaAction() { return super.getContainerAs<JavaAction>(JavaAction); }
		get containerAsJavaActionParameter() { return super.getContainerAs<JavaActionParameter>(JavaActionParameter); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new BooleanType() cannot be invoked directly, please use 'model.javaactions.createBooleanType()'"
				);
			}
		}


		/**
		 * Creates and returns a new BooleanType instance in the SDK and on the server.
		 * The new BooleanType will be automatically stored in the 'type' property
		 * of the parent BasicParameterType element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInBasicParameterTypeUnderType(container: BasicParameterType): BooleanType {
			internal.createInVersionCheck(container.model, BooleanType.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, BooleanType, "type", false);
		}

		/**
		 * Creates and returns a new BooleanType instance in the SDK and on the server.
		 * The new BooleanType will be automatically stored in the 'javaReturnType' property
		 * of the parent JavaAction element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInJavaActionUnderJavaReturnType(container: JavaAction): BooleanType {
			internal.createInVersionCheck(container.model, BooleanType.typeName,
				["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, BooleanType, "javaReturnType", false);
		}

		/**
		 * Creates and returns a new BooleanType instance in the SDK and on the server.
		 * The new BooleanType will be automatically stored in the 'javaType' property
		 * of the parent JavaActionParameter element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0
		 */
		public static createInJavaActionParameterUnderJavaType(container: JavaActionParameter): BooleanType {
			internal.createInVersionCheck(container.model, BooleanType.typeName,
				["6.6.0"]
			);
			return internal.instancehelpers.createElement(container, BooleanType, "javaType", false);
		}

		/**
		 * Creates and returns a new BooleanType instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): BooleanType {
			return internal.instancehelpers.createElement(model, BooleanType);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * In version 6.6.0: introduced
	 */
	export interface IEntityType extends IType {
		model: IModel;
		containerAsBasicParameterType: IBasicParameterType;
		containerAsJavaAction: IJavaAction;
		containerAsJavaActionParameter: IJavaActionParameter;
		containerAsListType: IListType;
		load(): EntityType;
		load(callback: (element: EntityType) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.

	 *
	 * In version 6.6.0: introduced
	 */
	export abstract class EntityType extends Type implements IEntityType {
		public static typeName: string = "JavaActions$EntityType";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.6.0",
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsBasicParameterType() { return super.getContainerAs<BasicParameterType>(BasicParameterType); }
		get containerAsJavaAction() { return super.getContainerAs<JavaAction>(JavaAction); }
		get containerAsJavaActionParameter() { return super.getContainerAs<JavaActionParameter>(JavaActionParameter); }
		get containerAsListType() { return super.getContainerAs<ListType>(ListType); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new EntityType() cannot be invoked directly, please use 'model.javaactions.createEntityType()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * In version 6.6.0: introduced
	 */
	export interface IConcreteEntityType extends IEntityType {
		model: IModel;
		containerAsBasicParameterType: IBasicParameterType;
		containerAsJavaAction: IJavaAction;
		containerAsJavaActionParameter: IJavaActionParameter;
		containerAsListType: IListType;
		/**
		 * This property is required and cannot be set to null.
		 */
		entity: domainmodels.IEntity;
		entityQualifiedName: string;
		load(): ConcreteEntityType;
		load(callback: (element: ConcreteEntityType) => void, forceRefresh?: boolean);
	}

	/**
	 * In version 6.6.0: introduced
	 */
	export class ConcreteEntityType extends EntityType implements IConcreteEntityType {
		public static typeName: string = "JavaActions$ConcreteEntityType";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.6.0",
			"properties" : {
				"entity" : {
					"public" : {
						"currentValue" : true
					},
					"required" : {
						"currentValue" : true
					}
				}
			},
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsBasicParameterType() { return super.getContainerAs<BasicParameterType>(BasicParameterType); }
		get containerAsJavaAction() { return super.getContainerAs<JavaAction>(JavaAction); }
		get containerAsJavaActionParameter() { return super.getContainerAs<JavaActionParameter>(JavaActionParameter); }
		get containerAsListType() { return super.getContainerAs<ListType>(ListType); }

		private __entity: internal.ByNameReferenceProperty<domainmodels.IEntity> =
			new internal.ByNameReferenceProperty<domainmodels.IEntity>(ConcreteEntityType, this, "entity", null, "DomainModels$Entity");
		public get entity(): domainmodels.IEntity { return this.__entity.get(); }
		public set entity(newValue: domainmodels.IEntity) { this.__entity.set(newValue); }
		get entityQualifiedName(): string { return this.__entity.qualifiedName(); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ConcreteEntityType() cannot be invoked directly, please use 'model.javaactions.createConcreteEntityType()'"
				);
			}
		}


		/**
		 * Creates and returns a new ConcreteEntityType instance in the SDK and on the server.
		 * The new ConcreteEntityType will be automatically stored in the 'type' property
		 * of the parent BasicParameterType element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInBasicParameterTypeUnderType(container: BasicParameterType): ConcreteEntityType {
			internal.createInVersionCheck(container.model, ConcreteEntityType.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, ConcreteEntityType, "type", false);
		}

		/**
		 * Creates and returns a new ConcreteEntityType instance in the SDK and on the server.
		 * The new ConcreteEntityType will be automatically stored in the 'javaReturnType' property
		 * of the parent JavaAction element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInJavaActionUnderJavaReturnType(container: JavaAction): ConcreteEntityType {
			internal.createInVersionCheck(container.model, ConcreteEntityType.typeName,
				["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, ConcreteEntityType, "javaReturnType", false);
		}

		/**
		 * Creates and returns a new ConcreteEntityType instance in the SDK and on the server.
		 * The new ConcreteEntityType will be automatically stored in the 'javaType' property
		 * of the parent JavaActionParameter element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0
		 */
		public static createInJavaActionParameterUnderJavaType(container: JavaActionParameter): ConcreteEntityType {
			internal.createInVersionCheck(container.model, ConcreteEntityType.typeName,
				["6.6.0"]
			);
			return internal.instancehelpers.createElement(container, ConcreteEntityType, "javaType", false);
		}

		/**
		 * Creates and returns a new ConcreteEntityType instance in the SDK and on the server.
		 * The new ConcreteEntityType will be automatically stored in the 'parameter' property
		 * of the parent ListType element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInListTypeUnderParameter(container: ListType): ConcreteEntityType {
			internal.createInVersionCheck(container.model, ConcreteEntityType.typeName,
				["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, ConcreteEntityType, "parameter", false);
		}

		/**
		 * Creates and returns a new ConcreteEntityType instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ConcreteEntityType {
			return internal.instancehelpers.createElement(model, ConcreteEntityType);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * In version 6.6.0: introduced
	 */
	export interface IDateTimeType extends IPrimitiveType {
		model: IModel;
		containerAsBasicParameterType: IBasicParameterType;
		containerAsJavaAction: IJavaAction;
		containerAsJavaActionParameter: IJavaActionParameter;
		load(): DateTimeType;
		load(callback: (element: DateTimeType) => void, forceRefresh?: boolean);
	}

	/**
	 * In version 6.6.0: introduced
	 */
	export class DateTimeType extends PrimitiveType implements IDateTimeType {
		public static typeName: string = "JavaActions$DateTimeType";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.6.0",
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsBasicParameterType() { return super.getContainerAs<BasicParameterType>(BasicParameterType); }
		get containerAsJavaAction() { return super.getContainerAs<JavaAction>(JavaAction); }
		get containerAsJavaActionParameter() { return super.getContainerAs<JavaActionParameter>(JavaActionParameter); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DateTimeType() cannot be invoked directly, please use 'model.javaactions.createDateTimeType()'"
				);
			}
		}


		/**
		 * Creates and returns a new DateTimeType instance in the SDK and on the server.
		 * The new DateTimeType will be automatically stored in the 'type' property
		 * of the parent BasicParameterType element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInBasicParameterTypeUnderType(container: BasicParameterType): DateTimeType {
			internal.createInVersionCheck(container.model, DateTimeType.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, DateTimeType, "type", false);
		}

		/**
		 * Creates and returns a new DateTimeType instance in the SDK and on the server.
		 * The new DateTimeType will be automatically stored in the 'javaReturnType' property
		 * of the parent JavaAction element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInJavaActionUnderJavaReturnType(container: JavaAction): DateTimeType {
			internal.createInVersionCheck(container.model, DateTimeType.typeName,
				["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, DateTimeType, "javaReturnType", false);
		}

		/**
		 * Creates and returns a new DateTimeType instance in the SDK and on the server.
		 * The new DateTimeType will be automatically stored in the 'javaType' property
		 * of the parent JavaActionParameter element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0
		 */
		public static createInJavaActionParameterUnderJavaType(container: JavaActionParameter): DateTimeType {
			internal.createInVersionCheck(container.model, DateTimeType.typeName,
				["6.6.0"]
			);
			return internal.instancehelpers.createElement(container, DateTimeType, "javaType", false);
		}

		/**
		 * Creates and returns a new DateTimeType instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DateTimeType {
			return internal.instancehelpers.createElement(model, DateTimeType);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * In version 6.6.0: introduced
	 */
	export interface IDecimalType extends IPrimitiveType {
		model: IModel;
		containerAsBasicParameterType: IBasicParameterType;
		containerAsJavaAction: IJavaAction;
		containerAsJavaActionParameter: IJavaActionParameter;
		load(): DecimalType;
		load(callback: (element: DecimalType) => void, forceRefresh?: boolean);
	}

	/**
	 * In version 6.6.0: introduced
	 */
	export class DecimalType extends PrimitiveType implements IDecimalType {
		public static typeName: string = "JavaActions$DecimalType";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.6.0",
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsBasicParameterType() { return super.getContainerAs<BasicParameterType>(BasicParameterType); }
		get containerAsJavaAction() { return super.getContainerAs<JavaAction>(JavaAction); }
		get containerAsJavaActionParameter() { return super.getContainerAs<JavaActionParameter>(JavaActionParameter); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DecimalType() cannot be invoked directly, please use 'model.javaactions.createDecimalType()'"
				);
			}
		}


		/**
		 * Creates and returns a new DecimalType instance in the SDK and on the server.
		 * The new DecimalType will be automatically stored in the 'type' property
		 * of the parent BasicParameterType element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInBasicParameterTypeUnderType(container: BasicParameterType): DecimalType {
			internal.createInVersionCheck(container.model, DecimalType.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, DecimalType, "type", false);
		}

		/**
		 * Creates and returns a new DecimalType instance in the SDK and on the server.
		 * The new DecimalType will be automatically stored in the 'javaReturnType' property
		 * of the parent JavaAction element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInJavaActionUnderJavaReturnType(container: JavaAction): DecimalType {
			internal.createInVersionCheck(container.model, DecimalType.typeName,
				["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, DecimalType, "javaReturnType", false);
		}

		/**
		 * Creates and returns a new DecimalType instance in the SDK and on the server.
		 * The new DecimalType will be automatically stored in the 'javaType' property
		 * of the parent JavaActionParameter element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0
		 */
		public static createInJavaActionParameterUnderJavaType(container: JavaActionParameter): DecimalType {
			internal.createInVersionCheck(container.model, DecimalType.typeName,
				["6.6.0"]
			);
			return internal.instancehelpers.createElement(container, DecimalType, "javaType", false);
		}

		/**
		 * Creates and returns a new DecimalType instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DecimalType {
			return internal.instancehelpers.createElement(model, DecimalType);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * In version 6.7.0: introduced
	 */
	export interface IEntityTypeParameterType extends IParameterType {
		model: IModel;
		containerAsJavaActionParameter: IJavaActionParameter;
		typeParameter: ITypeParameter;
		load(): EntityTypeParameterType;
		load(callback: (element: EntityTypeParameterType) => void, forceRefresh?: boolean);
	}

	/**
	 * In version 6.7.0: introduced
	 */
	export class EntityTypeParameterType extends ParameterType implements IEntityTypeParameterType {
		public static typeName: string = "JavaActions$EntityTypeParameterType";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.7.0",
			"properties" : {
				"typeParameter" : {
					"public" : {
						"currentValue" : true
					}
				}
			},
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsJavaActionParameter() { return super.getContainerAs<JavaActionParameter>(JavaActionParameter); }

		private __typeParameter: internal.ByIdReferenceProperty<TypeParameter> =
			new internal.ByIdReferenceProperty<TypeParameter>(EntityTypeParameterType, this, "typeParameter", null);
		public get typeParameter(): TypeParameter { return this.__typeParameter.get(); }
		public set typeParameter(newValue: TypeParameter) { this.__typeParameter.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new EntityTypeParameterType() cannot be invoked directly, please use 'model.javaactions.createEntityTypeParameterType()'"
				);
			}
		}


		/**
		 * Creates and returns a new EntityTypeParameterType instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): EntityTypeParameterType {
			return internal.instancehelpers.createElement(model, EntityTypeParameterType);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * In version 6.6.0: introduced
	 */
	export interface IEnumerationType extends IType {
		model: IModel;
		containerAsBasicParameterType: IBasicParameterType;
		containerAsJavaAction: IJavaAction;
		containerAsJavaActionParameter: IJavaActionParameter;
		/**
		 * This property is required and cannot be set to null.
		 */
		enumeration: enumerations.IEnumeration;
		enumerationQualifiedName: string;
		load(): EnumerationType;
		load(callback: (element: EnumerationType) => void, forceRefresh?: boolean);
	}

	/**
	 * In version 6.6.0: introduced
	 */
	export class EnumerationType extends Type implements IEnumerationType {
		public static typeName: string = "JavaActions$EnumerationType";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.6.0",
			"properties" : {
				"enumeration" : {
					"public" : {
						"currentValue" : true
					},
					"required" : {
						"currentValue" : true
					}
				}
			},
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsBasicParameterType() { return super.getContainerAs<BasicParameterType>(BasicParameterType); }
		get containerAsJavaAction() { return super.getContainerAs<JavaAction>(JavaAction); }
		get containerAsJavaActionParameter() { return super.getContainerAs<JavaActionParameter>(JavaActionParameter); }

		private __enumeration: internal.ByNameReferenceProperty<enumerations.IEnumeration> =
			new internal.ByNameReferenceProperty<enumerations.IEnumeration>(EnumerationType, this, "enumeration", null, "Enumerations$Enumeration");
		public get enumeration(): enumerations.IEnumeration { return this.__enumeration.get(); }
		public set enumeration(newValue: enumerations.IEnumeration) { this.__enumeration.set(newValue); }
		get enumerationQualifiedName(): string { return this.__enumeration.qualifiedName(); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new EnumerationType() cannot be invoked directly, please use 'model.javaactions.createEnumerationType()'"
				);
			}
		}


		/**
		 * Creates and returns a new EnumerationType instance in the SDK and on the server.
		 * The new EnumerationType will be automatically stored in the 'type' property
		 * of the parent BasicParameterType element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInBasicParameterTypeUnderType(container: BasicParameterType): EnumerationType {
			internal.createInVersionCheck(container.model, EnumerationType.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, EnumerationType, "type", false);
		}

		/**
		 * Creates and returns a new EnumerationType instance in the SDK and on the server.
		 * The new EnumerationType will be automatically stored in the 'javaReturnType' property
		 * of the parent JavaAction element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInJavaActionUnderJavaReturnType(container: JavaAction): EnumerationType {
			internal.createInVersionCheck(container.model, EnumerationType.typeName,
				["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, EnumerationType, "javaReturnType", false);
		}

		/**
		 * Creates and returns a new EnumerationType instance in the SDK and on the server.
		 * The new EnumerationType will be automatically stored in the 'javaType' property
		 * of the parent JavaActionParameter element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0
		 */
		public static createInJavaActionParameterUnderJavaType(container: JavaActionParameter): EnumerationType {
			internal.createInVersionCheck(container.model, EnumerationType.typeName,
				["6.6.0"]
			);
			return internal.instancehelpers.createElement(container, EnumerationType, "javaType", false);
		}

		/**
		 * Creates and returns a new EnumerationType instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): EnumerationType {
			return internal.instancehelpers.createElement(model, EnumerationType);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * In version 6.6.0: introduced
	 */
	export interface IFloatType extends IPrimitiveType {
		model: IModel;
		containerAsBasicParameterType: IBasicParameterType;
		containerAsJavaAction: IJavaAction;
		containerAsJavaActionParameter: IJavaActionParameter;
		load(): FloatType;
		load(callback: (element: FloatType) => void, forceRefresh?: boolean);
	}

	/**
	 * In version 6.6.0: introduced
	 */
	export class FloatType extends PrimitiveType implements IFloatType {
		public static typeName: string = "JavaActions$FloatType";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.6.0",
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsBasicParameterType() { return super.getContainerAs<BasicParameterType>(BasicParameterType); }
		get containerAsJavaAction() { return super.getContainerAs<JavaAction>(JavaAction); }
		get containerAsJavaActionParameter() { return super.getContainerAs<JavaActionParameter>(JavaActionParameter); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new FloatType() cannot be invoked directly, please use 'model.javaactions.createFloatType()'"
				);
			}
		}


		/**
		 * Creates and returns a new FloatType instance in the SDK and on the server.
		 * The new FloatType will be automatically stored in the 'type' property
		 * of the parent BasicParameterType element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInBasicParameterTypeUnderType(container: BasicParameterType): FloatType {
			internal.createInVersionCheck(container.model, FloatType.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, FloatType, "type", false);
		}

		/**
		 * Creates and returns a new FloatType instance in the SDK and on the server.
		 * The new FloatType will be automatically stored in the 'javaReturnType' property
		 * of the parent JavaAction element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInJavaActionUnderJavaReturnType(container: JavaAction): FloatType {
			internal.createInVersionCheck(container.model, FloatType.typeName,
				["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, FloatType, "javaReturnType", false);
		}

		/**
		 * Creates and returns a new FloatType instance in the SDK and on the server.
		 * The new FloatType will be automatically stored in the 'javaType' property
		 * of the parent JavaActionParameter element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0
		 */
		public static createInJavaActionParameterUnderJavaType(container: JavaActionParameter): FloatType {
			internal.createInVersionCheck(container.model, FloatType.typeName,
				["6.6.0"]
			);
			return internal.instancehelpers.createElement(container, FloatType, "javaType", false);
		}

		/**
		 * Creates and returns a new FloatType instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): FloatType {
			return internal.instancehelpers.createElement(model, FloatType);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * In version 6.6.0: introduced
	 */
	export interface IIntegerType extends IPrimitiveType {
		model: IModel;
		containerAsBasicParameterType: IBasicParameterType;
		containerAsJavaAction: IJavaAction;
		containerAsJavaActionParameter: IJavaActionParameter;
		load(): IntegerType;
		load(callback: (element: IntegerType) => void, forceRefresh?: boolean);
	}

	/**
	 * In version 6.6.0: introduced
	 */
	export class IntegerType extends PrimitiveType implements IIntegerType {
		public static typeName: string = "JavaActions$IntegerType";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.6.0",
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsBasicParameterType() { return super.getContainerAs<BasicParameterType>(BasicParameterType); }
		get containerAsJavaAction() { return super.getContainerAs<JavaAction>(JavaAction); }
		get containerAsJavaActionParameter() { return super.getContainerAs<JavaActionParameter>(JavaActionParameter); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new IntegerType() cannot be invoked directly, please use 'model.javaactions.createIntegerType()'"
				);
			}
		}


		/**
		 * Creates and returns a new IntegerType instance in the SDK and on the server.
		 * The new IntegerType will be automatically stored in the 'type' property
		 * of the parent BasicParameterType element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInBasicParameterTypeUnderType(container: BasicParameterType): IntegerType {
			internal.createInVersionCheck(container.model, IntegerType.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, IntegerType, "type", false);
		}

		/**
		 * Creates and returns a new IntegerType instance in the SDK and on the server.
		 * The new IntegerType will be automatically stored in the 'javaReturnType' property
		 * of the parent JavaAction element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInJavaActionUnderJavaReturnType(container: JavaAction): IntegerType {
			internal.createInVersionCheck(container.model, IntegerType.typeName,
				["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, IntegerType, "javaReturnType", false);
		}

		/**
		 * Creates and returns a new IntegerType instance in the SDK and on the server.
		 * The new IntegerType will be automatically stored in the 'javaType' property
		 * of the parent JavaActionParameter element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0
		 */
		public static createInJavaActionParameterUnderJavaType(container: JavaActionParameter): IntegerType {
			internal.createInVersionCheck(container.model, IntegerType.typeName,
				["6.6.0"]
			);
			return internal.instancehelpers.createElement(container, IntegerType, "javaType", false);
		}

		/**
		 * Creates and returns a new IntegerType instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): IntegerType {
			return internal.instancehelpers.createElement(model, IntegerType);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/java-actions relevant section in reference guide}
	 */
	export interface IJavaAction extends projects.IDocument {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		/**
		 * In version 6.6.0: introduced
		 */
		typeParameters: internal.IList<ITypeParameter>;
		parameters: internal.IList<IJavaActionParameter>;
		/**
		 * The value of this property is conceptually of type dataTypes.DataType.
		 *
		 * In version 6.6.0: deleted
		 */
		returnType: string;
		/**
		 * This property is required and cannot be set to null.
		 *
		 * In version 6.6.0: introduced
		 */
		javaReturnType: IType;
		/**
		 * In version 6.6.0: introduced
		 */
		microflowActionInfo: IMicroflowActionInfo;
		load(): JavaAction;
		load(callback: (element: JavaAction) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/java-actions relevant section in reference guide}
	 */
	export class JavaAction extends projects.Document implements IJavaAction {
		public static typeName: string = "JavaActions$JavaAction";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"typeParameters" : {
					"introduced" : "6.6.0",
					"public" : {
						"currentValue" : true
					}
				},
				"parameters" : {
					"public" : {
						"currentValue" : true
					}
				},
				"returnType" : {
					"deleted" : "6.6.0",
					"deletionMessage" : null,
					"public" : {
						"currentValue" : true
					}
				},
				"javaReturnType" : {
					"introduced" : "6.6.0",
					"public" : {
						"currentValue" : true
					},
					"required" : {
						"currentValue" : true
					}
				},
				"microflowActionInfo" : {
					"introduced" : "6.6.0",
					"public" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }

		private __typeParameters: internal.PartListProperty<TypeParameter> =
			new internal.PartListProperty<TypeParameter>(JavaAction, this, "typeParameters", []);
		/**
		 * In version 6.6.0: introduced
		 */
		public get typeParameters(): internal.IList<TypeParameter> { return this.__typeParameters.get(); }
		public set typeParameters(newValue: internal.IList<TypeParameter>) { this.__typeParameters.set(newValue); }
		private __parameters: internal.PartListProperty<JavaActionParameter> =
			new internal.PartListProperty<JavaActionParameter>(JavaAction, this, "parameters", []);
		public get parameters(): internal.IList<JavaActionParameter> { return this.__parameters.get(); }
		public set parameters(newValue: internal.IList<JavaActionParameter>) { this.__parameters.set(newValue); }
		private __returnType: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(JavaAction, this, "returnType", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type dataTypes.DataType.
		 *
		 * In version 6.6.0: deleted
		 */
		public get returnType(): string { return this.__returnType.get(); }
		public set returnType(newValue: string) { this.__returnType.set(newValue); }
		private __javaReturnType: internal.PartProperty<Type> =
			new internal.PartProperty<Type>(JavaAction, this, "javaReturnType", null, true);
		/**
		 * In version 6.6.0: introduced
		 */
		public get javaReturnType(): Type { return this.__javaReturnType.get(); }
		public set javaReturnType(newValue: Type) { this.__javaReturnType.set(newValue); }
		private __microflowActionInfo: internal.PartProperty<MicroflowActionInfo> =
			new internal.PartProperty<MicroflowActionInfo>(JavaAction, this, "microflowActionInfo", null, false);
		/**
		 * In version 6.6.0: introduced
		 */
		public get microflowActionInfo(): MicroflowActionInfo { return this.__microflowActionInfo.get(); }
		public set microflowActionInfo(newValue: MicroflowActionInfo) { this.__microflowActionInfo.set(newValue); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "documents";
		}

		/**
		 * Creates a new JavaAction unit in the SDK and on the server.
		 * Expects one argument, the projects.IFolderBase in which this unit is contained.
		 */
		public static createIn(container: projects.IFolderBase): JavaAction {
			return internal.instancehelpers.createUnit(container, JavaAction);
		}

		_isByNameReferrable() { return true; }

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			if (this.__javaReturnType.isAvailable) {
				this.javaReturnType = BooleanType.create(this.model);
			}
			if (this.__returnType.isAvailable) {
				this.returnType = "Boolean";
			}
		}

	}

	export interface IJavaActionParameter extends internal.IElement {
		model: IModel;
		containerAsJavaAction: IJavaAction;
		name: string;
		/**
		 * The value of this property is conceptually of type dataTypes.DataType.
		 *
		 * In version 6.6.0: deleted
		 */
		type: string;
		/**
		 * This property is required and cannot be set to null.
		 *
		 * In version 6.7.0: deleted
		 * In version 6.6.0: introduced
		 */
		javaType: IType;
		/**
		 * This property is required and cannot be set to null.
		 *
		 * In version 6.7.0: introduced
		 */
		parameterType: IParameterType;
		/**
		 * In version 6.10.0: introduced
		 */
		description: string;
		load(): JavaActionParameter;
		load(callback: (element: JavaActionParameter) => void, forceRefresh?: boolean);
	}

	export class JavaActionParameter extends internal.Element implements IJavaActionParameter {
		public static typeName: string = "JavaActions$JavaActionParameter";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"name" : {
					"public" : {
						"currentValue" : true
					}
				},
				"type" : {
					"deleted" : "6.6.0",
					"deletionMessage" : null,
					"public" : {
						"currentValue" : true
					}
				},
				"javaType" : {
					"introduced" : "6.6.0",
					"deleted" : "6.7.0",
					"deletionMessage" : null,
					"public" : {
						"currentValue" : true
					},
					"required" : {
						"currentValue" : true
					}
				},
				"parameterType" : {
					"introduced" : "6.7.0",
					"public" : {
						"currentValue" : true
					},
					"required" : {
						"currentValue" : true
					}
				},
				"description" : {
					"introduced" : "6.10.0",
					"public" : {
						"currentValue" : true
					}
				}
			},
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsJavaAction() { return super.getContainerAs<JavaAction>(JavaAction); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(JavaActionParameter, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __type: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(JavaActionParameter, this, "type", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type dataTypes.DataType.
		 *
		 * In version 6.6.0: deleted
		 */
		public get type(): string { return this.__type.get(); }
		public set type(newValue: string) { this.__type.set(newValue); }
		private __javaType: internal.PartProperty<Type> =
			new internal.PartProperty<Type>(JavaActionParameter, this, "javaType", null, true);
		/**
		 * In version 6.7.0: deleted
		 * In version 6.6.0: introduced
		 */
		public get javaType(): Type { return this.__javaType.get(); }
		public set javaType(newValue: Type) { this.__javaType.set(newValue); }
		private __parameterType: internal.PartProperty<ParameterType> =
			new internal.PartProperty<ParameterType>(JavaActionParameter, this, "parameterType", null, true);
		/**
		 * In version 6.7.0: introduced
		 */
		public get parameterType(): ParameterType { return this.__parameterType.get(); }
		public set parameterType(newValue: ParameterType) { this.__parameterType.set(newValue); }
		private __description: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(JavaActionParameter, this, "description", "", internal.PrimitiveTypeEnum.String);
		/**
		 * In version 6.10.0: introduced
		 */
		public get description(): string { return this.__description.get(); }
		public set description(newValue: string) { this.__description.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new JavaActionParameter() cannot be invoked directly, please use 'model.javaactions.createJavaActionParameter()'"
				);
			}
		}

		/**
		 * Creates and returns a new JavaActionParameter instance in the SDK and on the server.
		 * The new JavaActionParameter will be automatically stored in the 'parameters' property
		 * of the parent JavaAction element passed as argument.
		 */
		public static createIn(container: JavaAction): JavaActionParameter {
			return internal.instancehelpers.createElement(container, JavaActionParameter, "parameters", true);
		}

		/**
		 * Creates and returns a new JavaActionParameter instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): JavaActionParameter {
			return internal.instancehelpers.createElement(model, JavaActionParameter);
		}

		_isByNameReferrable() { return true; }

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			if (this.__javaType.isAvailable) {
				this.javaType = StringType.create(this.model);
			}
			if (this.__parameterType.isAvailable) {
				this.parameterType = BasicParameterType.create(this.model);
			}
			if (this.__type.isAvailable) {
				this.type = "Unknown";
			}
		}

	}

	/**
	 * In version 6.6.0: introduced
	 */
	export interface IListType extends IType {
		model: IModel;
		containerAsBasicParameterType: IBasicParameterType;
		containerAsJavaAction: IJavaAction;
		containerAsJavaActionParameter: IJavaActionParameter;
		/**
		 * This property is required and cannot be set to null.
		 */
		parameter: IEntityType;
		load(): ListType;
		load(callback: (element: ListType) => void, forceRefresh?: boolean);
	}

	/**
	 * In version 6.6.0: introduced
	 */
	export class ListType extends Type implements IListType {
		public static typeName: string = "JavaActions$ListType";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.6.0",
			"properties" : {
				"parameter" : {
					"public" : {
						"currentValue" : true
					},
					"required" : {
						"currentValue" : true
					}
				}
			},
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsBasicParameterType() { return super.getContainerAs<BasicParameterType>(BasicParameterType); }
		get containerAsJavaAction() { return super.getContainerAs<JavaAction>(JavaAction); }
		get containerAsJavaActionParameter() { return super.getContainerAs<JavaActionParameter>(JavaActionParameter); }

		private __parameter: internal.PartProperty<EntityType> =
			new internal.PartProperty<EntityType>(ListType, this, "parameter", null, true);
		public get parameter(): EntityType { return this.__parameter.get(); }
		public set parameter(newValue: EntityType) { this.__parameter.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ListType() cannot be invoked directly, please use 'model.javaactions.createListType()'"
				);
			}
		}


		/**
		 * Creates and returns a new ListType instance in the SDK and on the server.
		 * The new ListType will be automatically stored in the 'type' property
		 * of the parent BasicParameterType element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInBasicParameterTypeUnderType(container: BasicParameterType): ListType {
			internal.createInVersionCheck(container.model, ListType.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, ListType, "type", false);
		}

		/**
		 * Creates and returns a new ListType instance in the SDK and on the server.
		 * The new ListType will be automatically stored in the 'javaReturnType' property
		 * of the parent JavaAction element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInJavaActionUnderJavaReturnType(container: JavaAction): ListType {
			internal.createInVersionCheck(container.model, ListType.typeName,
				["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, ListType, "javaReturnType", false);
		}

		/**
		 * Creates and returns a new ListType instance in the SDK and on the server.
		 * The new ListType will be automatically stored in the 'javaType' property
		 * of the parent JavaActionParameter element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0
		 */
		public static createInJavaActionParameterUnderJavaType(container: JavaActionParameter): ListType {
			internal.createInVersionCheck(container.model, ListType.typeName,
				["6.6.0"]
			);
			return internal.instancehelpers.createElement(container, ListType, "javaType", false);
		}

		/**
		 * Creates and returns a new ListType instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ListType {
			return internal.instancehelpers.createElement(model, ListType);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.parameter = ParameterizedEntityType.create(this.model);
		}

	}

	/**
	 * In version 6.10.0: removed experimental
	 * In version 6.6.0: introduced
	 */
	export interface IMicroflowActionInfo extends internal.IElement {
		model: IModel;
		containerAsJavaAction: IJavaAction;
		caption: string;
		category: string;
		icon: images.IImage;
		iconQualifiedName: string;
		load(): MicroflowActionInfo;
		load(callback: (element: MicroflowActionInfo) => void, forceRefresh?: boolean);
	}

	/**
	 * In version 6.10.0: removed experimental
	 * In version 6.6.0: introduced
	 */
	export class MicroflowActionInfo extends internal.Element implements IMicroflowActionInfo {
		public static typeName: string = "JavaActions$MicroflowActionInfo";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.6.0",
			"properties" : {
				"caption" : {
					"public" : {
						"currentValue" : true
					}
				},
				"category" : {
					"public" : {
						"currentValue" : true
					}
				},
				"icon" : {
					"public" : {
						"currentValue" : true
					}
				}
			},
			"public" : {
				"currentValue" : true
			},
			"experimental" : {
				"currentValue" : false,
				"changedIn" : [
					"6.10.0"
				]
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsJavaAction() { return super.getContainerAs<JavaAction>(JavaAction); }

		private __caption: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MicroflowActionInfo, this, "caption", "", internal.PrimitiveTypeEnum.String);
		public get caption(): string { return this.__caption.get(); }
		public set caption(newValue: string) { this.__caption.set(newValue); }
		private __category: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(MicroflowActionInfo, this, "category", "", internal.PrimitiveTypeEnum.String);
		public get category(): string { return this.__category.get(); }
		public set category(newValue: string) { this.__category.set(newValue); }
		private __icon: internal.ByNameReferenceProperty<images.IImage> =
			new internal.ByNameReferenceProperty<images.IImage>(MicroflowActionInfo, this, "icon", null, "Images$Image");
		public get icon(): images.IImage { return this.__icon.get(); }
		public set icon(newValue: images.IImage) { this.__icon.set(newValue); }
		get iconQualifiedName(): string { return this.__icon.qualifiedName(); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MicroflowActionInfo() cannot be invoked directly, please use 'model.javaactions.createMicroflowActionInfo()'"
				);
			}
		}

		/**
		 * Creates and returns a new MicroflowActionInfo instance in the SDK and on the server.
		 * The new MicroflowActionInfo will be automatically stored in the 'microflowActionInfo' property
		 * of the parent JavaAction element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createIn(container: JavaAction): MicroflowActionInfo {
			internal.createInVersionCheck(container.model, MicroflowActionInfo.typeName,
				["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, MicroflowActionInfo, "microflowActionInfo", false);
		}

		/**
		 * Creates and returns a new MicroflowActionInfo instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): MicroflowActionInfo {
			return internal.instancehelpers.createElement(model, MicroflowActionInfo);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * In version 6.9.0: introduced
	 */
	export interface IMicroflowParameterType extends IParameterType {
		model: IModel;
		containerAsJavaActionParameter: IJavaActionParameter;
		load(): MicroflowParameterType;
		load(callback: (element: MicroflowParameterType) => void, forceRefresh?: boolean);
	}

	/**
	 * In version 6.9.0: introduced
	 */
	export class MicroflowParameterType extends ParameterType implements IMicroflowParameterType {
		public static typeName: string = "JavaActions$MicroflowParameterType";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.9.0",
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsJavaActionParameter() { return super.getContainerAs<JavaActionParameter>(JavaActionParameter); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new MicroflowParameterType() cannot be invoked directly, please use 'model.javaactions.createMicroflowParameterType()'"
				);
			}
		}


		/**
		 * Creates and returns a new MicroflowParameterType instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): MicroflowParameterType {
			return internal.instancehelpers.createElement(model, MicroflowParameterType);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * In version 6.6.0: introduced
	 */
	export interface IParameterizedEntityType extends IEntityType {
		model: IModel;
		containerAsBasicParameterType: IBasicParameterType;
		containerAsJavaAction: IJavaAction;
		containerAsJavaActionParameter: IJavaActionParameter;
		containerAsListType: IListType;
		/**
		 * This property is required and cannot be set to null.
		 */
		typeParameter: ITypeParameter;
		load(): ParameterizedEntityType;
		load(callback: (element: ParameterizedEntityType) => void, forceRefresh?: boolean);
	}

	/**
	 * In version 6.6.0: introduced
	 */
	export class ParameterizedEntityType extends EntityType implements IParameterizedEntityType {
		public static typeName: string = "JavaActions$ParameterizedEntityType";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.6.0",
			"properties" : {
				"typeParameter" : {
					"public" : {
						"currentValue" : true
					},
					"required" : {
						"currentValue" : true
					}
				}
			},
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsBasicParameterType() { return super.getContainerAs<BasicParameterType>(BasicParameterType); }
		get containerAsJavaAction() { return super.getContainerAs<JavaAction>(JavaAction); }
		get containerAsJavaActionParameter() { return super.getContainerAs<JavaActionParameter>(JavaActionParameter); }
		get containerAsListType() { return super.getContainerAs<ListType>(ListType); }

		private __typeParameter: internal.ByIdReferenceProperty<TypeParameter> =
			new internal.ByIdReferenceProperty<TypeParameter>(ParameterizedEntityType, this, "typeParameter", null);
		public get typeParameter(): TypeParameter { return this.__typeParameter.get(); }
		public set typeParameter(newValue: TypeParameter) { this.__typeParameter.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ParameterizedEntityType() cannot be invoked directly, please use 'model.javaactions.createParameterizedEntityType()'"
				);
			}
		}


		/**
		 * Creates and returns a new ParameterizedEntityType instance in the SDK and on the server.
		 * The new ParameterizedEntityType will be automatically stored in the 'type' property
		 * of the parent BasicParameterType element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInBasicParameterTypeUnderType(container: BasicParameterType): ParameterizedEntityType {
			internal.createInVersionCheck(container.model, ParameterizedEntityType.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, ParameterizedEntityType, "type", false);
		}

		/**
		 * Creates and returns a new ParameterizedEntityType instance in the SDK and on the server.
		 * The new ParameterizedEntityType will be automatically stored in the 'javaReturnType' property
		 * of the parent JavaAction element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInJavaActionUnderJavaReturnType(container: JavaAction): ParameterizedEntityType {
			internal.createInVersionCheck(container.model, ParameterizedEntityType.typeName,
				["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, ParameterizedEntityType, "javaReturnType", false);
		}

		/**
		 * Creates and returns a new ParameterizedEntityType instance in the SDK and on the server.
		 * The new ParameterizedEntityType will be automatically stored in the 'javaType' property
		 * of the parent JavaActionParameter element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0
		 */
		public static createInJavaActionParameterUnderJavaType(container: JavaActionParameter): ParameterizedEntityType {
			internal.createInVersionCheck(container.model, ParameterizedEntityType.typeName,
				["6.6.0"]
			);
			return internal.instancehelpers.createElement(container, ParameterizedEntityType, "javaType", false);
		}

		/**
		 * Creates and returns a new ParameterizedEntityType instance in the SDK and on the server.
		 * The new ParameterizedEntityType will be automatically stored in the 'parameter' property
		 * of the parent ListType element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInListTypeUnderParameter(container: ListType): ParameterizedEntityType {
			internal.createInVersionCheck(container.model, ParameterizedEntityType.typeName,
				["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, ParameterizedEntityType, "parameter", false);
		}

		/**
		 * Creates and returns a new ParameterizedEntityType instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ParameterizedEntityType {
			return internal.instancehelpers.createElement(model, ParameterizedEntityType);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * In version 6.6.0: introduced
	 */
	export interface IStringType extends IPrimitiveType {
		model: IModel;
		containerAsBasicParameterType: IBasicParameterType;
		containerAsJavaAction: IJavaAction;
		containerAsJavaActionParameter: IJavaActionParameter;
		load(): StringType;
		load(callback: (element: StringType) => void, forceRefresh?: boolean);
	}

	/**
	 * In version 6.6.0: introduced
	 */
	export class StringType extends PrimitiveType implements IStringType {
		public static typeName: string = "JavaActions$StringType";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.6.0",
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsBasicParameterType() { return super.getContainerAs<BasicParameterType>(BasicParameterType); }
		get containerAsJavaAction() { return super.getContainerAs<JavaAction>(JavaAction); }
		get containerAsJavaActionParameter() { return super.getContainerAs<JavaActionParameter>(JavaActionParameter); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new StringType() cannot be invoked directly, please use 'model.javaactions.createStringType()'"
				);
			}
		}


		/**
		 * Creates and returns a new StringType instance in the SDK and on the server.
		 * The new StringType will be automatically stored in the 'type' property
		 * of the parent BasicParameterType element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInBasicParameterTypeUnderType(container: BasicParameterType): StringType {
			internal.createInVersionCheck(container.model, StringType.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, StringType, "type", false);
		}

		/**
		 * Creates and returns a new StringType instance in the SDK and on the server.
		 * The new StringType will be automatically stored in the 'javaReturnType' property
		 * of the parent JavaAction element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInJavaActionUnderJavaReturnType(container: JavaAction): StringType {
			internal.createInVersionCheck(container.model, StringType.typeName,
				["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, StringType, "javaReturnType", false);
		}

		/**
		 * Creates and returns a new StringType instance in the SDK and on the server.
		 * The new StringType will be automatically stored in the 'javaType' property
		 * of the parent JavaActionParameter element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0
		 */
		public static createInJavaActionParameterUnderJavaType(container: JavaActionParameter): StringType {
			internal.createInVersionCheck(container.model, StringType.typeName,
				["6.6.0"]
			);
			return internal.instancehelpers.createElement(container, StringType, "javaType", false);
		}

		/**
		 * Creates and returns a new StringType instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): StringType {
			return internal.instancehelpers.createElement(model, StringType);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * In version 6.6.0: introduced
	 */
	export interface ITypeParameter extends internal.IElement {
		model: IModel;
		containerAsJavaAction: IJavaAction;
		name: string;
		load(): TypeParameter;
		load(callback: (element: TypeParameter) => void, forceRefresh?: boolean);
	}

	/**
	 * In version 6.6.0: introduced
	 */
	export class TypeParameter extends internal.Element implements ITypeParameter {
		public static typeName: string = "JavaActions$TypeParameter";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.6.0",
			"properties" : {
				"name" : {
					"public" : {
						"currentValue" : true
					}
				}
			},
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsJavaAction() { return super.getContainerAs<JavaAction>(JavaAction); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(TypeParameter, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new TypeParameter() cannot be invoked directly, please use 'model.javaactions.createTypeParameter()'"
				);
			}
		}

		/**
		 * Creates and returns a new TypeParameter instance in the SDK and on the server.
		 * The new TypeParameter will be automatically stored in the 'typeParameters' property
		 * of the parent JavaAction element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createIn(container: JavaAction): TypeParameter {
			internal.createInVersionCheck(container.model, TypeParameter.typeName,
				["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, TypeParameter, "typeParameters", true);
		}

		/**
		 * Creates and returns a new TypeParameter instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): TypeParameter {
			return internal.instancehelpers.createElement(model, TypeParameter);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}
}

import {domainmodels} from "./domainmodels";
import {enumerations} from "./enumerations";
import {images} from "./images";

import {IModel} from "./base-model";
