/* tslint:disable */

import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;

import {projects} from "./projects";

export namespace enumerations {


	/**
	 * Interfaces and instance classes for types from the Mendix sub meta model `Enumerations`.
	 */


	export interface ICondition extends internal.IElement {
		model: IModel;
		containerAsConditionSettings: documenttemplates.IConditionSettings;
		containerAsConditionalSettings: pages.IConditionalSettings;
		load(): Condition;
		load(callback: (element: Condition) => void, forceRefresh?: boolean);
	}

	export class Condition extends internal.Element implements ICondition {
		public static typeName: string = "Enumerations$Condition";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsConditionSettings() { return super.getContainerAs<documenttemplates.ConditionSettings>(documenttemplates.ConditionSettings); }
		get containerAsConditionalSettings() { return super.getContainerAs<pages.ConditionalSettings>(pages.ConditionalSettings); }

		private __attributeValue: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Condition, this, "attributeValue", "", internal.PrimitiveTypeEnum.String);
		public get attributeValue(): string { return this.__attributeValue.get(); }
		public set attributeValue(newValue: string) { this.__attributeValue.set(newValue); }
		private __editableVisible: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(Condition, this, "editableVisible", false, internal.PrimitiveTypeEnum.Boolean);
		public get editableVisible(): boolean { return this.__editableVisible.get(); }
		public set editableVisible(newValue: boolean) { this.__editableVisible.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Condition() cannot be invoked directly, please use 'model.enumerations.createCondition()'"
				);
			}
		}


		/**
		 * Creates and returns a new Condition instance in the SDK and on the server.
		 * The new Condition will be automatically stored in the 'conditions' property
		 * of the parent documenttemplates.ConditionSettings element passed as argument.
		 */
		public static createInConditionSettingsUnderConditions(container: documenttemplates.ConditionSettings): Condition {
			return internal.instancehelpers.createElement(container, Condition, "conditions", true);
		}

		/**
		 * Creates and returns a new Condition instance in the SDK and on the server.
		 * The new Condition will be automatically stored in the 'conditions' property
		 * of the parent pages.ConditionalSettings element passed as argument.
		 */
		public static createInConditionalSettingsUnderConditions(container: pages.ConditionalSettings): Condition {
			return internal.instancehelpers.createElement(container, Condition, "conditions", true);
		}

		/**
		 * Creates and returns a new Condition instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): Condition {
			return internal.instancehelpers.createElement(model, Condition);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.editableVisible = true;
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/enumerations relevant section in reference guide}
	 */
	export interface IEnumeration extends projects.IDocument {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		values: internal.IList<IEnumerationValue>;
		load(): Enumeration;
		load(callback: (element: Enumeration) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/enumerations relevant section in reference guide}
	 */
	export class Enumeration extends projects.Document implements IEnumeration {
		public static typeName: string = "Enumerations$Enumeration";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"values" : {
					"public" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }

		private __values: internal.PartListProperty<EnumerationValue> =
			new internal.PartListProperty<EnumerationValue>(Enumeration, this, "values", []);
		public get values(): internal.IList<EnumerationValue> { return this.__values.get(); }
		public set values(newValue: internal.IList<EnumerationValue>) { this.__values.set(newValue); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "documents";
		}

		/**
		 * Creates a new Enumeration unit in the SDK and on the server.
		 * Expects one argument, the projects.IFolderBase in which this unit is contained.
		 */
		public static createIn(container: projects.IFolderBase): Enumeration {
			return internal.instancehelpers.createUnit(container, Enumeration);
		}

		_isByNameReferrable() { return true; }

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/enumeration-values relevant section in reference guide}
	 */
	export interface IEnumerationValue extends internal.IElement {
		model: IModel;
		containerAsEnumeration: IEnumeration;
		name: string;
		load(): EnumerationValue;
		load(callback: (element: EnumerationValue) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/enumeration-values relevant section in reference guide}
	 */
	export class EnumerationValue extends internal.Element implements IEnumerationValue {
		public static typeName: string = "Enumerations$EnumerationValue";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"name" : {
					"public" : {
						"currentValue" : true
					}
				},
				"caption" : {
					"required" : {
						"currentValue" : true
					}
				}
			},
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsEnumeration() { return super.getContainerAs<Enumeration>(Enumeration); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(EnumerationValue, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __caption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(EnumerationValue, this, "caption", null, true);
		public get caption(): texts.Text { return this.__caption.get(); }
		public set caption(newValue: texts.Text) { this.__caption.set(newValue); }
		private __image: internal.ByNameReferenceProperty<images.IImage> =
			new internal.ByNameReferenceProperty<images.IImage>(EnumerationValue, this, "image", null, "Images$Image");
		public get image(): images.IImage { return this.__image.get(); }
		public set image(newValue: images.IImage) { this.__image.set(newValue); }
		get imageQualifiedName(): string { return this.__image.qualifiedName(); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new EnumerationValue() cannot be invoked directly, please use 'model.enumerations.createEnumerationValue()'"
				);
			}
		}

		/**
		 * Creates and returns a new EnumerationValue instance in the SDK and on the server.
		 * The new EnumerationValue will be automatically stored in the 'values' property
		 * of the parent Enumeration element passed as argument.
		 */
		public static createIn(container: Enumeration): EnumerationValue {
			return internal.instancehelpers.createElement(container, EnumerationValue, "values", true);
		}

		/**
		 * Creates and returns a new EnumerationValue instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): EnumerationValue {
			return internal.instancehelpers.createElement(model, EnumerationValue);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = texts.Text.create(this.model);
		}

	}
}

import {documenttemplates} from "./documenttemplates";
import {images} from "./images";
import {pages} from "./pages";
import {texts} from "./texts";

import {IModel} from "./base-model";
