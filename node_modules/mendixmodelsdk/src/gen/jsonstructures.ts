/* tslint:disable */

import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;

import {mappings} from "./mappings";
import {xmlschemas} from "./xmlschemas";

export namespace jsonstructures {


	/**
	 * Interfaces and instance classes for types from the Mendix sub meta model `JsonStructures`.
	 */


	/**
	 * In version 6.6.0: introduced
	 */
	export interface IJsonElement extends mappings.IElement {
		model: IModel;
		containerAsJsonStructure: IJsonStructure;
		containerAsElement: mappings.IElement;
		load(): JsonElement;
		load(callback: (element: JsonElement) => void, forceRefresh?: boolean);
	}

	/**
	 * In version 6.6.0: introduced
	 */
	export class JsonElement extends mappings.Element implements IJsonElement {
		public static typeName: string = "JsonStructures$JsonElement";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.6.0"
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsJsonStructure() { return super.getContainerAs<JsonStructure>(JsonStructure); }
		get containerAsElement() { return super.getContainerAs<mappings.Element>(mappings.Element); }

		private __originalValue: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(JsonElement, this, "originalValue", "", internal.PrimitiveTypeEnum.String);
		public get originalValue(): string { return this.__originalValue.get(); }
		public set originalValue(newValue: string) { this.__originalValue.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new JsonElement() cannot be invoked directly, please use 'model.jsonstructures.createJsonElement()'"
				);
			}
		}


		/**
		 * Creates and returns a new JsonElement instance in the SDK and on the server.
		 * The new JsonElement will be automatically stored in the 'elements' property
		 * of the parent JsonStructure element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInJsonStructureUnderElements(container: JsonStructure): JsonElement {
			internal.createInVersionCheck(container.model, JsonElement.typeName,
				["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, JsonElement, "elements", true);
		}

		/**
		 * Creates and returns a new JsonElement instance in the SDK and on the server.
		 * The new JsonElement will be automatically stored in the 'children' property
		 * of the parent mappings.Element element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInElementUnderChildren(container: mappings.Element): JsonElement {
			internal.createInVersionCheck(container.model, JsonElement.typeName,
				["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, JsonElement, "children", true);
		}

		/**
		 * Creates and returns a new JsonElement instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): JsonElement {
			return internal.instancehelpers.createElement(model, JsonElement);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/json-structures relevant section in reference guide}
	 *
	 * In version 6.6.0: removed experimental
	 * In version 6.2.0: introduced
	 */
	export interface IJsonStructure extends xmlschemas.IMxSchema {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		load(): JsonStructure;
		load(callback: (element: JsonStructure) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/json-structures relevant section in reference guide}
	 *
	 * In version 6.6.0: removed experimental
	 * In version 6.2.0: introduced
	 */
	export class JsonStructure extends xmlschemas.MxSchema implements IJsonStructure {
		public static typeName: string = "JsonStructures$JsonStructure";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.2.0",
			"properties" : {
				"elements" : {
					"introduced" : "6.6.0"
				}
			},
			"experimental" : {
				"currentValue" : false,
				"changedIn" : [
					"6.6.0"
				]
			}
		}, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }

		private __jsonSnippet: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(JsonStructure, this, "jsonSnippet", "", internal.PrimitiveTypeEnum.String);
		public get jsonSnippet(): string { return this.__jsonSnippet.get(); }
		public set jsonSnippet(newValue: string) { this.__jsonSnippet.set(newValue); }
		private __elements: internal.PartListProperty<mappings.Element> =
			new internal.PartListProperty<mappings.Element>(JsonStructure, this, "elements", []);
		/**
		 * In version 6.6.0: introduced
		 */
		public get elements(): internal.IList<mappings.Element> { return this.__elements.get(); }
		public set elements(newValue: internal.IList<mappings.Element>) { this.__elements.set(newValue); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "documents";
		}

		/**
		 * Creates a new JsonStructure unit in the SDK and on the server.
		 * Expects one argument, the projects.IFolderBase in which this unit is contained.
		 */
		public static createIn(container: projects.IFolderBase): JsonStructure {
			return internal.instancehelpers.createUnit(container, JsonStructure);
		}

		_isByNameReferrable() { return true; }

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}
}

import {projects} from "./projects";

import {IModel} from "./base-model";
