/* tslint:disable */

import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;

import {projects} from "./projects";

export namespace texts {


	/**
	 * Interfaces and instance classes for types from the Mendix sub meta model `Texts`.
	 */


	export interface ISystemText extends internal.IElement {
		model: IModel;
		containerAsSystemTextCollection: ISystemTextCollection;
		load(): SystemText;
		load(callback: (element: SystemText) => void, forceRefresh?: boolean);
	}

	export class SystemText extends internal.Element implements ISystemText {
		public static typeName: string = "Texts$SystemText";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"text" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsSystemTextCollection() { return super.getContainerAs<SystemTextCollection>(SystemTextCollection); }

		private __text: internal.PartProperty<Text> =
			new internal.PartProperty<Text>(SystemText, this, "text", null, true);
		public get text(): Text { return this.__text.get(); }
		public set text(newValue: Text) { this.__text.set(newValue); }
		private __key: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(SystemText, this, "key", "", internal.PrimitiveTypeEnum.String);
		public get key(): string { return this.__key.get(); }
		public set key(newValue: string) { this.__key.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new SystemText() cannot be invoked directly, please use 'model.texts.createSystemText()'"
				);
			}
		}

		/**
		 * Creates and returns a new SystemText instance in the SDK and on the server.
		 * The new SystemText will be automatically stored in the 'systemTexts' property
		 * of the parent SystemTextCollection element passed as argument.
		 */
		public static createIn(container: SystemTextCollection): SystemText {
			return internal.instancehelpers.createElement(container, SystemText, "systemTexts", true);
		}

		/**
		 * Creates and returns a new SystemText instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): SystemText {
			return internal.instancehelpers.createElement(model, SystemText);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.text = Text.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/system-texts relevant section in reference guide}
	 */
	export interface ISystemTextCollection extends projects.IProjectDocument {
		model: IModel;
		containerAsProject: projects.IProject;
		load(): SystemTextCollection;
		load(callback: (element: SystemTextCollection) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/system-texts relevant section in reference guide}
	 */
	export class SystemTextCollection extends projects.ProjectDocument implements ISystemTextCollection {
		public static typeName: string = "Texts$SystemTextCollection";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsProject() { return super.getContainerAs<projects.Project>(projects.Project); }

		private __systemTexts: internal.PartListProperty<SystemText> =
			new internal.PartListProperty<SystemText>(SystemTextCollection, this, "systemTexts", []);
		public get systemTexts(): internal.IList<SystemText> { return this.__systemTexts.get(); }
		public set systemTexts(newValue: internal.IList<SystemText>) { this.__systemTexts.set(newValue); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IProject) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "projectDocuments";
		}

		/**
		 * Creates a new SystemTextCollection unit in the SDK and on the server.
		 * Expects one argument, the projects.IProject in which this unit is contained.
		 */
		public static createIn(container: projects.IProject): SystemTextCollection {
			return internal.instancehelpers.createUnit(container, SystemTextCollection);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/translatable-texts relevant section in reference guide}
	 */
	export interface IText extends internal.IElement {
		model: IModel;
		containerAsWidgetValue: customwidgets.IWidgetValue;
		containerAsDataGridColumn: documenttemplates.IDataGridColumn;
		containerAsStaticLabel: documenttemplates.IStaticLabel;
		containerAsTitle: documenttemplates.ITitle;
		containerAsAssociationDeleteBehavior: domainmodels.IAssociationDeleteBehavior;
		containerAsValidationRule: domainmodels.IValidationRule;
		containerAsEnumerationValue: enumerations.IEnumerationValue;
		containerAsMenuItem: menus.IMenuItem;
		containerAsMicroflow: microflows.IMicroflow;
		containerAsTextTemplate: microflows.ITextTemplate;
		containerAsAttributeWidget: pages.IAttributeWidget;
		containerAsAttributeWidgetWithPlaceholder: pages.IAttributeWidgetWithPlaceholder;
		containerAsButton: pages.IButton;
		containerAsClientTemplate: pages.IClientTemplate;
		containerAsConfirmationInfo: pages.IConfirmationInfo;
		containerAsControlBarButton: pages.IControlBarButton;
		containerAsDataView: pages.IDataView;
		containerAsDropDownButtonItem: pages.IDropDownButtonItem;
		containerAsGridColumn: pages.IGridColumn;
		containerAsInputWidget: pages.IInputWidget;
		containerAsLabel: pages.ILabel;
		containerAsMicroflowSettings: pages.IMicroflowSettings;
		containerAsPage: pages.IPage;
		containerAsPageSettings: pages.IPageSettings;
		containerAsReferenceSelector: pages.IReferenceSelector;
		containerAsSearchField: pages.ISearchField;
		containerAsTabPage: pages.ITabPage;
		containerAsTextArea: pages.ITextArea;
		containerAsBasicReportAggregate: reports.IBasicReportAggregate;
		containerAsBasicReportColumn: reports.IBasicReportColumn;
		containerAsReportButton: reports.IReportButton;
		containerAsReportChart: reports.IReportChart;
		containerAsReportChartSeries: reports.IReportChartSeries;
		containerAsReportDateRangeField: reports.IReportDateRangeField;
		containerAsReportDateRangeSelector: reports.IReportDateRangeSelector;
		containerAsSystemText: ISystemText;
		load(): Text;
		load(callback: (element: Text) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/translatable-texts relevant section in reference guide}
	 */
	export class Text extends internal.Element implements IText {
		public static typeName: string = "Texts$Text";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsWidgetValue() { return super.getContainerAs<customwidgets.WidgetValue>(customwidgets.WidgetValue); }
		get containerAsDataGridColumn() { return super.getContainerAs<documenttemplates.DataGridColumn>(documenttemplates.DataGridColumn); }
		get containerAsStaticLabel() { return super.getContainerAs<documenttemplates.StaticLabel>(documenttemplates.StaticLabel); }
		get containerAsTitle() { return super.getContainerAs<documenttemplates.Title>(documenttemplates.Title); }
		get containerAsAssociationDeleteBehavior() { return super.getContainerAs<domainmodels.AssociationDeleteBehavior>(domainmodels.AssociationDeleteBehavior); }
		get containerAsValidationRule() { return super.getContainerAs<domainmodels.ValidationRule>(domainmodels.ValidationRule); }
		get containerAsEnumerationValue() { return super.getContainerAs<enumerations.EnumerationValue>(enumerations.EnumerationValue); }
		get containerAsMenuItem() { return super.getContainerAs<menus.MenuItem>(menus.MenuItem); }
		get containerAsMicroflow() { return super.getContainerAs<microflows.Microflow>(microflows.Microflow); }
		get containerAsTextTemplate() { return super.getContainerAs<microflows.TextTemplate>(microflows.TextTemplate); }
		get containerAsAttributeWidget() { return super.getContainerAs<pages.AttributeWidget>(pages.AttributeWidget); }
		get containerAsAttributeWidgetWithPlaceholder() { return super.getContainerAs<pages.AttributeWidgetWithPlaceholder>(pages.AttributeWidgetWithPlaceholder); }
		get containerAsButton() { return super.getContainerAs<pages.Button>(pages.Button); }
		get containerAsClientTemplate() { return super.getContainerAs<pages.ClientTemplate>(pages.ClientTemplate); }
		get containerAsConfirmationInfo() { return super.getContainerAs<pages.ConfirmationInfo>(pages.ConfirmationInfo); }
		get containerAsControlBarButton() { return super.getContainerAs<pages.ControlBarButton>(pages.ControlBarButton); }
		get containerAsDataView() { return super.getContainerAs<pages.DataView>(pages.DataView); }
		get containerAsDropDownButtonItem() { return super.getContainerAs<pages.DropDownButtonItem>(pages.DropDownButtonItem); }
		get containerAsGridColumn() { return super.getContainerAs<pages.GridColumn>(pages.GridColumn); }
		get containerAsInputWidget() { return super.getContainerAs<pages.InputWidget>(pages.InputWidget); }
		get containerAsLabel() { return super.getContainerAs<pages.Label>(pages.Label); }
		get containerAsMicroflowSettings() { return super.getContainerAs<pages.MicroflowSettings>(pages.MicroflowSettings); }
		get containerAsPage() { return super.getContainerAs<pages.Page>(pages.Page); }
		get containerAsPageSettings() { return super.getContainerAs<pages.PageSettings>(pages.PageSettings); }
		get containerAsReferenceSelector() { return super.getContainerAs<pages.ReferenceSelector>(pages.ReferenceSelector); }
		get containerAsSearchField() { return super.getContainerAs<pages.SearchField>(pages.SearchField); }
		get containerAsTabPage() { return super.getContainerAs<pages.TabPage>(pages.TabPage); }
		get containerAsTextArea() { return super.getContainerAs<pages.TextArea>(pages.TextArea); }
		get containerAsBasicReportAggregate() { return super.getContainerAs<reports.BasicReportAggregate>(reports.BasicReportAggregate); }
		get containerAsBasicReportColumn() { return super.getContainerAs<reports.BasicReportColumn>(reports.BasicReportColumn); }
		get containerAsReportButton() { return super.getContainerAs<reports.ReportButton>(reports.ReportButton); }
		get containerAsReportChart() { return super.getContainerAs<reports.ReportChart>(reports.ReportChart); }
		get containerAsReportChartSeries() { return super.getContainerAs<reports.ReportChartSeries>(reports.ReportChartSeries); }
		get containerAsReportDateRangeField() { return super.getContainerAs<reports.ReportDateRangeField>(reports.ReportDateRangeField); }
		get containerAsReportDateRangeSelector() { return super.getContainerAs<reports.ReportDateRangeSelector>(reports.ReportDateRangeSelector); }
		get containerAsSystemText() { return super.getContainerAs<SystemText>(SystemText); }

		private __translations: internal.PartListProperty<Translation> =
			new internal.PartListProperty<Translation>(Text, this, "translations", []);
		public get translations(): internal.IList<Translation> { return this.__translations.get(); }
		public set translations(newValue: internal.IList<Translation>) { this.__translations.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Text() cannot be invoked directly, please use 'model.texts.createText()'"
				);
			}
		}


		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'translatableValue' property
		 * of the parent customwidgets.WidgetValue element passed as argument.
		 */
		public static createInWidgetValueUnderTranslatableValue(container: customwidgets.WidgetValue): Text {
			return internal.instancehelpers.createElement(container, Text, "translatableValue", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'caption' property
		 * of the parent documenttemplates.DataGridColumn element passed as argument.
		 */
		public static createInDataGridColumnUnderCaption(container: documenttemplates.DataGridColumn): Text {
			return internal.instancehelpers.createElement(container, Text, "caption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'caption' property
		 * of the parent documenttemplates.StaticLabel element passed as argument.
		 */
		public static createInStaticLabelUnderCaption(container: documenttemplates.StaticLabel): Text {
			return internal.instancehelpers.createElement(container, Text, "caption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'caption' property
		 * of the parent documenttemplates.Title element passed as argument.
		 */
		public static createInTitleUnderCaption(container: documenttemplates.Title): Text {
			return internal.instancehelpers.createElement(container, Text, "caption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'childErrorMessage' property
		 * of the parent domainmodels.AssociationDeleteBehavior element passed as argument.
		 */
		public static createInAssociationDeleteBehaviorUnderChildErrorMessage(container: domainmodels.AssociationDeleteBehavior): Text {
			return internal.instancehelpers.createElement(container, Text, "childErrorMessage", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'parentErrorMessage' property
		 * of the parent domainmodels.AssociationDeleteBehavior element passed as argument.
		 */
		public static createInAssociationDeleteBehaviorUnderParentErrorMessage(container: domainmodels.AssociationDeleteBehavior): Text {
			return internal.instancehelpers.createElement(container, Text, "parentErrorMessage", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'errorMessage' property
		 * of the parent domainmodels.ValidationRule element passed as argument.
		 */
		public static createInValidationRuleUnderErrorMessage(container: domainmodels.ValidationRule): Text {
			return internal.instancehelpers.createElement(container, Text, "errorMessage", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'caption' property
		 * of the parent enumerations.EnumerationValue element passed as argument.
		 */
		public static createInEnumerationValueUnderCaption(container: enumerations.EnumerationValue): Text {
			return internal.instancehelpers.createElement(container, Text, "caption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'caption' property
		 * of the parent menus.MenuItem element passed as argument.
		 */
		public static createInMenuItemUnderCaption(container: menus.MenuItem): Text {
			return internal.instancehelpers.createElement(container, Text, "caption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'concurrencyErrorMessage' property
		 * of the parent microflows.Microflow element passed as argument.
		 */
		public static createInMicroflowUnderConcurrencyErrorMessage(container: microflows.Microflow): Text {
			return internal.instancehelpers.createElement(container, Text, "concurrencyErrorMessage", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'text' property
		 * of the parent microflows.TextTemplate element passed as argument.
		 */
		public static createInTextTemplateUnderText(container: microflows.TextTemplate): Text {
			return internal.instancehelpers.createElement(container, Text, "text", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'requiredMessage' property
		 * of the parent pages.AttributeWidget element passed as argument.
		 */
		public static createInAttributeWidgetUnderRequiredMessage(container: pages.AttributeWidget): Text {
			return internal.instancehelpers.createElement(container, Text, "requiredMessage", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'placeholder' property
		 * of the parent pages.AttributeWidgetWithPlaceholder element passed as argument.
		 */
		public static createInAttributeWidgetWithPlaceholderUnderPlaceholder(container: pages.AttributeWidgetWithPlaceholder): Text {
			return internal.instancehelpers.createElement(container, Text, "placeholder", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'tooltip' property
		 * of the parent pages.Button element passed as argument.
		 */
		public static createInButtonUnderTooltip(container: pages.Button): Text {
			return internal.instancehelpers.createElement(container, Text, "tooltip", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'template' property
		 * of the parent pages.ClientTemplate element passed as argument.
		 */
		public static createInClientTemplateUnderTemplate(container: pages.ClientTemplate): Text {
			return internal.instancehelpers.createElement(container, Text, "template", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'cancelButtonCaption' property
		 * of the parent pages.ConfirmationInfo element passed as argument.
		 */
		public static createInConfirmationInfoUnderCancelButtonCaption(container: pages.ConfirmationInfo): Text {
			return internal.instancehelpers.createElement(container, Text, "cancelButtonCaption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'proceedButtonCaption' property
		 * of the parent pages.ConfirmationInfo element passed as argument.
		 */
		public static createInConfirmationInfoUnderProceedButtonCaption(container: pages.ConfirmationInfo): Text {
			return internal.instancehelpers.createElement(container, Text, "proceedButtonCaption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'question' property
		 * of the parent pages.ConfirmationInfo element passed as argument.
		 */
		public static createInConfirmationInfoUnderQuestion(container: pages.ConfirmationInfo): Text {
			return internal.instancehelpers.createElement(container, Text, "question", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'tooltip' property
		 * of the parent pages.ControlBarButton element passed as argument.
		 */
		public static createInControlBarButtonUnderTooltip(container: pages.ControlBarButton): Text {
			return internal.instancehelpers.createElement(container, Text, "tooltip", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'noEntityMessage' property
		 * of the parent pages.DataView element passed as argument.
		 */
		public static createInDataViewUnderNoEntityMessage(container: pages.DataView): Text {
			return internal.instancehelpers.createElement(container, Text, "noEntityMessage", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'caption' property
		 * of the parent pages.DropDownButtonItem element passed as argument.
		 */
		public static createInDropDownButtonItemUnderCaption(container: pages.DropDownButtonItem): Text {
			return internal.instancehelpers.createElement(container, Text, "caption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'aggregateCaption' property
		 * of the parent pages.GridColumn element passed as argument.
		 */
		public static createInGridColumnUnderAggregateCaption(container: pages.GridColumn): Text {
			return internal.instancehelpers.createElement(container, Text, "aggregateCaption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'caption' property
		 * of the parent pages.GridColumn element passed as argument.
		 */
		public static createInGridColumnUnderCaption(container: pages.GridColumn): Text {
			return internal.instancehelpers.createElement(container, Text, "caption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'label' property
		 * of the parent pages.InputWidget element passed as argument.
		 */
		public static createInInputWidgetUnderLabel(container: pages.InputWidget): Text {
			return internal.instancehelpers.createElement(container, Text, "label", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'caption' property
		 * of the parent pages.Label element passed as argument.
		 */
		public static createInLabelUnderCaption(container: pages.Label): Text {
			return internal.instancehelpers.createElement(container, Text, "caption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'progressMessage' property
		 * of the parent pages.MicroflowSettings element passed as argument.
		 */
		public static createInMicroflowSettingsUnderProgressMessage(container: pages.MicroflowSettings): Text {
			return internal.instancehelpers.createElement(container, Text, "progressMessage", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'title' property
		 * of the parent pages.Page element passed as argument.
		 */
		public static createInPageUnderTitle(container: pages.Page): Text {
			return internal.instancehelpers.createElement(container, Text, "title", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'formTitle' property
		 * of the parent pages.PageSettings element passed as argument.
		 */
		public static createInPageSettingsUnderFormTitle(container: pages.PageSettings): Text {
			return internal.instancehelpers.createElement(container, Text, "formTitle", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'requiredMessage' property
		 * of the parent pages.ReferenceSelector element passed as argument.
		 */
		public static createInReferenceSelectorUnderRequiredMessage(container: pages.ReferenceSelector): Text {
			return internal.instancehelpers.createElement(container, Text, "requiredMessage", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'caption' property
		 * of the parent pages.SearchField element passed as argument.
		 */
		public static createInSearchFieldUnderCaption(container: pages.SearchField): Text {
			return internal.instancehelpers.createElement(container, Text, "caption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'caption' property
		 * of the parent pages.TabPage element passed as argument.
		 */
		public static createInTabPageUnderCaption(container: pages.TabPage): Text {
			return internal.instancehelpers.createElement(container, Text, "caption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'counterMessage' property
		 * of the parent pages.TextArea element passed as argument.
		 */
		public static createInTextAreaUnderCounterMessage(container: pages.TextArea): Text {
			return internal.instancehelpers.createElement(container, Text, "counterMessage", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'textTooLongMessage' property
		 * of the parent pages.TextArea element passed as argument.
		 */
		public static createInTextAreaUnderTextTooLongMessage(container: pages.TextArea): Text {
			return internal.instancehelpers.createElement(container, Text, "textTooLongMessage", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'caption' property
		 * of the parent reports.BasicReportAggregate element passed as argument.
		 */
		public static createInBasicReportAggregateUnderCaption(container: reports.BasicReportAggregate): Text {
			return internal.instancehelpers.createElement(container, Text, "caption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'caption' property
		 * of the parent reports.BasicReportColumn element passed as argument.
		 */
		public static createInBasicReportColumnUnderCaption(container: reports.BasicReportColumn): Text {
			return internal.instancehelpers.createElement(container, Text, "caption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'caption' property
		 * of the parent reports.ReportButton element passed as argument.
		 */
		public static createInReportButtonUnderCaption(container: reports.ReportButton): Text {
			return internal.instancehelpers.createElement(container, Text, "caption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'xAxisCaption' property
		 * of the parent reports.ReportChart element passed as argument.
		 */
		public static createInReportChartUnderXAxisCaption(container: reports.ReportChart): Text {
			return internal.instancehelpers.createElement(container, Text, "xAxisCaption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'yAxisCaption' property
		 * of the parent reports.ReportChart element passed as argument.
		 */
		public static createInReportChartUnderYAxisCaption(container: reports.ReportChart): Text {
			return internal.instancehelpers.createElement(container, Text, "yAxisCaption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'caption' property
		 * of the parent reports.ReportChartSeries element passed as argument.
		 */
		public static createInReportChartSeriesUnderCaption(container: reports.ReportChartSeries): Text {
			return internal.instancehelpers.createElement(container, Text, "caption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'caption' property
		 * of the parent reports.ReportDateRangeField element passed as argument.
		 */
		public static createInReportDateRangeFieldUnderCaption(container: reports.ReportDateRangeField): Text {
			return internal.instancehelpers.createElement(container, Text, "caption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'fromCaption' property
		 * of the parent reports.ReportDateRangeSelector element passed as argument.
		 */
		public static createInReportDateRangeSelectorUnderFromCaption(container: reports.ReportDateRangeSelector): Text {
			return internal.instancehelpers.createElement(container, Text, "fromCaption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'toCaption' property
		 * of the parent reports.ReportDateRangeSelector element passed as argument.
		 */
		public static createInReportDateRangeSelectorUnderToCaption(container: reports.ReportDateRangeSelector): Text {
			return internal.instancehelpers.createElement(container, Text, "toCaption", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * The new Text will be automatically stored in the 'text' property
		 * of the parent SystemText element passed as argument.
		 */
		public static createInSystemTextUnderText(container: SystemText): Text {
			return internal.instancehelpers.createElement(container, Text, "text", false);
		}

		/**
		 * Creates and returns a new Text instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): Text {
			return internal.instancehelpers.createElement(model, Text);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.translations.replace([ ((translation:Translation) => {
				translation.languageCode = "en_US";
				translation.text = "";
				return translation;
			})(Translation.create(this.model)) ]);
		}

	}

	export interface ITranslation extends internal.IElement {
		model: IModel;
		containerAsText: IText;
		load(): Translation;
		load(callback: (element: Translation) => void, forceRefresh?: boolean);
	}

	export class Translation extends internal.Element implements ITranslation {
		public static typeName: string = "Texts$Translation";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsText() { return super.getContainerAs<Text>(Text); }

		private __languageCode: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Translation, this, "languageCode", "", internal.PrimitiveTypeEnum.String);
		public get languageCode(): string { return this.__languageCode.get(); }
		public set languageCode(newValue: string) { this.__languageCode.set(newValue); }
		private __text: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Translation, this, "text", "", internal.PrimitiveTypeEnum.String);
		public get text(): string { return this.__text.get(); }
		public set text(newValue: string) { this.__text.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Translation() cannot be invoked directly, please use 'model.texts.createTranslation()'"
				);
			}
		}

		/**
		 * Creates and returns a new Translation instance in the SDK and on the server.
		 * The new Translation will be automatically stored in the 'translations' property
		 * of the parent Text element passed as argument.
		 */
		public static createIn(container: Text): Translation {
			return internal.instancehelpers.createElement(container, Translation, "translations", true);
		}

		/**
		 * Creates and returns a new Translation instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): Translation {
			return internal.instancehelpers.createElement(model, Translation);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}
}

import {customwidgets} from "./customwidgets";
import {documenttemplates} from "./documenttemplates";
import {domainmodels} from "./domainmodels";
import {enumerations} from "./enumerations";
import {menus} from "./menus";
import {microflows} from "./microflows";
import {pages} from "./pages";
import {reports} from "./reports";

import {IModel} from "./base-model";
