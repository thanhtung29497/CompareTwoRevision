/* tslint:disable */

import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;

import {projects} from "./projects";

export namespace constants {


	/**
	 * Interfaces and instance classes for types from the Mendix sub meta model `Constants`.
	 */


	/**
	 * See: {@link https://docs.mendix.com/refguide7/constants relevant section in reference guide}
	 */
	export interface IConstant extends projects.IDocument {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		load(): Constant;
		load(callback: (element: Constant) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/constants relevant section in reference guide}
	 */
	export class Constant extends projects.Document implements IConstant {
		public static typeName: string = "Constants$Constant";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }

		private __dataType: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Constant, this, "dataType", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type dataTypes.DataType.
		 */
		public get dataType(): string { return this.__dataType.get(); }
		public set dataType(newValue: string) { this.__dataType.set(newValue); }
		private __defaultValue: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Constant, this, "defaultValue", "", internal.PrimitiveTypeEnum.String);
		public get defaultValue(): string { return this.__defaultValue.get(); }
		public set defaultValue(newValue: string) { this.__defaultValue.set(newValue); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "documents";
		}

		/**
		 * Creates a new Constant unit in the SDK and on the server.
		 * Expects one argument, the projects.IFolderBase in which this unit is contained.
		 */
		public static createIn(container: projects.IFolderBase): Constant {
			return internal.instancehelpers.createUnit(container, Constant);
		}

		_isByNameReferrable() { return true; }

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.dataType = "String";
		}

	}
}


import {IModel} from "./base-model";
