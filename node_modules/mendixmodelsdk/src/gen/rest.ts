/* tslint:disable */

import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;

import {projects} from "./projects";
import {webservices} from "./webservices";

export namespace rest {


	/**
	 * Interfaces and instance classes for types from the Mendix sub meta model `Rest`.
	 */


	/**
	 * See: {@link https://docs.mendix.com/refguide7/published-odata-services relevant section in reference guide}
	 */
	export interface IPublishedRestServiceBase extends projects.IDocument {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		load(): PublishedRestServiceBase;
		load(callback: (element: PublishedRestServiceBase) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/published-odata-services relevant section in reference guide}
	 *
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class PublishedRestServiceBase extends projects.Document implements IPublishedRestServiceBase {
		public static typeName: string = "Rest$PublishedRestServiceBase";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }

		private __resources: internal.PartListProperty<PublishedRestResource> =
			new internal.PartListProperty<PublishedRestResource>(PublishedRestServiceBase, this, "resources", []);
		public get resources(): internal.IList<PublishedRestResource> { return this.__resources.get(); }
		public set resources(newValue: internal.IList<PublishedRestResource>) { this.__resources.set(newValue); }
		private __namespace: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(PublishedRestServiceBase, this, "namespace", "", internal.PrimitiveTypeEnum.String);
		public get namespace(): string { return this.__namespace.get(); }
		public set namespace(newValue: string) { this.__namespace.set(newValue); }
		private __path: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(PublishedRestServiceBase, this, "path", "", internal.PrimitiveTypeEnum.String);
		public get path(): string { return this.__path.get(); }
		public set path(newValue: string) { this.__path.set(newValue); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.namespace = "DefaultNamespace";
		}

	}

	export interface IPublishedODataService extends IPublishedRestServiceBase {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		load(): PublishedODataService;
		load(callback: (element: PublishedODataService) => void, forceRefresh?: boolean);
	}

	export class PublishedODataService extends PublishedRestServiceBase implements IPublishedODataService {
		public static typeName: string = "Rest$PublishedODataService";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }

		private __allowedModuleRoles: internal.ByNameReferenceListProperty<security.IModuleRole> =
			new internal.ByNameReferenceListProperty<security.IModuleRole>(PublishedODataService, this, "allowedModuleRoles", [], "Security$ModuleRole");
		public get allowedModuleRoles(): internal.IList<security.IModuleRole> { return this.__allowedModuleRoles.get(); }
		public set allowedModuleRoles(newValue: internal.IList<security.IModuleRole>) { this.__allowedModuleRoles.set(newValue); }
		get allowedModuleRolesQualifiedNames(): string[] { return this.__allowedModuleRoles.qualifiedNames(); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "documents";
		}

		/**
		 * Creates a new PublishedODataService unit in the SDK and on the server.
		 * Expects one argument, the projects.IFolderBase in which this unit is contained.
		 */
		public static createIn(container: projects.IFolderBase): PublishedODataService {
			return internal.instancehelpers.createUnit(container, PublishedODataService);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/published-odata-resource relevant section in reference guide}
	 */
	export interface IPublishedRestResource extends webservices.IPublishedResource {
		model: IModel;
		containerAsPublishedRestServiceBase: IPublishedRestServiceBase;
		load(): PublishedRestResource;
		load(callback: (element: PublishedRestResource) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/published-odata-resource relevant section in reference guide}
	 */
	export class PublishedRestResource extends webservices.PublishedResource implements IPublishedRestResource {
		public static typeName: string = "Rest$PublishedRestResource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsPublishedRestServiceBase() { return super.getContainerAs<PublishedRestServiceBase>(PublishedRestServiceBase); }

		private __path: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(PublishedRestResource, this, "path", "", internal.PrimitiveTypeEnum.String);
		public get path(): string { return this.__path.get(); }
		public set path(newValue: string) { this.__path.set(newValue); }
		private __usePaging: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(PublishedRestResource, this, "usePaging", false, internal.PrimitiveTypeEnum.Boolean);
		public get usePaging(): boolean { return this.__usePaging.get(); }
		public set usePaging(newValue: boolean) { this.__usePaging.set(newValue); }
		private __pageSize: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(PublishedRestResource, this, "pageSize", 0, internal.PrimitiveTypeEnum.Integer);
		public get pageSize(): number { return this.__pageSize.get(); }
		public set pageSize(newValue: number) { this.__pageSize.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new PublishedRestResource() cannot be invoked directly, please use 'model.rest.createPublishedRestResource()'"
				);
			}
		}

		/**
		 * Creates and returns a new PublishedRestResource instance in the SDK and on the server.
		 * The new PublishedRestResource will be automatically stored in the 'resources' property
		 * of the parent PublishedRestServiceBase element passed as argument.
		 */
		public static createIn(container: PublishedRestServiceBase): PublishedRestResource {
			return internal.instancehelpers.createElement(container, PublishedRestResource, "resources", true);
		}

		/**
		 * Creates and returns a new PublishedRestResource instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): PublishedRestResource {
			return internal.instancehelpers.createElement(model, PublishedRestResource);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.pageSize = 10000;
		}

	}

	export interface IPublishedRestService extends IPublishedRestServiceBase {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		load(): PublishedRestService;
		load(callback: (element: PublishedRestService) => void, forceRefresh?: boolean);
	}

	export class PublishedRestService extends PublishedRestServiceBase implements IPublishedRestService {
		public static typeName: string = "Rest$PublishedRestService";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"experimental" : {
				"currentValue" : true
			}
		}, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }


		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "documents";
		}

		/**
		 * Creates a new PublishedRestService unit in the SDK and on the server.
		 * Expects one argument, the projects.IFolderBase in which this unit is contained.
		 */
		public static createIn(container: projects.IFolderBase): PublishedRestService {
			return internal.instancehelpers.createUnit(container, PublishedRestService);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}
}

import {security} from "./security";

import {IModel} from "./base-model";
