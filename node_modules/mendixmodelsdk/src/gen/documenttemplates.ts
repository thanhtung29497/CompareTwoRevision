/* tslint:disable */

import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;
import {common} from "../common";

import {projects} from "./projects";

export namespace documenttemplates {

	export class BorderStyle extends internal.IEnum {
		public static None: BorderStyle = new BorderStyle("None", { });
		public static Dotted: BorderStyle = new BorderStyle("Dotted", { });
		public static Dashed: BorderStyle = new BorderStyle("Dashed", { });
		public static Solid: BorderStyle = new BorderStyle("Solid", { });
		protected qualifiedTsTypeName: string = "documenttemplates.BorderStyle";
	}

	export class FontFamily extends internal.IEnum {
		public static Courier: FontFamily = new FontFamily("Courier", { });
		public static Tahoma: FontFamily = new FontFamily("Tahoma", { });
		public static Times: FontFamily = new FontFamily("Times", { });
		public static Helvetica: FontFamily = new FontFamily("Helvetica", { });
		public static Arial: FontFamily = new FontFamily("Arial", { });
		protected qualifiedTsTypeName: string = "documenttemplates.FontFamily";
	}

	export class TextAlign extends internal.IEnum {
		public static Left: TextAlign = new TextAlign("Left", { });
		public static Right: TextAlign = new TextAlign("Right", { });
		public static Center: TextAlign = new TextAlign("Center", { });
		protected qualifiedTsTypeName: string = "documenttemplates.TextAlign";
	}


	/**
	 * Interfaces and instance classes for types from the Mendix sub meta model `DocumentTemplates`.
	 */


	export interface IWidget extends internal.IElement {
		model: IModel;
		containerAsDocumentTemplate: IDocumentTemplate;
		containerAsDropZone: IDropZone;
		load(): Widget;
		load(callback: (element: Widget) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class Widget extends internal.Element implements IWidget {
		public static typeName: string = "DocumentTemplates$Widget";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDocumentTemplate() { return super.getContainerAs<DocumentTemplate>(DocumentTemplate); }
		get containerAsDropZone() { return super.getContainerAs<DropZone>(DropZone); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Widget, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Widget() cannot be invoked directly, please use 'model.documenttemplates.createWidget()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IAttributeWidget extends IWidget {
		model: IModel;
		containerAsDocumentTemplate: IDocumentTemplate;
		containerAsDropZone: IDropZone;
		load(): AttributeWidget;
		load(callback: (element: AttributeWidget) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class AttributeWidget extends Widget implements IAttributeWidget {
		public static typeName: string = "DocumentTemplates$AttributeWidget";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDocumentTemplate() { return super.getContainerAs<DocumentTemplate>(DocumentTemplate); }
		get containerAsDropZone() { return super.getContainerAs<DropZone>(DropZone); }

		private __attributePath: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(AttributeWidget, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type paths.AttributePath.
		 */
		public get attributePath(): string { return this.__attributePath.get(); }
		public set attributePath(newValue: string) { this.__attributePath.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new AttributeWidget() cannot be invoked directly, please use 'model.documenttemplates.createAttributeWidget()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IConditionSettings extends internal.IElement {
		model: IModel;
		containerAsTableRow: ITableRow;
		load(): ConditionSettings;
		load(callback: (element: ConditionSettings) => void, forceRefresh?: boolean);
	}

	export class ConditionSettings extends internal.Element implements IConditionSettings {
		public static typeName: string = "DocumentTemplates$ConditionSettings";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsTableRow() { return super.getContainerAs<TableRow>(TableRow); }

		private __conditions: internal.PartListProperty<enumerations.Condition> =
			new internal.PartListProperty<enumerations.Condition>(ConditionSettings, this, "conditions", []);
		public get conditions(): internal.IList<enumerations.Condition> { return this.__conditions.get(); }
		public set conditions(newValue: internal.IList<enumerations.Condition>) { this.__conditions.set(newValue); }
		private __attribute: internal.ByNameReferenceProperty<domainmodels.IAttribute> =
			new internal.ByNameReferenceProperty<domainmodels.IAttribute>(ConditionSettings, this, "attribute", null, "DomainModels$Attribute");
		public get attribute(): domainmodels.IAttribute { return this.__attribute.get(); }
		public set attribute(newValue: domainmodels.IAttribute) { this.__attribute.set(newValue); }
		get attributeQualifiedName(): string { return this.__attribute.qualifiedName(); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ConditionSettings() cannot be invoked directly, please use 'model.documenttemplates.createConditionSettings()'"
				);
			}
		}

		/**
		 * Creates and returns a new ConditionSettings instance in the SDK and on the server.
		 * The new ConditionSettings will be automatically stored in the 'conditionSettings' property
		 * of the parent TableRow element passed as argument.
		 */
		public static createIn(container: TableRow): ConditionSettings {
			return internal.instancehelpers.createElement(container, ConditionSettings, "conditionSettings", false);
		}

		/**
		 * Creates and returns a new ConditionSettings instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ConditionSettings {
			return internal.instancehelpers.createElement(model, ConditionSettings);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IEntityWidget extends IWidget {
		model: IModel;
		containerAsDocumentTemplate: IDocumentTemplate;
		containerAsDropZone: IDropZone;
		load(): EntityWidget;
		load(callback: (element: EntityWidget) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class EntityWidget extends Widget implements IEntityWidget {
		public static typeName: string = "DocumentTemplates$EntityWidget";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDocumentTemplate() { return super.getContainerAs<DocumentTemplate>(DocumentTemplate); }
		get containerAsDropZone() { return super.getContainerAs<DropZone>(DropZone); }

		private __entityPath: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(EntityWidget, this, "entityPath", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type paths.EntityPath.
		 */
		public get entityPath(): string { return this.__entityPath.get(); }
		public set entityPath(newValue: string) { this.__entityPath.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new EntityWidget() cannot be invoked directly, please use 'model.documenttemplates.createEntityWidget()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IGrid extends IEntityWidget {
		model: IModel;
		containerAsDocumentTemplate: IDocumentTemplate;
		containerAsDropZone: IDropZone;
		load(): Grid;
		load(callback: (element: Grid) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class Grid extends EntityWidget implements IGrid {
		public static typeName: string = "DocumentTemplates$Grid";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"style" : {
					"required" : {
						"currentValue" : true
					}
				},
				"sortBar" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDocumentTemplate() { return super.getContainerAs<DocumentTemplate>(DocumentTemplate); }
		get containerAsDropZone() { return super.getContainerAs<DropZone>(DropZone); }

		private __cellSpacing: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(Grid, this, "cellSpacing", 0, internal.PrimitiveTypeEnum.Integer);
		public get cellSpacing(): number { return this.__cellSpacing.get(); }
		public set cellSpacing(newValue: number) { this.__cellSpacing.set(newValue); }
		private __cellPadding: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(Grid, this, "cellPadding", 0, internal.PrimitiveTypeEnum.Integer);
		public get cellPadding(): number { return this.__cellPadding.get(); }
		public set cellPadding(newValue: number) { this.__cellPadding.set(newValue); }
		private __style: internal.PartProperty<Style> =
			new internal.PartProperty<Style>(Grid, this, "style", null, true);
		public get style(): Style { return this.__style.get(); }
		public set style(newValue: Style) { this.__style.set(newValue); }
		private __sortBar: internal.PartProperty<GridSortBar> =
			new internal.PartProperty<GridSortBar>(Grid, this, "sortBar", null, true);
		public get sortBar(): GridSortBar { return this.__sortBar.get(); }
		public set sortBar(newValue: GridSortBar) { this.__sortBar.set(newValue); }
		private __microflow: internal.ByNameReferenceProperty<microflows.IMicroflow> =
			new internal.ByNameReferenceProperty<microflows.IMicroflow>(Grid, this, "microflow", null, "Microflows$Microflow");
		public get microflow(): microflows.IMicroflow { return this.__microflow.get(); }
		public set microflow(newValue: microflows.IMicroflow) { this.__microflow.set(newValue); }
		get microflowQualifiedName(): string { return this.__microflow.qualifiedName(); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Grid() cannot be invoked directly, please use 'model.documenttemplates.createGrid()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.sortBar = GridSortBar.create(this.model);
			this.style = Style.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/data-grid-(document-template) relevant section in reference guide}
	 */
	export interface IDataGrid extends IGrid {
		model: IModel;
		containerAsDocumentTemplate: IDocumentTemplate;
		containerAsDropZone: IDropZone;
		load(): DataGrid;
		load(callback: (element: DataGrid) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/data-grid-(document-template) relevant section in reference guide}
	 */
	export class DataGrid extends Grid implements IDataGrid {
		public static typeName: string = "DocumentTemplates$DataGrid";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDocumentTemplate() { return super.getContainerAs<DocumentTemplate>(DocumentTemplate); }
		get containerAsDropZone() { return super.getContainerAs<DropZone>(DropZone); }

		private __columns: internal.PartListProperty<DataGridColumn> =
			new internal.PartListProperty<DataGridColumn>(DataGrid, this, "columns", []);
		public get columns(): internal.IList<DataGridColumn> { return this.__columns.get(); }
		public set columns(newValue: internal.IList<DataGridColumn>) { this.__columns.set(newValue); }
		private __weights: internal.PrimitiveListProperty<number> =
			new internal.PrimitiveListProperty<number>(DataGrid, this, "weights", [], internal.PrimitiveTypeEnum.Integer);
		public get weights(): internal.IList<number> { return this.__weights.get(); }
		public set weights(newValue: internal.IList<number>) { this.__weights.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataGrid() cannot be invoked directly, please use 'model.documenttemplates.createDataGrid()'"
				);
			}
		}


		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'toplevels' property
		 * of the parent DocumentTemplate element passed as argument.
		 */
		public static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): DataGrid {
			return internal.instancehelpers.createElement(container, DataGrid, "toplevels", true);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * The new DataGrid will be automatically stored in the 'widget' property
		 * of the parent DropZone element passed as argument.
		 */
		public static createInDropZoneUnderWidget(container: DropZone): DataGrid {
			return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
		}

		/**
		 * Creates and returns a new DataGrid instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DataGrid {
			return internal.instancehelpers.createElement(model, DataGrid);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.columns.replace([ DataGridColumn.create(this.model), DataGridColumn.create(this.model) ]);
			this.weights.replace([ 50, 50 ]);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/columns-(document-template) relevant section in reference guide}
	 */
	export interface IDataGridCell extends internal.IElement {
		model: IModel;
		containerAsDataGridColumn: IDataGridColumn;
		load(): DataGridCell;
		load(callback: (element: DataGridCell) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/columns-(document-template) relevant section in reference guide}
	 */
	export class DataGridCell extends internal.Element implements IDataGridCell {
		public static typeName: string = "DocumentTemplates$DataGridCell";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"style" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataGridColumn() { return super.getContainerAs<DataGridColumn>(DataGridColumn); }

		private __style: internal.PartProperty<Style> =
			new internal.PartProperty<Style>(DataGridCell, this, "style", null, true);
		public get style(): Style { return this.__style.get(); }
		public set style(newValue: Style) { this.__style.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataGridCell() cannot be invoked directly, please use 'model.documenttemplates.createDataGridCell()'"
				);
			}
		}


		/**
		 * Creates and returns a new DataGridCell instance in the SDK and on the server.
		 * The new DataGridCell will be automatically stored in the 'evenRowsCell' property
		 * of the parent DataGridColumn element passed as argument.
		 */
		public static createInDataGridColumnUnderEvenRowsCell(container: DataGridColumn): DataGridCell {
			return internal.instancehelpers.createElement(container, DataGridCell, "evenRowsCell", false);
		}

		/**
		 * Creates and returns a new DataGridCell instance in the SDK and on the server.
		 * The new DataGridCell will be automatically stored in the 'oddRowsCell' property
		 * of the parent DataGridColumn element passed as argument.
		 */
		public static createInDataGridColumnUnderOddRowsCell(container: DataGridColumn): DataGridCell {
			return internal.instancehelpers.createElement(container, DataGridCell, "oddRowsCell", false);
		}

		/**
		 * Creates and returns a new DataGridCell instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DataGridCell {
			return internal.instancehelpers.createElement(model, DataGridCell);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.style = Style.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/columns-(document-template) relevant section in reference guide}
	 */
	export interface IDataGridColumn extends internal.IElement {
		model: IModel;
		containerAsDataGrid: IDataGrid;
		load(): DataGridColumn;
		load(callback: (element: DataGridColumn) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/columns-(document-template) relevant section in reference guide}
	 */
	export class DataGridColumn extends internal.Element implements IDataGridColumn {
		public static typeName: string = "DocumentTemplates$DataGridColumn";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"caption" : {
					"required" : {
						"currentValue" : true
					}
				},
				"style" : {
					"required" : {
						"currentValue" : true
					}
				},
				"oddRowsCell" : {
					"required" : {
						"currentValue" : true
					}
				},
				"formattingInfo" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataGrid() { return super.getContainerAs<DataGrid>(DataGrid); }

		private __attributePath: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(DataGridColumn, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type paths.AttributePath.
		 */
		public get attributePath(): string { return this.__attributePath.get(); }
		public set attributePath(newValue: string) { this.__attributePath.set(newValue); }
		private __caption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(DataGridColumn, this, "caption", null, true);
		public get caption(): texts.Text { return this.__caption.get(); }
		public set caption(newValue: texts.Text) { this.__caption.set(newValue); }
		private __style: internal.PartProperty<Style> =
			new internal.PartProperty<Style>(DataGridColumn, this, "style", null, true);
		public get style(): Style { return this.__style.get(); }
		public set style(newValue: Style) { this.__style.set(newValue); }
		private __oddRowsCell: internal.PartProperty<DataGridCell> =
			new internal.PartProperty<DataGridCell>(DataGridColumn, this, "oddRowsCell", null, true);
		public get oddRowsCell(): DataGridCell { return this.__oddRowsCell.get(); }
		public set oddRowsCell(newValue: DataGridCell) { this.__oddRowsCell.set(newValue); }
		private __evenRowsCell: internal.PartProperty<DataGridCell> =
			new internal.PartProperty<DataGridCell>(DataGridColumn, this, "evenRowsCell", null, false);
		public get evenRowsCell(): DataGridCell { return this.__evenRowsCell.get(); }
		public set evenRowsCell(newValue: DataGridCell) { this.__evenRowsCell.set(newValue); }
		private __formattingInfo: internal.PartProperty<pages.FormattingInfo> =
			new internal.PartProperty<pages.FormattingInfo>(DataGridColumn, this, "formattingInfo", null, true);
		public get formattingInfo(): pages.FormattingInfo { return this.__formattingInfo.get(); }
		public set formattingInfo(newValue: pages.FormattingInfo) { this.__formattingInfo.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataGridColumn() cannot be invoked directly, please use 'model.documenttemplates.createDataGridColumn()'"
				);
			}
		}

		/**
		 * Creates and returns a new DataGridColumn instance in the SDK and on the server.
		 * The new DataGridColumn will be automatically stored in the 'columns' property
		 * of the parent DataGrid element passed as argument.
		 */
		public static createIn(container: DataGrid): DataGridColumn {
			return internal.instancehelpers.createElement(container, DataGridColumn, "columns", true);
		}

		/**
		 * Creates and returns a new DataGridColumn instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DataGridColumn {
			return internal.instancehelpers.createElement(model, DataGridColumn);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((text:texts.Text) => {
				text.translations.replace([ ((translation:texts.Translation) => {
					translation.languageCode = "en_US";
					translation.text = "Column";
					return translation;
				})(texts.Translation.create(this.model)) ]);
				return text;
			})(texts.Text.create(this.model));
			this.formattingInfo = pages.FormattingInfo.create(this.model);
			this.oddRowsCell = DataGridCell.create(this.model);
			this.style = Style.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/data-view-(document-template) relevant section in reference guide}
	 */
	export interface IDataView extends IEntityWidget {
		model: IModel;
		containerAsDocumentTemplate: IDocumentTemplate;
		containerAsDropZone: IDropZone;
		load(): DataView;
		load(callback: (element: DataView) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/data-view-(document-template) relevant section in reference guide}
	 */
	export class DataView extends EntityWidget implements IDataView {
		public static typeName: string = "DocumentTemplates$DataView";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"contents" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDocumentTemplate() { return super.getContainerAs<DocumentTemplate>(DocumentTemplate); }
		get containerAsDropZone() { return super.getContainerAs<DropZone>(DropZone); }

		private __contents: internal.PartProperty<DataViewContents> =
			new internal.PartProperty<DataViewContents>(DataView, this, "contents", null, true);
		public get contents(): DataViewContents { return this.__contents.get(); }
		public set contents(newValue: DataViewContents) { this.__contents.set(newValue); }
		private __microflow: internal.ByNameReferenceProperty<microflows.IMicroflow> =
			new internal.ByNameReferenceProperty<microflows.IMicroflow>(DataView, this, "microflow", null, "Microflows$Microflow");
		public get microflow(): microflows.IMicroflow { return this.__microflow.get(); }
		public set microflow(newValue: microflows.IMicroflow) { this.__microflow.set(newValue); }
		get microflowQualifiedName(): string { return this.__microflow.qualifiedName(); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataView() cannot be invoked directly, please use 'model.documenttemplates.createDataView()'"
				);
			}
		}


		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'toplevels' property
		 * of the parent DocumentTemplate element passed as argument.
		 */
		public static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): DataView {
			return internal.instancehelpers.createElement(container, DataView, "toplevels", true);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * The new DataView will be automatically stored in the 'widget' property
		 * of the parent DropZone element passed as argument.
		 */
		public static createInDropZoneUnderWidget(container: DropZone): DataView {
			return internal.instancehelpers.createElement(container, DataView, "widget", false);
		}

		/**
		 * Creates and returns a new DataView instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DataView {
			return internal.instancehelpers.createElement(model, DataView);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.contents = DataViewContents.create(this.model);
		}

	}

	export interface IDropZone extends internal.IElement {
		model: IModel;
		containerAsDataView: IDataView;
		containerAsDocumentTemplate: IDocumentTemplate;
		containerAsTableRow: ITableRow;
		containerAsTemplateGrid: ITemplateGrid;
		load(): DropZone;
		load(callback: (element: DropZone) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class DropZone extends internal.Element implements IDropZone {
		public static typeName: string = "DocumentTemplates$DropZone";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }
		get containerAsDocumentTemplate() { return super.getContainerAs<DocumentTemplate>(DocumentTemplate); }
		get containerAsTableRow() { return super.getContainerAs<TableRow>(TableRow); }
		get containerAsTemplateGrid() { return super.getContainerAs<TemplateGrid>(TemplateGrid); }

		private __widget: internal.PartProperty<Widget> =
			new internal.PartProperty<Widget>(DropZone, this, "widget", null, false);
		public get widget(): Widget { return this.__widget.get(); }
		public set widget(newValue: Widget) { this.__widget.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DropZone() cannot be invoked directly, please use 'model.documenttemplates.createDropZone()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IDataViewContents extends IDropZone {
		model: IModel;
		containerAsDataView: IDataView;
		load(): DataViewContents;
		load(callback: (element: DataViewContents) => void, forceRefresh?: boolean);
	}

	export class DataViewContents extends DropZone implements IDataViewContents {
		public static typeName: string = "DocumentTemplates$DataViewContents";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<DataView>(DataView); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataViewContents() cannot be invoked directly, please use 'model.documenttemplates.createDataViewContents()'"
				);
			}
		}

		/**
		 * Creates and returns a new DataViewContents instance in the SDK and on the server.
		 * The new DataViewContents will be automatically stored in the 'contents' property
		 * of the parent DataView element passed as argument.
		 */
		public static createIn(container: DataView): DataViewContents {
			return internal.instancehelpers.createElement(container, DataViewContents, "contents", false);
		}

		/**
		 * Creates and returns a new DataViewContents instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DataViewContents {
			return internal.instancehelpers.createElement(model, DataViewContents);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/document-templates relevant section in reference guide}
	 */
	export interface IDocumentTemplate extends projects.IDocument {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		load(): DocumentTemplate;
		load(callback: (element: DocumentTemplate) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/document-templates relevant section in reference guide}
	 */
	export class DocumentTemplate extends projects.Document implements IDocumentTemplate {
		public static typeName: string = "DocumentTemplates$DocumentTemplate";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"style" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }

		private __toplevels: internal.PartListProperty<Widget> =
			new internal.PartListProperty<Widget>(DocumentTemplate, this, "toplevels", []);
		public get toplevels(): internal.IList<Widget> { return this.__toplevels.get(); }
		public set toplevels(newValue: internal.IList<Widget>) { this.__toplevels.set(newValue); }
		private __canvasWidth: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(DocumentTemplate, this, "canvasWidth", 0, internal.PrimitiveTypeEnum.Integer);
		public get canvasWidth(): number { return this.__canvasWidth.get(); }
		public set canvasWidth(newValue: number) { this.__canvasWidth.set(newValue); }
		private __pageWidth: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(DocumentTemplate, this, "pageWidth", "", internal.PrimitiveTypeEnum.String);
		public get pageWidth(): string { return this.__pageWidth.get(); }
		public set pageWidth(newValue: string) { this.__pageWidth.set(newValue); }
		private __pageHeight: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(DocumentTemplate, this, "pageHeight", "", internal.PrimitiveTypeEnum.String);
		public get pageHeight(): string { return this.__pageHeight.get(); }
		public set pageHeight(newValue: string) { this.__pageHeight.set(newValue); }
		private __ppi: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(DocumentTemplate, this, "ppi", 0, internal.PrimitiveTypeEnum.Integer);
		public get ppi(): number { return this.__ppi.get(); }
		public set ppi(newValue: number) { this.__ppi.set(newValue); }
		private __marginLeftInInch: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(DocumentTemplate, this, "marginLeftInInch", 0, internal.PrimitiveTypeEnum.Double);
		public get marginLeftInInch(): number { return this.__marginLeftInInch.get(); }
		public set marginLeftInInch(newValue: number) { this.__marginLeftInInch.set(newValue); }
		private __marginRightInInch: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(DocumentTemplate, this, "marginRightInInch", 0, internal.PrimitiveTypeEnum.Double);
		public get marginRightInInch(): number { return this.__marginRightInInch.get(); }
		public set marginRightInInch(newValue: number) { this.__marginRightInInch.set(newValue); }
		private __marginTopInInch: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(DocumentTemplate, this, "marginTopInInch", 0, internal.PrimitiveTypeEnum.Double);
		public get marginTopInInch(): number { return this.__marginTopInInch.get(); }
		public set marginTopInInch(newValue: number) { this.__marginTopInInch.set(newValue); }
		private __marginBottomInInch: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(DocumentTemplate, this, "marginBottomInInch", 0, internal.PrimitiveTypeEnum.Double);
		public get marginBottomInInch(): number { return this.__marginBottomInInch.get(); }
		public set marginBottomInInch(newValue: number) { this.__marginBottomInInch.set(newValue); }
		private __style: internal.PartProperty<Style> =
			new internal.PartProperty<Style>(DocumentTemplate, this, "style", null, true);
		public get style(): Style { return this.__style.get(); }
		public set style(newValue: Style) { this.__style.set(newValue); }
		private __header: internal.PartProperty<Header> =
			new internal.PartProperty<Header>(DocumentTemplate, this, "header", null, false);
		public get header(): Header { return this.__header.get(); }
		public set header(newValue: Header) { this.__header.set(newValue); }
		private __footer: internal.PartProperty<Footer> =
			new internal.PartProperty<Footer>(DocumentTemplate, this, "footer", null, false);
		public get footer(): Footer { return this.__footer.get(); }
		public set footer(newValue: Footer) { this.__footer.set(newValue); }
		private __showHeaderAndFooterOnFirstPage: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(DocumentTemplate, this, "showHeaderAndFooterOnFirstPage", false, internal.PrimitiveTypeEnum.Boolean);
		public get showHeaderAndFooterOnFirstPage(): boolean { return this.__showHeaderAndFooterOnFirstPage.get(); }
		public set showHeaderAndFooterOnFirstPage(newValue: boolean) { this.__showHeaderAndFooterOnFirstPage.set(newValue); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "documents";
		}

		/**
		 * Creates a new DocumentTemplate unit in the SDK and on the server.
		 * Expects one argument, the projects.IFolderBase in which this unit is contained.
		 */
		public static createIn(container: projects.IFolderBase): DocumentTemplate {
			return internal.instancehelpers.createUnit(container, DocumentTemplate);
		}

		_isByNameReferrable() { return true; }

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.canvasWidth = 800;
			this.marginBottomInInch = 0.5;
			this.marginLeftInInch = 0.5;
			this.marginRightInInch = 0.5;
			this.marginTopInInch = 0.5;
			this.pageHeight = "11.693";
			this.pageWidth = "8.268";
			this.ppi = 120;
			this.showHeaderAndFooterOnFirstPage = true;
			this.style = ((style:Style) => {
				style.overrideFontFamily = true;
				style.overrideFontSize = true;
				style.overrideBold = true;
				style.overrideItalic = true;
				style.overrideFontColor = true;
				style.overrideBackgroundColor = true;
				return style;
			})(Style.create(this.model));
		}

	}

	export interface IDocumentTemplateParameter extends internal.IElement {
		model: IModel;
		containerAsDocumentTemplate: IDocumentTemplate;
		name: string;
		/**
		 * The value of this property is conceptually of type dataTypes.DataType.
		 */
		type: string;
		load(): DocumentTemplateParameter;
		load(callback: (element: DocumentTemplateParameter) => void, forceRefresh?: boolean);
	}

	export class DocumentTemplateParameter extends internal.Element implements IDocumentTemplateParameter {
		public static typeName: string = "DocumentTemplates$DocumentTemplateParameter";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"name" : {
					"public" : {
						"currentValue" : true
					}
				},
				"type" : {
					"public" : {
						"currentValue" : true
					}
				}
			},
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDocumentTemplate() { return super.getContainerAs<DocumentTemplate>(DocumentTemplate); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(DocumentTemplateParameter, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __type: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(DocumentTemplateParameter, this, "type", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type dataTypes.DataType.
		 */
		public get type(): string { return this.__type.get(); }
		public set type(newValue: string) { this.__type.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DocumentTemplateParameter() cannot be invoked directly, please use 'model.documenttemplates.createDocumentTemplateParameter()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.type = "Unknown";
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/dynamic-image-(document-template) relevant section in reference guide}
	 */
	export interface IDynamicImageViewer extends IEntityWidget {
		model: IModel;
		containerAsDocumentTemplate: IDocumentTemplate;
		containerAsDropZone: IDropZone;
		load(): DynamicImageViewer;
		load(callback: (element: DynamicImageViewer) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/dynamic-image-(document-template) relevant section in reference guide}
	 */
	export class DynamicImageViewer extends EntityWidget implements IDynamicImageViewer {
		public static typeName: string = "DocumentTemplates$DynamicImageViewer";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDocumentTemplate() { return super.getContainerAs<DocumentTemplate>(DocumentTemplate); }
		get containerAsDropZone() { return super.getContainerAs<DropZone>(DropZone); }

		private __defaultImage: internal.ByNameReferenceProperty<images.IImage> =
			new internal.ByNameReferenceProperty<images.IImage>(DynamicImageViewer, this, "defaultImage", null, "Images$Image");
		public get defaultImage(): images.IImage { return this.__defaultImage.get(); }
		public set defaultImage(newValue: images.IImage) { this.__defaultImage.set(newValue); }
		get defaultImageQualifiedName(): string { return this.__defaultImage.qualifiedName(); }
		private __useThumbnail: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(DynamicImageViewer, this, "useThumbnail", false, internal.PrimitiveTypeEnum.Boolean);
		public get useThumbnail(): boolean { return this.__useThumbnail.get(); }
		public set useThumbnail(newValue: boolean) { this.__useThumbnail.set(newValue); }
		private __width: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(DynamicImageViewer, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
		public get width(): number { return this.__width.get(); }
		public set width(newValue: number) { this.__width.set(newValue); }
		private __height: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(DynamicImageViewer, this, "height", 0, internal.PrimitiveTypeEnum.Integer);
		public get height(): number { return this.__height.get(); }
		public set height(newValue: number) { this.__height.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DynamicImageViewer() cannot be invoked directly, please use 'model.documenttemplates.createDynamicImageViewer()'"
				);
			}
		}


		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'toplevels' property
		 * of the parent DocumentTemplate element passed as argument.
		 */
		public static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): DynamicImageViewer {
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "toplevels", true);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * The new DynamicImageViewer will be automatically stored in the 'widget' property
		 * of the parent DropZone element passed as argument.
		 */
		public static createInDropZoneUnderWidget(container: DropZone): DynamicImageViewer {
			return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DynamicImageViewer {
			return internal.instancehelpers.createElement(model, DynamicImageViewer);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/dynamic-label-(document-template) relevant section in reference guide}
	 */
	export interface IDynamicLabel extends IAttributeWidget {
		model: IModel;
		containerAsDocumentTemplate: IDocumentTemplate;
		containerAsDropZone: IDropZone;
		load(): DynamicLabel;
		load(callback: (element: DynamicLabel) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/dynamic-label-(document-template) relevant section in reference guide}
	 */
	export class DynamicLabel extends AttributeWidget implements IDynamicLabel {
		public static typeName: string = "DocumentTemplates$DynamicLabel";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"style" : {
					"required" : {
						"currentValue" : true
					}
				},
				"formattingInfo" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDocumentTemplate() { return super.getContainerAs<DocumentTemplate>(DocumentTemplate); }
		get containerAsDropZone() { return super.getContainerAs<DropZone>(DropZone); }

		private __style: internal.PartProperty<Style> =
			new internal.PartProperty<Style>(DynamicLabel, this, "style", null, true);
		public get style(): Style { return this.__style.get(); }
		public set style(newValue: Style) { this.__style.set(newValue); }
		private __renderXHTML: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(DynamicLabel, this, "renderXHTML", false, internal.PrimitiveTypeEnum.Boolean);
		public get renderXHTML(): boolean { return this.__renderXHTML.get(); }
		public set renderXHTML(newValue: boolean) { this.__renderXHTML.set(newValue); }
		private __formattingInfo: internal.PartProperty<pages.FormattingInfo> =
			new internal.PartProperty<pages.FormattingInfo>(DynamicLabel, this, "formattingInfo", null, true);
		public get formattingInfo(): pages.FormattingInfo { return this.__formattingInfo.get(); }
		public set formattingInfo(newValue: pages.FormattingInfo) { this.__formattingInfo.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DynamicLabel() cannot be invoked directly, please use 'model.documenttemplates.createDynamicLabel()'"
				);
			}
		}


		/**
		 * Creates and returns a new DynamicLabel instance in the SDK and on the server.
		 * The new DynamicLabel will be automatically stored in the 'toplevels' property
		 * of the parent DocumentTemplate element passed as argument.
		 */
		public static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): DynamicLabel {
			return internal.instancehelpers.createElement(container, DynamicLabel, "toplevels", true);
		}

		/**
		 * Creates and returns a new DynamicLabel instance in the SDK and on the server.
		 * The new DynamicLabel will be automatically stored in the 'widget' property
		 * of the parent DropZone element passed as argument.
		 */
		public static createInDropZoneUnderWidget(container: DropZone): DynamicLabel {
			return internal.instancehelpers.createElement(container, DynamicLabel, "widget", false);
		}

		/**
		 * Creates and returns a new DynamicLabel instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DynamicLabel {
			return internal.instancehelpers.createElement(model, DynamicLabel);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.formattingInfo = pages.FormattingInfo.create(this.model);
			this.style = Style.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/footer-(document-template) relevant section in reference guide}
	 */
	export interface IFooter extends IDropZone {
		model: IModel;
		containerAsDocumentTemplate: IDocumentTemplate;
		load(): Footer;
		load(callback: (element: Footer) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/footer-(document-template) relevant section in reference guide}
	 */
	export class Footer extends DropZone implements IFooter {
		public static typeName: string = "DocumentTemplates$Footer";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDocumentTemplate() { return super.getContainerAs<DocumentTemplate>(DocumentTemplate); }

		private __bottomMargin: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(Footer, this, "bottomMargin", 0, internal.PrimitiveTypeEnum.Double);
		public get bottomMargin(): number { return this.__bottomMargin.get(); }
		public set bottomMargin(newValue: number) { this.__bottomMargin.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Footer() cannot be invoked directly, please use 'model.documenttemplates.createFooter()'"
				);
			}
		}

		/**
		 * Creates and returns a new Footer instance in the SDK and on the server.
		 * The new Footer will be automatically stored in the 'footer' property
		 * of the parent DocumentTemplate element passed as argument.
		 */
		public static createIn(container: DocumentTemplate): Footer {
			return internal.instancehelpers.createElement(container, Footer, "footer", false);
		}

		/**
		 * Creates and returns a new Footer instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): Footer {
			return internal.instancehelpers.createElement(model, Footer);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/sort-bar relevant section in reference guide}
	 */
	export interface IGridSortBar extends internal.IElement {
		model: IModel;
		containerAsGrid: IGrid;
		load(): GridSortBar;
		load(callback: (element: GridSortBar) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/sort-bar relevant section in reference guide}
	 */
	export class GridSortBar extends internal.Element implements IGridSortBar {
		public static typeName: string = "DocumentTemplates$GridSortBar";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsGrid() { return super.getContainerAs<Grid>(Grid); }

		private __sortItems: internal.PartListProperty<GridSortItem> =
			new internal.PartListProperty<GridSortItem>(GridSortBar, this, "sortItems", []);
		public get sortItems(): internal.IList<GridSortItem> { return this.__sortItems.get(); }
		public set sortItems(newValue: internal.IList<GridSortItem>) { this.__sortItems.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new GridSortBar() cannot be invoked directly, please use 'model.documenttemplates.createGridSortBar()'"
				);
			}
		}

		/**
		 * Creates and returns a new GridSortBar instance in the SDK and on the server.
		 * The new GridSortBar will be automatically stored in the 'sortBar' property
		 * of the parent Grid element passed as argument.
		 */
		public static createIn(container: Grid): GridSortBar {
			return internal.instancehelpers.createElement(container, GridSortBar, "sortBar", false);
		}

		/**
		 * Creates and returns a new GridSortBar instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): GridSortBar {
			return internal.instancehelpers.createElement(model, GridSortBar);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IGridSortItem extends internal.IElement {
		model: IModel;
		containerAsGridSortBar: IGridSortBar;
		load(): GridSortItem;
		load(callback: (element: GridSortItem) => void, forceRefresh?: boolean);
	}

	export class GridSortItem extends internal.Element implements IGridSortItem {
		public static typeName: string = "DocumentTemplates$GridSortItem";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsGridSortBar() { return super.getContainerAs<GridSortBar>(GridSortBar); }

		private __attributePath: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(GridSortItem, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type paths.AttributePath.
		 */
		public get attributePath(): string { return this.__attributePath.get(); }
		public set attributePath(newValue: string) { this.__attributePath.set(newValue); }
		private __sortOrder: internal.EnumProperty<pages.SortDirection> =
			new internal.EnumProperty<pages.SortDirection>(GridSortItem, this, "sortOrder", pages.SortDirection.Ascending, pages.SortDirection);
		public get sortOrder(): pages.SortDirection { return this.__sortOrder.get(); }
		public set sortOrder(newValue: pages.SortDirection) { this.__sortOrder.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new GridSortItem() cannot be invoked directly, please use 'model.documenttemplates.createGridSortItem()'"
				);
			}
		}

		/**
		 * Creates and returns a new GridSortItem instance in the SDK and on the server.
		 * The new GridSortItem will be automatically stored in the 'sortItems' property
		 * of the parent GridSortBar element passed as argument.
		 */
		public static createIn(container: GridSortBar): GridSortItem {
			return internal.instancehelpers.createElement(container, GridSortItem, "sortItems", true);
		}

		/**
		 * Creates and returns a new GridSortItem instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): GridSortItem {
			return internal.instancehelpers.createElement(model, GridSortItem);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.sortOrder = pages.SortDirection.Ascending;
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/header-(document-template) relevant section in reference guide}
	 */
	export interface IHeader extends IDropZone {
		model: IModel;
		containerAsDocumentTemplate: IDocumentTemplate;
		load(): Header;
		load(callback: (element: Header) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/header-(document-template) relevant section in reference guide}
	 */
	export class Header extends DropZone implements IHeader {
		public static typeName: string = "DocumentTemplates$Header";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDocumentTemplate() { return super.getContainerAs<DocumentTemplate>(DocumentTemplate); }

		private __topMargin: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(Header, this, "topMargin", 0, internal.PrimitiveTypeEnum.Double);
		public get topMargin(): number { return this.__topMargin.get(); }
		public set topMargin(newValue: number) { this.__topMargin.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Header() cannot be invoked directly, please use 'model.documenttemplates.createHeader()'"
				);
			}
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * The new Header will be automatically stored in the 'header' property
		 * of the parent DocumentTemplate element passed as argument.
		 */
		public static createIn(container: DocumentTemplate): Header {
			return internal.instancehelpers.createElement(container, Header, "header", false);
		}

		/**
		 * Creates and returns a new Header instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): Header {
			return internal.instancehelpers.createElement(model, Header);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/line-break-(document-template) relevant section in reference guide}
	 */
	export interface ILineBreak extends IWidget {
		model: IModel;
		containerAsDocumentTemplate: IDocumentTemplate;
		containerAsDropZone: IDropZone;
		load(): LineBreak;
		load(callback: (element: LineBreak) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/line-break-(document-template) relevant section in reference guide}
	 */
	export class LineBreak extends Widget implements ILineBreak {
		public static typeName: string = "DocumentTemplates$LineBreak";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDocumentTemplate() { return super.getContainerAs<DocumentTemplate>(DocumentTemplate); }
		get containerAsDropZone() { return super.getContainerAs<DropZone>(DropZone); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new LineBreak() cannot be invoked directly, please use 'model.documenttemplates.createLineBreak()'"
				);
			}
		}


		/**
		 * Creates and returns a new LineBreak instance in the SDK and on the server.
		 * The new LineBreak will be automatically stored in the 'toplevels' property
		 * of the parent DocumentTemplate element passed as argument.
		 */
		public static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): LineBreak {
			return internal.instancehelpers.createElement(container, LineBreak, "toplevels", true);
		}

		/**
		 * Creates and returns a new LineBreak instance in the SDK and on the server.
		 * The new LineBreak will be automatically stored in the 'widget' property
		 * of the parent DropZone element passed as argument.
		 */
		public static createInDropZoneUnderWidget(container: DropZone): LineBreak {
			return internal.instancehelpers.createElement(container, LineBreak, "widget", false);
		}

		/**
		 * Creates and returns a new LineBreak instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): LineBreak {
			return internal.instancehelpers.createElement(model, LineBreak);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/page-break-(document-template) relevant section in reference guide}
	 */
	export interface IPageBreak extends IWidget {
		model: IModel;
		containerAsDocumentTemplate: IDocumentTemplate;
		containerAsDropZone: IDropZone;
		load(): PageBreak;
		load(callback: (element: PageBreak) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/page-break-(document-template) relevant section in reference guide}
	 */
	export class PageBreak extends Widget implements IPageBreak {
		public static typeName: string = "DocumentTemplates$PageBreak";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDocumentTemplate() { return super.getContainerAs<DocumentTemplate>(DocumentTemplate); }
		get containerAsDropZone() { return super.getContainerAs<DropZone>(DropZone); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new PageBreak() cannot be invoked directly, please use 'model.documenttemplates.createPageBreak()'"
				);
			}
		}


		/**
		 * Creates and returns a new PageBreak instance in the SDK and on the server.
		 * The new PageBreak will be automatically stored in the 'toplevels' property
		 * of the parent DocumentTemplate element passed as argument.
		 */
		public static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): PageBreak {
			return internal.instancehelpers.createElement(container, PageBreak, "toplevels", true);
		}

		/**
		 * Creates and returns a new PageBreak instance in the SDK and on the server.
		 * The new PageBreak will be automatically stored in the 'widget' property
		 * of the parent DropZone element passed as argument.
		 */
		public static createInDropZoneUnderWidget(container: DropZone): PageBreak {
			return internal.instancehelpers.createElement(container, PageBreak, "widget", false);
		}

		/**
		 * Creates and returns a new PageBreak instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): PageBreak {
			return internal.instancehelpers.createElement(model, PageBreak);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/static-image-(document-template) relevant section in reference guide}
	 */
	export interface IStaticImageViewer extends IWidget {
		model: IModel;
		containerAsDocumentTemplate: IDocumentTemplate;
		containerAsDropZone: IDropZone;
		load(): StaticImageViewer;
		load(callback: (element: StaticImageViewer) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/static-image-(document-template) relevant section in reference guide}
	 */
	export class StaticImageViewer extends Widget implements IStaticImageViewer {
		public static typeName: string = "DocumentTemplates$StaticImageViewer";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDocumentTemplate() { return super.getContainerAs<DocumentTemplate>(DocumentTemplate); }
		get containerAsDropZone() { return super.getContainerAs<DropZone>(DropZone); }

		private __image: internal.ByNameReferenceProperty<images.IImage> =
			new internal.ByNameReferenceProperty<images.IImage>(StaticImageViewer, this, "image", null, "Images$Image");
		public get image(): images.IImage { return this.__image.get(); }
		public set image(newValue: images.IImage) { this.__image.set(newValue); }
		get imageQualifiedName(): string { return this.__image.qualifiedName(); }
		private __width: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(StaticImageViewer, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
		public get width(): number { return this.__width.get(); }
		public set width(newValue: number) { this.__width.set(newValue); }
		private __height: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(StaticImageViewer, this, "height", 0, internal.PrimitiveTypeEnum.Integer);
		public get height(): number { return this.__height.get(); }
		public set height(newValue: number) { this.__height.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new StaticImageViewer() cannot be invoked directly, please use 'model.documenttemplates.createStaticImageViewer()'"
				);
			}
		}


		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'toplevels' property
		 * of the parent DocumentTemplate element passed as argument.
		 */
		public static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): StaticImageViewer {
			return internal.instancehelpers.createElement(container, StaticImageViewer, "toplevels", true);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * The new StaticImageViewer will be automatically stored in the 'widget' property
		 * of the parent DropZone element passed as argument.
		 */
		public static createInDropZoneUnderWidget(container: DropZone): StaticImageViewer {
			return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
		}

		/**
		 * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): StaticImageViewer {
			return internal.instancehelpers.createElement(model, StaticImageViewer);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/static-label-(document-template) relevant section in reference guide}
	 */
	export interface IStaticLabel extends IWidget {
		model: IModel;
		containerAsDocumentTemplate: IDocumentTemplate;
		containerAsDropZone: IDropZone;
		load(): StaticLabel;
		load(callback: (element: StaticLabel) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/static-label-(document-template) relevant section in reference guide}
	 */
	export class StaticLabel extends Widget implements IStaticLabel {
		public static typeName: string = "DocumentTemplates$StaticLabel";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"caption" : {
					"required" : {
						"currentValue" : true
					}
				},
				"style" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDocumentTemplate() { return super.getContainerAs<DocumentTemplate>(DocumentTemplate); }
		get containerAsDropZone() { return super.getContainerAs<DropZone>(DropZone); }

		private __caption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(StaticLabel, this, "caption", null, true);
		public get caption(): texts.Text { return this.__caption.get(); }
		public set caption(newValue: texts.Text) { this.__caption.set(newValue); }
		private __style: internal.PartProperty<Style> =
			new internal.PartProperty<Style>(StaticLabel, this, "style", null, true);
		public get style(): Style { return this.__style.get(); }
		public set style(newValue: Style) { this.__style.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new StaticLabel() cannot be invoked directly, please use 'model.documenttemplates.createStaticLabel()'"
				);
			}
		}


		/**
		 * Creates and returns a new StaticLabel instance in the SDK and on the server.
		 * The new StaticLabel will be automatically stored in the 'toplevels' property
		 * of the parent DocumentTemplate element passed as argument.
		 */
		public static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): StaticLabel {
			return internal.instancehelpers.createElement(container, StaticLabel, "toplevels", true);
		}

		/**
		 * Creates and returns a new StaticLabel instance in the SDK and on the server.
		 * The new StaticLabel will be automatically stored in the 'widget' property
		 * of the parent DropZone element passed as argument.
		 */
		public static createInDropZoneUnderWidget(container: DropZone): StaticLabel {
			return internal.instancehelpers.createElement(container, StaticLabel, "widget", false);
		}

		/**
		 * Creates and returns a new StaticLabel instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): StaticLabel {
			return internal.instancehelpers.createElement(model, StaticLabel);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((text:texts.Text) => {
				text.translations.replace([ ((translation:texts.Translation) => {
					translation.languageCode = "en_US";
					translation.text = "Label";
					return translation;
				})(texts.Translation.create(this.model)) ]);
				return text;
			})(texts.Text.create(this.model));
			this.style = Style.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/style relevant section in reference guide}
	 */
	export interface IStyle extends internal.IElement {
		model: IModel;
		containerAsDataGridCell: IDataGridCell;
		containerAsDataGridColumn: IDataGridColumn;
		containerAsDocumentTemplate: IDocumentTemplate;
		containerAsDynamicLabel: IDynamicLabel;
		containerAsGrid: IGrid;
		containerAsStaticLabel: IStaticLabel;
		containerAsTable: ITable;
		containerAsTableCell: ITableCell;
		containerAsTitle: ITitle;
		load(): Style;
		load(callback: (element: Style) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/style relevant section in reference guide}
	 */
	export class Style extends internal.Element implements IStyle {
		public static typeName: string = "DocumentTemplates$Style";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataGridCell() { return super.getContainerAs<DataGridCell>(DataGridCell); }
		get containerAsDataGridColumn() { return super.getContainerAs<DataGridColumn>(DataGridColumn); }
		get containerAsDocumentTemplate() { return super.getContainerAs<DocumentTemplate>(DocumentTemplate); }
		get containerAsDynamicLabel() { return super.getContainerAs<DynamicLabel>(DynamicLabel); }
		get containerAsGrid() { return super.getContainerAs<Grid>(Grid); }
		get containerAsStaticLabel() { return super.getContainerAs<StaticLabel>(StaticLabel); }
		get containerAsTable() { return super.getContainerAs<Table>(Table); }
		get containerAsTableCell() { return super.getContainerAs<TableCell>(TableCell); }
		get containerAsTitle() { return super.getContainerAs<Title>(Title); }

		private __fontFamily: internal.EnumProperty<FontFamily> =
			new internal.EnumProperty<FontFamily>(Style, this, "fontFamily", FontFamily.Arial, FontFamily);
		public get fontFamily(): FontFamily { return this.__fontFamily.get(); }
		public set fontFamily(newValue: FontFamily) { this.__fontFamily.set(newValue); }
		private __fontSize: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(Style, this, "fontSize", 0, internal.PrimitiveTypeEnum.Integer);
		public get fontSize(): number { return this.__fontSize.get(); }
		public set fontSize(newValue: number) { this.__fontSize.set(newValue); }
		private __bold: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(Style, this, "bold", false, internal.PrimitiveTypeEnum.Boolean);
		public get bold(): boolean { return this.__bold.get(); }
		public set bold(newValue: boolean) { this.__bold.set(newValue); }
		private __italic: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(Style, this, "italic", false, internal.PrimitiveTypeEnum.Boolean);
		public get italic(): boolean { return this.__italic.get(); }
		public set italic(newValue: boolean) { this.__italic.set(newValue); }
		private __fontColor: internal.PrimitiveProperty<common.IColor> =
			new internal.PrimitiveProperty<common.IColor>(Style, this, "fontColor", { red: 0, green: 0, blue: 0 }, internal.PrimitiveTypeEnum.Color);
		public get fontColor(): common.IColor { return this.__fontColor.get(); }
		public set fontColor(newValue: common.IColor) { this.__fontColor.set(newValue); }
		private __backgroundColor: internal.PrimitiveProperty<common.IColor> =
			new internal.PrimitiveProperty<common.IColor>(Style, this, "backgroundColor", { red: 0, green: 0, blue: 0 }, internal.PrimitiveTypeEnum.Color);
		public get backgroundColor(): common.IColor { return this.__backgroundColor.get(); }
		public set backgroundColor(newValue: common.IColor) { this.__backgroundColor.set(newValue); }
		private __overrideFontFamily: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(Style, this, "overrideFontFamily", false, internal.PrimitiveTypeEnum.Boolean);
		public get overrideFontFamily(): boolean { return this.__overrideFontFamily.get(); }
		public set overrideFontFamily(newValue: boolean) { this.__overrideFontFamily.set(newValue); }
		private __overrideFontSize: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(Style, this, "overrideFontSize", false, internal.PrimitiveTypeEnum.Boolean);
		public get overrideFontSize(): boolean { return this.__overrideFontSize.get(); }
		public set overrideFontSize(newValue: boolean) { this.__overrideFontSize.set(newValue); }
		private __overrideBold: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(Style, this, "overrideBold", false, internal.PrimitiveTypeEnum.Boolean);
		public get overrideBold(): boolean { return this.__overrideBold.get(); }
		public set overrideBold(newValue: boolean) { this.__overrideBold.set(newValue); }
		private __overrideItalic: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(Style, this, "overrideItalic", false, internal.PrimitiveTypeEnum.Boolean);
		public get overrideItalic(): boolean { return this.__overrideItalic.get(); }
		public set overrideItalic(newValue: boolean) { this.__overrideItalic.set(newValue); }
		private __overrideFontColor: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(Style, this, "overrideFontColor", false, internal.PrimitiveTypeEnum.Boolean);
		public get overrideFontColor(): boolean { return this.__overrideFontColor.get(); }
		public set overrideFontColor(newValue: boolean) { this.__overrideFontColor.set(newValue); }
		private __overrideBackgroundColor: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(Style, this, "overrideBackgroundColor", false, internal.PrimitiveTypeEnum.Boolean);
		public get overrideBackgroundColor(): boolean { return this.__overrideBackgroundColor.get(); }
		public set overrideBackgroundColor(newValue: boolean) { this.__overrideBackgroundColor.set(newValue); }
		private __borderStyleTop: internal.EnumProperty<BorderStyle> =
			new internal.EnumProperty<BorderStyle>(Style, this, "borderStyleTop", BorderStyle.None, BorderStyle);
		public get borderStyleTop(): BorderStyle { return this.__borderStyleTop.get(); }
		public set borderStyleTop(newValue: BorderStyle) { this.__borderStyleTop.set(newValue); }
		private __borderStyleBottom: internal.EnumProperty<BorderStyle> =
			new internal.EnumProperty<BorderStyle>(Style, this, "borderStyleBottom", BorderStyle.None, BorderStyle);
		public get borderStyleBottom(): BorderStyle { return this.__borderStyleBottom.get(); }
		public set borderStyleBottom(newValue: BorderStyle) { this.__borderStyleBottom.set(newValue); }
		private __borderStyleLeft: internal.EnumProperty<BorderStyle> =
			new internal.EnumProperty<BorderStyle>(Style, this, "borderStyleLeft", BorderStyle.None, BorderStyle);
		public get borderStyleLeft(): BorderStyle { return this.__borderStyleLeft.get(); }
		public set borderStyleLeft(newValue: BorderStyle) { this.__borderStyleLeft.set(newValue); }
		private __borderStyleRight: internal.EnumProperty<BorderStyle> =
			new internal.EnumProperty<BorderStyle>(Style, this, "borderStyleRight", BorderStyle.None, BorderStyle);
		public get borderStyleRight(): BorderStyle { return this.__borderStyleRight.get(); }
		public set borderStyleRight(newValue: BorderStyle) { this.__borderStyleRight.set(newValue); }
		private __borderWidthTop: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(Style, this, "borderWidthTop", 0, internal.PrimitiveTypeEnum.Integer);
		public get borderWidthTop(): number { return this.__borderWidthTop.get(); }
		public set borderWidthTop(newValue: number) { this.__borderWidthTop.set(newValue); }
		private __borderWidthBottom: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(Style, this, "borderWidthBottom", 0, internal.PrimitiveTypeEnum.Integer);
		public get borderWidthBottom(): number { return this.__borderWidthBottom.get(); }
		public set borderWidthBottom(newValue: number) { this.__borderWidthBottom.set(newValue); }
		private __borderWidthLeft: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(Style, this, "borderWidthLeft", 0, internal.PrimitiveTypeEnum.Integer);
		public get borderWidthLeft(): number { return this.__borderWidthLeft.get(); }
		public set borderWidthLeft(newValue: number) { this.__borderWidthLeft.set(newValue); }
		private __borderWidthRight: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(Style, this, "borderWidthRight", 0, internal.PrimitiveTypeEnum.Integer);
		public get borderWidthRight(): number { return this.__borderWidthRight.get(); }
		public set borderWidthRight(newValue: number) { this.__borderWidthRight.set(newValue); }
		private __borderColorTop: internal.PrimitiveProperty<common.IColor> =
			new internal.PrimitiveProperty<common.IColor>(Style, this, "borderColorTop", { red: 0, green: 0, blue: 0 }, internal.PrimitiveTypeEnum.Color);
		public get borderColorTop(): common.IColor { return this.__borderColorTop.get(); }
		public set borderColorTop(newValue: common.IColor) { this.__borderColorTop.set(newValue); }
		private __borderColorBottom: internal.PrimitiveProperty<common.IColor> =
			new internal.PrimitiveProperty<common.IColor>(Style, this, "borderColorBottom", { red: 0, green: 0, blue: 0 }, internal.PrimitiveTypeEnum.Color);
		public get borderColorBottom(): common.IColor { return this.__borderColorBottom.get(); }
		public set borderColorBottom(newValue: common.IColor) { this.__borderColorBottom.set(newValue); }
		private __borderColorLeft: internal.PrimitiveProperty<common.IColor> =
			new internal.PrimitiveProperty<common.IColor>(Style, this, "borderColorLeft", { red: 0, green: 0, blue: 0 }, internal.PrimitiveTypeEnum.Color);
		public get borderColorLeft(): common.IColor { return this.__borderColorLeft.get(); }
		public set borderColorLeft(newValue: common.IColor) { this.__borderColorLeft.set(newValue); }
		private __borderColorRight: internal.PrimitiveProperty<common.IColor> =
			new internal.PrimitiveProperty<common.IColor>(Style, this, "borderColorRight", { red: 0, green: 0, blue: 0 }, internal.PrimitiveTypeEnum.Color);
		public get borderColorRight(): common.IColor { return this.__borderColorRight.get(); }
		public set borderColorRight(newValue: common.IColor) { this.__borderColorRight.set(newValue); }
		private __textAlign: internal.EnumProperty<TextAlign> =
			new internal.EnumProperty<TextAlign>(Style, this, "textAlign", TextAlign.Left, TextAlign);
		public get textAlign(): TextAlign { return this.__textAlign.get(); }
		public set textAlign(newValue: TextAlign) { this.__textAlign.set(newValue); }
		private __customStyles: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Style, this, "customStyles", "", internal.PrimitiveTypeEnum.String);
		public get customStyles(): string { return this.__customStyles.get(); }
		public set customStyles(newValue: string) { this.__customStyles.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Style() cannot be invoked directly, please use 'model.documenttemplates.createStyle()'"
				);
			}
		}


		/**
		 * Creates and returns a new Style instance in the SDK and on the server.
		 * The new Style will be automatically stored in the 'style' property
		 * of the parent DataGridCell element passed as argument.
		 */
		public static createInDataGridCellUnderStyle(container: DataGridCell): Style {
			return internal.instancehelpers.createElement(container, Style, "style", false);
		}

		/**
		 * Creates and returns a new Style instance in the SDK and on the server.
		 * The new Style will be automatically stored in the 'style' property
		 * of the parent DataGridColumn element passed as argument.
		 */
		public static createInDataGridColumnUnderStyle(container: DataGridColumn): Style {
			return internal.instancehelpers.createElement(container, Style, "style", false);
		}

		/**
		 * Creates and returns a new Style instance in the SDK and on the server.
		 * The new Style will be automatically stored in the 'style' property
		 * of the parent DocumentTemplate element passed as argument.
		 */
		public static createInDocumentTemplateUnderStyle(container: DocumentTemplate): Style {
			return internal.instancehelpers.createElement(container, Style, "style", false);
		}

		/**
		 * Creates and returns a new Style instance in the SDK and on the server.
		 * The new Style will be automatically stored in the 'style' property
		 * of the parent DynamicLabel element passed as argument.
		 */
		public static createInDynamicLabelUnderStyle(container: DynamicLabel): Style {
			return internal.instancehelpers.createElement(container, Style, "style", false);
		}

		/**
		 * Creates and returns a new Style instance in the SDK and on the server.
		 * The new Style will be automatically stored in the 'style' property
		 * of the parent Grid element passed as argument.
		 */
		public static createInGridUnderStyle(container: Grid): Style {
			return internal.instancehelpers.createElement(container, Style, "style", false);
		}

		/**
		 * Creates and returns a new Style instance in the SDK and on the server.
		 * The new Style will be automatically stored in the 'style' property
		 * of the parent StaticLabel element passed as argument.
		 */
		public static createInStaticLabelUnderStyle(container: StaticLabel): Style {
			return internal.instancehelpers.createElement(container, Style, "style", false);
		}

		/**
		 * Creates and returns a new Style instance in the SDK and on the server.
		 * The new Style will be automatically stored in the 'style' property
		 * of the parent Table element passed as argument.
		 */
		public static createInTableUnderStyle(container: Table): Style {
			return internal.instancehelpers.createElement(container, Style, "style", false);
		}

		/**
		 * Creates and returns a new Style instance in the SDK and on the server.
		 * The new Style will be automatically stored in the 'style' property
		 * of the parent TableCell element passed as argument.
		 */
		public static createInTableCellUnderStyle(container: TableCell): Style {
			return internal.instancehelpers.createElement(container, Style, "style", false);
		}

		/**
		 * Creates and returns a new Style instance in the SDK and on the server.
		 * The new Style will be automatically stored in the 'style' property
		 * of the parent Title element passed as argument.
		 */
		public static createInTitleUnderStyle(container: Title): Style {
			return internal.instancehelpers.createElement(container, Style, "style", false);
		}

		/**
		 * Creates and returns a new Style instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): Style {
			return internal.instancehelpers.createElement(model, Style);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.backgroundColor = { red: 255, green: 255, blue: 255 };
			this.borderColorBottom = { red: 0, green: 0, blue: 0 };
			this.borderColorLeft = { red: 0, green: 0, blue: 0 };
			this.borderColorRight = { red: 0, green: 0, blue: 0 };
			this.borderColorTop = { red: 0, green: 0, blue: 0 };
			this.borderStyleBottom = BorderStyle.None;
			this.borderStyleLeft = BorderStyle.None;
			this.borderStyleRight = BorderStyle.None;
			this.borderStyleTop = BorderStyle.None;
			this.borderWidthBottom = 1;
			this.borderWidthLeft = 1;
			this.borderWidthRight = 1;
			this.borderWidthTop = 1;
			this.fontColor = { red: 0, green: 0, blue: 0 };
			this.fontFamily = FontFamily.Arial;
			this.fontSize = 10;
			this.textAlign = TextAlign.Left;
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/table-(document-template) relevant section in reference guide}
	 */
	export interface ITable extends IWidget {
		model: IModel;
		containerAsDocumentTemplate: IDocumentTemplate;
		containerAsDropZone: IDropZone;
		load(): Table;
		load(callback: (element: Table) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/table-(document-template) relevant section in reference guide}
	 */
	export class Table extends Widget implements ITable {
		public static typeName: string = "DocumentTemplates$Table";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"style" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDocumentTemplate() { return super.getContainerAs<DocumentTemplate>(DocumentTemplate); }
		get containerAsDropZone() { return super.getContainerAs<DropZone>(DropZone); }

		private __rows: internal.PartListProperty<TableRow> =
			new internal.PartListProperty<TableRow>(Table, this, "rows", []);
		public get rows(): internal.IList<TableRow> { return this.__rows.get(); }
		public set rows(newValue: internal.IList<TableRow>) { this.__rows.set(newValue); }
		private __columnWeights: internal.PrimitiveListProperty<number> =
			new internal.PrimitiveListProperty<number>(Table, this, "columnWeights", [], internal.PrimitiveTypeEnum.Integer);
		public get columnWeights(): internal.IList<number> { return this.__columnWeights.get(); }
		public set columnWeights(newValue: internal.IList<number>) { this.__columnWeights.set(newValue); }
		private __cellSpacing: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(Table, this, "cellSpacing", 0, internal.PrimitiveTypeEnum.Integer);
		public get cellSpacing(): number { return this.__cellSpacing.get(); }
		public set cellSpacing(newValue: number) { this.__cellSpacing.set(newValue); }
		private __cellPadding: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(Table, this, "cellPadding", 0, internal.PrimitiveTypeEnum.Integer);
		public get cellPadding(): number { return this.__cellPadding.get(); }
		public set cellPadding(newValue: number) { this.__cellPadding.set(newValue); }
		private __style: internal.PartProperty<Style> =
			new internal.PartProperty<Style>(Table, this, "style", null, true);
		public get style(): Style { return this.__style.get(); }
		public set style(newValue: Style) { this.__style.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Table() cannot be invoked directly, please use 'model.documenttemplates.createTable()'"
				);
			}
		}


		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'toplevels' property
		 * of the parent DocumentTemplate element passed as argument.
		 */
		public static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): Table {
			return internal.instancehelpers.createElement(container, Table, "toplevels", true);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * The new Table will be automatically stored in the 'widget' property
		 * of the parent DropZone element passed as argument.
		 */
		public static createInDropZoneUnderWidget(container: DropZone): Table {
			return internal.instancehelpers.createElement(container, Table, "widget", false);
		}

		/**
		 * Creates and returns a new Table instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): Table {
			return internal.instancehelpers.createElement(model, Table);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.columnWeights.replace([ 100 ]);
			this.rows.replace([ TableRow.create(this.model) ]);
			this.style = Style.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/cell-(document-template) relevant section in reference guide}
	 */
	export interface ITableCell extends IDropZone {
		model: IModel;
		containerAsTableRow: ITableRow;
		load(): TableCell;
		load(callback: (element: TableCell) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/cell-(document-template) relevant section in reference guide}
	 */
	export class TableCell extends DropZone implements ITableCell {
		public static typeName: string = "DocumentTemplates$TableCell";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"style" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsTableRow() { return super.getContainerAs<TableRow>(TableRow); }

		private __colSpan: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(TableCell, this, "colSpan", 0, internal.PrimitiveTypeEnum.Integer);
		public get colSpan(): number { return this.__colSpan.get(); }
		public set colSpan(newValue: number) { this.__colSpan.set(newValue); }
		private __rowSpan: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(TableCell, this, "rowSpan", 0, internal.PrimitiveTypeEnum.Integer);
		public get rowSpan(): number { return this.__rowSpan.get(); }
		public set rowSpan(newValue: number) { this.__rowSpan.set(newValue); }
		private __isPartOfSpan: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(TableCell, this, "isPartOfSpan", false, internal.PrimitiveTypeEnum.Boolean);
		public get isPartOfSpan(): boolean { return this.__isPartOfSpan.get(); }
		public set isPartOfSpan(newValue: boolean) { this.__isPartOfSpan.set(newValue); }
		private __style: internal.PartProperty<Style> =
			new internal.PartProperty<Style>(TableCell, this, "style", null, true);
		public get style(): Style { return this.__style.get(); }
		public set style(newValue: Style) { this.__style.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new TableCell() cannot be invoked directly, please use 'model.documenttemplates.createTableCell()'"
				);
			}
		}

		/**
		 * Creates and returns a new TableCell instance in the SDK and on the server.
		 * The new TableCell will be automatically stored in the 'cells' property
		 * of the parent TableRow element passed as argument.
		 */
		public static createIn(container: TableRow): TableCell {
			return internal.instancehelpers.createElement(container, TableCell, "cells", true);
		}

		/**
		 * Creates and returns a new TableCell instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): TableCell {
			return internal.instancehelpers.createElement(model, TableCell);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.colSpan = 1;
			this.rowSpan = 1;
			this.style = Style.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/row-(document-template) relevant section in reference guide}
	 */
	export interface ITableRow extends internal.IElement {
		model: IModel;
		containerAsTable: ITable;
		load(): TableRow;
		load(callback: (element: TableRow) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/row-(document-template) relevant section in reference guide}
	 */
	export class TableRow extends internal.Element implements ITableRow {
		public static typeName: string = "DocumentTemplates$TableRow";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"conditionSettings" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsTable() { return super.getContainerAs<Table>(Table); }

		private __cells: internal.PartListProperty<TableCell> =
			new internal.PartListProperty<TableCell>(TableRow, this, "cells", []);
		public get cells(): internal.IList<TableCell> { return this.__cells.get(); }
		public set cells(newValue: internal.IList<TableCell>) { this.__cells.set(newValue); }
		private __conditionSettings: internal.PartProperty<ConditionSettings> =
			new internal.PartProperty<ConditionSettings>(TableRow, this, "conditionSettings", null, true);
		public get conditionSettings(): ConditionSettings { return this.__conditionSettings.get(); }
		public set conditionSettings(newValue: ConditionSettings) { this.__conditionSettings.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new TableRow() cannot be invoked directly, please use 'model.documenttemplates.createTableRow()'"
				);
			}
		}

		/**
		 * Creates and returns a new TableRow instance in the SDK and on the server.
		 * The new TableRow will be automatically stored in the 'rows' property
		 * of the parent Table element passed as argument.
		 */
		public static createIn(container: Table): TableRow {
			return internal.instancehelpers.createElement(container, TableRow, "rows", true);
		}

		/**
		 * Creates and returns a new TableRow instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): TableRow {
			return internal.instancehelpers.createElement(model, TableRow);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.cells.replace([ TableCell.create(this.model) ]);
			this.conditionSettings = ConditionSettings.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/template-grid-(document-template) relevant section in reference guide}
	 */
	export interface ITemplateGrid extends IGrid {
		model: IModel;
		containerAsDocumentTemplate: IDocumentTemplate;
		containerAsDropZone: IDropZone;
		load(): TemplateGrid;
		load(callback: (element: TemplateGrid) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/template-grid-(document-template) relevant section in reference guide}
	 */
	export class TemplateGrid extends Grid implements ITemplateGrid {
		public static typeName: string = "DocumentTemplates$TemplateGrid";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"oddRowsContents" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDocumentTemplate() { return super.getContainerAs<DocumentTemplate>(DocumentTemplate); }
		get containerAsDropZone() { return super.getContainerAs<DropZone>(DropZone); }

		private __numberOfColumns: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(TemplateGrid, this, "numberOfColumns", 0, internal.PrimitiveTypeEnum.Integer);
		public get numberOfColumns(): number { return this.__numberOfColumns.get(); }
		public set numberOfColumns(newValue: number) { this.__numberOfColumns.set(newValue); }
		private __oddRowsContents: internal.PartProperty<TemplateGridContents> =
			new internal.PartProperty<TemplateGridContents>(TemplateGrid, this, "oddRowsContents", null, true);
		public get oddRowsContents(): TemplateGridContents { return this.__oddRowsContents.get(); }
		public set oddRowsContents(newValue: TemplateGridContents) { this.__oddRowsContents.set(newValue); }
		private __evenRowsContents: internal.PartProperty<TemplateGridContents> =
			new internal.PartProperty<TemplateGridContents>(TemplateGrid, this, "evenRowsContents", null, false);
		public get evenRowsContents(): TemplateGridContents { return this.__evenRowsContents.get(); }
		public set evenRowsContents(newValue: TemplateGridContents) { this.__evenRowsContents.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new TemplateGrid() cannot be invoked directly, please use 'model.documenttemplates.createTemplateGrid()'"
				);
			}
		}


		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'toplevels' property
		 * of the parent DocumentTemplate element passed as argument.
		 */
		public static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): TemplateGrid {
			return internal.instancehelpers.createElement(container, TemplateGrid, "toplevels", true);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * The new TemplateGrid will be automatically stored in the 'widget' property
		 * of the parent DropZone element passed as argument.
		 */
		public static createInDropZoneUnderWidget(container: DropZone): TemplateGrid {
			return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
		}

		/**
		 * Creates and returns a new TemplateGrid instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): TemplateGrid {
			return internal.instancehelpers.createElement(model, TemplateGrid);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.numberOfColumns = 2;
			this.oddRowsContents = TemplateGridContents.create(this.model);
		}

	}

	export interface ITemplateGridContents extends IDropZone {
		model: IModel;
		containerAsTemplateGrid: ITemplateGrid;
		load(): TemplateGridContents;
		load(callback: (element: TemplateGridContents) => void, forceRefresh?: boolean);
	}

	export class TemplateGridContents extends DropZone implements ITemplateGridContents {
		public static typeName: string = "DocumentTemplates$TemplateGridContents";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsTemplateGrid() { return super.getContainerAs<TemplateGrid>(TemplateGrid); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new TemplateGridContents() cannot be invoked directly, please use 'model.documenttemplates.createTemplateGridContents()'"
				);
			}
		}


		/**
		 * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
		 * The new TemplateGridContents will be automatically stored in the 'evenRowsContents' property
		 * of the parent TemplateGrid element passed as argument.
		 */
		public static createInTemplateGridUnderEvenRowsContents(container: TemplateGrid): TemplateGridContents {
			return internal.instancehelpers.createElement(container, TemplateGridContents, "evenRowsContents", false);
		}

		/**
		 * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
		 * The new TemplateGridContents will be automatically stored in the 'oddRowsContents' property
		 * of the parent TemplateGrid element passed as argument.
		 */
		public static createInTemplateGridUnderOddRowsContents(container: TemplateGrid): TemplateGridContents {
			return internal.instancehelpers.createElement(container, TemplateGridContents, "oddRowsContents", false);
		}

		/**
		 * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): TemplateGridContents {
			return internal.instancehelpers.createElement(model, TemplateGridContents);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/title-(document-template) relevant section in reference guide}
	 */
	export interface ITitle extends IWidget {
		model: IModel;
		containerAsDocumentTemplate: IDocumentTemplate;
		containerAsDropZone: IDropZone;
		load(): Title;
		load(callback: (element: Title) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/title-(document-template) relevant section in reference guide}
	 */
	export class Title extends Widget implements ITitle {
		public static typeName: string = "DocumentTemplates$Title";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"caption" : {
					"required" : {
						"currentValue" : true
					}
				},
				"style" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDocumentTemplate() { return super.getContainerAs<DocumentTemplate>(DocumentTemplate); }
		get containerAsDropZone() { return super.getContainerAs<DropZone>(DropZone); }

		private __caption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(Title, this, "caption", null, true);
		public get caption(): texts.Text { return this.__caption.get(); }
		public set caption(newValue: texts.Text) { this.__caption.set(newValue); }
		private __style: internal.PartProperty<Style> =
			new internal.PartProperty<Style>(Title, this, "style", null, true);
		public get style(): Style { return this.__style.get(); }
		public set style(newValue: Style) { this.__style.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Title() cannot be invoked directly, please use 'model.documenttemplates.createTitle()'"
				);
			}
		}


		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'toplevels' property
		 * of the parent DocumentTemplate element passed as argument.
		 */
		public static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): Title {
			return internal.instancehelpers.createElement(container, Title, "toplevels", true);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * The new Title will be automatically stored in the 'widget' property
		 * of the parent DropZone element passed as argument.
		 */
		public static createInDropZoneUnderWidget(container: DropZone): Title {
			return internal.instancehelpers.createElement(container, Title, "widget", false);
		}

		/**
		 * Creates and returns a new Title instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): Title {
			return internal.instancehelpers.createElement(model, Title);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((text:texts.Text) => {
				text.translations.replace([ ((translation:texts.Translation) => {
					translation.languageCode = "en_US";
					translation.text = "Title";
					return translation;
				})(texts.Translation.create(this.model)) ]);
				return text;
			})(texts.Text.create(this.model));
			this.style = Style.create(this.model);
		}

	}
}

import {domainmodels} from "./domainmodels";
import {enumerations} from "./enumerations";
import {images} from "./images";
import {microflows} from "./microflows";
import {pages} from "./pages";
import {texts} from "./texts";

import {IModel} from "./base-model";
