/* tslint:disable */

import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;

import {projects} from "./projects";

export namespace navigation {

	export class DeviceType extends internal.IEnum {
		public static Desktop: DeviceType = new DeviceType("Desktop", { });
		public static Tablet: DeviceType = new DeviceType("Tablet", { });
		public static Phone: DeviceType = new DeviceType("Phone", { });
		protected qualifiedTsTypeName: string = "navigation.DeviceType";
	}

	export class ProfileType extends internal.IEnum {
		public static Desktop: ProfileType = new ProfileType("Desktop", { });
		public static Tablet: ProfileType = new ProfileType("Tablet", { });
		public static Phone: ProfileType = new ProfileType("Phone", { });
		public static OfflinePhone: ProfileType = new ProfileType("OfflinePhone", { });
		protected qualifiedTsTypeName: string = "navigation.ProfileType";
	}


	/**
	 * Interfaces and instance classes for types from the Mendix sub meta model `Navigation`.
	 */


	export interface IHomePageBase extends internal.IElement {
		model: IModel;
		containerAsNavigationProfile: INavigationProfile;
		load(): HomePageBase;
		load(callback: (element: HomePageBase) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class HomePageBase extends internal.Element implements IHomePageBase {
		public static typeName: string = "Navigation$HomePageBase";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsNavigationProfile() { return super.getContainerAs<NavigationProfile>(NavigationProfile); }

		private __page: internal.ByNameReferenceProperty<pages.IPage> =
			new internal.ByNameReferenceProperty<pages.IPage>(HomePageBase, this, "page", null, "Pages$Page");
		public get page(): pages.IPage { return this.__page.get(); }
		public set page(newValue: pages.IPage) { this.__page.set(newValue); }
		get pageQualifiedName(): string { return this.__page.qualifiedName(); }
		private __microflow: internal.ByNameReferenceProperty<microflows.IMicroflow> =
			new internal.ByNameReferenceProperty<microflows.IMicroflow>(HomePageBase, this, "microflow", null, "Microflows$Microflow");
		public get microflow(): microflows.IMicroflow { return this.__microflow.get(); }
		public set microflow(newValue: microflows.IMicroflow) { this.__microflow.set(newValue); }
		get microflowQualifiedName(): string { return this.__microflow.qualifiedName(); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new HomePageBase() cannot be invoked directly, please use 'model.navigation.createHomePageBase()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IHomePage extends IHomePageBase {
		model: IModel;
		containerAsNavigationProfile: INavigationProfile;
		load(): HomePage;
		load(callback: (element: HomePage) => void, forceRefresh?: boolean);
	}

	export class HomePage extends HomePageBase implements IHomePage {
		public static typeName: string = "Navigation$HomePage";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsNavigationProfile() { return super.getContainerAs<NavigationProfile>(NavigationProfile); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new HomePage() cannot be invoked directly, please use 'model.navigation.createHomePage()'"
				);
			}
		}

		/**
		 * Creates and returns a new HomePage instance in the SDK and on the server.
		 * The new HomePage will be automatically stored in the 'homePage' property
		 * of the parent NavigationProfile element passed as argument.
		 */
		public static createIn(container: NavigationProfile): HomePage {
			return internal.instancehelpers.createElement(container, HomePage, "homePage", false);
		}

		/**
		 * Creates and returns a new HomePage instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): HomePage {
			return internal.instancehelpers.createElement(model, HomePage);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/navigation relevant section in reference guide}
	 */
	export interface INavigationDocument extends projects.IProjectDocument {
		model: IModel;
		containerAsProject: projects.IProject;
		load(): NavigationDocument;
		load(callback: (element: NavigationDocument) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/navigation relevant section in reference guide}
	 */
	export class NavigationDocument extends projects.ProjectDocument implements INavigationDocument {
		public static typeName: string = "Navigation$NavigationDocument";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"phoneProfile" : {
					"required" : {
						"currentValue" : true
					}
				},
				"tabletProfile" : {
					"required" : {
						"currentValue" : true
					}
				},
				"desktopProfile" : {
					"required" : {
						"currentValue" : true
					}
				},
				"offlinePhoneProfile" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsProject() { return super.getContainerAs<projects.Project>(projects.Project); }

		private __phoneProfile: internal.PartProperty<NavigationProfile> =
			new internal.PartProperty<NavigationProfile>(NavigationDocument, this, "phoneProfile", null, true);
		public get phoneProfile(): NavigationProfile { return this.__phoneProfile.get(); }
		public set phoneProfile(newValue: NavigationProfile) { this.__phoneProfile.set(newValue); }
		private __tabletProfile: internal.PartProperty<NavigationProfile> =
			new internal.PartProperty<NavigationProfile>(NavigationDocument, this, "tabletProfile", null, true);
		public get tabletProfile(): NavigationProfile { return this.__tabletProfile.get(); }
		public set tabletProfile(newValue: NavigationProfile) { this.__tabletProfile.set(newValue); }
		private __desktopProfile: internal.PartProperty<NavigationProfile> =
			new internal.PartProperty<NavigationProfile>(NavigationDocument, this, "desktopProfile", null, true);
		public get desktopProfile(): NavigationProfile { return this.__desktopProfile.get(); }
		public set desktopProfile(newValue: NavigationProfile) { this.__desktopProfile.set(newValue); }
		private __offlinePhoneProfile: internal.PartProperty<NavigationProfile> =
			new internal.PartProperty<NavigationProfile>(NavigationDocument, this, "offlinePhoneProfile", null, true);
		public get offlinePhoneProfile(): NavigationProfile { return this.__offlinePhoneProfile.get(); }
		public set offlinePhoneProfile(newValue: NavigationProfile) { this.__offlinePhoneProfile.set(newValue); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IProject) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "projectDocuments";
		}

		/**
		 * Creates a new NavigationDocument unit in the SDK and on the server.
		 * Expects one argument, the projects.IProject in which this unit is contained.
		 */
		public static createIn(container: projects.IProject): NavigationDocument {
			return internal.instancehelpers.createUnit(container, NavigationDocument);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.desktopProfile = NavigationProfile.create(this.model);
			this.offlinePhoneProfile = NavigationProfile.create(this.model);
			this.phoneProfile = NavigationProfile.create(this.model);
			this.tabletProfile = NavigationProfile.create(this.model);
		}

	}

	export interface INavigationProfile extends internal.IElement {
		model: IModel;
		containerAsNavigationDocument: INavigationDocument;
		load(): NavigationProfile;
		load(callback: (element: NavigationProfile) => void, forceRefresh?: boolean);
	}

	export class NavigationProfile extends internal.Element implements INavigationProfile {
		public static typeName: string = "Navigation$NavigationProfile";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"enabled" : { },
				"homePage" : {
					"required" : {
						"currentValue" : true
					}
				},
				"applicationTitle" : { },
				"menuItemCollection" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsNavigationDocument() { return super.getContainerAs<NavigationDocument>(NavigationDocument); }

		private __enabled: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(NavigationProfile, this, "enabled", false, internal.PrimitiveTypeEnum.Boolean);
		public get enabled(): boolean { return this.__enabled.get(); }
		public set enabled(newValue: boolean) { this.__enabled.set(newValue); }
		private __homePage: internal.PartProperty<HomePage> =
			new internal.PartProperty<HomePage>(NavigationProfile, this, "homePage", null, true);
		public get homePage(): HomePage { return this.__homePage.get(); }
		public set homePage(newValue: HomePage) { this.__homePage.set(newValue); }
		private __roleBasedHomePages: internal.PartListProperty<RoleBasedHomePage> =
			new internal.PartListProperty<RoleBasedHomePage>(NavigationProfile, this, "roleBasedHomePages", []);
		public get roleBasedHomePages(): internal.IList<RoleBasedHomePage> { return this.__roleBasedHomePages.get(); }
		public set roleBasedHomePages(newValue: internal.IList<RoleBasedHomePage>) { this.__roleBasedHomePages.set(newValue); }
		private __applicationTitle: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(NavigationProfile, this, "applicationTitle", "", internal.PrimitiveTypeEnum.String);
		public get applicationTitle(): string { return this.__applicationTitle.get(); }
		public set applicationTitle(newValue: string) { this.__applicationTitle.set(newValue); }
		private __menuItemCollection: internal.PartProperty<menus.MenuItemCollection> =
			new internal.PartProperty<menus.MenuItemCollection>(NavigationProfile, this, "menuItemCollection", null, true);
		public get menuItemCollection(): menus.MenuItemCollection { return this.__menuItemCollection.get(); }
		public set menuItemCollection(newValue: menus.MenuItemCollection) { this.__menuItemCollection.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new NavigationProfile() cannot be invoked directly, please use 'model.navigation.createNavigationProfile()'"
				);
			}
		}


		/**
		 * Creates and returns a new NavigationProfile instance in the SDK and on the server.
		 * The new NavigationProfile will be automatically stored in the 'desktopProfile' property
		 * of the parent NavigationDocument element passed as argument.
		 */
		public static createInNavigationDocumentUnderDesktopProfile(container: NavigationDocument): NavigationProfile {
			return internal.instancehelpers.createElement(container, NavigationProfile, "desktopProfile", false);
		}

		/**
		 * Creates and returns a new NavigationProfile instance in the SDK and on the server.
		 * The new NavigationProfile will be automatically stored in the 'offlinePhoneProfile' property
		 * of the parent NavigationDocument element passed as argument.
		 */
		public static createInNavigationDocumentUnderOfflinePhoneProfile(container: NavigationDocument): NavigationProfile {
			return internal.instancehelpers.createElement(container, NavigationProfile, "offlinePhoneProfile", false);
		}

		/**
		 * Creates and returns a new NavigationProfile instance in the SDK and on the server.
		 * The new NavigationProfile will be automatically stored in the 'phoneProfile' property
		 * of the parent NavigationDocument element passed as argument.
		 */
		public static createInNavigationDocumentUnderPhoneProfile(container: NavigationDocument): NavigationProfile {
			return internal.instancehelpers.createElement(container, NavigationProfile, "phoneProfile", false);
		}

		/**
		 * Creates and returns a new NavigationProfile instance in the SDK and on the server.
		 * The new NavigationProfile will be automatically stored in the 'tabletProfile' property
		 * of the parent NavigationDocument element passed as argument.
		 */
		public static createInNavigationDocumentUnderTabletProfile(container: NavigationDocument): NavigationProfile {
			return internal.instancehelpers.createElement(container, NavigationProfile, "tabletProfile", false);
		}

		/**
		 * Creates and returns a new NavigationProfile instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): NavigationProfile {
			return internal.instancehelpers.createElement(model, NavigationProfile);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.applicationTitle = (() => {
				if (internal.isNotBefore("[6.9.0]", this.model)) {
					return "Mendix";
				}
				return "Mendix 5";
			})();
			this.enabled = (() => {
				if (internal.isNotBefore("[6.9.0]", this.model)) {
					return false;
				}
				return true;
			})();
			this.homePage = HomePage.create(this.model);
			this.menuItemCollection = menus.MenuItemCollection.create(this.model);
		}

	}

	export interface IRoleBasedHomePage extends IHomePageBase {
		model: IModel;
		containerAsNavigationProfile: INavigationProfile;
		load(): RoleBasedHomePage;
		load(callback: (element: RoleBasedHomePage) => void, forceRefresh?: boolean);
	}

	export class RoleBasedHomePage extends HomePageBase implements IRoleBasedHomePage {
		public static typeName: string = "Navigation$RoleBasedHomePage";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsNavigationProfile() { return super.getContainerAs<NavigationProfile>(NavigationProfile); }

		private __userRole: internal.ByNameReferenceProperty<security.IUserRole> =
			new internal.ByNameReferenceProperty<security.IUserRole>(RoleBasedHomePage, this, "userRole", null, "Security$UserRole");
		public get userRole(): security.IUserRole { return this.__userRole.get(); }
		public set userRole(newValue: security.IUserRole) { this.__userRole.set(newValue); }
		get userRoleQualifiedName(): string { return this.__userRole.qualifiedName(); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new RoleBasedHomePage() cannot be invoked directly, please use 'model.navigation.createRoleBasedHomePage()'"
				);
			}
		}

		/**
		 * Creates and returns a new RoleBasedHomePage instance in the SDK and on the server.
		 * The new RoleBasedHomePage will be automatically stored in the 'roleBasedHomePages' property
		 * of the parent NavigationProfile element passed as argument.
		 */
		public static createIn(container: NavigationProfile): RoleBasedHomePage {
			return internal.instancehelpers.createElement(container, RoleBasedHomePage, "roleBasedHomePages", true);
		}

		/**
		 * Creates and returns a new RoleBasedHomePage instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): RoleBasedHomePage {
			return internal.instancehelpers.createElement(model, RoleBasedHomePage);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}
}

import {menus} from "./menus";
import {microflows} from "./microflows";
import {pages} from "./pages";
import {security} from "./security";

import {IModel} from "./base-model";
