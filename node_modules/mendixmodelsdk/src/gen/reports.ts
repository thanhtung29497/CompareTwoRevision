/* tslint:disable */

import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;

import {pages} from "./pages";

export namespace reports {

	export class AggregateFunctionEnum extends internal.IEnum {
		public static Sum: AggregateFunctionEnum = new AggregateFunctionEnum("Sum", { });
		public static Average: AggregateFunctionEnum = new AggregateFunctionEnum("Average", { });
		public static Count: AggregateFunctionEnum = new AggregateFunctionEnum("Count", { });
		public static Minimum: AggregateFunctionEnum = new AggregateFunctionEnum("Minimum", { });
		public static Maximum: AggregateFunctionEnum = new AggregateFunctionEnum("Maximum", { });
		protected qualifiedTsTypeName: string = "reports.AggregateFunctionEnum";
	}

	export class AspectRatio extends internal.IEnum {
		public static SixteenToNine: AspectRatio = new AspectRatio("SixteenToNine", { });
		public static ThreeToTwo: AspectRatio = new AspectRatio("ThreeToTwo", { });
		public static FourToThree: AspectRatio = new AspectRatio("FourToThree", { });
		public static OneToOne: AspectRatio = new AspectRatio("OneToOne", { });
		public static ThreeToFour: AspectRatio = new AspectRatio("ThreeToFour", { });
		public static TwoToThree: AspectRatio = new AspectRatio("TwoToThree", { });
		public static NineToSixteen: AspectRatio = new AspectRatio("NineToSixteen", { });
		protected qualifiedTsTypeName: string = "reports.AspectRatio";
	}

	export class ChartType extends internal.IEnum {
		public static VerticalBars: ChartType = new ChartType("VerticalBars", { });
		public static VerticalBars3D: ChartType = new ChartType("VerticalBars3D", { });
		public static HorizontalBars: ChartType = new ChartType("HorizontalBars", { });
		public static Lines: ChartType = new ChartType("Lines", { });
		public static Area: ChartType = new ChartType("Area", { });
		protected qualifiedTsTypeName: string = "reports.ChartType";
	}

	export class ColumnFormat extends internal.IEnum {
		public static Default: ColumnFormat = new ColumnFormat("Default", { });
		public static MonthName: ColumnFormat = new ColumnFormat("MonthName", { });
		public static WeekdayName: ColumnFormat = new ColumnFormat("WeekdayName", { });
		protected qualifiedTsTypeName: string = "reports.ColumnFormat";
	}

	export class DateRangeFieldEnum extends internal.IEnum {
		public static Year: DateRangeFieldEnum = new DateRangeFieldEnum("Year", { });
		public static Month: DateRangeFieldEnum = new DateRangeFieldEnum("Month", { });
		public static Week: DateRangeFieldEnum = new DateRangeFieldEnum("Week", { });
		public static Period: DateRangeFieldEnum = new DateRangeFieldEnum("Period", { });
		public static Quarter: DateRangeFieldEnum = new DateRangeFieldEnum("Quarter", { });
		protected qualifiedTsTypeName: string = "reports.DateRangeFieldEnum";
	}


	/**
	 * Interfaces and instance classes for types from the Mendix sub meta model `Reports`.
	 */


	/**
	 * See: {@link https://docs.mendix.com/refguide7/report-widgets relevant section in reference guide}
	 */
	export interface IReportWidget extends pages.IWidget {
		model: IModel;
		containerAsDataView: pages.IDataView;
		containerAsDivContainer: pages.IDivContainer;
		containerAsGroupBox: pages.IGroupBox;
		containerAsHeader: pages.IHeader;
		containerAsLayout: pages.ILayout;
		containerAsLayoutCallArgument: pages.ILayoutCallArgument;
		containerAsLayoutGridColumn: pages.ILayoutGridColumn;
		containerAsListView: pages.IListView;
		containerAsListViewTemplate: pages.IListViewTemplate;
		containerAsNavigationListItem: pages.INavigationListItem;
		containerAsScrollContainerRegion: pages.IScrollContainerRegion;
		containerAsSnippet: pages.ISnippet;
		containerAsSplitPane: pages.ISplitPane;
		containerAsTabPage: pages.ITabPage;
		containerAsTableCell: pages.ITableCell;
		containerAsTemplateGridContents: pages.ITemplateGridContents;
		containerAsVerticalFlow: pages.IVerticalFlow;
		containerAsReportPane: IReportPane;
		load(): ReportWidget;
		load(callback: (element: ReportWidget) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/report-widgets relevant section in reference guide}
	 *
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class ReportWidget extends pages.Widget implements IReportWidget {
		public static typeName: string = "Reports$ReportWidget";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"generateOnLoad" : {
					"introduced" : "6.10.0"
				}
			},
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<pages.DataView>(pages.DataView); }
		get containerAsDivContainer() { return super.getContainerAs<pages.DivContainer>(pages.DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<pages.GroupBox>(pages.GroupBox); }
		get containerAsHeader() { return super.getContainerAs<pages.Header>(pages.Header); }
		get containerAsLayout() { return super.getContainerAs<pages.Layout>(pages.Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<pages.LayoutCallArgument>(pages.LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<pages.LayoutGridColumn>(pages.LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<pages.ListView>(pages.ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<pages.ListViewTemplate>(pages.ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<pages.NavigationListItem>(pages.NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<pages.ScrollContainerRegion>(pages.ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<pages.Snippet>(pages.Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<pages.SplitPane>(pages.SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<pages.TabPage>(pages.TabPage); }
		get containerAsTableCell() { return super.getContainerAs<pages.TableCell>(pages.TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<pages.TemplateGridContents>(pages.TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<pages.VerticalFlow>(pages.VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<ReportPane>(ReportPane); }

		private __dataSet: internal.ByNameReferenceProperty<datasets.IDataSet> =
			new internal.ByNameReferenceProperty<datasets.IDataSet>(ReportWidget, this, "dataSet", null, "DataSets$DataSet");
		public get dataSet(): datasets.IDataSet { return this.__dataSet.get(); }
		public set dataSet(newValue: datasets.IDataSet) { this.__dataSet.set(newValue); }
		get dataSetQualifiedName(): string { return this.__dataSet.qualifiedName(); }
		private __generateOnLoad: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(ReportWidget, this, "generateOnLoad", false, internal.PrimitiveTypeEnum.Boolean);
		/**
		 * In version 6.10.0: introduced
		 */
		public get generateOnLoad(): boolean { return this.__generateOnLoad.get(); }
		public set generateOnLoad(newValue: boolean) { this.__generateOnLoad.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ReportWidget() cannot be invoked directly, please use 'model.reports.createReportWidget()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			if (this.__generateOnLoad.isAvailable) {
				this.generateOnLoad = true;
			}
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/report-grid relevant section in reference guide}
	 */
	export interface IBasicReport extends IReportWidget {
		model: IModel;
		containerAsDataView: pages.IDataView;
		containerAsDivContainer: pages.IDivContainer;
		containerAsGroupBox: pages.IGroupBox;
		containerAsHeader: pages.IHeader;
		containerAsLayout: pages.ILayout;
		containerAsLayoutCallArgument: pages.ILayoutCallArgument;
		containerAsLayoutGridColumn: pages.ILayoutGridColumn;
		containerAsListView: pages.IListView;
		containerAsListViewTemplate: pages.IListViewTemplate;
		containerAsNavigationListItem: pages.INavigationListItem;
		containerAsScrollContainerRegion: pages.IScrollContainerRegion;
		containerAsSnippet: pages.ISnippet;
		containerAsSplitPane: pages.ISplitPane;
		containerAsTabPage: pages.ITabPage;
		containerAsTableCell: pages.ITableCell;
		containerAsTemplateGridContents: pages.ITemplateGridContents;
		containerAsVerticalFlow: pages.IVerticalFlow;
		containerAsReportPane: IReportPane;
		load(): BasicReport;
		load(callback: (element: BasicReport) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/report-grid relevant section in reference guide}
	 */
	export class BasicReport extends ReportWidget implements IBasicReport {
		public static typeName: string = "Reports$BasicReport";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"zoomInfo" : {
					"required" : {
						"currentValue" : true
					}
				}
			},
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<pages.DataView>(pages.DataView); }
		get containerAsDivContainer() { return super.getContainerAs<pages.DivContainer>(pages.DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<pages.GroupBox>(pages.GroupBox); }
		get containerAsHeader() { return super.getContainerAs<pages.Header>(pages.Header); }
		get containerAsLayout() { return super.getContainerAs<pages.Layout>(pages.Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<pages.LayoutCallArgument>(pages.LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<pages.LayoutGridColumn>(pages.LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<pages.ListView>(pages.ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<pages.ListViewTemplate>(pages.ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<pages.NavigationListItem>(pages.NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<pages.ScrollContainerRegion>(pages.ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<pages.Snippet>(pages.Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<pages.SplitPane>(pages.SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<pages.TabPage>(pages.TabPage); }
		get containerAsTableCell() { return super.getContainerAs<pages.TableCell>(pages.TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<pages.TemplateGridContents>(pages.TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<pages.VerticalFlow>(pages.VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<ReportPane>(ReportPane); }

		private __columns: internal.PartListProperty<BasicReportColumn> =
			new internal.PartListProperty<BasicReportColumn>(BasicReport, this, "columns", []);
		public get columns(): internal.IList<BasicReportColumn> { return this.__columns.get(); }
		public set columns(newValue: internal.IList<BasicReportColumn>) { this.__columns.set(newValue); }
		private __aggregates: internal.PartListProperty<BasicReportAggregate> =
			new internal.PartListProperty<BasicReportAggregate>(BasicReport, this, "aggregates", []);
		public get aggregates(): internal.IList<BasicReportAggregate> { return this.__aggregates.get(); }
		public set aggregates(newValue: internal.IList<BasicReportAggregate>) { this.__aggregates.set(newValue); }
		private __showExportButton: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(BasicReport, this, "showExportButton", false, internal.PrimitiveTypeEnum.Boolean);
		public get showExportButton(): boolean { return this.__showExportButton.get(); }
		public set showExportButton(newValue: boolean) { this.__showExportButton.set(newValue); }
		private __zoomInfo: internal.PartProperty<ReportZoomInfo> =
			new internal.PartProperty<ReportZoomInfo>(BasicReport, this, "zoomInfo", null, true);
		public get zoomInfo(): ReportZoomInfo { return this.__zoomInfo.get(); }
		public set zoomInfo(newValue: ReportZoomInfo) { this.__zoomInfo.set(newValue); }
		private __isPagingEnabled: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(BasicReport, this, "isPagingEnabled", false, internal.PrimitiveTypeEnum.Boolean);
		public get isPagingEnabled(): boolean { return this.__isPagingEnabled.get(); }
		public set isPagingEnabled(newValue: boolean) { this.__isPagingEnabled.set(newValue); }
		private __pageSize: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(BasicReport, this, "pageSize", 0, internal.PrimitiveTypeEnum.Integer);
		public get pageSize(): number { return this.__pageSize.get(); }
		public set pageSize(newValue: number) { this.__pageSize.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new BasicReport() cannot be invoked directly, please use 'model.reports.createBasicReport()'"
				);
			}
		}


		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'footerWidget' property
		 * of the parent pages.DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: pages.DataView): BasicReport {
			internal.createInVersionCheck(container.model, BasicReport.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, BasicReport, "footerWidget", false);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'widget' property
		 * of the parent pages.DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: pages.DataView): BasicReport {
			return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'widget' property
		 * of the parent pages.DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: pages.DivContainer): BasicReport {
			return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'widget' property
		 * of the parent pages.GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: pages.GroupBox): BasicReport {
			return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'leftWidget' property
		 * of the parent pages.Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: pages.Header): BasicReport {
			return internal.instancehelpers.createElement(container, BasicReport, "leftWidget", false);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'rightWidget' property
		 * of the parent pages.Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: pages.Header): BasicReport {
			return internal.instancehelpers.createElement(container, BasicReport, "rightWidget", false);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'widget' property
		 * of the parent pages.Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: pages.Layout): BasicReport {
			return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'widget' property
		 * of the parent pages.LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: pages.LayoutCallArgument): BasicReport {
			return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'widget' property
		 * of the parent pages.LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: pages.LayoutGridColumn): BasicReport {
			return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'widget' property
		 * of the parent pages.ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: pages.ListView): BasicReport {
			return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'widget' property
		 * of the parent pages.ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: pages.ListViewTemplate): BasicReport {
			return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'widget' property
		 * of the parent pages.NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: pages.NavigationListItem): BasicReport {
			return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'widget' property
		 * of the parent pages.ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: pages.ScrollContainerRegion): BasicReport {
			return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'widget' property
		 * of the parent pages.Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: pages.Snippet): BasicReport {
			return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'firstWidget' property
		 * of the parent pages.SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: pages.SplitPane): BasicReport {
			return internal.instancehelpers.createElement(container, BasicReport, "firstWidget", false);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'secondWidget' property
		 * of the parent pages.SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: pages.SplitPane): BasicReport {
			return internal.instancehelpers.createElement(container, BasicReport, "secondWidget", false);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'widget' property
		 * of the parent pages.TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: pages.TabPage): BasicReport {
			return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'widget' property
		 * of the parent pages.TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: pages.TableCell): BasicReport {
			return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'widget' property
		 * of the parent pages.TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: pages.TemplateGridContents): BasicReport {
			return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'widgets' property
		 * of the parent pages.VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: pages.VerticalFlow): BasicReport {
			return internal.instancehelpers.createElement(container, BasicReport, "widgets", true);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'parameterWidget' property
		 * of the parent ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: ReportPane): BasicReport {
			internal.createInVersionCheck(container.model, BasicReport.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, BasicReport, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * The new BasicReport will be automatically stored in the 'reportWidget' property
		 * of the parent ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: ReportPane): BasicReport {
			internal.createInVersionCheck(container.model, BasicReport.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, BasicReport, "reportWidget", false);
		}

		/**
		 * Creates and returns a new BasicReport instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): BasicReport {
			return internal.instancehelpers.createElement(model, BasicReport);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.columns.replace([ ((basicReportColumn:BasicReportColumn) => {
				basicReportColumn.caption = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Column 1";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return basicReportColumn;
			})(BasicReportColumn.create(this.model)), ((basicReportColumn:BasicReportColumn) => {
				basicReportColumn.caption = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Column 2";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return basicReportColumn;
			})(BasicReportColumn.create(this.model)), ((basicReportColumn:BasicReportColumn) => {
				basicReportColumn.caption = ((text:texts.Text) => {
					text.translations.replace([ ((translation:texts.Translation) => {
						translation.languageCode = "en_US";
						translation.text = "Column 3";
						return translation;
					})(texts.Translation.create(this.model)) ]);
					return text;
				})(texts.Text.create(this.model));
				return basicReportColumn;
			})(BasicReportColumn.create(this.model)) ]);
			this.pageSize = 20;
			this.zoomInfo = ReportZoomInfo.create(this.model);
		}

	}

	export interface IBasicReportAggregate extends internal.IElement {
		model: IModel;
		containerAsBasicReport: IBasicReport;
		load(): BasicReportAggregate;
		load(callback: (element: BasicReportAggregate) => void, forceRefresh?: boolean);
	}

	export class BasicReportAggregate extends internal.Element implements IBasicReportAggregate {
		public static typeName: string = "Reports$BasicReportAggregate";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"caption" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsBasicReport() { return super.getContainerAs<BasicReport>(BasicReport); }

		private __caption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(BasicReportAggregate, this, "caption", null, true);
		public get caption(): texts.Text { return this.__caption.get(); }
		public set caption(newValue: texts.Text) { this.__caption.set(newValue); }
		private __aggregateFunction: internal.EnumProperty<AggregateFunctionEnum> =
			new internal.EnumProperty<AggregateFunctionEnum>(BasicReportAggregate, this, "aggregateFunction", AggregateFunctionEnum.Sum, AggregateFunctionEnum);
		public get aggregateFunction(): AggregateFunctionEnum { return this.__aggregateFunction.get(); }
		public set aggregateFunction(newValue: AggregateFunctionEnum) { this.__aggregateFunction.set(newValue); }
		private __applicablePerColumn: internal.PrimitiveListProperty<boolean> =
			new internal.PrimitiveListProperty<boolean>(BasicReportAggregate, this, "applicablePerColumn", [], internal.PrimitiveTypeEnum.Boolean);
		public get applicablePerColumn(): internal.IList<boolean> { return this.__applicablePerColumn.get(); }
		public set applicablePerColumn(newValue: internal.IList<boolean>) { this.__applicablePerColumn.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new BasicReportAggregate() cannot be invoked directly, please use 'model.reports.createBasicReportAggregate()'"
				);
			}
		}

		/**
		 * Creates and returns a new BasicReportAggregate instance in the SDK and on the server.
		 * The new BasicReportAggregate will be automatically stored in the 'aggregates' property
		 * of the parent BasicReport element passed as argument.
		 */
		public static createIn(container: BasicReport): BasicReportAggregate {
			return internal.instancehelpers.createElement(container, BasicReportAggregate, "aggregates", true);
		}

		/**
		 * Creates and returns a new BasicReportAggregate instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): BasicReportAggregate {
			return internal.instancehelpers.createElement(model, BasicReportAggregate);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.aggregateFunction = AggregateFunctionEnum.Sum;
			this.caption = texts.Text.create(this.model);
		}

	}

	export interface IBasicReportColumn extends internal.IElement {
		model: IModel;
		containerAsBasicReport: IBasicReport;
		load(): BasicReportColumn;
		load(callback: (element: BasicReportColumn) => void, forceRefresh?: boolean);
	}

	export class BasicReportColumn extends internal.Element implements IBasicReportColumn {
		public static typeName: string = "Reports$BasicReportColumn";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"caption" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsBasicReport() { return super.getContainerAs<BasicReport>(BasicReport); }

		private __caption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(BasicReportColumn, this, "caption", null, true);
		public get caption(): texts.Text { return this.__caption.get(); }
		public set caption(newValue: texts.Text) { this.__caption.set(newValue); }
		private __dataSetColumnName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(BasicReportColumn, this, "dataSetColumnName", "", internal.PrimitiveTypeEnum.String);
		public get dataSetColumnName(): string { return this.__dataSetColumnName.get(); }
		public set dataSetColumnName(newValue: string) { this.__dataSetColumnName.set(newValue); }
		private __width: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(BasicReportColumn, this, "width", 0, internal.PrimitiveTypeEnum.Integer);
		public get width(): number { return this.__width.get(); }
		public set width(newValue: number) { this.__width.set(newValue); }
		private __alignment: internal.EnumProperty<pages.AlignmentEnum> =
			new internal.EnumProperty<pages.AlignmentEnum>(BasicReportColumn, this, "alignment", pages.AlignmentEnum.Left, pages.AlignmentEnum);
		public get alignment(): pages.AlignmentEnum { return this.__alignment.get(); }
		public set alignment(newValue: pages.AlignmentEnum) { this.__alignment.set(newValue); }
		private __format: internal.EnumProperty<ColumnFormat> =
			new internal.EnumProperty<ColumnFormat>(BasicReportColumn, this, "format", ColumnFormat.Default, ColumnFormat);
		public get format(): ColumnFormat { return this.__format.get(); }
		public set format(newValue: ColumnFormat) { this.__format.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new BasicReportColumn() cannot be invoked directly, please use 'model.reports.createBasicReportColumn()'"
				);
			}
		}

		/**
		 * Creates and returns a new BasicReportColumn instance in the SDK and on the server.
		 * The new BasicReportColumn will be automatically stored in the 'columns' property
		 * of the parent BasicReport element passed as argument.
		 */
		public static createIn(container: BasicReport): BasicReportColumn {
			return internal.instancehelpers.createElement(container, BasicReportColumn, "columns", true);
		}

		/**
		 * Creates and returns a new BasicReportColumn instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): BasicReportColumn {
			return internal.instancehelpers.createElement(model, BasicReportColumn);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.alignment = pages.AlignmentEnum.Left;
			this.caption = texts.Text.create(this.model);
			this.format = ColumnFormat.Default;
			this.width = 1;
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/report-button relevant section in reference guide}
	 */
	export interface IReportButton extends pages.IWidget {
		model: IModel;
		containerAsDataView: pages.IDataView;
		containerAsDivContainer: pages.IDivContainer;
		containerAsGroupBox: pages.IGroupBox;
		containerAsHeader: pages.IHeader;
		containerAsLayout: pages.ILayout;
		containerAsLayoutCallArgument: pages.ILayoutCallArgument;
		containerAsLayoutGridColumn: pages.ILayoutGridColumn;
		containerAsListView: pages.IListView;
		containerAsListViewTemplate: pages.IListViewTemplate;
		containerAsNavigationListItem: pages.INavigationListItem;
		containerAsScrollContainerRegion: pages.IScrollContainerRegion;
		containerAsSnippet: pages.ISnippet;
		containerAsSplitPane: pages.ISplitPane;
		containerAsTabPage: pages.ITabPage;
		containerAsTableCell: pages.ITableCell;
		containerAsTemplateGridContents: pages.ITemplateGridContents;
		containerAsVerticalFlow: pages.IVerticalFlow;
		containerAsReportPane: IReportPane;
		load(): ReportButton;
		load(callback: (element: ReportButton) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/report-button relevant section in reference guide}
	 */
	export class ReportButton extends pages.Widget implements IReportButton {
		public static typeName: string = "Reports$ReportButton";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"caption" : {
					"required" : {
						"currentValue" : true
					}
				}
			},
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<pages.DataView>(pages.DataView); }
		get containerAsDivContainer() { return super.getContainerAs<pages.DivContainer>(pages.DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<pages.GroupBox>(pages.GroupBox); }
		get containerAsHeader() { return super.getContainerAs<pages.Header>(pages.Header); }
		get containerAsLayout() { return super.getContainerAs<pages.Layout>(pages.Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<pages.LayoutCallArgument>(pages.LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<pages.LayoutGridColumn>(pages.LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<pages.ListView>(pages.ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<pages.ListViewTemplate>(pages.ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<pages.NavigationListItem>(pages.NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<pages.ScrollContainerRegion>(pages.ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<pages.Snippet>(pages.Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<pages.SplitPane>(pages.SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<pages.TabPage>(pages.TabPage); }
		get containerAsTableCell() { return super.getContainerAs<pages.TableCell>(pages.TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<pages.TemplateGridContents>(pages.TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<pages.VerticalFlow>(pages.VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<ReportPane>(ReportPane); }

		private __caption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(ReportButton, this, "caption", null, true);
		public get caption(): texts.Text { return this.__caption.get(); }
		public set caption(newValue: texts.Text) { this.__caption.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ReportButton() cannot be invoked directly, please use 'model.reports.createReportButton()'"
				);
			}
		}


		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'footerWidget' property
		 * of the parent pages.DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: pages.DataView): ReportButton {
			internal.createInVersionCheck(container.model, ReportButton.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, ReportButton, "footerWidget", false);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'widget' property
		 * of the parent pages.DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: pages.DataView): ReportButton {
			return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'widget' property
		 * of the parent pages.DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: pages.DivContainer): ReportButton {
			return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'widget' property
		 * of the parent pages.GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: pages.GroupBox): ReportButton {
			return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'leftWidget' property
		 * of the parent pages.Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: pages.Header): ReportButton {
			return internal.instancehelpers.createElement(container, ReportButton, "leftWidget", false);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'rightWidget' property
		 * of the parent pages.Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: pages.Header): ReportButton {
			return internal.instancehelpers.createElement(container, ReportButton, "rightWidget", false);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'widget' property
		 * of the parent pages.Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: pages.Layout): ReportButton {
			return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'widget' property
		 * of the parent pages.LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: pages.LayoutCallArgument): ReportButton {
			return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'widget' property
		 * of the parent pages.LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: pages.LayoutGridColumn): ReportButton {
			return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'widget' property
		 * of the parent pages.ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: pages.ListView): ReportButton {
			return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'widget' property
		 * of the parent pages.ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: pages.ListViewTemplate): ReportButton {
			return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'widget' property
		 * of the parent pages.NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: pages.NavigationListItem): ReportButton {
			return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'widget' property
		 * of the parent pages.ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: pages.ScrollContainerRegion): ReportButton {
			return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'widget' property
		 * of the parent pages.Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: pages.Snippet): ReportButton {
			return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'firstWidget' property
		 * of the parent pages.SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: pages.SplitPane): ReportButton {
			return internal.instancehelpers.createElement(container, ReportButton, "firstWidget", false);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'secondWidget' property
		 * of the parent pages.SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: pages.SplitPane): ReportButton {
			return internal.instancehelpers.createElement(container, ReportButton, "secondWidget", false);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'widget' property
		 * of the parent pages.TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: pages.TabPage): ReportButton {
			return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'widget' property
		 * of the parent pages.TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: pages.TableCell): ReportButton {
			return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'widget' property
		 * of the parent pages.TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: pages.TemplateGridContents): ReportButton {
			return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'widgets' property
		 * of the parent pages.VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: pages.VerticalFlow): ReportButton {
			return internal.instancehelpers.createElement(container, ReportButton, "widgets", true);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'parameterWidget' property
		 * of the parent ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: ReportPane): ReportButton {
			internal.createInVersionCheck(container.model, ReportButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportButton, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * The new ReportButton will be automatically stored in the 'reportWidget' property
		 * of the parent ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: ReportPane): ReportButton {
			internal.createInVersionCheck(container.model, ReportButton.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportButton, "reportWidget", false);
		}

		/**
		 * Creates and returns a new ReportButton instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ReportButton {
			return internal.instancehelpers.createElement(model, ReportButton);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = ((text:texts.Text) => {
				text.translations.replace([ ((translation:texts.Translation) => {
					translation.languageCode = "en_US";
					translation.text = "Generate report";
					return translation;
				})(texts.Translation.create(this.model)) ]);
				return text;
			})(texts.Text.create(this.model));
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/report-chart relevant section in reference guide}
	 */
	export interface IReportChart extends IReportWidget {
		model: IModel;
		containerAsDataView: pages.IDataView;
		containerAsDivContainer: pages.IDivContainer;
		containerAsGroupBox: pages.IGroupBox;
		containerAsHeader: pages.IHeader;
		containerAsLayout: pages.ILayout;
		containerAsLayoutCallArgument: pages.ILayoutCallArgument;
		containerAsLayoutGridColumn: pages.ILayoutGridColumn;
		containerAsListView: pages.IListView;
		containerAsListViewTemplate: pages.IListViewTemplate;
		containerAsNavigationListItem: pages.INavigationListItem;
		containerAsScrollContainerRegion: pages.IScrollContainerRegion;
		containerAsSnippet: pages.ISnippet;
		containerAsSplitPane: pages.ISplitPane;
		containerAsTabPage: pages.ITabPage;
		containerAsTableCell: pages.ITableCell;
		containerAsTemplateGridContents: pages.ITemplateGridContents;
		containerAsVerticalFlow: pages.IVerticalFlow;
		containerAsReportPane: IReportPane;
		load(): ReportChart;
		load(callback: (element: ReportChart) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/report-chart relevant section in reference guide}
	 */
	export class ReportChart extends ReportWidget implements IReportChart {
		public static typeName: string = "Reports$ReportChart";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"xAxisCaption" : {
					"required" : {
						"currentValue" : true
					}
				},
				"yAxisCaption" : {
					"required" : {
						"currentValue" : true
					}
				}
			},
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<pages.DataView>(pages.DataView); }
		get containerAsDivContainer() { return super.getContainerAs<pages.DivContainer>(pages.DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<pages.GroupBox>(pages.GroupBox); }
		get containerAsHeader() { return super.getContainerAs<pages.Header>(pages.Header); }
		get containerAsLayout() { return super.getContainerAs<pages.Layout>(pages.Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<pages.LayoutCallArgument>(pages.LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<pages.LayoutGridColumn>(pages.LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<pages.ListView>(pages.ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<pages.ListViewTemplate>(pages.ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<pages.NavigationListItem>(pages.NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<pages.ScrollContainerRegion>(pages.ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<pages.Snippet>(pages.Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<pages.SplitPane>(pages.SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<pages.TabPage>(pages.TabPage); }
		get containerAsTableCell() { return super.getContainerAs<pages.TableCell>(pages.TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<pages.TemplateGridContents>(pages.TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<pages.VerticalFlow>(pages.VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<ReportPane>(ReportPane); }

		private __type: internal.EnumProperty<ChartType> =
			new internal.EnumProperty<ChartType>(ReportChart, this, "type", ChartType.VerticalBars, ChartType);
		public get type(): ChartType { return this.__type.get(); }
		public set type(newValue: ChartType) { this.__type.set(newValue); }
		private __seriess: internal.PartListProperty<ReportChartSeries> =
			new internal.PartListProperty<ReportChartSeries>(ReportChart, this, "seriess", []);
		public get seriess(): internal.IList<ReportChartSeries> { return this.__seriess.get(); }
		public set seriess(newValue: internal.IList<ReportChartSeries>) { this.__seriess.set(newValue); }
		private __xAxisCaption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(ReportChart, this, "xAxisCaption", null, true);
		public get xAxisCaption(): texts.Text { return this.__xAxisCaption.get(); }
		public set xAxisCaption(newValue: texts.Text) { this.__xAxisCaption.set(newValue); }
		private __yAxisCaption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(ReportChart, this, "yAxisCaption", null, true);
		public get yAxisCaption(): texts.Text { return this.__yAxisCaption.get(); }
		public set yAxisCaption(newValue: texts.Text) { this.__yAxisCaption.set(newValue); }
		private __xAxisColumn: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ReportChart, this, "xAxisColumn", "", internal.PrimitiveTypeEnum.String);
		public get xAxisColumn(): string { return this.__xAxisColumn.get(); }
		public set xAxisColumn(newValue: string) { this.__xAxisColumn.set(newValue); }
		private __xAxisFormat: internal.EnumProperty<ColumnFormat> =
			new internal.EnumProperty<ColumnFormat>(ReportChart, this, "xAxisFormat", ColumnFormat.Default, ColumnFormat);
		public get xAxisFormat(): ColumnFormat { return this.__xAxisFormat.get(); }
		public set xAxisFormat(newValue: ColumnFormat) { this.__xAxisFormat.set(newValue); }
		private __yAxisPrecision: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(ReportChart, this, "yAxisPrecision", 0, internal.PrimitiveTypeEnum.Integer);
		public get yAxisPrecision(): number { return this.__yAxisPrecision.get(); }
		public set yAxisPrecision(newValue: number) { this.__yAxisPrecision.set(newValue); }
		private __yAxisUseMinMax: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(ReportChart, this, "yAxisUseMinMax", false, internal.PrimitiveTypeEnum.Boolean);
		public get yAxisUseMinMax(): boolean { return this.__yAxisUseMinMax.get(); }
		public set yAxisUseMinMax(newValue: boolean) { this.__yAxisUseMinMax.set(newValue); }
		private __yAxisMinimum: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(ReportChart, this, "yAxisMinimum", 0, internal.PrimitiveTypeEnum.Double);
		public get yAxisMinimum(): number { return this.__yAxisMinimum.get(); }
		public set yAxisMinimum(newValue: number) { this.__yAxisMinimum.set(newValue); }
		private __yAxisMaximum: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(ReportChart, this, "yAxisMaximum", 0, internal.PrimitiveTypeEnum.Double);
		public get yAxisMaximum(): number { return this.__yAxisMaximum.get(); }
		public set yAxisMaximum(newValue: number) { this.__yAxisMaximum.set(newValue); }
		private __aspectRatio: internal.EnumProperty<AspectRatio> =
			new internal.EnumProperty<AspectRatio>(ReportChart, this, "aspectRatio", AspectRatio.FourToThree, AspectRatio);
		public get aspectRatio(): AspectRatio { return this.__aspectRatio.get(); }
		public set aspectRatio(newValue: AspectRatio) { this.__aspectRatio.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ReportChart() cannot be invoked directly, please use 'model.reports.createReportChart()'"
				);
			}
		}


		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'footerWidget' property
		 * of the parent pages.DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: pages.DataView): ReportChart {
			internal.createInVersionCheck(container.model, ReportChart.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, ReportChart, "footerWidget", false);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'widget' property
		 * of the parent pages.DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: pages.DataView): ReportChart {
			return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'widget' property
		 * of the parent pages.DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: pages.DivContainer): ReportChart {
			return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'widget' property
		 * of the parent pages.GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: pages.GroupBox): ReportChart {
			return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'leftWidget' property
		 * of the parent pages.Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: pages.Header): ReportChart {
			return internal.instancehelpers.createElement(container, ReportChart, "leftWidget", false);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'rightWidget' property
		 * of the parent pages.Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: pages.Header): ReportChart {
			return internal.instancehelpers.createElement(container, ReportChart, "rightWidget", false);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'widget' property
		 * of the parent pages.Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: pages.Layout): ReportChart {
			return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'widget' property
		 * of the parent pages.LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: pages.LayoutCallArgument): ReportChart {
			return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'widget' property
		 * of the parent pages.LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: pages.LayoutGridColumn): ReportChart {
			return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'widget' property
		 * of the parent pages.ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: pages.ListView): ReportChart {
			return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'widget' property
		 * of the parent pages.ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: pages.ListViewTemplate): ReportChart {
			return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'widget' property
		 * of the parent pages.NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: pages.NavigationListItem): ReportChart {
			return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'widget' property
		 * of the parent pages.ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: pages.ScrollContainerRegion): ReportChart {
			return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'widget' property
		 * of the parent pages.Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: pages.Snippet): ReportChart {
			return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'firstWidget' property
		 * of the parent pages.SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: pages.SplitPane): ReportChart {
			return internal.instancehelpers.createElement(container, ReportChart, "firstWidget", false);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'secondWidget' property
		 * of the parent pages.SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: pages.SplitPane): ReportChart {
			return internal.instancehelpers.createElement(container, ReportChart, "secondWidget", false);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'widget' property
		 * of the parent pages.TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: pages.TabPage): ReportChart {
			return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'widget' property
		 * of the parent pages.TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: pages.TableCell): ReportChart {
			return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'widget' property
		 * of the parent pages.TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: pages.TemplateGridContents): ReportChart {
			return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'widgets' property
		 * of the parent pages.VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: pages.VerticalFlow): ReportChart {
			return internal.instancehelpers.createElement(container, ReportChart, "widgets", true);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'parameterWidget' property
		 * of the parent ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: ReportPane): ReportChart {
			internal.createInVersionCheck(container.model, ReportChart.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportChart, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * The new ReportChart will be automatically stored in the 'reportWidget' property
		 * of the parent ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: ReportPane): ReportChart {
			internal.createInVersionCheck(container.model, ReportChart.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportChart, "reportWidget", false);
		}

		/**
		 * Creates and returns a new ReportChart instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ReportChart {
			return internal.instancehelpers.createElement(model, ReportChart);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.aspectRatio = AspectRatio.FourToThree;
			this.type = ChartType.VerticalBars;
			this.xAxisCaption = ((text:texts.Text) => {
				text.translations.replace([ ((translation:texts.Translation) => {
					translation.languageCode = "en_US";
					translation.text = "X-axis caption";
					return translation;
				})(texts.Translation.create(this.model)) ]);
				return text;
			})(texts.Text.create(this.model));
			this.xAxisFormat = ColumnFormat.Default;
			this.yAxisCaption = ((text:texts.Text) => {
				text.translations.replace([ ((translation:texts.Translation) => {
					translation.languageCode = "en_US";
					translation.text = "Y-axis caption";
					return translation;
				})(texts.Translation.create(this.model)) ]);
				return text;
			})(texts.Text.create(this.model));
			this.yAxisPrecision = 2;
		}

	}

	export interface IReportChartSeries extends internal.IElement {
		model: IModel;
		containerAsReportChart: IReportChart;
		load(): ReportChartSeries;
		load(callback: (element: ReportChartSeries) => void, forceRefresh?: boolean);
	}

	export class ReportChartSeries extends internal.Element implements IReportChartSeries {
		public static typeName: string = "Reports$ReportChartSeries";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"caption" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsReportChart() { return super.getContainerAs<ReportChart>(ReportChart); }

		private __caption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(ReportChartSeries, this, "caption", null, true);
		public get caption(): texts.Text { return this.__caption.get(); }
		public set caption(newValue: texts.Text) { this.__caption.set(newValue); }
		private __dataSetColumn: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ReportChartSeries, this, "dataSetColumn", "", internal.PrimitiveTypeEnum.String);
		public get dataSetColumn(): string { return this.__dataSetColumn.get(); }
		public set dataSetColumn(newValue: string) { this.__dataSetColumn.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ReportChartSeries() cannot be invoked directly, please use 'model.reports.createReportChartSeries()'"
				);
			}
		}

		/**
		 * Creates and returns a new ReportChartSeries instance in the SDK and on the server.
		 * The new ReportChartSeries will be automatically stored in the 'seriess' property
		 * of the parent ReportChart element passed as argument.
		 */
		public static createIn(container: ReportChart): ReportChartSeries {
			return internal.instancehelpers.createElement(container, ReportChartSeries, "seriess", true);
		}

		/**
		 * Creates and returns a new ReportChartSeries instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ReportChartSeries {
			return internal.instancehelpers.createElement(model, ReportChartSeries);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = texts.Text.create(this.model);
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/date-range-field relevant section in reference guide}
	 */
	export interface IReportDateRangeField extends internal.IElement {
		model: IModel;
		containerAsReportDateRangeSelector: IReportDateRangeSelector;
		load(): ReportDateRangeField;
		load(callback: (element: ReportDateRangeField) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/date-range-field relevant section in reference guide}
	 */
	export class ReportDateRangeField extends internal.Element implements IReportDateRangeField {
		public static typeName: string = "Reports$ReportDateRangeField";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"caption" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsReportDateRangeSelector() { return super.getContainerAs<ReportDateRangeSelector>(ReportDateRangeSelector); }

		private __caption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(ReportDateRangeField, this, "caption", null, true);
		public get caption(): texts.Text { return this.__caption.get(); }
		public set caption(newValue: texts.Text) { this.__caption.set(newValue); }
		private __type: internal.EnumProperty<DateRangeFieldEnum> =
			new internal.EnumProperty<DateRangeFieldEnum>(ReportDateRangeField, this, "type", DateRangeFieldEnum.Year, DateRangeFieldEnum);
		public get type(): DateRangeFieldEnum { return this.__type.get(); }
		public set type(newValue: DateRangeFieldEnum) { this.__type.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ReportDateRangeField() cannot be invoked directly, please use 'model.reports.createReportDateRangeField()'"
				);
			}
		}

		/**
		 * Creates and returns a new ReportDateRangeField instance in the SDK and on the server.
		 * The new ReportDateRangeField will be automatically stored in the 'fields' property
		 * of the parent ReportDateRangeSelector element passed as argument.
		 */
		public static createIn(container: ReportDateRangeSelector): ReportDateRangeField {
			return internal.instancehelpers.createElement(container, ReportDateRangeField, "fields", true);
		}

		/**
		 * Creates and returns a new ReportDateRangeField instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ReportDateRangeField {
			return internal.instancehelpers.createElement(model, ReportDateRangeField);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.caption = texts.Text.create(this.model);
			this.type = DateRangeFieldEnum.Year;
		}

	}

	export interface IReportParameter extends pages.IWidget {
		model: IModel;
		containerAsDataView: pages.IDataView;
		containerAsDivContainer: pages.IDivContainer;
		containerAsGroupBox: pages.IGroupBox;
		containerAsHeader: pages.IHeader;
		containerAsLayout: pages.ILayout;
		containerAsLayoutCallArgument: pages.ILayoutCallArgument;
		containerAsLayoutGridColumn: pages.ILayoutGridColumn;
		containerAsListView: pages.IListView;
		containerAsListViewTemplate: pages.IListViewTemplate;
		containerAsNavigationListItem: pages.INavigationListItem;
		containerAsScrollContainerRegion: pages.IScrollContainerRegion;
		containerAsSnippet: pages.ISnippet;
		containerAsSplitPane: pages.ISplitPane;
		containerAsTabPage: pages.ITabPage;
		containerAsTableCell: pages.ITableCell;
		containerAsTemplateGridContents: pages.ITemplateGridContents;
		containerAsVerticalFlow: pages.IVerticalFlow;
		containerAsReportPane: IReportPane;
		load(): ReportParameter;
		load(callback: (element: ReportParameter) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class ReportParameter extends pages.Widget implements IReportParameter {
		public static typeName: string = "Reports$ReportParameter";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"parameter" : {
					"introduced" : "6.10.0"
				},
				"parameterName" : {
					"deleted" : "6.10.0",
					"deletionMessage" : null
				}
			},
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<pages.DataView>(pages.DataView); }
		get containerAsDivContainer() { return super.getContainerAs<pages.DivContainer>(pages.DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<pages.GroupBox>(pages.GroupBox); }
		get containerAsHeader() { return super.getContainerAs<pages.Header>(pages.Header); }
		get containerAsLayout() { return super.getContainerAs<pages.Layout>(pages.Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<pages.LayoutCallArgument>(pages.LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<pages.LayoutGridColumn>(pages.LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<pages.ListView>(pages.ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<pages.ListViewTemplate>(pages.ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<pages.NavigationListItem>(pages.NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<pages.ScrollContainerRegion>(pages.ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<pages.Snippet>(pages.Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<pages.SplitPane>(pages.SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<pages.TabPage>(pages.TabPage); }
		get containerAsTableCell() { return super.getContainerAs<pages.TableCell>(pages.TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<pages.TemplateGridContents>(pages.TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<pages.VerticalFlow>(pages.VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<ReportPane>(ReportPane); }

		private __parameter: internal.ByNameReferenceProperty<datasets.IDataSetParameter> =
			new internal.ByNameReferenceProperty<datasets.IDataSetParameter>(ReportParameter, this, "parameter", null, "DataSets$DataSetParameter");
		/**
		 * In version 6.10.0: introduced
		 */
		public get parameter(): datasets.IDataSetParameter { return this.__parameter.get(); }
		public set parameter(newValue: datasets.IDataSetParameter) { this.__parameter.set(newValue); }
		get parameterQualifiedName(): string { return this.__parameter.qualifiedName(); }
		private __parameterName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ReportParameter, this, "parameterName", "", internal.PrimitiveTypeEnum.String);
		/**
		 * In version 6.10.0: deleted
		 */
		public get parameterName(): string { return this.__parameterName.get(); }
		public set parameterName(newValue: string) { this.__parameterName.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ReportParameter() cannot be invoked directly, please use 'model.reports.createReportParameter()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/report-date-parameter relevant section in reference guide}
	 */
	export interface IReportDateRangeSelector extends IReportParameter {
		model: IModel;
		containerAsDataView: pages.IDataView;
		containerAsDivContainer: pages.IDivContainer;
		containerAsGroupBox: pages.IGroupBox;
		containerAsHeader: pages.IHeader;
		containerAsLayout: pages.ILayout;
		containerAsLayoutCallArgument: pages.ILayoutCallArgument;
		containerAsLayoutGridColumn: pages.ILayoutGridColumn;
		containerAsListView: pages.IListView;
		containerAsListViewTemplate: pages.IListViewTemplate;
		containerAsNavigationListItem: pages.INavigationListItem;
		containerAsScrollContainerRegion: pages.IScrollContainerRegion;
		containerAsSnippet: pages.ISnippet;
		containerAsSplitPane: pages.ISplitPane;
		containerAsTabPage: pages.ITabPage;
		containerAsTableCell: pages.ITableCell;
		containerAsTemplateGridContents: pages.ITemplateGridContents;
		containerAsVerticalFlow: pages.IVerticalFlow;
		containerAsReportPane: IReportPane;
		load(): ReportDateRangeSelector;
		load(callback: (element: ReportDateRangeSelector) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/report-date-parameter relevant section in reference guide}
	 */
	export class ReportDateRangeSelector extends ReportParameter implements IReportDateRangeSelector {
		public static typeName: string = "Reports$ReportDateRangeSelector";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"fromCaption" : {
					"required" : {
						"currentValue" : true
					}
				},
				"toCaption" : {
					"required" : {
						"currentValue" : true
					}
				}
			},
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<pages.DataView>(pages.DataView); }
		get containerAsDivContainer() { return super.getContainerAs<pages.DivContainer>(pages.DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<pages.GroupBox>(pages.GroupBox); }
		get containerAsHeader() { return super.getContainerAs<pages.Header>(pages.Header); }
		get containerAsLayout() { return super.getContainerAs<pages.Layout>(pages.Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<pages.LayoutCallArgument>(pages.LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<pages.LayoutGridColumn>(pages.LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<pages.ListView>(pages.ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<pages.ListViewTemplate>(pages.ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<pages.NavigationListItem>(pages.NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<pages.ScrollContainerRegion>(pages.ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<pages.Snippet>(pages.Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<pages.SplitPane>(pages.SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<pages.TabPage>(pages.TabPage); }
		get containerAsTableCell() { return super.getContainerAs<pages.TableCell>(pages.TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<pages.TemplateGridContents>(pages.TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<pages.VerticalFlow>(pages.VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<ReportPane>(ReportPane); }

		private __fields: internal.PartListProperty<ReportDateRangeField> =
			new internal.PartListProperty<ReportDateRangeField>(ReportDateRangeSelector, this, "fields", []);
		public get fields(): internal.IList<ReportDateRangeField> { return this.__fields.get(); }
		public set fields(newValue: internal.IList<ReportDateRangeField>) { this.__fields.set(newValue); }
		private __minYear: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(ReportDateRangeSelector, this, "minYear", 0, internal.PrimitiveTypeEnum.Integer);
		public get minYear(): number { return this.__minYear.get(); }
		public set minYear(newValue: number) { this.__minYear.set(newValue); }
		private __maxYear: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(ReportDateRangeSelector, this, "maxYear", 0, internal.PrimitiveTypeEnum.Integer);
		public get maxYear(): number { return this.__maxYear.get(); }
		public set maxYear(newValue: number) { this.__maxYear.set(newValue); }
		private __fieldsPerRow: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(ReportDateRangeSelector, this, "fieldsPerRow", 0, internal.PrimitiveTypeEnum.Integer);
		public get fieldsPerRow(): number { return this.__fieldsPerRow.get(); }
		public set fieldsPerRow(newValue: number) { this.__fieldsPerRow.set(newValue); }
		private __showFromToRange: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(ReportDateRangeSelector, this, "showFromToRange", false, internal.PrimitiveTypeEnum.Boolean);
		public get showFromToRange(): boolean { return this.__showFromToRange.get(); }
		public set showFromToRange(newValue: boolean) { this.__showFromToRange.set(newValue); }
		private __fromCaption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(ReportDateRangeSelector, this, "fromCaption", null, true);
		public get fromCaption(): texts.Text { return this.__fromCaption.get(); }
		public set fromCaption(newValue: texts.Text) { this.__fromCaption.set(newValue); }
		private __toCaption: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(ReportDateRangeSelector, this, "toCaption", null, true);
		public get toCaption(): texts.Text { return this.__toCaption.get(); }
		public set toCaption(newValue: texts.Text) { this.__toCaption.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ReportDateRangeSelector() cannot be invoked directly, please use 'model.reports.createReportDateRangeSelector()'"
				);
			}
		}


		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'footerWidget' property
		 * of the parent pages.DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: pages.DataView): ReportDateRangeSelector {
			internal.createInVersionCheck(container.model, ReportDateRangeSelector.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "footerWidget", false);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
		 * of the parent pages.DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: pages.DataView): ReportDateRangeSelector {
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
		 * of the parent pages.DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: pages.DivContainer): ReportDateRangeSelector {
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
		 * of the parent pages.GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: pages.GroupBox): ReportDateRangeSelector {
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'leftWidget' property
		 * of the parent pages.Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: pages.Header): ReportDateRangeSelector {
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "leftWidget", false);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'rightWidget' property
		 * of the parent pages.Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: pages.Header): ReportDateRangeSelector {
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "rightWidget", false);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
		 * of the parent pages.Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: pages.Layout): ReportDateRangeSelector {
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
		 * of the parent pages.LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: pages.LayoutCallArgument): ReportDateRangeSelector {
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
		 * of the parent pages.LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: pages.LayoutGridColumn): ReportDateRangeSelector {
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
		 * of the parent pages.ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: pages.ListView): ReportDateRangeSelector {
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
		 * of the parent pages.ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: pages.ListViewTemplate): ReportDateRangeSelector {
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
		 * of the parent pages.NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: pages.NavigationListItem): ReportDateRangeSelector {
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
		 * of the parent pages.ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: pages.ScrollContainerRegion): ReportDateRangeSelector {
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
		 * of the parent pages.Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: pages.Snippet): ReportDateRangeSelector {
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'firstWidget' property
		 * of the parent pages.SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: pages.SplitPane): ReportDateRangeSelector {
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "firstWidget", false);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'secondWidget' property
		 * of the parent pages.SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: pages.SplitPane): ReportDateRangeSelector {
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "secondWidget", false);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
		 * of the parent pages.TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: pages.TabPage): ReportDateRangeSelector {
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
		 * of the parent pages.TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: pages.TableCell): ReportDateRangeSelector {
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
		 * of the parent pages.TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: pages.TemplateGridContents): ReportDateRangeSelector {
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'widgets' property
		 * of the parent pages.VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: pages.VerticalFlow): ReportDateRangeSelector {
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widgets", true);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'parameterWidget' property
		 * of the parent ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: ReportPane): ReportDateRangeSelector {
			internal.createInVersionCheck(container.model, ReportDateRangeSelector.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * The new ReportDateRangeSelector will be automatically stored in the 'reportWidget' property
		 * of the parent ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: ReportPane): ReportDateRangeSelector {
			internal.createInVersionCheck(container.model, ReportDateRangeSelector.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "reportWidget", false);
		}

		/**
		 * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ReportDateRangeSelector {
			return internal.instancehelpers.createElement(model, ReportDateRangeSelector);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.fieldsPerRow = 3;
			this.fromCaption = ((text:texts.Text) => {
				text.translations.replace([ ((translation:texts.Translation) => {
					translation.languageCode = "en_US";
					translation.text = "From";
					return translation;
				})(texts.Translation.create(this.model)) ]);
				return text;
			})(texts.Text.create(this.model));
			this.maxYear = 2015;
			this.minYear = 2011;
			this.showFromToRange = true;
			this.toCaption = ((text:texts.Text) => {
				text.translations.replace([ ((translation:texts.Translation) => {
					translation.languageCode = "en_US";
					translation.text = "To";
					return translation;
				})(texts.Translation.create(this.model)) ]);
				return text;
			})(texts.Text.create(this.model));
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/report-parameter relevant section in reference guide}
	 */
	export interface IReportDropDown extends IReportParameter {
		model: IModel;
		containerAsDataView: pages.IDataView;
		containerAsDivContainer: pages.IDivContainer;
		containerAsGroupBox: pages.IGroupBox;
		containerAsHeader: pages.IHeader;
		containerAsLayout: pages.ILayout;
		containerAsLayoutCallArgument: pages.ILayoutCallArgument;
		containerAsLayoutGridColumn: pages.ILayoutGridColumn;
		containerAsListView: pages.IListView;
		containerAsListViewTemplate: pages.IListViewTemplate;
		containerAsNavigationListItem: pages.INavigationListItem;
		containerAsScrollContainerRegion: pages.IScrollContainerRegion;
		containerAsSnippet: pages.ISnippet;
		containerAsSplitPane: pages.ISplitPane;
		containerAsTabPage: pages.ITabPage;
		containerAsTableCell: pages.ITableCell;
		containerAsTemplateGridContents: pages.ITemplateGridContents;
		containerAsVerticalFlow: pages.IVerticalFlow;
		containerAsReportPane: IReportPane;
		load(): ReportDropDown;
		load(callback: (element: ReportDropDown) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/report-parameter relevant section in reference guide}
	 */
	export class ReportDropDown extends ReportParameter implements IReportDropDown {
		public static typeName: string = "Reports$ReportDropDown";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<pages.DataView>(pages.DataView); }
		get containerAsDivContainer() { return super.getContainerAs<pages.DivContainer>(pages.DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<pages.GroupBox>(pages.GroupBox); }
		get containerAsHeader() { return super.getContainerAs<pages.Header>(pages.Header); }
		get containerAsLayout() { return super.getContainerAs<pages.Layout>(pages.Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<pages.LayoutCallArgument>(pages.LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<pages.LayoutGridColumn>(pages.LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<pages.ListView>(pages.ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<pages.ListViewTemplate>(pages.ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<pages.NavigationListItem>(pages.NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<pages.ScrollContainerRegion>(pages.ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<pages.Snippet>(pages.Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<pages.SplitPane>(pages.SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<pages.TabPage>(pages.TabPage); }
		get containerAsTableCell() { return super.getContainerAs<pages.TableCell>(pages.TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<pages.TemplateGridContents>(pages.TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<pages.VerticalFlow>(pages.VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<ReportPane>(ReportPane); }

		private __attribute: internal.ByNameReferenceProperty<domainmodels.IAttribute> =
			new internal.ByNameReferenceProperty<domainmodels.IAttribute>(ReportDropDown, this, "attribute", null, "DomainModels$Attribute");
		public get attribute(): domainmodels.IAttribute { return this.__attribute.get(); }
		public set attribute(newValue: domainmodels.IAttribute) { this.__attribute.set(newValue); }
		get attributeQualifiedName(): string { return this.__attribute.qualifiedName(); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ReportDropDown() cannot be invoked directly, please use 'model.reports.createReportDropDown()'"
				);
			}
		}


		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'footerWidget' property
		 * of the parent pages.DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: pages.DataView): ReportDropDown {
			internal.createInVersionCheck(container.model, ReportDropDown.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, ReportDropDown, "footerWidget", false);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'widget' property
		 * of the parent pages.DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: pages.DataView): ReportDropDown {
			return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'widget' property
		 * of the parent pages.DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: pages.DivContainer): ReportDropDown {
			return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'widget' property
		 * of the parent pages.GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: pages.GroupBox): ReportDropDown {
			return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'leftWidget' property
		 * of the parent pages.Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: pages.Header): ReportDropDown {
			return internal.instancehelpers.createElement(container, ReportDropDown, "leftWidget", false);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'rightWidget' property
		 * of the parent pages.Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: pages.Header): ReportDropDown {
			return internal.instancehelpers.createElement(container, ReportDropDown, "rightWidget", false);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'widget' property
		 * of the parent pages.Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: pages.Layout): ReportDropDown {
			return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'widget' property
		 * of the parent pages.LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: pages.LayoutCallArgument): ReportDropDown {
			return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'widget' property
		 * of the parent pages.LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: pages.LayoutGridColumn): ReportDropDown {
			return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'widget' property
		 * of the parent pages.ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: pages.ListView): ReportDropDown {
			return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'widget' property
		 * of the parent pages.ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: pages.ListViewTemplate): ReportDropDown {
			return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'widget' property
		 * of the parent pages.NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: pages.NavigationListItem): ReportDropDown {
			return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'widget' property
		 * of the parent pages.ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: pages.ScrollContainerRegion): ReportDropDown {
			return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'widget' property
		 * of the parent pages.Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: pages.Snippet): ReportDropDown {
			return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'firstWidget' property
		 * of the parent pages.SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: pages.SplitPane): ReportDropDown {
			return internal.instancehelpers.createElement(container, ReportDropDown, "firstWidget", false);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'secondWidget' property
		 * of the parent pages.SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: pages.SplitPane): ReportDropDown {
			return internal.instancehelpers.createElement(container, ReportDropDown, "secondWidget", false);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'widget' property
		 * of the parent pages.TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: pages.TabPage): ReportDropDown {
			return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'widget' property
		 * of the parent pages.TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: pages.TableCell): ReportDropDown {
			return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'widget' property
		 * of the parent pages.TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: pages.TemplateGridContents): ReportDropDown {
			return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'widgets' property
		 * of the parent pages.VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: pages.VerticalFlow): ReportDropDown {
			return internal.instancehelpers.createElement(container, ReportDropDown, "widgets", true);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'parameterWidget' property
		 * of the parent ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: ReportPane): ReportDropDown {
			internal.createInVersionCheck(container.model, ReportDropDown.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportDropDown, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * The new ReportDropDown will be automatically stored in the 'reportWidget' property
		 * of the parent ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: ReportPane): ReportDropDown {
			internal.createInVersionCheck(container.model, ReportDropDown.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportDropDown, "reportWidget", false);
		}

		/**
		 * Creates and returns a new ReportDropDown instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ReportDropDown {
			return internal.instancehelpers.createElement(model, ReportDropDown);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/report-pane relevant section in reference guide}
	 *
	 * In version 6.10.0: deleted
	 */
	export interface IReportPane extends pages.IWidget {
		model: IModel;
		containerAsDataView: pages.IDataView;
		containerAsDivContainer: pages.IDivContainer;
		containerAsGroupBox: pages.IGroupBox;
		containerAsHeader: pages.IHeader;
		containerAsLayout: pages.ILayout;
		containerAsLayoutCallArgument: pages.ILayoutCallArgument;
		containerAsLayoutGridColumn: pages.ILayoutGridColumn;
		containerAsListView: pages.IListView;
		containerAsListViewTemplate: pages.IListViewTemplate;
		containerAsNavigationListItem: pages.INavigationListItem;
		containerAsScrollContainerRegion: pages.IScrollContainerRegion;
		containerAsSnippet: pages.ISnippet;
		containerAsSplitPane: pages.ISplitPane;
		containerAsTabPage: pages.ITabPage;
		containerAsTableCell: pages.ITableCell;
		containerAsTemplateGridContents: pages.ITemplateGridContents;
		containerAsVerticalFlow: pages.IVerticalFlow;
		containerAsReportPane: IReportPane;
		load(): ReportPane;
		load(callback: (element: ReportPane) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/report-pane relevant section in reference guide}
	 *
	 * In version 6.10.0: deleted
	 */
	export class ReportPane extends pages.Widget implements IReportPane {
		public static typeName: string = "Reports$ReportPane";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"deleted" : "6.10.0",
			"deletionMessage" : null
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<pages.DataView>(pages.DataView); }
		get containerAsDivContainer() { return super.getContainerAs<pages.DivContainer>(pages.DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<pages.GroupBox>(pages.GroupBox); }
		get containerAsHeader() { return super.getContainerAs<pages.Header>(pages.Header); }
		get containerAsLayout() { return super.getContainerAs<pages.Layout>(pages.Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<pages.LayoutCallArgument>(pages.LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<pages.LayoutGridColumn>(pages.LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<pages.ListView>(pages.ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<pages.ListViewTemplate>(pages.ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<pages.NavigationListItem>(pages.NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<pages.ScrollContainerRegion>(pages.ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<pages.Snippet>(pages.Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<pages.SplitPane>(pages.SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<pages.TabPage>(pages.TabPage); }
		get containerAsTableCell() { return super.getContainerAs<pages.TableCell>(pages.TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<pages.TemplateGridContents>(pages.TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<pages.VerticalFlow>(pages.VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<ReportPane>(ReportPane); }

		private __parameterWidget: internal.PartProperty<pages.Widget> =
			new internal.PartProperty<pages.Widget>(ReportPane, this, "parameterWidget", null, false);
		public get parameterWidget(): pages.Widget { return this.__parameterWidget.get(); }
		public set parameterWidget(newValue: pages.Widget) { this.__parameterWidget.set(newValue); }
		private __reportWidget: internal.PartProperty<pages.Widget> =
			new internal.PartProperty<pages.Widget>(ReportPane, this, "reportWidget", null, false);
		public get reportWidget(): pages.Widget { return this.__reportWidget.get(); }
		public set reportWidget(newValue: pages.Widget) { this.__reportWidget.set(newValue); }
		private __generateOnLoad: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(ReportPane, this, "generateOnLoad", false, internal.PrimitiveTypeEnum.Boolean);
		public get generateOnLoad(): boolean { return this.__generateOnLoad.get(); }
		public set generateOnLoad(newValue: boolean) { this.__generateOnLoad.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ReportPane() cannot be invoked directly, please use 'model.reports.createReportPane()'"
				);
			}
		}


		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'footerWidget' property
		 * of the parent pages.DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0
		 */
		public static createInDataViewUnderFooterWidget(container: pages.DataView): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "footerWidget", false);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'widget' property
		 * of the parent pages.DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInDataViewUnderWidget(container: pages.DataView): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'widget' property
		 * of the parent pages.DivContainer element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInDivContainerUnderWidget(container: pages.DivContainer): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'widget' property
		 * of the parent pages.GroupBox element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInGroupBoxUnderWidget(container: pages.GroupBox): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'leftWidget' property
		 * of the parent pages.Header element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInHeaderUnderLeftWidget(container: pages.Header): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "leftWidget", false);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'rightWidget' property
		 * of the parent pages.Header element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInHeaderUnderRightWidget(container: pages.Header): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "rightWidget", false);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'widget' property
		 * of the parent pages.Layout element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInLayoutUnderWidget(container: pages.Layout): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'widget' property
		 * of the parent pages.LayoutCallArgument element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInLayoutCallArgumentUnderWidget(container: pages.LayoutCallArgument): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'widget' property
		 * of the parent pages.LayoutGridColumn element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInLayoutGridColumnUnderWidget(container: pages.LayoutGridColumn): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'widget' property
		 * of the parent pages.ListView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInListViewUnderWidget(container: pages.ListView): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'widget' property
		 * of the parent pages.ListViewTemplate element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInListViewTemplateUnderWidget(container: pages.ListViewTemplate): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'widget' property
		 * of the parent pages.NavigationListItem element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInNavigationListItemUnderWidget(container: pages.NavigationListItem): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'widget' property
		 * of the parent pages.ScrollContainerRegion element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInScrollContainerRegionUnderWidget(container: pages.ScrollContainerRegion): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'widget' property
		 * of the parent pages.Snippet element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInSnippetUnderWidget(container: pages.Snippet): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'firstWidget' property
		 * of the parent pages.SplitPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInSplitPaneUnderFirstWidget(container: pages.SplitPane): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "firstWidget", false);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'secondWidget' property
		 * of the parent pages.SplitPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInSplitPaneUnderSecondWidget(container: pages.SplitPane): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "secondWidget", false);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'widget' property
		 * of the parent pages.TabPage element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInTabPageUnderWidget(container: pages.TabPage): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'widget' property
		 * of the parent pages.TableCell element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInTableCellUnderWidget(container: pages.TableCell): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'widget' property
		 * of the parent pages.TemplateGridContents element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInTemplateGridContentsUnderWidget(container: pages.TemplateGridContents): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'widgets' property
		 * of the parent pages.VerticalFlow element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInVerticalFlowUnderWidgets(container: pages.VerticalFlow): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "widgets", true);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'parameterWidget' property
		 * of the parent ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: ReportPane): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * The new ReportPane will be automatically stored in the 'reportWidget' property
		 * of the parent ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: ReportPane): ReportPane {
			internal.createInVersionCheck(container.model, ReportPane.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, ReportPane, "reportWidget", false);
		}

		/**
		 * Creates and returns a new ReportPane instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ReportPane {
			return internal.instancehelpers.createElement(model, ReportPane);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IReportZoomInfo extends internal.IElement {
		model: IModel;
		containerAsBasicReport: IBasicReport;
		load(): ReportZoomInfo;
		load(callback: (element: ReportZoomInfo) => void, forceRefresh?: boolean);
	}

	export class ReportZoomInfo extends internal.Element implements IReportZoomInfo {
		public static typeName: string = "Reports$ReportZoomInfo";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsBasicReport() { return super.getContainerAs<BasicReport>(BasicReport); }

		private __targetPage: internal.ByNameReferenceProperty<pages.IPage> =
			new internal.ByNameReferenceProperty<pages.IPage>(ReportZoomInfo, this, "targetPage", null, "Pages$Page");
		public get targetPage(): pages.IPage { return this.__targetPage.get(); }
		public set targetPage(newValue: pages.IPage) { this.__targetPage.set(newValue); }
		get targetPageQualifiedName(): string { return this.__targetPage.qualifiedName(); }
		private __mappings: internal.PartListProperty<ReportZoomMapping> =
			new internal.PartListProperty<ReportZoomMapping>(ReportZoomInfo, this, "mappings", []);
		public get mappings(): internal.IList<ReportZoomMapping> { return this.__mappings.get(); }
		public set mappings(newValue: internal.IList<ReportZoomMapping>) { this.__mappings.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ReportZoomInfo() cannot be invoked directly, please use 'model.reports.createReportZoomInfo()'"
				);
			}
		}

		/**
		 * Creates and returns a new ReportZoomInfo instance in the SDK and on the server.
		 * The new ReportZoomInfo will be automatically stored in the 'zoomInfo' property
		 * of the parent BasicReport element passed as argument.
		 */
		public static createIn(container: BasicReport): ReportZoomInfo {
			return internal.instancehelpers.createElement(container, ReportZoomInfo, "zoomInfo", false);
		}

		/**
		 * Creates and returns a new ReportZoomInfo instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ReportZoomInfo {
			return internal.instancehelpers.createElement(model, ReportZoomInfo);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IReportZoomMapping extends internal.IElement {
		model: IModel;
		containerAsReportZoomInfo: IReportZoomInfo;
		load(): ReportZoomMapping;
		load(callback: (element: ReportZoomMapping) => void, forceRefresh?: boolean);
	}

	export class ReportZoomMapping extends internal.Element implements IReportZoomMapping {
		public static typeName: string = "Reports$ReportZoomMapping";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsReportZoomInfo() { return super.getContainerAs<ReportZoomInfo>(ReportZoomInfo); }

		private __targetParameterName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ReportZoomMapping, this, "targetParameterName", "", internal.PrimitiveTypeEnum.String);
		public get targetParameterName(): string { return this.__targetParameterName.get(); }
		public set targetParameterName(newValue: string) { this.__targetParameterName.set(newValue); }
		private __sourceReportColumnName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ReportZoomMapping, this, "sourceReportColumnName", "", internal.PrimitiveTypeEnum.String);
		public get sourceReportColumnName(): string { return this.__sourceReportColumnName.get(); }
		public set sourceReportColumnName(newValue: string) { this.__sourceReportColumnName.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ReportZoomMapping() cannot be invoked directly, please use 'model.reports.createReportZoomMapping()'"
				);
			}
		}

		/**
		 * Creates and returns a new ReportZoomMapping instance in the SDK and on the server.
		 * The new ReportZoomMapping will be automatically stored in the 'mappings' property
		 * of the parent ReportZoomInfo element passed as argument.
		 */
		public static createIn(container: ReportZoomInfo): ReportZoomMapping {
			return internal.instancehelpers.createElement(container, ReportZoomMapping, "mappings", true);
		}

		/**
		 * Creates and returns a new ReportZoomMapping instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ReportZoomMapping {
			return internal.instancehelpers.createElement(model, ReportZoomMapping);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}
}

import {datasets} from "./datasets";
import {domainmodels} from "./domainmodels";
import {texts} from "./texts";

import {IModel} from "./base-model";
