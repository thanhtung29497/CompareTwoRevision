import {IAbstractModel, AbstractModel} from "../sdk/internal/abstract-model";

import {appservices} from "./appservices";
import {constants} from "./constants";
import {customwidgets} from "./customwidgets";
import {datasets} from "./datasets";
import {datatypes} from "./datatypes";
import {documenttemplates} from "./documenttemplates";
import {domainmodels} from "./domainmodels";
import {enumerations} from "./enumerations";
import {exportmappings} from "./exportmappings";
import {images} from "./images";
import {importmappings} from "./importmappings";
import {javaactions} from "./javaactions";
import {jsonstructures} from "./jsonstructures";
import {mappings} from "./mappings";
import {menus} from "./menus";
import {microflows} from "./microflows";
import {navigation} from "./navigation";
import {pages} from "./pages";
import {pluginwidgets} from "./pluginwidgets";
import {projects} from "./projects";
import {regularexpressions} from "./regularexpressions";
import {reports} from "./reports";
import {rest} from "./rest";
import {scheduledevents} from "./scheduledevents";
import {security} from "./security";
import {settings} from "./settings";
import {texts} from "./texts";
import {webservices} from "./webservices";
import {xmlschemas} from "./xmlschemas";

export interface IBaseModel extends IAbstractModel {
	allConstants(): constants.IConstant[];
	allConsumedAppServices(): appservices.IConsumedAppService[];
	allDataSets(): datasets.IDataSet[];
	allDocuments(): projects.IDocument[];
	allDocumentTemplates(): documenttemplates.IDocumentTemplate[];
	allDomainModels(): domainmodels.IDomainModel[];
	allEnumerations(): enumerations.IEnumeration[];
	allExportMappings(): exportmappings.IExportMapping[];
	allFolders(): projects.IFolder[];
	allFolderBases(): projects.IFolderBase[];
	allFormBases(): pages.IFormBase[];
	allImageCollections(): images.IImageCollection[];
	allImportMappings(): importmappings.IImportMapping[];
	allImportedWebServices(): webservices.IImportedWebService[];
	allJavaActions(): javaactions.IJavaAction[];
	allJsonStructures(): jsonstructures.IJsonStructure[];
	allLayouts(): pages.ILayout[];
	allMappingDocuments(): mappings.IMappingDocument[];
	allMenuDocuments(): menus.IMenuDocument[];
	allMicroflows(): microflows.IMicroflow[];
	allMicroflowBases(): microflows.IMicroflowBase[];
	allModules(): projects.IModule[];
	allModuleDocuments(): projects.IModuleDocument[];
	allModuleSecurities(): security.IModuleSecurity[];
	allMxSchemas(): xmlschemas.IMxSchema[];
	allNavigationDocuments(): navigation.INavigationDocument[];
	allPages(): pages.IPage[];
	allProjects(): projects.IProject[];
	allProjectConversions(): projects.IProjectConversion[];
	allProjectDocuments(): projects.IProjectDocument[];
	allProjectSecurities(): security.IProjectSecurity[];
	allProjectSettings(): settings.IProjectSettings[];
	allPublishedAppServices(): webservices.IPublishedAppService[];
	allPublishedODataServices(): rest.IPublishedODataService[];
	allPublishedRestServices(): rest.IPublishedRestService[];
	allPublishedRestServiceBases(): rest.IPublishedRestServiceBase[];
	allPublishedServiceBases(): webservices.IPublishedServiceBase[];
	allPublishedWebServices(): webservices.IPublishedWebService[];
	allRegularExpressions(): regularexpressions.IRegularExpression[];
	allRules(): microflows.IRule[];
	allScheduledEvents(): scheduledevents.IScheduledEvent[];
	allSnippets(): pages.ISnippet[];
	allSystemTextCollections(): texts.ISystemTextCollection[];
	allXmlSchemas(): xmlschemas.IXmlSchema[];

	findAppServiceActionByQualifiedName(qname: string): appservices.IAppServiceAction;
	findAppServiceActionParameterByQualifiedName(qname: string): appservices.IAppServiceActionParameter;
	findConstantByQualifiedName(qname: string): constants.IConstant;
	findDataSetByQualifiedName(qname: string): datasets.IDataSet;
	findDataSetParameterByQualifiedName(qname: string): datasets.IDataSetParameter;
	findDocumentTemplateByQualifiedName(qname: string): documenttemplates.IDocumentTemplate;
	findAssociationBaseByQualifiedName(qname: string): domainmodels.IAssociationBase;
	findAttributeByQualifiedName(qname: string): domainmodels.IAttribute;
	findEntityByQualifiedName(qname: string): domainmodels.IEntity;
	findEnumerationByQualifiedName(qname: string): enumerations.IEnumeration;
	findExportMappingByQualifiedName(qname: string): exportmappings.IExportMapping;
	findImageByQualifiedName(qname: string): images.IImage;
	findImportMappingByQualifiedName(qname: string): importmappings.IImportMapping;
	findJavaActionByQualifiedName(qname: string): javaactions.IJavaAction;
	findJavaActionParameterByQualifiedName(qname: string): javaactions.IJavaActionParameter;
	findJsonStructureByQualifiedName(qname: string): jsonstructures.IJsonStructure;
	findMenuDocumentByQualifiedName(qname: string): menus.IMenuDocument;
	findMicroflowByQualifiedName(qname: string): microflows.IMicroflow;
	findMicroflowParameterByQualifiedName(qname: string): microflows.IMicroflowParameter;
	findRuleByQualifiedName(qname: string): microflows.IRule;
	findRuleParameterByQualifiedName(qname: string): microflows.IRuleParameter;
	findLayoutByQualifiedName(qname: string): pages.ILayout;
	findLayoutParameterByQualifiedName(qname: string): pages.ILayoutParameter;
	findPageByQualifiedName(qname: string): pages.IPage;
	findSnippetByQualifiedName(qname: string): pages.ISnippet;
	findRegularExpressionByQualifiedName(qname: string): regularexpressions.IRegularExpression;
	findModuleRoleByQualifiedName(qname: string): security.IModuleRole;
	findUserRoleByQualifiedName(qname: string): security.IUserRole;
	findImportedWebServiceByQualifiedName(qname: string): webservices.IImportedWebService;
	findXmlSchemaByQualifiedName(qname: string): xmlschemas.IXmlSchema;
}

/**
 * Class to find generated model units.
 */
export class BaseModel extends AbstractModel {

	public allConstants(): constants.IConstant[] {
		return super._allOfTypes<constants.IConstant>([
			"Constants$Constant"
		]);
	}

	public allConsumedAppServices(): appservices.IConsumedAppService[] {
		return super._allOfTypes<appservices.IConsumedAppService>([
			"AppServices$ConsumedAppService"
		]);
	}

	public allDataSets(): datasets.IDataSet[] {
		return super._allOfTypes<datasets.IDataSet>([
			"DataSets$DataSet"
		]);
	}

	public allDocuments(): projects.IDocument[] {
		return super._allOfTypes<projects.IDocument>([
			"AppServices$ConsumedAppService", "Constants$Constant", "DataSets$DataSet", "DocumentTemplates$DocumentTemplate", "Enumerations$Enumeration", "ExportMappings$ExportMapping", "Images$ImageCollection", "ImportMappings$ImportMapping", "JavaActions$JavaAction", "JsonStructures$JsonStructure", "Menus$MenuDocument", "Microflows$Microflow", "Microflows$Rule", "Pages$Layout", "Pages$Page", "Pages$Snippet", "RegularExpressions$RegularExpression", "Rest$PublishedODataService", "Rest$PublishedRestService", "ScheduledEvents$ScheduledEvent", "WebServices$ImportedWebService", "WebServices$PublishedAppService", "WebServices$PublishedWebService", "XmlSchemas$XmlSchema"
		]);
	}

	public allDocumentTemplates(): documenttemplates.IDocumentTemplate[] {
		return super._allOfTypes<documenttemplates.IDocumentTemplate>([
			"DocumentTemplates$DocumentTemplate"
		]);
	}

	public allDomainModels(): domainmodels.IDomainModel[] {
		return super._allOfTypes<domainmodels.IDomainModel>([
			"DomainModels$DomainModel"
		]);
	}

	public allEnumerations(): enumerations.IEnumeration[] {
		return super._allOfTypes<enumerations.IEnumeration>([
			"Enumerations$Enumeration"
		]);
	}

	public allExportMappings(): exportmappings.IExportMapping[] {
		return super._allOfTypes<exportmappings.IExportMapping>([
			"ExportMappings$ExportMapping"
		]);
	}

	public allFolders(): projects.IFolder[] {
		return super._allOfTypes<projects.IFolder>([
			"Projects$Folder"
		]);
	}

	public allFolderBases(): projects.IFolderBase[] {
		return super._allOfTypes<projects.IFolderBase>([
			"Projects$Folder", "Projects$Module"
		]);
	}

	public allFormBases(): pages.IFormBase[] {
		return super._allOfTypes<pages.IFormBase>([
			"Pages$Layout", "Pages$Page", "Pages$Snippet"
		]);
	}

	public allImageCollections(): images.IImageCollection[] {
		return super._allOfTypes<images.IImageCollection>([
			"Images$ImageCollection"
		]);
	}

	public allImportMappings(): importmappings.IImportMapping[] {
		return super._allOfTypes<importmappings.IImportMapping>([
			"ImportMappings$ImportMapping"
		]);
	}

	public allImportedWebServices(): webservices.IImportedWebService[] {
		return super._allOfTypes<webservices.IImportedWebService>([
			"WebServices$ImportedWebService"
		]);
	}

	public allJavaActions(): javaactions.IJavaAction[] {
		return super._allOfTypes<javaactions.IJavaAction>([
			"JavaActions$JavaAction"
		]);
	}

	public allJsonStructures(): jsonstructures.IJsonStructure[] {
		return super._allOfTypes<jsonstructures.IJsonStructure>([
			"JsonStructures$JsonStructure"
		]);
	}

	public allLayouts(): pages.ILayout[] {
		return super._allOfTypes<pages.ILayout>([
			"Pages$Layout"
		]);
	}

	public allMappingDocuments(): mappings.IMappingDocument[] {
		return super._allOfTypes<mappings.IMappingDocument>([
			"ExportMappings$ExportMapping", "ImportMappings$ImportMapping"
		]);
	}

	public allMenuDocuments(): menus.IMenuDocument[] {
		return super._allOfTypes<menus.IMenuDocument>([
			"Menus$MenuDocument"
		]);
	}

	public allMicroflows(): microflows.IMicroflow[] {
		return super._allOfTypes<microflows.IMicroflow>([
			"Microflows$Microflow"
		]);
	}

	public allMicroflowBases(): microflows.IMicroflowBase[] {
		return super._allOfTypes<microflows.IMicroflowBase>([
			"Microflows$Microflow", "Microflows$Rule"
		]);
	}

	public allModules(): projects.IModule[] {
		return super._allOfTypes<projects.IModule>([
			"Projects$Module"
		]);
	}

	public allModuleDocuments(): projects.IModuleDocument[] {
		return super._allOfTypes<projects.IModuleDocument>([
			"AppServices$ConsumedAppService", "Constants$Constant", "DataSets$DataSet", "DocumentTemplates$DocumentTemplate", "DomainModels$DomainModel", "Enumerations$Enumeration", "ExportMappings$ExportMapping", "Images$ImageCollection", "ImportMappings$ImportMapping", "JavaActions$JavaAction", "JsonStructures$JsonStructure", "Menus$MenuDocument", "Microflows$Microflow", "Microflows$Rule", "Pages$Layout", "Pages$Page", "Pages$Snippet", "RegularExpressions$RegularExpression", "Rest$PublishedODataService", "Rest$PublishedRestService", "ScheduledEvents$ScheduledEvent", "WebServices$ImportedWebService", "WebServices$PublishedAppService", "WebServices$PublishedWebService", "XmlSchemas$XmlSchema"
		]);
	}

	public allModuleSecurities(): security.IModuleSecurity[] {
		return super._allOfTypes<security.IModuleSecurity>([
			"Security$ModuleSecurity"
		]);
	}

	public allMxSchemas(): xmlschemas.IMxSchema[] {
		return super._allOfTypes<xmlschemas.IMxSchema>([
			"JsonStructures$JsonStructure", "XmlSchemas$XmlSchema"
		]);
	}

	public allNavigationDocuments(): navigation.INavigationDocument[] {
		return super._allOfTypes<navigation.INavigationDocument>([
			"Navigation$NavigationDocument"
		]);
	}

	public allPages(): pages.IPage[] {
		return super._allOfTypes<pages.IPage>([
			"Pages$Page"
		]);
	}

	public allProjects(): projects.IProject[] {
		return super._allOfTypes<projects.IProject>([
			"Projects$Project"
		]);
	}

	public allProjectConversions(): projects.IProjectConversion[] {
		return super._allOfTypes<projects.IProjectConversion>([
			"Projects$ProjectConversion"
		]);
	}

	public allProjectDocuments(): projects.IProjectDocument[] {
		return super._allOfTypes<projects.IProjectDocument>([
			"Navigation$NavigationDocument", "Security$ProjectSecurity", "Settings$ProjectSettings", "Texts$SystemTextCollection"
		]);
	}

	public allProjectSecurities(): security.IProjectSecurity[] {
		return super._allOfTypes<security.IProjectSecurity>([
			"Security$ProjectSecurity"
		]);
	}

	public allProjectSettings(): settings.IProjectSettings[] {
		return super._allOfTypes<settings.IProjectSettings>([
			"Settings$ProjectSettings"
		]);
	}

	public allPublishedAppServices(): webservices.IPublishedAppService[] {
		return super._allOfTypes<webservices.IPublishedAppService>([
			"WebServices$PublishedAppService"
		]);
	}

	public allPublishedODataServices(): rest.IPublishedODataService[] {
		return super._allOfTypes<rest.IPublishedODataService>([
			"Rest$PublishedODataService"
		]);
	}

	public allPublishedRestServices(): rest.IPublishedRestService[] {
		return super._allOfTypes<rest.IPublishedRestService>([
			"Rest$PublishedRestService"
		]);
	}

	public allPublishedRestServiceBases(): rest.IPublishedRestServiceBase[] {
		return super._allOfTypes<rest.IPublishedRestServiceBase>([
			"Rest$PublishedODataService", "Rest$PublishedRestService"
		]);
	}

	public allPublishedServiceBases(): webservices.IPublishedServiceBase[] {
		return super._allOfTypes<webservices.IPublishedServiceBase>([
			"WebServices$PublishedAppService", "WebServices$PublishedWebService"
		]);
	}

	public allPublishedWebServices(): webservices.IPublishedWebService[] {
		return super._allOfTypes<webservices.IPublishedWebService>([
			"WebServices$PublishedWebService"
		]);
	}

	public allRegularExpressions(): regularexpressions.IRegularExpression[] {
		return super._allOfTypes<regularexpressions.IRegularExpression>([
			"RegularExpressions$RegularExpression"
		]);
	}

	public allRules(): microflows.IRule[] {
		return super._allOfTypes<microflows.IRule>([
			"Microflows$Rule"
		]);
	}

	public allScheduledEvents(): scheduledevents.IScheduledEvent[] {
		return super._allOfTypes<scheduledevents.IScheduledEvent>([
			"ScheduledEvents$ScheduledEvent"
		]);
	}

	public allSnippets(): pages.ISnippet[] {
		return super._allOfTypes<pages.ISnippet>([
			"Pages$Snippet"
		]);
	}

	public allSystemTextCollections(): texts.ISystemTextCollection[] {
		return super._allOfTypes<texts.ISystemTextCollection>([
			"Texts$SystemTextCollection"
		]);
	}

	public allXmlSchemas(): xmlschemas.IXmlSchema[] {
		return super._allOfTypes<xmlschemas.IXmlSchema>([
			"XmlSchemas$XmlSchema"
		]);
	}

	findAppServiceActionByQualifiedName(qname: string): appservices.IAppServiceAction {
		return this._resolveName("AppServices$AppServiceAction", qname) as appservices.IAppServiceAction;
	}

	findAppServiceActionParameterByQualifiedName(qname: string): appservices.IAppServiceActionParameter {
		return this._resolveName("AppServices$AppServiceActionParameter", qname) as appservices.IAppServiceActionParameter;
	}

	findConstantByQualifiedName(qname: string): constants.IConstant {
		return this._resolveName("Constants$Constant", qname) as constants.IConstant;
	}

	findDataSetByQualifiedName(qname: string): datasets.IDataSet {
		return this._resolveName("DataSets$DataSet", qname) as datasets.IDataSet;
	}

	findDataSetParameterByQualifiedName(qname: string): datasets.IDataSetParameter {
		return this._resolveName("DataSets$DataSetParameter", qname) as datasets.IDataSetParameter;
	}

	findDocumentTemplateByQualifiedName(qname: string): documenttemplates.IDocumentTemplate {
		return this._resolveName("DocumentTemplates$DocumentTemplate", qname) as documenttemplates.IDocumentTemplate;
	}

	findAssociationBaseByQualifiedName(qname: string): domainmodels.IAssociationBase {
		return this._resolveName("DomainModels$AssociationBase", qname) as domainmodels.IAssociationBase;
	}

	findAttributeByQualifiedName(qname: string): domainmodels.IAttribute {
		return this._resolveName("DomainModels$Attribute", qname) as domainmodels.IAttribute;
	}

	findEntityByQualifiedName(qname: string): domainmodels.IEntity {
		return this._resolveName("DomainModels$Entity", qname) as domainmodels.IEntity;
	}

	findEnumerationByQualifiedName(qname: string): enumerations.IEnumeration {
		return this._resolveName("Enumerations$Enumeration", qname) as enumerations.IEnumeration;
	}

	findExportMappingByQualifiedName(qname: string): exportmappings.IExportMapping {
		return this._resolveName("ExportMappings$ExportMapping", qname) as exportmappings.IExportMapping;
	}

	findImageByQualifiedName(qname: string): images.IImage {
		return this._resolveName("Images$Image", qname) as images.IImage;
	}

	findImportMappingByQualifiedName(qname: string): importmappings.IImportMapping {
		return this._resolveName("ImportMappings$ImportMapping", qname) as importmappings.IImportMapping;
	}

	findJavaActionByQualifiedName(qname: string): javaactions.IJavaAction {
		return this._resolveName("JavaActions$JavaAction", qname) as javaactions.IJavaAction;
	}

	findJavaActionParameterByQualifiedName(qname: string): javaactions.IJavaActionParameter {
		return this._resolveName("JavaActions$JavaActionParameter", qname) as javaactions.IJavaActionParameter;
	}

	findJsonStructureByQualifiedName(qname: string): jsonstructures.IJsonStructure {
		return this._resolveName("JsonStructures$JsonStructure", qname) as jsonstructures.IJsonStructure;
	}

	findMenuDocumentByQualifiedName(qname: string): menus.IMenuDocument {
		return this._resolveName("Menus$MenuDocument", qname) as menus.IMenuDocument;
	}

	findMicroflowByQualifiedName(qname: string): microflows.IMicroflow {
		return this._resolveName("Microflows$Microflow", qname) as microflows.IMicroflow;
	}

	findMicroflowParameterByQualifiedName(qname: string): microflows.IMicroflowParameter {
		return this._resolveName("Microflows$MicroflowParameter", qname) as microflows.IMicroflowParameter;
	}

	findRuleByQualifiedName(qname: string): microflows.IRule {
		return this._resolveName("Microflows$Rule", qname) as microflows.IRule;
	}

	findRuleParameterByQualifiedName(qname: string): microflows.IRuleParameter {
		return this._resolveName("Microflows$RuleParameter", qname) as microflows.IRuleParameter;
	}

	findLayoutByQualifiedName(qname: string): pages.ILayout {
		return this._resolveName("Pages$Layout", qname) as pages.ILayout;
	}

	findLayoutParameterByQualifiedName(qname: string): pages.ILayoutParameter {
		return this._resolveName("Pages$LayoutParameter", qname) as pages.ILayoutParameter;
	}

	findPageByQualifiedName(qname: string): pages.IPage {
		return this._resolveName("Pages$Page", qname) as pages.IPage;
	}

	findSnippetByQualifiedName(qname: string): pages.ISnippet {
		return this._resolveName("Pages$Snippet", qname) as pages.ISnippet;
	}

	findRegularExpressionByQualifiedName(qname: string): regularexpressions.IRegularExpression {
		return this._resolveName("RegularExpressions$RegularExpression", qname) as regularexpressions.IRegularExpression;
	}

	findModuleRoleByQualifiedName(qname: string): security.IModuleRole {
		return this._resolveName("Security$ModuleRole", qname) as security.IModuleRole;
	}

	findUserRoleByQualifiedName(qname: string): security.IUserRole {
		return this._resolveName("Security$UserRole", qname) as security.IUserRole;
	}

	findImportedWebServiceByQualifiedName(qname: string): webservices.IImportedWebService {
		return this._resolveName("WebServices$ImportedWebService", qname) as webservices.IImportedWebService;
	}

	findXmlSchemaByQualifiedName(qname: string): xmlschemas.IXmlSchema {
		return this._resolveName("XmlSchemas$XmlSchema", qname) as xmlschemas.IXmlSchema;
	}

}

/**
 * This interface exposes a single Mendix Model.
 * This interface contains the parts of the {@link Model} that are exposed through the SDK.
 */
export interface IModel extends IBaseModel {

	/**
	 * The actual contents of the model.
	 */
	root: projects.IProject;

}
