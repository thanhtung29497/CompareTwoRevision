/* tslint:disable */

import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;

import {projects} from "./projects";

export namespace images {


	/**
	 * Interfaces and instance classes for types from the Mendix sub meta model `Images`.
	 */


	export interface IImage extends internal.IElement {
		model: IModel;
		containerAsImageCollection: IImageCollection;
		name: string;
		load(): Image;
		load(callback: (element: Image) => void, forceRefresh?: boolean);
	}

	export class Image extends internal.Element implements IImage {
		public static typeName: string = "Images$Image";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"name" : {
					"public" : {
						"currentValue" : true
					}
				}
			},
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsImageCollection() { return super.getContainerAs<ImageCollection>(ImageCollection); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Image, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __imageData: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(Image, this, "imageData", null, internal.PrimitiveTypeEnum.Blob);
		/**
		 * ?
		 */
		public get imageData(): string { return this.__imageData.get(); }
		public set imageData(newValue: string) { this.__imageData.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new Image() cannot be invoked directly, please use 'model.images.createImage()'"
				);
			}
		}

		/**
		 * Creates and returns a new Image instance in the SDK and on the server.
		 * The new Image will be automatically stored in the 'images' property
		 * of the parent ImageCollection element passed as argument.
		 */
		public static createIn(container: ImageCollection): Image {
			return internal.instancehelpers.createElement(container, Image, "images", true);
		}

		/**
		 * Creates and returns a new Image instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): Image {
			return internal.instancehelpers.createElement(model, Image);
		}

		_isByNameReferrable() { return true; }

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/images relevant section in reference guide}
	 */
	export interface IImageCollection extends projects.IDocument {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		images: internal.IList<IImage>;
		load(): ImageCollection;
		load(callback: (element: ImageCollection) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/images relevant section in reference guide}
	 */
	export class ImageCollection extends projects.Document implements IImageCollection {
		public static typeName: string = "Images$ImageCollection";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"images" : {
					"public" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }

		private __images: internal.PartListProperty<Image> =
			new internal.PartListProperty<Image>(ImageCollection, this, "images", []);
		public get images(): internal.IList<Image> { return this.__images.get(); }
		public set images(newValue: internal.IList<Image>) { this.__images.set(newValue); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "documents";
		}

		/**
		 * Creates a new ImageCollection unit in the SDK and on the server.
		 * Expects one argument, the projects.IFolderBase in which this unit is contained.
		 */
		public static createIn(container: projects.IFolderBase): ImageCollection {
			return internal.instancehelpers.createUnit(container, ImageCollection);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}
}


import {IModel} from "./base-model";
