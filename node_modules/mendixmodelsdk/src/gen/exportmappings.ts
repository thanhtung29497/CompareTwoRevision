/* tslint:disable */

import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;

import {mappings} from "./mappings";

export namespace exportmappings {


	/**
	 * Interfaces and instance classes for types from the Mendix sub meta model `ExportMappings`.
	 */


	/**
	 * See: {@link https://docs.mendix.com/refguide7/export-mappings relevant section in reference guide}
	 */
	export interface IExportMapping extends mappings.IMappingDocument {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		load(): ExportMapping;
		load(callback: (element: ExportMapping) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/export-mappings relevant section in reference guide}
	 */
	export class ExportMapping extends mappings.MappingDocument implements IExportMapping {
		public static typeName: string = "ExportMappings$ExportMapping";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"parameterTypeName" : {
					"deleted" : "6.1.0",
					"deletionMessage" : null
				},
				"nullValueOption" : {
					"introduced" : "6.7.0"
				}
			}
		}, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }

		private __parameterName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ExportMapping, this, "parameterName", "", internal.PrimitiveTypeEnum.String);
		public get parameterName(): string { return this.__parameterName.get(); }
		public set parameterName(newValue: string) { this.__parameterName.set(newValue); }
		private __parameterTypeName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ExportMapping, this, "parameterTypeName", "", internal.PrimitiveTypeEnum.String);
		/**
		 * In version 6.1.0: deleted
		 */
		public get parameterTypeName(): string { return this.__parameterTypeName.get(); }
		public set parameterTypeName(newValue: string) { this.__parameterTypeName.set(newValue); }
		private __isHeader: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(ExportMapping, this, "isHeader", false, internal.PrimitiveTypeEnum.Boolean);
		public get isHeader(): boolean { return this.__isHeader.get(); }
		public set isHeader(newValue: boolean) { this.__isHeader.set(newValue); }
		private __nullValueOption: internal.EnumProperty<microflows.NullValueOption> =
			new internal.EnumProperty<microflows.NullValueOption>(ExportMapping, this, "nullValueOption", microflows.NullValueOption.LeaveOutElement, microflows.NullValueOption);
		/**
		 * In version 6.7.0: introduced
		 */
		public get nullValueOption(): microflows.NullValueOption { return this.__nullValueOption.get(); }
		public set nullValueOption(newValue: microflows.NullValueOption) { this.__nullValueOption.set(newValue); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "documents";
		}

		/**
		 * Creates a new ExportMapping unit in the SDK and on the server.
		 * Expects one argument, the projects.IFolderBase in which this unit is contained.
		 */
		public static createIn(container: projects.IFolderBase): ExportMapping {
			return internal.instancehelpers.createUnit(container, ExportMapping);
		}

		_isByNameReferrable() { return true; }

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			if (this.__nullValueOption.isAvailable) {
				this.nullValueOption = microflows.NullValueOption.LeaveOutElement;
			}
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/export-mappings relevant section in reference guide}
	 */
	export interface IExportObjectMappingElement extends mappings.IObjectMappingElement {
		model: IModel;
		containerAsMappingDocument: mappings.IMappingDocument;
		containerAsObjectMappingElement: mappings.IObjectMappingElement;
		load(): ExportObjectMappingElement;
		load(callback: (element: ExportObjectMappingElement) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/export-mappings relevant section in reference guide}
	 */
	export class ExportObjectMappingElement extends mappings.ObjectMappingElement implements IExportObjectMappingElement {
		public static typeName: string = "ExportMappings$ExportObjectMappingElement";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMappingDocument() { return super.getContainerAs<mappings.MappingDocument>(mappings.MappingDocument); }
		get containerAsObjectMappingElement() { return super.getContainerAs<mappings.ObjectMappingElement>(mappings.ObjectMappingElement); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ExportObjectMappingElement() cannot be invoked directly, please use 'model.exportmappings.createExportObjectMappingElement()'"
				);
			}
		}


		/**
		 * Creates and returns a new ExportObjectMappingElement instance in the SDK and on the server.
		 * The new ExportObjectMappingElement will be automatically stored in the 'rootMappingElements' property
		 * of the parent mappings.MappingDocument element passed as argument.
		 */
		public static createInMappingDocumentUnderRootMappingElements(container: mappings.MappingDocument): ExportObjectMappingElement {
			return internal.instancehelpers.createElement(container, ExportObjectMappingElement, "rootMappingElements", true);
		}

		/**
		 * Creates and returns a new ExportObjectMappingElement instance in the SDK and on the server.
		 * The new ExportObjectMappingElement will be automatically stored in the 'children' property
		 * of the parent mappings.ObjectMappingElement element passed as argument.
		 */
		public static createInObjectMappingElementUnderChildren(container: mappings.ObjectMappingElement): ExportObjectMappingElement {
			return internal.instancehelpers.createElement(container, ExportObjectMappingElement, "children", true);
		}

		/**
		 * Creates and returns a new ExportObjectMappingElement instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ExportObjectMappingElement {
			return internal.instancehelpers.createElement(model, ExportObjectMappingElement);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/export-mappings relevant section in reference guide}
	 */
	export interface IExportValueMappingElement extends mappings.IValueMappingElement {
		model: IModel;
		containerAsObjectMappingElement: mappings.IObjectMappingElement;
		load(): ExportValueMappingElement;
		load(callback: (element: ExportValueMappingElement) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/export-mappings relevant section in reference guide}
	 */
	export class ExportValueMappingElement extends mappings.ValueMappingElement implements IExportValueMappingElement {
		public static typeName: string = "ExportMappings$ExportValueMappingElement";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsObjectMappingElement() { return super.getContainerAs<mappings.ObjectMappingElement>(mappings.ObjectMappingElement); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ExportValueMappingElement() cannot be invoked directly, please use 'model.exportmappings.createExportValueMappingElement()'"
				);
			}
		}

		/**
		 * Creates and returns a new ExportValueMappingElement instance in the SDK and on the server.
		 * The new ExportValueMappingElement will be automatically stored in the 'children' property
		 * of the parent mappings.ObjectMappingElement element passed as argument.
		 */
		public static createIn(container: mappings.ObjectMappingElement): ExportValueMappingElement {
			return internal.instancehelpers.createElement(container, ExportValueMappingElement, "children", true);
		}

		/**
		 * Creates and returns a new ExportValueMappingElement instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ExportValueMappingElement {
			return internal.instancehelpers.createElement(model, ExportValueMappingElement);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}
}

import {microflows} from "./microflows";
import {projects} from "./projects";

import {IModel} from "./base-model";
