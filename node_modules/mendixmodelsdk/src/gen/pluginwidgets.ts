/* tslint:disable */

import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;

import {pages} from "./pages";

export namespace pluginwidgets {


	/**
	 * Interfaces and instance classes for types from the Mendix sub meta model `PluginWidgets`.
	 */


	/**
	 * In version 7.0.1: introduced
	 */
	export interface IPluginWidget extends pages.IWidget {
		model: IModel;
		containerAsDataView: pages.IDataView;
		containerAsDivContainer: pages.IDivContainer;
		containerAsGroupBox: pages.IGroupBox;
		containerAsHeader: pages.IHeader;
		containerAsLayout: pages.ILayout;
		containerAsLayoutCallArgument: pages.ILayoutCallArgument;
		containerAsLayoutGridColumn: pages.ILayoutGridColumn;
		containerAsListView: pages.IListView;
		containerAsListViewTemplate: pages.IListViewTemplate;
		containerAsNavigationListItem: pages.INavigationListItem;
		containerAsScrollContainerRegion: pages.IScrollContainerRegion;
		containerAsSnippet: pages.ISnippet;
		containerAsSplitPane: pages.ISplitPane;
		containerAsTabPage: pages.ITabPage;
		containerAsTableCell: pages.ITableCell;
		containerAsTemplateGridContents: pages.ITemplateGridContents;
		containerAsVerticalFlow: pages.IVerticalFlow;
		load(): PluginWidget;
		load(callback: (element: PluginWidget) => void, forceRefresh?: boolean);
	}

	/**
	 * In version 7.0.1: introduced
	 */
	export class PluginWidget extends pages.Widget implements IPluginWidget {
		public static typeName: string = "PluginWidgets$PluginWidget";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "7.0.1",
			"experimental" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<pages.DataView>(pages.DataView); }
		get containerAsDivContainer() { return super.getContainerAs<pages.DivContainer>(pages.DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<pages.GroupBox>(pages.GroupBox); }
		get containerAsHeader() { return super.getContainerAs<pages.Header>(pages.Header); }
		get containerAsLayout() { return super.getContainerAs<pages.Layout>(pages.Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<pages.LayoutCallArgument>(pages.LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<pages.LayoutGridColumn>(pages.LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<pages.ListView>(pages.ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<pages.ListViewTemplate>(pages.ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<pages.NavigationListItem>(pages.NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<pages.ScrollContainerRegion>(pages.ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<pages.Snippet>(pages.Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<pages.SplitPane>(pages.SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<pages.TabPage>(pages.TabPage); }
		get containerAsTableCell() { return super.getContainerAs<pages.TableCell>(pages.TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<pages.TemplateGridContents>(pages.TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<pages.VerticalFlow>(pages.VerticalFlow); }

		private __pluginWidgetName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(PluginWidget, this, "pluginWidgetName", "", internal.PrimitiveTypeEnum.String);
		public get pluginWidgetName(): string { return this.__pluginWidgetName.get(); }
		public set pluginWidgetName(newValue: string) { this.__pluginWidgetName.set(newValue); }
		private __pluginWidgetVersion: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(PluginWidget, this, "pluginWidgetVersion", "", internal.PrimitiveTypeEnum.String);
		public get pluginWidgetVersion(): string { return this.__pluginWidgetVersion.get(); }
		public set pluginWidgetVersion(newValue: string) { this.__pluginWidgetVersion.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new PluginWidget() cannot be invoked directly, please use 'model.pluginwidgets.createPluginWidget()'"
				);
			}
		}


		/**
		 * Creates and returns a new PluginWidget instance in the SDK and on the server.
		 * The new PluginWidget will be automatically stored in the 'footerWidget' property
		 * of the parent pages.DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: pages.DataView): PluginWidget {
			internal.createInVersionCheck(container.model, PluginWidget.typeName,
				["7.0.1"]
			);
			return internal.instancehelpers.createElement(container, PluginWidget, "footerWidget", false);
		}

		/**
		 * Creates and returns a new PluginWidget instance in the SDK and on the server.
		 * The new PluginWidget will be automatically stored in the 'widget' property
		 * of the parent pages.DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  7.0.1
		 */
		public static createInDataViewUnderWidget(container: pages.DataView): PluginWidget {
			internal.createInVersionCheck(container.model, PluginWidget.typeName,
				["7.0.1"]
			);
			return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
		}

		/**
		 * Creates and returns a new PluginWidget instance in the SDK and on the server.
		 * The new PluginWidget will be automatically stored in the 'widget' property
		 * of the parent pages.DivContainer element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  7.0.1
		 */
		public static createInDivContainerUnderWidget(container: pages.DivContainer): PluginWidget {
			internal.createInVersionCheck(container.model, PluginWidget.typeName,
				["7.0.1"]
			);
			return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
		}

		/**
		 * Creates and returns a new PluginWidget instance in the SDK and on the server.
		 * The new PluginWidget will be automatically stored in the 'widget' property
		 * of the parent pages.GroupBox element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  7.0.1
		 */
		public static createInGroupBoxUnderWidget(container: pages.GroupBox): PluginWidget {
			internal.createInVersionCheck(container.model, PluginWidget.typeName,
				["7.0.1"]
			);
			return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
		}

		/**
		 * Creates and returns a new PluginWidget instance in the SDK and on the server.
		 * The new PluginWidget will be automatically stored in the 'leftWidget' property
		 * of the parent pages.Header element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  7.0.1
		 */
		public static createInHeaderUnderLeftWidget(container: pages.Header): PluginWidget {
			internal.createInVersionCheck(container.model, PluginWidget.typeName,
				["7.0.1"]
			);
			return internal.instancehelpers.createElement(container, PluginWidget, "leftWidget", false);
		}

		/**
		 * Creates and returns a new PluginWidget instance in the SDK and on the server.
		 * The new PluginWidget will be automatically stored in the 'rightWidget' property
		 * of the parent pages.Header element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  7.0.1
		 */
		public static createInHeaderUnderRightWidget(container: pages.Header): PluginWidget {
			internal.createInVersionCheck(container.model, PluginWidget.typeName,
				["7.0.1"]
			);
			return internal.instancehelpers.createElement(container, PluginWidget, "rightWidget", false);
		}

		/**
		 * Creates and returns a new PluginWidget instance in the SDK and on the server.
		 * The new PluginWidget will be automatically stored in the 'widget' property
		 * of the parent pages.Layout element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  7.0.1
		 */
		public static createInLayoutUnderWidget(container: pages.Layout): PluginWidget {
			internal.createInVersionCheck(container.model, PluginWidget.typeName,
				["7.0.1"]
			);
			return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
		}

		/**
		 * Creates and returns a new PluginWidget instance in the SDK and on the server.
		 * The new PluginWidget will be automatically stored in the 'widget' property
		 * of the parent pages.LayoutCallArgument element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  7.0.1
		 */
		public static createInLayoutCallArgumentUnderWidget(container: pages.LayoutCallArgument): PluginWidget {
			internal.createInVersionCheck(container.model, PluginWidget.typeName,
				["7.0.1"]
			);
			return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
		}

		/**
		 * Creates and returns a new PluginWidget instance in the SDK and on the server.
		 * The new PluginWidget will be automatically stored in the 'widget' property
		 * of the parent pages.LayoutGridColumn element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  7.0.1
		 */
		public static createInLayoutGridColumnUnderWidget(container: pages.LayoutGridColumn): PluginWidget {
			internal.createInVersionCheck(container.model, PluginWidget.typeName,
				["7.0.1"]
			);
			return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
		}

		/**
		 * Creates and returns a new PluginWidget instance in the SDK and on the server.
		 * The new PluginWidget will be automatically stored in the 'widget' property
		 * of the parent pages.ListView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  7.0.1
		 */
		public static createInListViewUnderWidget(container: pages.ListView): PluginWidget {
			internal.createInVersionCheck(container.model, PluginWidget.typeName,
				["7.0.1"]
			);
			return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
		}

		/**
		 * Creates and returns a new PluginWidget instance in the SDK and on the server.
		 * The new PluginWidget will be automatically stored in the 'widget' property
		 * of the parent pages.ListViewTemplate element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  7.0.1
		 */
		public static createInListViewTemplateUnderWidget(container: pages.ListViewTemplate): PluginWidget {
			internal.createInVersionCheck(container.model, PluginWidget.typeName,
				["7.0.1"]
			);
			return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
		}

		/**
		 * Creates and returns a new PluginWidget instance in the SDK and on the server.
		 * The new PluginWidget will be automatically stored in the 'widget' property
		 * of the parent pages.NavigationListItem element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  7.0.1
		 */
		public static createInNavigationListItemUnderWidget(container: pages.NavigationListItem): PluginWidget {
			internal.createInVersionCheck(container.model, PluginWidget.typeName,
				["7.0.1"]
			);
			return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
		}

		/**
		 * Creates and returns a new PluginWidget instance in the SDK and on the server.
		 * The new PluginWidget will be automatically stored in the 'widget' property
		 * of the parent pages.ScrollContainerRegion element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  7.0.1
		 */
		public static createInScrollContainerRegionUnderWidget(container: pages.ScrollContainerRegion): PluginWidget {
			internal.createInVersionCheck(container.model, PluginWidget.typeName,
				["7.0.1"]
			);
			return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
		}

		/**
		 * Creates and returns a new PluginWidget instance in the SDK and on the server.
		 * The new PluginWidget will be automatically stored in the 'widget' property
		 * of the parent pages.Snippet element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  7.0.1
		 */
		public static createInSnippetUnderWidget(container: pages.Snippet): PluginWidget {
			internal.createInVersionCheck(container.model, PluginWidget.typeName,
				["7.0.1"]
			);
			return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
		}

		/**
		 * Creates and returns a new PluginWidget instance in the SDK and on the server.
		 * The new PluginWidget will be automatically stored in the 'firstWidget' property
		 * of the parent pages.SplitPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  7.0.1
		 */
		public static createInSplitPaneUnderFirstWidget(container: pages.SplitPane): PluginWidget {
			internal.createInVersionCheck(container.model, PluginWidget.typeName,
				["7.0.1"]
			);
			return internal.instancehelpers.createElement(container, PluginWidget, "firstWidget", false);
		}

		/**
		 * Creates and returns a new PluginWidget instance in the SDK and on the server.
		 * The new PluginWidget will be automatically stored in the 'secondWidget' property
		 * of the parent pages.SplitPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  7.0.1
		 */
		public static createInSplitPaneUnderSecondWidget(container: pages.SplitPane): PluginWidget {
			internal.createInVersionCheck(container.model, PluginWidget.typeName,
				["7.0.1"]
			);
			return internal.instancehelpers.createElement(container, PluginWidget, "secondWidget", false);
		}

		/**
		 * Creates and returns a new PluginWidget instance in the SDK and on the server.
		 * The new PluginWidget will be automatically stored in the 'widget' property
		 * of the parent pages.TabPage element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  7.0.1
		 */
		public static createInTabPageUnderWidget(container: pages.TabPage): PluginWidget {
			internal.createInVersionCheck(container.model, PluginWidget.typeName,
				["7.0.1"]
			);
			return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
		}

		/**
		 * Creates and returns a new PluginWidget instance in the SDK and on the server.
		 * The new PluginWidget will be automatically stored in the 'widget' property
		 * of the parent pages.TableCell element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  7.0.1
		 */
		public static createInTableCellUnderWidget(container: pages.TableCell): PluginWidget {
			internal.createInVersionCheck(container.model, PluginWidget.typeName,
				["7.0.1"]
			);
			return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
		}

		/**
		 * Creates and returns a new PluginWidget instance in the SDK and on the server.
		 * The new PluginWidget will be automatically stored in the 'widget' property
		 * of the parent pages.TemplateGridContents element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  7.0.1
		 */
		public static createInTemplateGridContentsUnderWidget(container: pages.TemplateGridContents): PluginWidget {
			internal.createInVersionCheck(container.model, PluginWidget.typeName,
				["7.0.1"]
			);
			return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
		}

		/**
		 * Creates and returns a new PluginWidget instance in the SDK and on the server.
		 * The new PluginWidget will be automatically stored in the 'widgets' property
		 * of the parent pages.VerticalFlow element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  7.0.1
		 */
		public static createInVerticalFlowUnderWidgets(container: pages.VerticalFlow): PluginWidget {
			internal.createInVersionCheck(container.model, PluginWidget.typeName,
				["7.0.1"]
			);
			return internal.instancehelpers.createElement(container, PluginWidget, "widgets", true);
		}

		/**
		 * Creates and returns a new PluginWidget instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): PluginWidget {
			return internal.instancehelpers.createElement(model, PluginWidget);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}
}


import {IModel} from "./base-model";
