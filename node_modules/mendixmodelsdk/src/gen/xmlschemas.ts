/* tslint:disable */

import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;

import {projects} from "./projects";
import {mappings} from "./mappings";

export namespace xmlschemas {

	export class XmlPrimitiveType extends internal.IEnum {
		public static Unknown: XmlPrimitiveType = new XmlPrimitiveType("Unknown", { });
		public static Boolean: XmlPrimitiveType = new XmlPrimitiveType("Boolean", { });
		public static Date: XmlPrimitiveType = new XmlPrimitiveType("Date", { });
		public static Time: XmlPrimitiveType = new XmlPrimitiveType("Time", { });
		public static DateTime: XmlPrimitiveType = new XmlPrimitiveType("DateTime", { });
		public static Decimal: XmlPrimitiveType = new XmlPrimitiveType("Decimal", { });
		public static Float: XmlPrimitiveType = new XmlPrimitiveType("Float", { });
		public static Integer: XmlPrimitiveType = new XmlPrimitiveType("Integer", { });
		public static Long: XmlPrimitiveType = new XmlPrimitiveType("Long", {
			"introduced" : "6.2.0"
		});
		public static Binary: XmlPrimitiveType = new XmlPrimitiveType("Binary", { });
		public static String: XmlPrimitiveType = new XmlPrimitiveType("String", { });
		public static AnyType: XmlPrimitiveType = new XmlPrimitiveType("AnyType", { });
		protected qualifiedTsTypeName: string = "xmlschemas.XmlPrimitiveType";
	}


	/**
	 * Interfaces and instance classes for types from the Mendix sub meta model `XmlSchemas`.
	 */


	export interface IMxSchema extends projects.IDocument {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		load(): MxSchema;
		load(callback: (element: MxSchema) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class MxSchema extends projects.Document implements IMxSchema {
		public static typeName: string = "XmlSchemas$MxSchema";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }


		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * In version 6.6.0: introduced
	 */
	export interface IXmlElement extends mappings.IElement {
		model: IModel;
		containerAsJsonStructure: jsonstructures.IJsonStructure;
		containerAsElement: mappings.IElement;
		load(): XmlElement;
		load(callback: (element: XmlElement) => void, forceRefresh?: boolean);
	}

	/**
	 * In version 6.6.0: introduced
	 */
	export class XmlElement extends mappings.Element implements IXmlElement {
		public static typeName: string = "XmlSchemas$XmlElement";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.6.0"
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsJsonStructure() { return super.getContainerAs<jsonstructures.JsonStructure>(jsonstructures.JsonStructure); }
		get containerAsElement() { return super.getContainerAs<mappings.Element>(mappings.Element); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new XmlElement() cannot be invoked directly, please use 'model.xmlschemas.createXmlElement()'"
				);
			}
		}


		/**
		 * Creates and returns a new XmlElement instance in the SDK and on the server.
		 * The new XmlElement will be automatically stored in the 'elements' property
		 * of the parent jsonstructures.JsonStructure element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInJsonStructureUnderElements(container: jsonstructures.JsonStructure): XmlElement {
			internal.createInVersionCheck(container.model, XmlElement.typeName,
				["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, XmlElement, "elements", true);
		}

		/**
		 * Creates and returns a new XmlElement instance in the SDK and on the server.
		 * The new XmlElement will be automatically stored in the 'children' property
		 * of the parent mappings.Element element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInElementUnderChildren(container: mappings.Element): XmlElement {
			internal.createInVersionCheck(container.model, XmlElement.typeName,
				["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, XmlElement, "children", true);
		}

		/**
		 * Creates and returns a new XmlElement instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): XmlElement {
			return internal.instancehelpers.createElement(model, XmlElement);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/xml-schemas relevant section in reference guide}
	 */
	export interface IXmlSchema extends IMxSchema {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		load(): XmlSchema;
		load(callback: (element: XmlSchema) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/xml-schemas relevant section in reference guide}
	 */
	export class XmlSchema extends MxSchema implements IXmlSchema {
		public static typeName: string = "XmlSchemas$XmlSchema";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }

		private __entries: internal.PartListProperty<XmlSchemaEntry> =
			new internal.PartListProperty<XmlSchemaEntry>(XmlSchema, this, "entries", []);
		public get entries(): internal.IList<XmlSchemaEntry> { return this.__entries.get(); }
		public set entries(newValue: internal.IList<XmlSchemaEntry>) { this.__entries.set(newValue); }
		private __filePath: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(XmlSchema, this, "filePath", "", internal.PrimitiveTypeEnum.String);
		public get filePath(): string { return this.__filePath.get(); }
		public set filePath(newValue: string) { this.__filePath.set(newValue); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "documents";
		}

		/**
		 * Creates a new XmlSchema unit in the SDK and on the server.
		 * Expects one argument, the projects.IFolderBase in which this unit is contained.
		 */
		public static createIn(container: projects.IFolderBase): XmlSchema {
			return internal.instancehelpers.createUnit(container, XmlSchema);
		}

		_isByNameReferrable() { return true; }

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IXmlSchemaEntry extends internal.IElement {
		model: IModel;
		containerAsWsdlDescription: webservices.IWsdlDescription;
		containerAsXmlSchema: IXmlSchema;
		load(): XmlSchemaEntry;
		load(callback: (element: XmlSchemaEntry) => void, forceRefresh?: boolean);
	}

	export class XmlSchemaEntry extends internal.Element implements IXmlSchemaEntry {
		public static typeName: string = "XmlSchemas$XmlSchemaEntry";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsWsdlDescription() { return super.getContainerAs<webservices.WsdlDescription>(webservices.WsdlDescription); }
		get containerAsXmlSchema() { return super.getContainerAs<XmlSchema>(XmlSchema); }

		private __targetNamespace: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(XmlSchemaEntry, this, "targetNamespace", "", internal.PrimitiveTypeEnum.String);
		public get targetNamespace(): string { return this.__targetNamespace.get(); }
		public set targetNamespace(newValue: string) { this.__targetNamespace.set(newValue); }
		private __location: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(XmlSchemaEntry, this, "location", "", internal.PrimitiveTypeEnum.String);
		public get location(): string { return this.__location.get(); }
		public set location(newValue: string) { this.__location.set(newValue); }
		private __contents: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(XmlSchemaEntry, this, "contents", "", internal.PrimitiveTypeEnum.String);
		public get contents(): string { return this.__contents.get(); }
		public set contents(newValue: string) { this.__contents.set(newValue); }
		private __localizedLocationFormat: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(XmlSchemaEntry, this, "localizedLocationFormat", "", internal.PrimitiveTypeEnum.String);
		public get localizedLocationFormat(): string { return this.__localizedLocationFormat.get(); }
		public set localizedLocationFormat(newValue: string) { this.__localizedLocationFormat.set(newValue); }
		private __localizedContentsFormat: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(XmlSchemaEntry, this, "localizedContentsFormat", "", internal.PrimitiveTypeEnum.String);
		public get localizedContentsFormat(): string { return this.__localizedContentsFormat.get(); }
		public set localizedContentsFormat(newValue: string) { this.__localizedContentsFormat.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new XmlSchemaEntry() cannot be invoked directly, please use 'model.xmlschemas.createXmlSchemaEntry()'"
				);
			}
		}


		/**
		 * Creates and returns a new XmlSchemaEntry instance in the SDK and on the server.
		 * The new XmlSchemaEntry will be automatically stored in the 'schemaEntries' property
		 * of the parent webservices.WsdlDescription element passed as argument.
		 */
		public static createInWsdlDescriptionUnderSchemaEntries(container: webservices.WsdlDescription): XmlSchemaEntry {
			return internal.instancehelpers.createElement(container, XmlSchemaEntry, "schemaEntries", true);
		}

		/**
		 * Creates and returns a new XmlSchemaEntry instance in the SDK and on the server.
		 * The new XmlSchemaEntry will be automatically stored in the 'entries' property
		 * of the parent XmlSchema element passed as argument.
		 */
		public static createInXmlSchemaUnderEntries(container: XmlSchema): XmlSchemaEntry {
			return internal.instancehelpers.createElement(container, XmlSchemaEntry, "entries", true);
		}

		/**
		 * Creates and returns a new XmlSchemaEntry instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): XmlSchemaEntry {
			return internal.instancehelpers.createElement(model, XmlSchemaEntry);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}
}

import {jsonstructures} from "./jsonstructures";
import {webservices} from "./webservices";

import {IModel} from "./base-model";
