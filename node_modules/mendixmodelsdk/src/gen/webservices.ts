/* tslint:disable */

import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;

import {projects} from "./projects";

export namespace webservices {

	export class AppServiceState extends internal.IEnum {
		public static Draft: AppServiceState = new AppServiceState("Draft", { });
		public static Consumable: AppServiceState = new AppServiceState("Consumable", { });
		public static Deprecated: AppServiceState = new AppServiceState("Deprecated", { });
		protected qualifiedTsTypeName: string = "webservices.AppServiceState";
	}

	export class HeaderAuthentication extends internal.IEnum {
		public static None: HeaderAuthentication = new HeaderAuthentication("None", { });
		public static UsernamePassword: HeaderAuthentication = new HeaderAuthentication("UsernamePassword", { });
		public static Custom: HeaderAuthentication = new HeaderAuthentication("Custom", { });
		protected qualifiedTsTypeName: string = "webservices.HeaderAuthentication";
	}

	export class SoapVersion extends internal.IEnum {
		public static Soap11: SoapVersion = new SoapVersion("Soap11", { });
		public static Soap12: SoapVersion = new SoapVersion("Soap12", { });
		protected qualifiedTsTypeName: string = "webservices.SoapVersion";
	}


	/**
	 * Interfaces and instance classes for types from the Mendix sub meta model `WebServices`.
	 */


	export interface IDataMember extends internal.IElement {
		model: IModel;
		containerAsDataEntityBase: IDataEntityBase;
		containerAsPublishedParameter: IPublishedParameter;
		containerAsPublishedResource: IPublishedResource;
		load(): DataMember;
		load(callback: (element: DataMember) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class DataMember extends internal.Element implements IDataMember {
		public static typeName: string = "WebServices$DataMember";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataEntityBase() { return super.getContainerAs<DataEntityBase>(DataEntityBase); }
		get containerAsPublishedParameter() { return super.getContainerAs<PublishedParameter>(PublishedParameter); }
		get containerAsPublishedResource() { return super.getContainerAs<PublishedResource>(PublishedResource); }

		private __isLockedByContract: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(DataMember, this, "isLockedByContract", false, internal.PrimitiveTypeEnum.Boolean);
		public get isLockedByContract(): boolean { return this.__isLockedByContract.get(); }
		public set isLockedByContract(newValue: boolean) { this.__isLockedByContract.set(newValue); }
		private __exposedName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(DataMember, this, "exposedName", "", internal.PrimitiveTypeEnum.String);
		public get exposedName(): string { return this.__exposedName.get(); }
		public set exposedName(newValue: string) { this.__exposedName.set(newValue); }
		private __isOptionalByContract: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(DataMember, this, "isOptionalByContract", false, internal.PrimitiveTypeEnum.Boolean);
		public get isOptionalByContract(): boolean { return this.__isOptionalByContract.get(); }
		public set isOptionalByContract(newValue: boolean) { this.__isOptionalByContract.set(newValue); }
		private __isOptional: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(DataMember, this, "isOptional", false, internal.PrimitiveTypeEnum.Boolean);
		public get isOptional(): boolean { return this.__isOptional.get(); }
		public set isOptional(newValue: boolean) { this.__isOptional.set(newValue); }
		private __isNillableByContract: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(DataMember, this, "isNillableByContract", false, internal.PrimitiveTypeEnum.Boolean);
		public get isNillableByContract(): boolean { return this.__isNillableByContract.get(); }
		public set isNillableByContract(newValue: boolean) { this.__isNillableByContract.set(newValue); }
		private __isNillable: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(DataMember, this, "isNillable", false, internal.PrimitiveTypeEnum.Boolean);
		public get isNillable(): boolean { return this.__isNillable.get(); }
		public set isNillable(newValue: boolean) { this.__isNillable.set(newValue); }
		private __isKey: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(DataMember, this, "isKey", false, internal.PrimitiveTypeEnum.Boolean);
		public get isKey(): boolean { return this.__isKey.get(); }
		public set isKey(newValue: boolean) { this.__isKey.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataMember() cannot be invoked directly, please use 'model.webservices.createDataMember()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IDataEntityBase extends IDataMember {
		model: IModel;
		containerAsDataEntityBase: IDataEntityBase;
		containerAsPublishedParameter: IPublishedParameter;
		containerAsPublishedResource: IPublishedResource;
		load(): DataEntityBase;
		load(callback: (element: DataEntityBase) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class DataEntityBase extends DataMember implements IDataEntityBase {
		public static typeName: string = "WebServices$DataEntityBase";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataEntityBase() { return super.getContainerAs<DataEntityBase>(DataEntityBase); }
		get containerAsPublishedParameter() { return super.getContainerAs<PublishedParameter>(PublishedParameter); }
		get containerAsPublishedResource() { return super.getContainerAs<PublishedResource>(PublishedResource); }

		private __childMembers: internal.PartListProperty<DataMember> =
			new internal.PartListProperty<DataMember>(DataEntityBase, this, "childMembers", []);
		public get childMembers(): internal.IList<DataMember> { return this.__childMembers.get(); }
		public set childMembers(newValue: internal.IList<DataMember>) { this.__childMembers.set(newValue); }
		private __entity: internal.ByNameReferenceProperty<domainmodels.IEntity> =
			new internal.ByNameReferenceProperty<domainmodels.IEntity>(DataEntityBase, this, "entity", null, "DomainModels$Entity");
		public get entity(): domainmodels.IEntity { return this.__entity.get(); }
		public set entity(newValue: domainmodels.IEntity) { this.__entity.set(newValue); }
		get entityQualifiedName(): string { return this.__entity.qualifiedName(); }
		private __exposedItemName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(DataEntityBase, this, "exposedItemName", "", internal.PrimitiveTypeEnum.String);
		public get exposedItemName(): string { return this.__exposedItemName.get(); }
		public set exposedItemName(newValue: string) { this.__exposedItemName.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataEntityBase() cannot be invoked directly, please use 'model.webservices.createDataEntityBase()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IDataAssociation extends IDataEntityBase {
		model: IModel;
		containerAsDataEntityBase: IDataEntityBase;
		load(): DataAssociation;
		load(callback: (element: DataAssociation) => void, forceRefresh?: boolean);
	}

	export class DataAssociation extends DataEntityBase implements IDataAssociation {
		public static typeName: string = "WebServices$DataAssociation";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataEntityBase() { return super.getContainerAs<DataEntityBase>(DataEntityBase); }

		private __associationByContract: internal.PartProperty<appservices.MsdAssociation> =
			new internal.PartProperty<appservices.MsdAssociation>(DataAssociation, this, "associationByContract", null, false);
		public get associationByContract(): appservices.MsdAssociation { return this.__associationByContract.get(); }
		public set associationByContract(newValue: appservices.MsdAssociation) { this.__associationByContract.set(newValue); }
		private __association: internal.ByNameReferenceProperty<domainmodels.IAssociationBase> =
			new internal.ByNameReferenceProperty<domainmodels.IAssociationBase>(DataAssociation, this, "association", null, "DomainModels$AssociationBase");
		public get association(): domainmodels.IAssociationBase { return this.__association.get(); }
		public set association(newValue: domainmodels.IAssociationBase) { this.__association.set(newValue); }
		get associationQualifiedName(): string { return this.__association.qualifiedName(); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataAssociation() cannot be invoked directly, please use 'model.webservices.createDataAssociation()'"
				);
			}
		}

		/**
		 * Creates and returns a new DataAssociation instance in the SDK and on the server.
		 * The new DataAssociation will be automatically stored in the 'childMembers' property
		 * of the parent DataEntityBase element passed as argument.
		 */
		public static createIn(container: DataEntityBase): DataAssociation {
			return internal.instancehelpers.createElement(container, DataAssociation, "childMembers", true);
		}

		/**
		 * Creates and returns a new DataAssociation instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DataAssociation {
			return internal.instancehelpers.createElement(model, DataAssociation);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IDataAttribute extends IDataMember {
		model: IModel;
		containerAsDataEntityBase: IDataEntityBase;
		load(): DataAttribute;
		load(callback: (element: DataAttribute) => void, forceRefresh?: boolean);
	}

	export class DataAttribute extends DataMember implements IDataAttribute {
		public static typeName: string = "WebServices$DataAttribute";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataEntityBase() { return super.getContainerAs<DataEntityBase>(DataEntityBase); }

		private __attributeByContract: internal.PartProperty<appservices.MsdAttribute> =
			new internal.PartProperty<appservices.MsdAttribute>(DataAttribute, this, "attributeByContract", null, false);
		public get attributeByContract(): appservices.MsdAttribute { return this.__attributeByContract.get(); }
		public set attributeByContract(newValue: appservices.MsdAttribute) { this.__attributeByContract.set(newValue); }
		private __attribute: internal.ByNameReferenceProperty<domainmodels.IAttribute> =
			new internal.ByNameReferenceProperty<domainmodels.IAttribute>(DataAttribute, this, "attribute", null, "DomainModels$Attribute");
		public get attribute(): domainmodels.IAttribute { return this.__attribute.get(); }
		public set attribute(newValue: domainmodels.IAttribute) { this.__attribute.set(newValue); }
		get attributeQualifiedName(): string { return this.__attribute.qualifiedName(); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataAttribute() cannot be invoked directly, please use 'model.webservices.createDataAttribute()'"
				);
			}
		}

		/**
		 * Creates and returns a new DataAttribute instance in the SDK and on the server.
		 * The new DataAttribute will be automatically stored in the 'childMembers' property
		 * of the parent DataEntityBase element passed as argument.
		 */
		public static createIn(container: DataEntityBase): DataAttribute {
			return internal.instancehelpers.createElement(container, DataAttribute, "childMembers", true);
		}

		/**
		 * Creates and returns a new DataAttribute instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DataAttribute {
			return internal.instancehelpers.createElement(model, DataAttribute);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IDataEntity extends IDataEntityBase {
		model: IModel;
		containerAsDataEntityBase: IDataEntityBase;
		containerAsPublishedParameter: IPublishedParameter;
		containerAsPublishedResource: IPublishedResource;
		load(): DataEntity;
		load(callback: (element: DataEntity) => void, forceRefresh?: boolean);
	}

	export class DataEntity extends DataEntityBase implements IDataEntity {
		public static typeName: string = "WebServices$DataEntity";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsDataEntityBase() { return super.getContainerAs<DataEntityBase>(DataEntityBase); }
		get containerAsPublishedParameter() { return super.getContainerAs<PublishedParameter>(PublishedParameter); }
		get containerAsPublishedResource() { return super.getContainerAs<PublishedResource>(PublishedResource); }


		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new DataEntity() cannot be invoked directly, please use 'model.webservices.createDataEntity()'"
				);
			}
		}


		/**
		 * Creates and returns a new DataEntity instance in the SDK and on the server.
		 * The new DataEntity will be automatically stored in the 'childMembers' property
		 * of the parent DataEntityBase element passed as argument.
		 */
		public static createInDataEntityBaseUnderChildMembers(container: DataEntityBase): DataEntity {
			return internal.instancehelpers.createElement(container, DataEntity, "childMembers", true);
		}

		/**
		 * Creates and returns a new DataEntity instance in the SDK and on the server.
		 * The new DataEntity will be automatically stored in the 'dataEntity' property
		 * of the parent PublishedParameter element passed as argument.
		 */
		public static createInPublishedParameterUnderDataEntity(container: PublishedParameter): DataEntity {
			return internal.instancehelpers.createElement(container, DataEntity, "dataEntity", false);
		}

		/**
		 * Creates and returns a new DataEntity instance in the SDK and on the server.
		 * The new DataEntity will be automatically stored in the 'dataEntity' property
		 * of the parent PublishedResource element passed as argument.
		 */
		public static createInPublishedResourceUnderDataEntity(container: PublishedResource): DataEntity {
			return internal.instancehelpers.createElement(container, DataEntity, "dataEntity", false);
		}

		/**
		 * Creates and returns a new DataEntity instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): DataEntity {
			return internal.instancehelpers.createElement(model, DataEntity);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/consumed-web-services relevant section in reference guide}
	 */
	export interface IImportedWebService extends projects.IDocument {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		load(): ImportedWebService;
		load(callback: (element: ImportedWebService) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/consumed-web-services relevant section in reference guide}
	 */
	export class ImportedWebService extends projects.Document implements IImportedWebService {
		public static typeName: string = "WebServices$ImportedWebService";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"useMtom" : {
					"introduced" : "6.4.1"
				}
			}
		}, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }

		private __wsdlDescription: internal.PartProperty<WsdlDescription> =
			new internal.PartProperty<WsdlDescription>(ImportedWebService, this, "wsdlDescription", null, false);
		public get wsdlDescription(): WsdlDescription { return this.__wsdlDescription.get(); }
		public set wsdlDescription(newValue: WsdlDescription) { this.__wsdlDescription.set(newValue); }
		private __wsdlUrl: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ImportedWebService, this, "wsdlUrl", "", internal.PrimitiveTypeEnum.String);
		public get wsdlUrl(): string { return this.__wsdlUrl.get(); }
		public set wsdlUrl(newValue: string) { this.__wsdlUrl.set(newValue); }
		private __useMtom: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(ImportedWebService, this, "useMtom", false, internal.PrimitiveTypeEnum.Boolean);
		/**
		 * In version 6.4.1: introduced
		 */
		public get useMtom(): boolean { return this.__useMtom.get(); }
		public set useMtom(newValue: boolean) { this.__useMtom.set(newValue); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "documents";
		}

		/**
		 * Creates a new ImportedWebService unit in the SDK and on the server.
		 * Expects one argument, the projects.IFolderBase in which this unit is contained.
		 */
		public static createIn(container: projects.IFolderBase): ImportedWebService {
			return internal.instancehelpers.createUnit(container, ImportedWebService);
		}

		_isByNameReferrable() { return true; }

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			if (this.__useMtom.isAvailable) {
				this.useMtom = true;
			}
		}

	}

	export interface IOperationInfo extends internal.IElement {
		model: IModel;
		containerAsServiceInfo: IServiceInfo;
		load(): OperationInfo;
		load(callback: (element: OperationInfo) => void, forceRefresh?: boolean);
	}

	export class OperationInfo extends internal.Element implements IOperationInfo {
		public static typeName: string = "WebServices$OperationInfo";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"requestHeaderRpcElement" : {
					"required" : {
						"currentValue" : true
					}
				},
				"requestBodyRpcElement" : {
					"required" : {
						"currentValue" : true
					}
				},
				"responseBodyRpcElement" : {
					"required" : {
						"currentValue" : true
					}
				},
				"allowSimpleMappingInheritance" : {
					"deleted" : "6.1.0",
					"deletionMessage" : null
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsServiceInfo() { return super.getContainerAs<ServiceInfo>(ServiceInfo); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(OperationInfo, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __documentation: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(OperationInfo, this, "documentation", "", internal.PrimitiveTypeEnum.String);
		public get documentation(): string { return this.__documentation.get(); }
		public set documentation(newValue: string) { this.__documentation.set(newValue); }
		private __soapAction: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(OperationInfo, this, "soapAction", "", internal.PrimitiveTypeEnum.String);
		public get soapAction(): string { return this.__soapAction.get(); }
		public set soapAction(newValue: string) { this.__soapAction.set(newValue); }
		private __requestHeaderRpcElement: internal.PartProperty<RpcOperationElement> =
			new internal.PartProperty<RpcOperationElement>(OperationInfo, this, "requestHeaderRpcElement", null, true);
		public get requestHeaderRpcElement(): RpcOperationElement { return this.__requestHeaderRpcElement.get(); }
		public set requestHeaderRpcElement(newValue: RpcOperationElement) { this.__requestHeaderRpcElement.set(newValue); }
		private __requestBodyRpcElement: internal.PartProperty<RpcOperationElement> =
			new internal.PartProperty<RpcOperationElement>(OperationInfo, this, "requestBodyRpcElement", null, true);
		public get requestBodyRpcElement(): RpcOperationElement { return this.__requestBodyRpcElement.get(); }
		public set requestBodyRpcElement(newValue: RpcOperationElement) { this.__requestBodyRpcElement.set(newValue); }
		private __responseBodyRpcElement: internal.PartProperty<RpcOperationElement> =
			new internal.PartProperty<RpcOperationElement>(OperationInfo, this, "responseBodyRpcElement", null, true);
		public get responseBodyRpcElement(): RpcOperationElement { return this.__responseBodyRpcElement.get(); }
		public set responseBodyRpcElement(newValue: RpcOperationElement) { this.__responseBodyRpcElement.set(newValue); }
		private __requestHeaderElementName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(OperationInfo, this, "requestHeaderElementName", "", internal.PrimitiveTypeEnum.String);
		public get requestHeaderElementName(): string { return this.__requestHeaderElementName.get(); }
		public set requestHeaderElementName(newValue: string) { this.__requestHeaderElementName.set(newValue); }
		private __requestHeaderEncoded: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(OperationInfo, this, "requestHeaderEncoded", false, internal.PrimitiveTypeEnum.Boolean);
		public get requestHeaderEncoded(): boolean { return this.__requestHeaderEncoded.get(); }
		public set requestHeaderEncoded(newValue: boolean) { this.__requestHeaderEncoded.set(newValue); }
		private __requestHeaderPartEncoding: internal.PartProperty<PartEncoding> =
			new internal.PartProperty<PartEncoding>(OperationInfo, this, "requestHeaderPartEncoding", null, false);
		public get requestHeaderPartEncoding(): PartEncoding { return this.__requestHeaderPartEncoding.get(); }
		public set requestHeaderPartEncoding(newValue: PartEncoding) { this.__requestHeaderPartEncoding.set(newValue); }
		private __requestBodyEncoded: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(OperationInfo, this, "requestBodyEncoded", false, internal.PrimitiveTypeEnum.Boolean);
		public get requestBodyEncoded(): boolean { return this.__requestBodyEncoded.get(); }
		public set requestBodyEncoded(newValue: boolean) { this.__requestBodyEncoded.set(newValue); }
		private __requestBodyElementName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(OperationInfo, this, "requestBodyElementName", "", internal.PrimitiveTypeEnum.String);
		public get requestBodyElementName(): string { return this.__requestBodyElementName.get(); }
		public set requestBodyElementName(newValue: string) { this.__requestBodyElementName.set(newValue); }
		private __requestBodyPartEncodings: internal.PartListProperty<PartEncoding> =
			new internal.PartListProperty<PartEncoding>(OperationInfo, this, "requestBodyPartEncodings", []);
		public get requestBodyPartEncodings(): internal.IList<PartEncoding> { return this.__requestBodyPartEncodings.get(); }
		public set requestBodyPartEncodings(newValue: internal.IList<PartEncoding>) { this.__requestBodyPartEncodings.set(newValue); }
		private __responseBodyElementName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(OperationInfo, this, "responseBodyElementName", "", internal.PrimitiveTypeEnum.String);
		public get responseBodyElementName(): string { return this.__responseBodyElementName.get(); }
		public set responseBodyElementName(newValue: string) { this.__responseBodyElementName.set(newValue); }
		private __allowSimpleMappingInheritance: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(OperationInfo, this, "allowSimpleMappingInheritance", false, internal.PrimitiveTypeEnum.Boolean);
		/**
		 * In version 6.1.0: deleted
		 */
		public get allowSimpleMappingInheritance(): boolean { return this.__allowSimpleMappingInheritance.get(); }
		public set allowSimpleMappingInheritance(newValue: boolean) { this.__allowSimpleMappingInheritance.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new OperationInfo() cannot be invoked directly, please use 'model.webservices.createOperationInfo()'"
				);
			}
		}

		/**
		 * Creates and returns a new OperationInfo instance in the SDK and on the server.
		 * The new OperationInfo will be automatically stored in the 'operations' property
		 * of the parent ServiceInfo element passed as argument.
		 */
		public static createIn(container: ServiceInfo): OperationInfo {
			return internal.instancehelpers.createElement(container, OperationInfo, "operations", true);
		}

		/**
		 * Creates and returns a new OperationInfo instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): OperationInfo {
			return internal.instancehelpers.createElement(model, OperationInfo);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.requestBodyRpcElement = RpcOperationElement.create(this.model);
			this.requestHeaderRpcElement = RpcOperationElement.create(this.model);
			this.responseBodyRpcElement = RpcOperationElement.create(this.model);
		}

	}

	export interface IPartEncoding extends internal.IElement {
		model: IModel;
		containerAsOperationInfo: IOperationInfo;
		load(): PartEncoding;
		load(callback: (element: PartEncoding) => void, forceRefresh?: boolean);
	}

	export class PartEncoding extends internal.Element implements IPartEncoding {
		public static typeName: string = "WebServices$PartEncoding";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsOperationInfo() { return super.getContainerAs<OperationInfo>(OperationInfo); }

		private __partName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(PartEncoding, this, "partName", "", internal.PrimitiveTypeEnum.String);
		public get partName(): string { return this.__partName.get(); }
		public set partName(newValue: string) { this.__partName.set(newValue); }
		private __partXsdType: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(PartEncoding, this, "partXsdType", "", internal.PrimitiveTypeEnum.String);
		public get partXsdType(): string { return this.__partXsdType.get(); }
		public set partXsdType(newValue: string) { this.__partXsdType.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new PartEncoding() cannot be invoked directly, please use 'model.webservices.createPartEncoding()'"
				);
			}
		}


		/**
		 * Creates and returns a new PartEncoding instance in the SDK and on the server.
		 * The new PartEncoding will be automatically stored in the 'requestBodyPartEncodings' property
		 * of the parent OperationInfo element passed as argument.
		 */
		public static createInOperationInfoUnderRequestBodyPartEncodings(container: OperationInfo): PartEncoding {
			return internal.instancehelpers.createElement(container, PartEncoding, "requestBodyPartEncodings", true);
		}

		/**
		 * Creates and returns a new PartEncoding instance in the SDK and on the server.
		 * The new PartEncoding will be automatically stored in the 'requestHeaderPartEncoding' property
		 * of the parent OperationInfo element passed as argument.
		 */
		public static createInOperationInfoUnderRequestHeaderPartEncoding(container: OperationInfo): PartEncoding {
			return internal.instancehelpers.createElement(container, PartEncoding, "requestHeaderPartEncoding", false);
		}

		/**
		 * Creates and returns a new PartEncoding instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): PartEncoding {
			return internal.instancehelpers.createElement(model, PartEncoding);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IPublishedServiceBase extends projects.IDocument {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		load(): PublishedServiceBase;
		load(callback: (element: PublishedServiceBase) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class PublishedServiceBase extends projects.Document implements IPublishedServiceBase {
		public static typeName: string = "WebServices$PublishedServiceBase";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }

		private __versionedServices: internal.PartListProperty<VersionedService> =
			new internal.PartListProperty<VersionedService>(PublishedServiceBase, this, "versionedServices", []);
		public get versionedServices(): internal.IList<VersionedService> { return this.__versionedServices.get(); }
		public set versionedServices(newValue: internal.IList<VersionedService>) { this.__versionedServices.set(newValue); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/published-app-services relevant section in reference guide}
	 */
	export interface IPublishedAppService extends IPublishedServiceBase {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		load(): PublishedAppService;
		load(callback: (element: PublishedAppService) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/published-app-services relevant section in reference guide}
	 */
	export class PublishedAppService extends PublishedServiceBase implements IPublishedAppService {
		public static typeName: string = "WebServices$PublishedAppService";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }


		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "documents";
		}

		/**
		 * Creates a new PublishedAppService unit in the SDK and on the server.
		 * Expects one argument, the projects.IFolderBase in which this unit is contained.
		 */
		public static createIn(container: projects.IFolderBase): PublishedAppService {
			return internal.instancehelpers.createUnit(container, PublishedAppService);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IPublishedResource extends internal.IElement {
		model: IModel;
		containerAsPublishedRestServiceBase: rest.IPublishedRestServiceBase;
		containerAsVersionedService: IVersionedService;
		load(): PublishedResource;
		load(callback: (element: PublishedResource) => void, forceRefresh?: boolean);
	}

	/**
	 * Warning: this class represents an abstract and non-instantiable concept in the meta model.
	 * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
	 * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
	 */
	export abstract class PublishedResource extends internal.Element implements IPublishedResource {
		public static typeName: string = "WebServices$PublishedResource";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"dataEntity" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsPublishedRestServiceBase() { return super.getContainerAs<rest.PublishedRestServiceBase>(rest.PublishedRestServiceBase); }
		get containerAsVersionedService() { return super.getContainerAs<VersionedService>(VersionedService); }

		private __dataEntity: internal.PartProperty<DataEntity> =
			new internal.PartProperty<DataEntity>(PublishedResource, this, "dataEntity", null, true);
		public get dataEntity(): DataEntity { return this.__dataEntity.get(); }
		public set dataEntity(newValue: DataEntity) { this.__dataEntity.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new PublishedResource() cannot be invoked directly, please use 'model.webservices.createPublishedResource()'"
				);
			}
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.dataEntity = DataEntity.create(this.model);
		}

	}

	export interface IPublishedOperation extends IPublishedResource {
		model: IModel;
		containerAsVersionedService: IVersionedService;
		load(): PublishedOperation;
		load(callback: (element: PublishedOperation) => void, forceRefresh?: boolean);
	}

	export class PublishedOperation extends PublishedResource implements IPublishedOperation {
		public static typeName: string = "WebServices$PublishedOperation";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsVersionedService() { return super.getContainerAs<VersionedService>(VersionedService); }

		private __isLockedByContract: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(PublishedOperation, this, "isLockedByContract", false, internal.PrimitiveTypeEnum.Boolean);
		public get isLockedByContract(): boolean { return this.__isLockedByContract.get(); }
		public set isLockedByContract(newValue: boolean) { this.__isLockedByContract.set(newValue); }
		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(PublishedOperation, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __image: internal.ByNameReferenceProperty<images.IImage> =
			new internal.ByNameReferenceProperty<images.IImage>(PublishedOperation, this, "image", null, "Images$Image");
		public get image(): images.IImage { return this.__image.get(); }
		public set image(newValue: images.IImage) { this.__image.set(newValue); }
		get imageQualifiedName(): string { return this.__image.qualifiedName(); }
		private __description: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(PublishedOperation, this, "description", "", internal.PrimitiveTypeEnum.String);
		public get description(): string { return this.__description.get(); }
		public set description(newValue: string) { this.__description.set(newValue); }
		private __documentation: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(PublishedOperation, this, "documentation", "", internal.PrimitiveTypeEnum.String);
		public get documentation(): string { return this.__documentation.get(); }
		public set documentation(newValue: string) { this.__documentation.set(newValue); }
		private __microflow: internal.ByNameReferenceProperty<microflows.IMicroflow> =
			new internal.ByNameReferenceProperty<microflows.IMicroflow>(PublishedOperation, this, "microflow", null, "Microflows$Microflow");
		public get microflow(): microflows.IMicroflow { return this.__microflow.get(); }
		public set microflow(newValue: microflows.IMicroflow) { this.__microflow.set(newValue); }
		get microflowQualifiedName(): string { return this.__microflow.qualifiedName(); }
		private __parameters: internal.PartListProperty<PublishedParameter> =
			new internal.PartListProperty<PublishedParameter>(PublishedOperation, this, "parameters", []);
		public get parameters(): internal.IList<PublishedParameter> { return this.__parameters.get(); }
		public set parameters(newValue: internal.IList<PublishedParameter>) { this.__parameters.set(newValue); }
		private __returnTypeNameByContract: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(PublishedOperation, this, "returnTypeNameByContract", "", internal.PrimitiveTypeEnum.String);
		public get returnTypeNameByContract(): string { return this.__returnTypeNameByContract.get(); }
		public set returnTypeNameByContract(newValue: string) { this.__returnTypeNameByContract.set(newValue); }
		private __returnTypeSpecificationByContract: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(PublishedOperation, this, "returnTypeSpecificationByContract", "", internal.PrimitiveTypeEnum.String);
		public get returnTypeSpecificationByContract(): string { return this.__returnTypeSpecificationByContract.get(); }
		public set returnTypeSpecificationByContract(newValue: string) { this.__returnTypeSpecificationByContract.set(newValue); }
		private __entityExposedNameByContract: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(PublishedOperation, this, "entityExposedNameByContract", "", internal.PrimitiveTypeEnum.String);
		public get entityExposedNameByContract(): string { return this.__entityExposedNameByContract.get(); }
		public set entityExposedNameByContract(newValue: string) { this.__entityExposedNameByContract.set(newValue); }
		private __entityExposedName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(PublishedOperation, this, "entityExposedName", "", internal.PrimitiveTypeEnum.String);
		public get entityExposedName(): string { return this.__entityExposedName.get(); }
		public set entityExposedName(newValue: string) { this.__entityExposedName.set(newValue); }
		private __returnType: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(PublishedOperation, this, "returnType", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type dataTypes.DataType.
		 */
		public get returnType(): string { return this.__returnType.get(); }
		public set returnType(newValue: string) { this.__returnType.set(newValue); }
		private __returnTypeIsOptional: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(PublishedOperation, this, "returnTypeIsOptional", false, internal.PrimitiveTypeEnum.Boolean);
		public get returnTypeIsOptional(): boolean { return this.__returnTypeIsOptional.get(); }
		public set returnTypeIsOptional(newValue: boolean) { this.__returnTypeIsOptional.set(newValue); }
		private __returnTypeIsNillable: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(PublishedOperation, this, "returnTypeIsNillable", false, internal.PrimitiveTypeEnum.Boolean);
		public get returnTypeIsNillable(): boolean { return this.__returnTypeIsNillable.get(); }
		public set returnTypeIsNillable(newValue: boolean) { this.__returnTypeIsNillable.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new PublishedOperation() cannot be invoked directly, please use 'model.webservices.createPublishedOperation()'"
				);
			}
		}

		/**
		 * Creates and returns a new PublishedOperation instance in the SDK and on the server.
		 * The new PublishedOperation will be automatically stored in the 'operations' property
		 * of the parent VersionedService element passed as argument.
		 */
		public static createIn(container: VersionedService): PublishedOperation {
			return internal.instancehelpers.createElement(container, PublishedOperation, "operations", true);
		}

		/**
		 * Creates and returns a new PublishedOperation instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): PublishedOperation {
			return internal.instancehelpers.createElement(model, PublishedOperation);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.entityExposedName = "Result";
			this.returnType = "Void";
			this.returnTypeNameByContract = "Nothing";
		}

	}

	export interface IPublishedParameter extends internal.IElement {
		model: IModel;
		containerAsPublishedOperation: IPublishedOperation;
		load(): PublishedParameter;
		load(callback: (element: PublishedParameter) => void, forceRefresh?: boolean);
	}

	export class PublishedParameter extends internal.Element implements IPublishedParameter {
		public static typeName: string = "WebServices$PublishedParameter";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"parameterByContract" : {
					"required" : {
						"currentValue" : true
					}
				},
				"dataEntity" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsPublishedOperation() { return super.getContainerAs<PublishedOperation>(PublishedOperation); }

		private __isLockedByContract: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(PublishedParameter, this, "isLockedByContract", false, internal.PrimitiveTypeEnum.Boolean);
		public get isLockedByContract(): boolean { return this.__isLockedByContract.get(); }
		public set isLockedByContract(newValue: boolean) { this.__isLockedByContract.set(newValue); }
		private __parameter: internal.ByNameReferenceProperty<microflows.IMicroflowParameter> =
			new internal.ByNameReferenceProperty<microflows.IMicroflowParameter>(PublishedParameter, this, "parameter", null, "Microflows$MicroflowParameter");
		public get parameter(): microflows.IMicroflowParameter { return this.__parameter.get(); }
		public set parameter(newValue: microflows.IMicroflowParameter) { this.__parameter.set(newValue); }
		get parameterQualifiedName(): string { return this.__parameter.qualifiedName(); }
		private __parameterByContract: internal.PartProperty<appservices.MsdMicroflowParameter> =
			new internal.PartProperty<appservices.MsdMicroflowParameter>(PublishedParameter, this, "parameterByContract", null, true);
		public get parameterByContract(): appservices.MsdMicroflowParameter { return this.__parameterByContract.get(); }
		public set parameterByContract(newValue: appservices.MsdMicroflowParameter) { this.__parameterByContract.set(newValue); }
		private __entityExposedName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(PublishedParameter, this, "entityExposedName", "", internal.PrimitiveTypeEnum.String);
		public get entityExposedName(): string { return this.__entityExposedName.get(); }
		public set entityExposedName(newValue: string) { this.__entityExposedName.set(newValue); }
		private __isOptionalByContract: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(PublishedParameter, this, "isOptionalByContract", false, internal.PrimitiveTypeEnum.Boolean);
		public get isOptionalByContract(): boolean { return this.__isOptionalByContract.get(); }
		public set isOptionalByContract(newValue: boolean) { this.__isOptionalByContract.set(newValue); }
		private __isOptional: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(PublishedParameter, this, "isOptional", false, internal.PrimitiveTypeEnum.Boolean);
		public get isOptional(): boolean { return this.__isOptional.get(); }
		public set isOptional(newValue: boolean) { this.__isOptional.set(newValue); }
		private __isNillable: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(PublishedParameter, this, "isNillable", false, internal.PrimitiveTypeEnum.Boolean);
		public get isNillable(): boolean { return this.__isNillable.get(); }
		public set isNillable(newValue: boolean) { this.__isNillable.set(newValue); }
		private __entityExposedItemNameByContract: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(PublishedParameter, this, "entityExposedItemNameByContract", "", internal.PrimitiveTypeEnum.String);
		public get entityExposedItemNameByContract(): string { return this.__entityExposedItemNameByContract.get(); }
		public set entityExposedItemNameByContract(newValue: string) { this.__entityExposedItemNameByContract.set(newValue); }
		private __entityExposedItemName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(PublishedParameter, this, "entityExposedItemName", "", internal.PrimitiveTypeEnum.String);
		public get entityExposedItemName(): string { return this.__entityExposedItemName.get(); }
		public set entityExposedItemName(newValue: string) { this.__entityExposedItemName.set(newValue); }
		private __type: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(PublishedParameter, this, "type", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type dataTypes.DataType.
		 */
		public get type(): string { return this.__type.get(); }
		public set type(newValue: string) { this.__type.set(newValue); }
		private __dataEntity: internal.PartProperty<DataEntity> =
			new internal.PartProperty<DataEntity>(PublishedParameter, this, "dataEntity", null, true);
		public get dataEntity(): DataEntity { return this.__dataEntity.get(); }
		public set dataEntity(newValue: DataEntity) { this.__dataEntity.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new PublishedParameter() cannot be invoked directly, please use 'model.webservices.createPublishedParameter()'"
				);
			}
		}

		/**
		 * Creates and returns a new PublishedParameter instance in the SDK and on the server.
		 * The new PublishedParameter will be automatically stored in the 'parameters' property
		 * of the parent PublishedOperation element passed as argument.
		 */
		public static createIn(container: PublishedOperation): PublishedParameter {
			return internal.instancehelpers.createElement(container, PublishedParameter, "parameters", true);
		}

		/**
		 * Creates and returns a new PublishedParameter instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): PublishedParameter {
			return internal.instancehelpers.createElement(model, PublishedParameter);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.dataEntity = DataEntity.create(this.model);
			this.parameterByContract = appservices.MsdMicroflowParameter.create(this.model);
			this.type = "Void";
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/published-web-services relevant section in reference guide}
	 */
	export interface IPublishedWebService extends IPublishedServiceBase {
		model: IModel;
		containerAsFolderBase: projects.IFolderBase;
		load(): PublishedWebService;
		load(callback: (element: PublishedWebService) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/published-web-services relevant section in reference guide}
	 */
	export class PublishedWebService extends PublishedServiceBase implements IPublishedWebService {
		public static typeName: string = "WebServices$PublishedWebService";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsFolderBase() { return super.getContainerAs<projects.FolderBase>(projects.FolderBase); }


		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "documents";
		}

		/**
		 * Creates a new PublishedWebService unit in the SDK and on the server.
		 * Expects one argument, the projects.IFolderBase in which this unit is contained.
		 */
		public static createIn(container: projects.IFolderBase): PublishedWebService {
			return internal.instancehelpers.createUnit(container, PublishedWebService);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IRpcMessagePartElement extends internal.IElement {
		model: IModel;
		containerAsRpcOperationElement: IRpcOperationElement;
		load(): RpcMessagePartElement;
		load(callback: (element: RpcMessagePartElement) => void, forceRefresh?: boolean);
	}

	export class RpcMessagePartElement extends internal.Element implements IRpcMessagePartElement {
		public static typeName: string = "WebServices$RpcMessagePartElement";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsRpcOperationElement() { return super.getContainerAs<RpcOperationElement>(RpcOperationElement); }

		private __partName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(RpcMessagePartElement, this, "partName", "", internal.PrimitiveTypeEnum.String);
		public get partName(): string { return this.__partName.get(); }
		public set partName(newValue: string) { this.__partName.set(newValue); }
		private __typeName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(RpcMessagePartElement, this, "typeName", "", internal.PrimitiveTypeEnum.String);
		public get typeName(): string { return this.__typeName.get(); }
		public set typeName(newValue: string) { this.__typeName.set(newValue); }
		private __elementName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(RpcMessagePartElement, this, "elementName", "", internal.PrimitiveTypeEnum.String);
		public get elementName(): string { return this.__elementName.get(); }
		public set elementName(newValue: string) { this.__elementName.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new RpcMessagePartElement() cannot be invoked directly, please use 'model.webservices.createRpcMessagePartElement()'"
				);
			}
		}

		/**
		 * Creates and returns a new RpcMessagePartElement instance in the SDK and on the server.
		 * The new RpcMessagePartElement will be automatically stored in the 'messagePartElements' property
		 * of the parent RpcOperationElement element passed as argument.
		 */
		public static createIn(container: RpcOperationElement): RpcMessagePartElement {
			return internal.instancehelpers.createElement(container, RpcMessagePartElement, "messagePartElements", true);
		}

		/**
		 * Creates and returns a new RpcMessagePartElement instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): RpcMessagePartElement {
			return internal.instancehelpers.createElement(model, RpcMessagePartElement);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IRpcOperationElement extends internal.IElement {
		model: IModel;
		containerAsOperationInfo: IOperationInfo;
		load(): RpcOperationElement;
		load(callback: (element: RpcOperationElement) => void, forceRefresh?: boolean);
	}

	export class RpcOperationElement extends internal.Element implements IRpcOperationElement {
		public static typeName: string = "WebServices$RpcOperationElement";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsOperationInfo() { return super.getContainerAs<OperationInfo>(OperationInfo); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(RpcOperationElement, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __messagePartElements: internal.PartListProperty<RpcMessagePartElement> =
			new internal.PartListProperty<RpcMessagePartElement>(RpcOperationElement, this, "messagePartElements", []);
		public get messagePartElements(): internal.IList<RpcMessagePartElement> { return this.__messagePartElements.get(); }
		public set messagePartElements(newValue: internal.IList<RpcMessagePartElement>) { this.__messagePartElements.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new RpcOperationElement() cannot be invoked directly, please use 'model.webservices.createRpcOperationElement()'"
				);
			}
		}


		/**
		 * Creates and returns a new RpcOperationElement instance in the SDK and on the server.
		 * The new RpcOperationElement will be automatically stored in the 'requestBodyRpcElement' property
		 * of the parent OperationInfo element passed as argument.
		 */
		public static createInOperationInfoUnderRequestBodyRpcElement(container: OperationInfo): RpcOperationElement {
			return internal.instancehelpers.createElement(container, RpcOperationElement, "requestBodyRpcElement", false);
		}

		/**
		 * Creates and returns a new RpcOperationElement instance in the SDK and on the server.
		 * The new RpcOperationElement will be automatically stored in the 'requestHeaderRpcElement' property
		 * of the parent OperationInfo element passed as argument.
		 */
		public static createInOperationInfoUnderRequestHeaderRpcElement(container: OperationInfo): RpcOperationElement {
			return internal.instancehelpers.createElement(container, RpcOperationElement, "requestHeaderRpcElement", false);
		}

		/**
		 * Creates and returns a new RpcOperationElement instance in the SDK and on the server.
		 * The new RpcOperationElement will be automatically stored in the 'responseBodyRpcElement' property
		 * of the parent OperationInfo element passed as argument.
		 */
		public static createInOperationInfoUnderResponseBodyRpcElement(container: OperationInfo): RpcOperationElement {
			return internal.instancehelpers.createElement(container, RpcOperationElement, "responseBodyRpcElement", false);
		}

		/**
		 * Creates and returns a new RpcOperationElement instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): RpcOperationElement {
			return internal.instancehelpers.createElement(model, RpcOperationElement);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IServiceInfo extends internal.IElement {
		model: IModel;
		containerAsWsdlDescription: IWsdlDescription;
		load(): ServiceInfo;
		load(callback: (element: ServiceInfo) => void, forceRefresh?: boolean);
	}

	export class ServiceInfo extends internal.Element implements IServiceInfo {
		public static typeName: string = "WebServices$ServiceInfo";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsWsdlDescription() { return super.getContainerAs<WsdlDescription>(WsdlDescription); }

		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ServiceInfo, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __documentation: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ServiceInfo, this, "documentation", "", internal.PrimitiveTypeEnum.String);
		public get documentation(): string { return this.__documentation.get(); }
		public set documentation(newValue: string) { this.__documentation.set(newValue); }
		private __portName: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ServiceInfo, this, "portName", "", internal.PrimitiveTypeEnum.String);
		public get portName(): string { return this.__portName.get(); }
		public set portName(newValue: string) { this.__portName.set(newValue); }
		private __location: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(ServiceInfo, this, "location", "", internal.PrimitiveTypeEnum.String);
		public get location(): string { return this.__location.get(); }
		public set location(newValue: string) { this.__location.set(newValue); }
		private __soapVersion: internal.EnumProperty<SoapVersion> =
			new internal.EnumProperty<SoapVersion>(ServiceInfo, this, "soapVersion", SoapVersion.Soap11, SoapVersion);
		public get soapVersion(): SoapVersion { return this.__soapVersion.get(); }
		public set soapVersion(newValue: SoapVersion) { this.__soapVersion.set(newValue); }
		private __locationConstant: internal.ByNameReferenceProperty<constants.IConstant> =
			new internal.ByNameReferenceProperty<constants.IConstant>(ServiceInfo, this, "locationConstant", null, "Constants$Constant");
		public get locationConstant(): constants.IConstant { return this.__locationConstant.get(); }
		public set locationConstant(newValue: constants.IConstant) { this.__locationConstant.set(newValue); }
		get locationConstantQualifiedName(): string { return this.__locationConstant.qualifiedName(); }
		private __operations: internal.PartListProperty<OperationInfo> =
			new internal.PartListProperty<OperationInfo>(ServiceInfo, this, "operations", []);
		public get operations(): internal.IList<OperationInfo> { return this.__operations.get(); }
		public set operations(newValue: internal.IList<OperationInfo>) { this.__operations.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new ServiceInfo() cannot be invoked directly, please use 'model.webservices.createServiceInfo()'"
				);
			}
		}

		/**
		 * Creates and returns a new ServiceInfo instance in the SDK and on the server.
		 * The new ServiceInfo will be automatically stored in the 'services' property
		 * of the parent WsdlDescription element passed as argument.
		 */
		public static createIn(container: WsdlDescription): ServiceInfo {
			return internal.instancehelpers.createElement(container, ServiceInfo, "services", true);
		}

		/**
		 * Creates and returns a new ServiceInfo instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): ServiceInfo {
			return internal.instancehelpers.createElement(model, ServiceInfo);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.soapVersion = SoapVersion.Soap11;
		}

	}

	/**
	 * In version 6.7.0: introduced
	 */
	export interface ISystemIdDataAttribute extends IDataMember {
		model: IModel;
		containerAsDataEntityBase: IDataEntityBase;
		load(): SystemIdDataAttribute;
		load(callback: (element: SystemIdDataAttribute) => void, forceRefresh?: boolean);
	}

	/**
	 * In version 6.7.0: introduced
	 */
	export class SystemIdDataAttribute extends DataMember implements ISystemIdDataAttribute {
		public static typeName: string = "WebServices$SystemIdDataAttribute";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"introduced" : "6.7.0"
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataEntityBase() { return super.getContainerAs<DataEntityBase>(DataEntityBase); }

		private __entity: internal.ByNameReferenceProperty<domainmodels.IEntity> =
			new internal.ByNameReferenceProperty<domainmodels.IEntity>(SystemIdDataAttribute, this, "entity", null, "DomainModels$Entity");
		public get entity(): domainmodels.IEntity { return this.__entity.get(); }
		public set entity(newValue: domainmodels.IEntity) { this.__entity.set(newValue); }
		get entityQualifiedName(): string { return this.__entity.qualifiedName(); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new SystemIdDataAttribute() cannot be invoked directly, please use 'model.webservices.createSystemIdDataAttribute()'"
				);
			}
		}

		/**
		 * Creates and returns a new SystemIdDataAttribute instance in the SDK and on the server.
		 * The new SystemIdDataAttribute will be automatically stored in the 'childMembers' property
		 * of the parent DataEntityBase element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createIn(container: DataEntityBase): SystemIdDataAttribute {
			internal.createInVersionCheck(container.model, SystemIdDataAttribute.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, SystemIdDataAttribute, "childMembers", true);
		}

		/**
		 * Creates and returns a new SystemIdDataAttribute instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): SystemIdDataAttribute {
			return internal.instancehelpers.createElement(model, SystemIdDataAttribute);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/published-web-services relevant section in reference guide}
	 */
	export interface IVersionedService extends internal.IElement {
		model: IModel;
		containerAsPublishedServiceBase: IPublishedServiceBase;
		load(): VersionedService;
		load(callback: (element: VersionedService) => void, forceRefresh?: boolean);
	}

	/**
	 * See: {@link https://docs.mendix.com/refguide7/published-web-services relevant section in reference guide}
	 */
	export class VersionedService extends internal.Element implements IVersionedService {
		public static typeName: string = "WebServices$VersionedService";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsPublishedServiceBase() { return super.getContainerAs<PublishedServiceBase>(PublishedServiceBase); }

		private __documentation: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(VersionedService, this, "documentation", "", internal.PrimitiveTypeEnum.String);
		public get documentation(): string { return this.__documentation.get(); }
		public set documentation(newValue: string) { this.__documentation.set(newValue); }
		private __targetNamespace: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(VersionedService, this, "targetNamespace", "", internal.PrimitiveTypeEnum.String);
		public get targetNamespace(): string { return this.__targetNamespace.get(); }
		public set targetNamespace(newValue: string) { this.__targetNamespace.set(newValue); }
		private __headerAuthentication: internal.EnumProperty<HeaderAuthentication> =
			new internal.EnumProperty<HeaderAuthentication>(VersionedService, this, "headerAuthentication", HeaderAuthentication.None, HeaderAuthentication);
		public get headerAuthentication(): HeaderAuthentication { return this.__headerAuthentication.get(); }
		public set headerAuthentication(newValue: HeaderAuthentication) { this.__headerAuthentication.set(newValue); }
		private __operations: internal.PartListProperty<PublishedOperation> =
			new internal.PartListProperty<PublishedOperation>(VersionedService, this, "operations", []);
		public get operations(): internal.IList<PublishedOperation> { return this.__operations.get(); }
		public set operations(newValue: internal.IList<PublishedOperation>) { this.__operations.set(newValue); }
		private __isLockedByContract: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(VersionedService, this, "isLockedByContract", false, internal.PrimitiveTypeEnum.Boolean);
		public get isLockedByContract(): boolean { return this.__isLockedByContract.get(); }
		public set isLockedByContract(newValue: boolean) { this.__isLockedByContract.set(newValue); }
		private __enumerationsByContract: internal.PartProperty<appservices.MsdEnumerationContainer> =
			new internal.PartProperty<appservices.MsdEnumerationContainer>(VersionedService, this, "enumerationsByContract", null, false);
		public get enumerationsByContract(): appservices.MsdEnumerationContainer { return this.__enumerationsByContract.get(); }
		public set enumerationsByContract(newValue: appservices.MsdEnumerationContainer) { this.__enumerationsByContract.set(newValue); }
		private __headerImportMapping: internal.ByNameReferenceProperty<importmappings.IImportMapping> =
			new internal.ByNameReferenceProperty<importmappings.IImportMapping>(VersionedService, this, "headerImportMapping", null, "ImportMappings$ImportMapping");
		public get headerImportMapping(): importmappings.IImportMapping { return this.__headerImportMapping.get(); }
		public set headerImportMapping(newValue: importmappings.IImportMapping) { this.__headerImportMapping.set(newValue); }
		get headerImportMappingQualifiedName(): string { return this.__headerImportMapping.qualifiedName(); }
		private __headerMicroflow: internal.ByNameReferenceProperty<microflows.IMicroflow> =
			new internal.ByNameReferenceProperty<microflows.IMicroflow>(VersionedService, this, "headerMicroflow", null, "Microflows$Microflow");
		public get headerMicroflow(): microflows.IMicroflow { return this.__headerMicroflow.get(); }
		public set headerMicroflow(newValue: microflows.IMicroflow) { this.__headerMicroflow.set(newValue); }
		get headerMicroflowQualifiedName(): string { return this.__headerMicroflow.qualifiedName(); }
		private __versionNumber: internal.PrimitiveProperty<number> =
			new internal.PrimitiveProperty<number>(VersionedService, this, "versionNumber", 0, internal.PrimitiveTypeEnum.Integer);
		public get versionNumber(): number { return this.__versionNumber.get(); }
		public set versionNumber(newValue: number) { this.__versionNumber.set(newValue); }
		private __caption: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(VersionedService, this, "caption", "", internal.PrimitiveTypeEnum.String);
		public get caption(): string { return this.__caption.get(); }
		public set caption(newValue: string) { this.__caption.set(newValue); }
		private __description: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(VersionedService, this, "description", "", internal.PrimitiveTypeEnum.String);
		public get description(): string { return this.__description.get(); }
		public set description(newValue: string) { this.__description.set(newValue); }
		private __appServiceState: internal.EnumProperty<AppServiceState> =
			new internal.EnumProperty<AppServiceState>(VersionedService, this, "appServiceState", AppServiceState.Draft, AppServiceState);
		public get appServiceState(): AppServiceState { return this.__appServiceState.get(); }
		public set appServiceState(newValue: AppServiceState) { this.__appServiceState.set(newValue); }
		private __image: internal.ByNameReferenceProperty<images.IImage> =
			new internal.ByNameReferenceProperty<images.IImage>(VersionedService, this, "image", null, "Images$Image");
		public get image(): images.IImage { return this.__image.get(); }
		public set image(newValue: images.IImage) { this.__image.set(newValue); }
		get imageQualifiedName(): string { return this.__image.qualifiedName(); }
		private __validate: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(VersionedService, this, "validate", false, internal.PrimitiveTypeEnum.Boolean);
		public get validate(): boolean { return this.__validate.get(); }
		public set validate(newValue: boolean) { this.__validate.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new VersionedService() cannot be invoked directly, please use 'model.webservices.createVersionedService()'"
				);
			}
		}

		/**
		 * Creates and returns a new VersionedService instance in the SDK and on the server.
		 * The new VersionedService will be automatically stored in the 'versionedServices' property
		 * of the parent PublishedServiceBase element passed as argument.
		 */
		public static createIn(container: PublishedServiceBase): VersionedService {
			return internal.instancehelpers.createElement(container, VersionedService, "versionedServices", true);
		}

		/**
		 * Creates and returns a new VersionedService instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): VersionedService {
			return internal.instancehelpers.createElement(model, VersionedService);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.appServiceState = AppServiceState.Draft;
			this.headerAuthentication = HeaderAuthentication.None;
			this.targetNamespace = "http://www.example.com/";
		}

	}

	export interface IWsdlDescription extends internal.IElement {
		model: IModel;
		containerAsMsd: appservices.IMsd;
		containerAsImportedWebService: IImportedWebService;
		load(): WsdlDescription;
		load(callback: (element: WsdlDescription) => void, forceRefresh?: boolean);
	}

	export class WsdlDescription extends internal.Element implements IWsdlDescription {
		public static typeName: string = "WebServices$WsdlDescription";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsMsd() { return super.getContainerAs<appservices.Msd>(appservices.Msd); }
		get containerAsImportedWebService() { return super.getContainerAs<ImportedWebService>(ImportedWebService); }

		private __wsdlEntries: internal.PartListProperty<WsdlEntry> =
			new internal.PartListProperty<WsdlEntry>(WsdlDescription, this, "wsdlEntries", []);
		public get wsdlEntries(): internal.IList<WsdlEntry> { return this.__wsdlEntries.get(); }
		public set wsdlEntries(newValue: internal.IList<WsdlEntry>) { this.__wsdlEntries.set(newValue); }
		private __schemaEntries: internal.PartListProperty<xmlschemas.XmlSchemaEntry> =
			new internal.PartListProperty<xmlschemas.XmlSchemaEntry>(WsdlDescription, this, "schemaEntries", []);
		public get schemaEntries(): internal.IList<xmlschemas.XmlSchemaEntry> { return this.__schemaEntries.get(); }
		public set schemaEntries(newValue: internal.IList<xmlschemas.XmlSchemaEntry>) { this.__schemaEntries.set(newValue); }
		private __services: internal.PartListProperty<ServiceInfo> =
			new internal.PartListProperty<ServiceInfo>(WsdlDescription, this, "services", []);
		public get services(): internal.IList<ServiceInfo> { return this.__services.get(); }
		public set services(newValue: internal.IList<ServiceInfo>) { this.__services.set(newValue); }
		private __targetNamespace: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(WsdlDescription, this, "targetNamespace", "", internal.PrimitiveTypeEnum.String);
		public get targetNamespace(): string { return this.__targetNamespace.get(); }
		public set targetNamespace(newValue: string) { this.__targetNamespace.set(newValue); }
		private __importsHaveLocations: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(WsdlDescription, this, "importsHaveLocations", false, internal.PrimitiveTypeEnum.Boolean);
		public get importsHaveLocations(): boolean { return this.__importsHaveLocations.get(); }
		public set importsHaveLocations(newValue: boolean) { this.__importsHaveLocations.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new WsdlDescription() cannot be invoked directly, please use 'model.webservices.createWsdlDescription()'"
				);
			}
		}


		/**
		 * Creates and returns a new WsdlDescription instance in the SDK and on the server.
		 * The new WsdlDescription will be automatically stored in the 'wsdlDescription' property
		 * of the parent appservices.Msd element passed as argument.
		 */
		public static createInMsdUnderWsdlDescription(container: appservices.Msd): WsdlDescription {
			return internal.instancehelpers.createElement(container, WsdlDescription, "wsdlDescription", false);
		}

		/**
		 * Creates and returns a new WsdlDescription instance in the SDK and on the server.
		 * The new WsdlDescription will be automatically stored in the 'wsdlDescription' property
		 * of the parent ImportedWebService element passed as argument.
		 */
		public static createInImportedWebServiceUnderWsdlDescription(container: ImportedWebService): WsdlDescription {
			return internal.instancehelpers.createElement(container, WsdlDescription, "wsdlDescription", false);
		}

		/**
		 * Creates and returns a new WsdlDescription instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): WsdlDescription {
			return internal.instancehelpers.createElement(model, WsdlDescription);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IWsdlEntry extends internal.IElement {
		model: IModel;
		containerAsWsdlDescription: IWsdlDescription;
		load(): WsdlEntry;
		load(callback: (element: WsdlEntry) => void, forceRefresh?: boolean);
	}

	export class WsdlEntry extends internal.Element implements IWsdlEntry {
		public static typeName: string = "WebServices$WsdlEntry";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsWsdlDescription() { return super.getContainerAs<WsdlDescription>(WsdlDescription); }

		private __location: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(WsdlEntry, this, "location", "", internal.PrimitiveTypeEnum.String);
		public get location(): string { return this.__location.get(); }
		public set location(newValue: string) { this.__location.set(newValue); }
		private __contents: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(WsdlEntry, this, "contents", "", internal.PrimitiveTypeEnum.String);
		public get contents(): string { return this.__contents.get(); }
		public set contents(newValue: string) { this.__contents.set(newValue); }
		private __localizedLocationFormat: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(WsdlEntry, this, "localizedLocationFormat", "", internal.PrimitiveTypeEnum.String);
		public get localizedLocationFormat(): string { return this.__localizedLocationFormat.get(); }
		public set localizedLocationFormat(newValue: string) { this.__localizedLocationFormat.set(newValue); }
		private __localizedContentsFormat: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(WsdlEntry, this, "localizedContentsFormat", "", internal.PrimitiveTypeEnum.String);
		public get localizedContentsFormat(): string { return this.__localizedContentsFormat.get(); }
		public set localizedContentsFormat(newValue: string) { this.__localizedContentsFormat.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new WsdlEntry() cannot be invoked directly, please use 'model.webservices.createWsdlEntry()'"
				);
			}
		}

		/**
		 * Creates and returns a new WsdlEntry instance in the SDK and on the server.
		 * The new WsdlEntry will be automatically stored in the 'wsdlEntries' property
		 * of the parent WsdlDescription element passed as argument.
		 */
		public static createIn(container: WsdlDescription): WsdlEntry {
			return internal.instancehelpers.createElement(container, WsdlEntry, "wsdlEntries", true);
		}

		/**
		 * Creates and returns a new WsdlEntry instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): WsdlEntry {
			return internal.instancehelpers.createElement(model, WsdlEntry);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}
}

import {appservices} from "./appservices";
import {constants} from "./constants";
import {domainmodels} from "./domainmodels";
import {images} from "./images";
import {importmappings} from "./importmappings";
import {microflows} from "./microflows";
import {rest} from "./rest";
import {xmlschemas} from "./xmlschemas";

import {IModel} from "./base-model";
