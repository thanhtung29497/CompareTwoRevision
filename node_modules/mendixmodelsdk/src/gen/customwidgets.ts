/* tslint:disable */

import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;

import {pages} from "./pages";

export namespace customwidgets {

	export class CustomWidgetAttributeType extends internal.IEnum {
		public static AutoNumber: CustomWidgetAttributeType = new CustomWidgetAttributeType("AutoNumber", { });
		public static Binary: CustomWidgetAttributeType = new CustomWidgetAttributeType("Binary", { });
		public static Boolean: CustomWidgetAttributeType = new CustomWidgetAttributeType("Boolean", { });
		public static Currency: CustomWidgetAttributeType = new CustomWidgetAttributeType("Currency", { });
		public static DateTime: CustomWidgetAttributeType = new CustomWidgetAttributeType("DateTime", { });
		public static Enum: CustomWidgetAttributeType = new CustomWidgetAttributeType("Enum", { });
		public static Float: CustomWidgetAttributeType = new CustomWidgetAttributeType("Float", { });
		public static HashString: CustomWidgetAttributeType = new CustomWidgetAttributeType("HashString", { });
		public static Integer: CustomWidgetAttributeType = new CustomWidgetAttributeType("Integer", { });
		public static Long: CustomWidgetAttributeType = new CustomWidgetAttributeType("Long", { });
		public static String: CustomWidgetAttributeType = new CustomWidgetAttributeType("String", { });
		public static Decimal: CustomWidgetAttributeType = new CustomWidgetAttributeType("Decimal", { });
		protected qualifiedTsTypeName: string = "customwidgets.CustomWidgetAttributeType";
	}

	export class IsPath extends internal.IEnum {
		public static No: IsPath = new IsPath("No", { });
		public static Optional: IsPath = new IsPath("Optional", { });
		public static Yes: IsPath = new IsPath("Yes", { });
		protected qualifiedTsTypeName: string = "customwidgets.IsPath";
	}

	export class PathType extends internal.IEnum {
		public static None: PathType = new PathType("None", { });
		public static Reference: PathType = new PathType("Reference", { });
		public static ReferenceSet: PathType = new PathType("ReferenceSet", { });
		protected qualifiedTsTypeName: string = "customwidgets.PathType";
	}

	export class WidgetReturnTypeEnum extends internal.IEnum {
		public static Void: WidgetReturnTypeEnum = new WidgetReturnTypeEnum("Void", { });
		public static Boolean: WidgetReturnTypeEnum = new WidgetReturnTypeEnum("Boolean", { });
		public static Integer: WidgetReturnTypeEnum = new WidgetReturnTypeEnum("Integer", { });
		public static Float: WidgetReturnTypeEnum = new WidgetReturnTypeEnum("Float", { });
		public static DateTime: WidgetReturnTypeEnum = new WidgetReturnTypeEnum("DateTime", { });
		public static String: WidgetReturnTypeEnum = new WidgetReturnTypeEnum("String", { });
		public static Object: WidgetReturnTypeEnum = new WidgetReturnTypeEnum("Object", { });
		public static Decimal: WidgetReturnTypeEnum = new WidgetReturnTypeEnum("Decimal", { });
		protected qualifiedTsTypeName: string = "customwidgets.WidgetReturnTypeEnum";
	}

	export class WidgetValueTypeEnum extends internal.IEnum {
		public static Attribute: WidgetValueTypeEnum = new WidgetValueTypeEnum("Attribute", { });
		public static Boolean: WidgetValueTypeEnum = new WidgetValueTypeEnum("Boolean", { });
		public static Entity: WidgetValueTypeEnum = new WidgetValueTypeEnum("Entity", { });
		public static EntityConstraint: WidgetValueTypeEnum = new WidgetValueTypeEnum("EntityConstraint", { });
		public static Enumeration: WidgetValueTypeEnum = new WidgetValueTypeEnum("Enumeration", { });
		public static Form: WidgetValueTypeEnum = new WidgetValueTypeEnum("Form", { });
		public static Image: WidgetValueTypeEnum = new WidgetValueTypeEnum("Image", { });
		public static Integer: WidgetValueTypeEnum = new WidgetValueTypeEnum("Integer", { });
		public static Microflow: WidgetValueTypeEnum = new WidgetValueTypeEnum("Microflow", { });
		public static Object: WidgetValueTypeEnum = new WidgetValueTypeEnum("Object", { });
		public static String: WidgetValueTypeEnum = new WidgetValueTypeEnum("String", { });
		public static TranslatableString: WidgetValueTypeEnum = new WidgetValueTypeEnum("TranslatableString", { });
		protected qualifiedTsTypeName: string = "customwidgets.WidgetValueTypeEnum";
	}


	/**
	 * Interfaces and instance classes for types from the Mendix sub meta model `CustomWidgets`.
	 */


	export interface ICustomWidget extends pages.IWidget {
		model: IModel;
		containerAsDataView: pages.IDataView;
		containerAsDivContainer: pages.IDivContainer;
		containerAsGroupBox: pages.IGroupBox;
		containerAsHeader: pages.IHeader;
		containerAsLayout: pages.ILayout;
		containerAsLayoutCallArgument: pages.ILayoutCallArgument;
		containerAsLayoutGridColumn: pages.ILayoutGridColumn;
		containerAsListView: pages.IListView;
		containerAsListViewTemplate: pages.IListViewTemplate;
		containerAsNavigationListItem: pages.INavigationListItem;
		containerAsScrollContainerRegion: pages.IScrollContainerRegion;
		containerAsSnippet: pages.ISnippet;
		containerAsSplitPane: pages.ISplitPane;
		containerAsTabPage: pages.ITabPage;
		containerAsTableCell: pages.ITableCell;
		containerAsTemplateGridContents: pages.ITemplateGridContents;
		containerAsVerticalFlow: pages.IVerticalFlow;
		containerAsReportPane: reports.IReportPane;
		load(): CustomWidget;
		load(callback: (element: CustomWidget) => void, forceRefresh?: boolean);
	}

	export class CustomWidget extends pages.Widget implements ICustomWidget {
		public static typeName: string = "CustomWidgets$CustomWidget";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"public" : {
				"currentValue" : true
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsDataView() { return super.getContainerAs<pages.DataView>(pages.DataView); }
		get containerAsDivContainer() { return super.getContainerAs<pages.DivContainer>(pages.DivContainer); }
		get containerAsGroupBox() { return super.getContainerAs<pages.GroupBox>(pages.GroupBox); }
		get containerAsHeader() { return super.getContainerAs<pages.Header>(pages.Header); }
		get containerAsLayout() { return super.getContainerAs<pages.Layout>(pages.Layout); }
		get containerAsLayoutCallArgument() { return super.getContainerAs<pages.LayoutCallArgument>(pages.LayoutCallArgument); }
		get containerAsLayoutGridColumn() { return super.getContainerAs<pages.LayoutGridColumn>(pages.LayoutGridColumn); }
		get containerAsListView() { return super.getContainerAs<pages.ListView>(pages.ListView); }
		get containerAsListViewTemplate() { return super.getContainerAs<pages.ListViewTemplate>(pages.ListViewTemplate); }
		get containerAsNavigationListItem() { return super.getContainerAs<pages.NavigationListItem>(pages.NavigationListItem); }
		get containerAsScrollContainerRegion() { return super.getContainerAs<pages.ScrollContainerRegion>(pages.ScrollContainerRegion); }
		get containerAsSnippet() { return super.getContainerAs<pages.Snippet>(pages.Snippet); }
		get containerAsSplitPane() { return super.getContainerAs<pages.SplitPane>(pages.SplitPane); }
		get containerAsTabPage() { return super.getContainerAs<pages.TabPage>(pages.TabPage); }
		get containerAsTableCell() { return super.getContainerAs<pages.TableCell>(pages.TableCell); }
		get containerAsTemplateGridContents() { return super.getContainerAs<pages.TemplateGridContents>(pages.TemplateGridContents); }
		get containerAsVerticalFlow() { return super.getContainerAs<pages.VerticalFlow>(pages.VerticalFlow); }
		get containerAsReportPane() { return super.getContainerAs<reports.ReportPane>(reports.ReportPane); }

		private __type: internal.PartProperty<CustomWidgetType> =
			new internal.PartProperty<CustomWidgetType>(CustomWidget, this, "type", null, false);
		public get type(): CustomWidgetType { return this.__type.get(); }
		public set type(newValue: CustomWidgetType) { this.__type.set(newValue); }
		private __object: internal.PartProperty<WidgetObject> =
			new internal.PartProperty<WidgetObject>(CustomWidget, this, "object", null, false);
		public get object(): WidgetObject { return this.__object.get(); }
		public set object(newValue: WidgetObject) { this.__object.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new CustomWidget() cannot be invoked directly, please use 'model.customwidgets.createCustomWidget()'"
				);
			}
		}


		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'footerWidget' property
		 * of the parent pages.DataView element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
		 */
		public static createInDataViewUnderFooterWidget(container: pages.DataView): CustomWidget {
			internal.createInVersionCheck(container.model, CustomWidget.typeName,
				["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]
			);
			return internal.instancehelpers.createElement(container, CustomWidget, "footerWidget", false);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'widget' property
		 * of the parent pages.DataView element passed as argument.
		 */
		public static createInDataViewUnderWidget(container: pages.DataView): CustomWidget {
			return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'widget' property
		 * of the parent pages.DivContainer element passed as argument.
		 */
		public static createInDivContainerUnderWidget(container: pages.DivContainer): CustomWidget {
			return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'widget' property
		 * of the parent pages.GroupBox element passed as argument.
		 */
		public static createInGroupBoxUnderWidget(container: pages.GroupBox): CustomWidget {
			return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'leftWidget' property
		 * of the parent pages.Header element passed as argument.
		 */
		public static createInHeaderUnderLeftWidget(container: pages.Header): CustomWidget {
			return internal.instancehelpers.createElement(container, CustomWidget, "leftWidget", false);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'rightWidget' property
		 * of the parent pages.Header element passed as argument.
		 */
		public static createInHeaderUnderRightWidget(container: pages.Header): CustomWidget {
			return internal.instancehelpers.createElement(container, CustomWidget, "rightWidget", false);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'widget' property
		 * of the parent pages.Layout element passed as argument.
		 */
		public static createInLayoutUnderWidget(container: pages.Layout): CustomWidget {
			return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'widget' property
		 * of the parent pages.LayoutCallArgument element passed as argument.
		 */
		public static createInLayoutCallArgumentUnderWidget(container: pages.LayoutCallArgument): CustomWidget {
			return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'widget' property
		 * of the parent pages.LayoutGridColumn element passed as argument.
		 */
		public static createInLayoutGridColumnUnderWidget(container: pages.LayoutGridColumn): CustomWidget {
			return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'widget' property
		 * of the parent pages.ListView element passed as argument.
		 */
		public static createInListViewUnderWidget(container: pages.ListView): CustomWidget {
			return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'widget' property
		 * of the parent pages.ListViewTemplate element passed as argument.
		 */
		public static createInListViewTemplateUnderWidget(container: pages.ListViewTemplate): CustomWidget {
			return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'widget' property
		 * of the parent pages.NavigationListItem element passed as argument.
		 */
		public static createInNavigationListItemUnderWidget(container: pages.NavigationListItem): CustomWidget {
			return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'widget' property
		 * of the parent pages.ScrollContainerRegion element passed as argument.
		 */
		public static createInScrollContainerRegionUnderWidget(container: pages.ScrollContainerRegion): CustomWidget {
			return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'widget' property
		 * of the parent pages.Snippet element passed as argument.
		 */
		public static createInSnippetUnderWidget(container: pages.Snippet): CustomWidget {
			return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'firstWidget' property
		 * of the parent pages.SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderFirstWidget(container: pages.SplitPane): CustomWidget {
			return internal.instancehelpers.createElement(container, CustomWidget, "firstWidget", false);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'secondWidget' property
		 * of the parent pages.SplitPane element passed as argument.
		 */
		public static createInSplitPaneUnderSecondWidget(container: pages.SplitPane): CustomWidget {
			return internal.instancehelpers.createElement(container, CustomWidget, "secondWidget", false);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'widget' property
		 * of the parent pages.TabPage element passed as argument.
		 */
		public static createInTabPageUnderWidget(container: pages.TabPage): CustomWidget {
			return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'widget' property
		 * of the parent pages.TableCell element passed as argument.
		 */
		public static createInTableCellUnderWidget(container: pages.TableCell): CustomWidget {
			return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'widget' property
		 * of the parent pages.TemplateGridContents element passed as argument.
		 */
		public static createInTemplateGridContentsUnderWidget(container: pages.TemplateGridContents): CustomWidget {
			return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'widgets' property
		 * of the parent pages.VerticalFlow element passed as argument.
		 */
		public static createInVerticalFlowUnderWidgets(container: pages.VerticalFlow): CustomWidget {
			return internal.instancehelpers.createElement(container, CustomWidget, "widgets", true);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'parameterWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderParameterWidget(container: reports.ReportPane): CustomWidget {
			internal.createInVersionCheck(container.model, CustomWidget.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, CustomWidget, "parameterWidget", false);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * The new CustomWidget will be automatically stored in the 'reportWidget' property
		 * of the parent reports.ReportPane element passed as argument.
		 *
		 * Warning! Can only be used on models with the following Mendix meta model versions:
		 *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
		 */
		public static createInReportPaneUnderReportWidget(container: reports.ReportPane): CustomWidget {
			internal.createInVersionCheck(container.model, CustomWidget.typeName,
				["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]
			);
			return internal.instancehelpers.createElement(container, CustomWidget, "reportWidget", false);
		}

		/**
		 * Creates and returns a new CustomWidget instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): CustomWidget {
			return internal.instancehelpers.createElement(model, CustomWidget);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface ICustomWidgetType extends internal.IElement {
		model: IModel;
		containerAsCustomWidget: ICustomWidget;
		load(): CustomWidgetType;
		load(callback: (element: CustomWidgetType) => void, forceRefresh?: boolean);
	}

	export class CustomWidgetType extends internal.Element implements ICustomWidgetType {
		public static typeName: string = "CustomWidgets$CustomWidgetType";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"experimentalApi" : {
					"introduced" : "7.0.0"
				},
				"objectType" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsCustomWidget() { return super.getContainerAs<CustomWidget>(CustomWidget); }

		private __widgetId: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(CustomWidgetType, this, "widgetId", "", internal.PrimitiveTypeEnum.String);
		public get widgetId(): string { return this.__widgetId.get(); }
		public set widgetId(newValue: string) { this.__widgetId.set(newValue); }
		private __needsEntityContext: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(CustomWidgetType, this, "needsEntityContext", false, internal.PrimitiveTypeEnum.Boolean);
		public get needsEntityContext(): boolean { return this.__needsEntityContext.get(); }
		public set needsEntityContext(newValue: boolean) { this.__needsEntityContext.set(newValue); }
		private __name: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(CustomWidgetType, this, "name", "", internal.PrimitiveTypeEnum.String);
		public get name(): string { return this.__name.get(); }
		public set name(newValue: string) { this.__name.set(newValue); }
		private __description: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(CustomWidgetType, this, "description", "", internal.PrimitiveTypeEnum.String);
		public get description(): string { return this.__description.get(); }
		public set description(newValue: string) { this.__description.set(newValue); }
		private __phoneGapEnabled: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(CustomWidgetType, this, "phoneGapEnabled", false, internal.PrimitiveTypeEnum.Boolean);
		public get phoneGapEnabled(): boolean { return this.__phoneGapEnabled.get(); }
		public set phoneGapEnabled(newValue: boolean) { this.__phoneGapEnabled.set(newValue); }
		private __offlineCapable: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(CustomWidgetType, this, "offlineCapable", false, internal.PrimitiveTypeEnum.Boolean);
		public get offlineCapable(): boolean { return this.__offlineCapable.get(); }
		public set offlineCapable(newValue: boolean) { this.__offlineCapable.set(newValue); }
		private __experimentalApi: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(CustomWidgetType, this, "experimentalApi", false, internal.PrimitiveTypeEnum.Boolean);
		/**
		 * In version 7.0.0: introduced
		 */
		public get experimentalApi(): boolean { return this.__experimentalApi.get(); }
		public set experimentalApi(newValue: boolean) { this.__experimentalApi.set(newValue); }
		private __objectType: internal.PartProperty<WidgetObjectType> =
			new internal.PartProperty<WidgetObjectType>(CustomWidgetType, this, "objectType", null, true);
		public get objectType(): WidgetObjectType { return this.__objectType.get(); }
		public set objectType(newValue: WidgetObjectType) { this.__objectType.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new CustomWidgetType() cannot be invoked directly, please use 'model.customwidgets.createCustomWidgetType()'"
				);
			}
		}

		/**
		 * Creates and returns a new CustomWidgetType instance in the SDK and on the server.
		 * The new CustomWidgetType will be automatically stored in the 'type' property
		 * of the parent CustomWidget element passed as argument.
		 */
		public static createIn(container: CustomWidget): CustomWidgetType {
			return internal.instancehelpers.createElement(container, CustomWidgetType, "type", false);
		}

		/**
		 * Creates and returns a new CustomWidgetType instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): CustomWidgetType {
			return internal.instancehelpers.createElement(model, CustomWidgetType);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.objectType = WidgetObjectType.create(this.model);
		}

	}

	export interface IWidgetEnumerationValue extends internal.IElement {
		model: IModel;
		containerAsWidgetValueType: IWidgetValueType;
		load(): WidgetEnumerationValue;
		load(callback: (element: WidgetEnumerationValue) => void, forceRefresh?: boolean);
	}

	export class WidgetEnumerationValue extends internal.Element implements IWidgetEnumerationValue {
		public static typeName: string = "CustomWidgets$WidgetEnumerationValue";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsWidgetValueType() { return super.getContainerAs<WidgetValueType>(WidgetValueType); }

		private __key: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(WidgetEnumerationValue, this, "key", "", internal.PrimitiveTypeEnum.String);
		public get key(): string { return this.__key.get(); }
		public set key(newValue: string) { this.__key.set(newValue); }
		private __caption: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(WidgetEnumerationValue, this, "caption", "", internal.PrimitiveTypeEnum.String);
		public get caption(): string { return this.__caption.get(); }
		public set caption(newValue: string) { this.__caption.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new WidgetEnumerationValue() cannot be invoked directly, please use 'model.customwidgets.createWidgetEnumerationValue()'"
				);
			}
		}

		/**
		 * Creates and returns a new WidgetEnumerationValue instance in the SDK and on the server.
		 * The new WidgetEnumerationValue will be automatically stored in the 'enumerationValues' property
		 * of the parent WidgetValueType element passed as argument.
		 */
		public static createIn(container: WidgetValueType): WidgetEnumerationValue {
			return internal.instancehelpers.createElement(container, WidgetEnumerationValue, "enumerationValues", true);
		}

		/**
		 * Creates and returns a new WidgetEnumerationValue instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): WidgetEnumerationValue {
			return internal.instancehelpers.createElement(model, WidgetEnumerationValue);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IWidgetObject extends internal.IElement {
		model: IModel;
		containerAsCustomWidget: ICustomWidget;
		containerAsWidgetValue: IWidgetValue;
		load(): WidgetObject;
		load(callback: (element: WidgetObject) => void, forceRefresh?: boolean);
	}

	export class WidgetObject extends internal.Element implements IWidgetObject {
		public static typeName: string = "CustomWidgets$WidgetObject";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"type" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsCustomWidget() { return super.getContainerAs<CustomWidget>(CustomWidget); }
		get containerAsWidgetValue() { return super.getContainerAs<WidgetValue>(WidgetValue); }

		private __type: internal.ByIdReferenceProperty<WidgetObjectType> =
			new internal.ByIdReferenceProperty<WidgetObjectType>(WidgetObject, this, "type", null);
		public get type(): WidgetObjectType { return this.__type.get(); }
		public set type(newValue: WidgetObjectType) { this.__type.set(newValue); }
		private __properties: internal.PartListProperty<WidgetProperty> =
			new internal.PartListProperty<WidgetProperty>(WidgetObject, this, "properties", []);
		public get properties(): internal.IList<WidgetProperty> { return this.__properties.get(); }
		public set properties(newValue: internal.IList<WidgetProperty>) { this.__properties.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new WidgetObject() cannot be invoked directly, please use 'model.customwidgets.createWidgetObject()'"
				);
			}
		}


		/**
		 * Creates and returns a new WidgetObject instance in the SDK and on the server.
		 * The new WidgetObject will be automatically stored in the 'object' property
		 * of the parent CustomWidget element passed as argument.
		 */
		public static createInCustomWidgetUnderObject(container: CustomWidget): WidgetObject {
			return internal.instancehelpers.createElement(container, WidgetObject, "object", false);
		}

		/**
		 * Creates and returns a new WidgetObject instance in the SDK and on the server.
		 * The new WidgetObject will be automatically stored in the 'objects' property
		 * of the parent WidgetValue element passed as argument.
		 */
		public static createInWidgetValueUnderObjects(container: WidgetValue): WidgetObject {
			return internal.instancehelpers.createElement(container, WidgetObject, "objects", true);
		}

		/**
		 * Creates and returns a new WidgetObject instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): WidgetObject {
			return internal.instancehelpers.createElement(model, WidgetObject);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IWidgetObjectType extends internal.IElement {
		model: IModel;
		containerAsCustomWidgetType: ICustomWidgetType;
		containerAsWidgetValueType: IWidgetValueType;
		load(): WidgetObjectType;
		load(callback: (element: WidgetObjectType) => void, forceRefresh?: boolean);
	}

	export class WidgetObjectType extends internal.Element implements IWidgetObjectType {
		public static typeName: string = "CustomWidgets$WidgetObjectType";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsCustomWidgetType() { return super.getContainerAs<CustomWidgetType>(CustomWidgetType); }
		get containerAsWidgetValueType() { return super.getContainerAs<WidgetValueType>(WidgetValueType); }

		private __propertyTypes: internal.PartListProperty<WidgetPropertyType> =
			new internal.PartListProperty<WidgetPropertyType>(WidgetObjectType, this, "propertyTypes", []);
		public get propertyTypes(): internal.IList<WidgetPropertyType> { return this.__propertyTypes.get(); }
		public set propertyTypes(newValue: internal.IList<WidgetPropertyType>) { this.__propertyTypes.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new WidgetObjectType() cannot be invoked directly, please use 'model.customwidgets.createWidgetObjectType()'"
				);
			}
		}


		/**
		 * Creates and returns a new WidgetObjectType instance in the SDK and on the server.
		 * The new WidgetObjectType will be automatically stored in the 'objectType' property
		 * of the parent CustomWidgetType element passed as argument.
		 */
		public static createInCustomWidgetTypeUnderObjectType(container: CustomWidgetType): WidgetObjectType {
			return internal.instancehelpers.createElement(container, WidgetObjectType, "objectType", false);
		}

		/**
		 * Creates and returns a new WidgetObjectType instance in the SDK and on the server.
		 * The new WidgetObjectType will be automatically stored in the 'objectType' property
		 * of the parent WidgetValueType element passed as argument.
		 */
		public static createInWidgetValueTypeUnderObjectType(container: WidgetValueType): WidgetObjectType {
			return internal.instancehelpers.createElement(container, WidgetObjectType, "objectType", false);
		}

		/**
		 * Creates and returns a new WidgetObjectType instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): WidgetObjectType {
			return internal.instancehelpers.createElement(model, WidgetObjectType);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IWidgetProperty extends internal.IElement {
		model: IModel;
		containerAsWidgetObject: IWidgetObject;
		load(): WidgetProperty;
		load(callback: (element: WidgetProperty) => void, forceRefresh?: boolean);
	}

	export class WidgetProperty extends internal.Element implements IWidgetProperty {
		public static typeName: string = "CustomWidgets$WidgetProperty";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"type" : {
					"required" : {
						"currentValue" : true
					}
				},
				"value" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsWidgetObject() { return super.getContainerAs<WidgetObject>(WidgetObject); }

		private __type: internal.ByIdReferenceProperty<WidgetPropertyType> =
			new internal.ByIdReferenceProperty<WidgetPropertyType>(WidgetProperty, this, "type", null);
		public get type(): WidgetPropertyType { return this.__type.get(); }
		public set type(newValue: WidgetPropertyType) { this.__type.set(newValue); }
		private __value: internal.PartProperty<WidgetValue> =
			new internal.PartProperty<WidgetValue>(WidgetProperty, this, "value", null, true);
		public get value(): WidgetValue { return this.__value.get(); }
		public set value(newValue: WidgetValue) { this.__value.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new WidgetProperty() cannot be invoked directly, please use 'model.customwidgets.createWidgetProperty()'"
				);
			}
		}

		/**
		 * Creates and returns a new WidgetProperty instance in the SDK and on the server.
		 * The new WidgetProperty will be automatically stored in the 'properties' property
		 * of the parent WidgetObject element passed as argument.
		 */
		public static createIn(container: WidgetObject): WidgetProperty {
			return internal.instancehelpers.createElement(container, WidgetProperty, "properties", true);
		}

		/**
		 * Creates and returns a new WidgetProperty instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): WidgetProperty {
			return internal.instancehelpers.createElement(model, WidgetProperty);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.value = WidgetValue.create(this.model);
		}

	}

	export interface IWidgetPropertyType extends internal.IElement {
		model: IModel;
		containerAsWidgetObjectType: IWidgetObjectType;
		load(): WidgetPropertyType;
		load(callback: (element: WidgetPropertyType) => void, forceRefresh?: boolean);
	}

	export class WidgetPropertyType extends internal.Element implements IWidgetPropertyType {
		public static typeName: string = "CustomWidgets$WidgetPropertyType";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"valueType" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsWidgetObjectType() { return super.getContainerAs<WidgetObjectType>(WidgetObjectType); }

		private __key: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(WidgetPropertyType, this, "key", "", internal.PrimitiveTypeEnum.String);
		public get key(): string { return this.__key.get(); }
		public set key(newValue: string) { this.__key.set(newValue); }
		private __category: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(WidgetPropertyType, this, "category", "", internal.PrimitiveTypeEnum.String);
		public get category(): string { return this.__category.get(); }
		public set category(newValue: string) { this.__category.set(newValue); }
		private __caption: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(WidgetPropertyType, this, "caption", "", internal.PrimitiveTypeEnum.String);
		public get caption(): string { return this.__caption.get(); }
		public set caption(newValue: string) { this.__caption.set(newValue); }
		private __description: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(WidgetPropertyType, this, "description", "", internal.PrimitiveTypeEnum.String);
		public get description(): string { return this.__description.get(); }
		public set description(newValue: string) { this.__description.set(newValue); }
		private __isDefault: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(WidgetPropertyType, this, "isDefault", false, internal.PrimitiveTypeEnum.Boolean);
		public get isDefault(): boolean { return this.__isDefault.get(); }
		public set isDefault(newValue: boolean) { this.__isDefault.set(newValue); }
		private __valueType: internal.PartProperty<WidgetValueType> =
			new internal.PartProperty<WidgetValueType>(WidgetPropertyType, this, "valueType", null, true);
		public get valueType(): WidgetValueType { return this.__valueType.get(); }
		public set valueType(newValue: WidgetValueType) { this.__valueType.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new WidgetPropertyType() cannot be invoked directly, please use 'model.customwidgets.createWidgetPropertyType()'"
				);
			}
		}

		/**
		 * Creates and returns a new WidgetPropertyType instance in the SDK and on the server.
		 * The new WidgetPropertyType will be automatically stored in the 'propertyTypes' property
		 * of the parent WidgetObjectType element passed as argument.
		 */
		public static createIn(container: WidgetObjectType): WidgetPropertyType {
			return internal.instancehelpers.createElement(container, WidgetPropertyType, "propertyTypes", true);
		}

		/**
		 * Creates and returns a new WidgetPropertyType instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): WidgetPropertyType {
			return internal.instancehelpers.createElement(model, WidgetPropertyType);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.valueType = WidgetValueType.create(this.model);
		}

	}

	export interface IWidgetReturnType extends internal.IElement {
		model: IModel;
		containerAsWidgetValueType: IWidgetValueType;
		load(): WidgetReturnType;
		load(callback: (element: WidgetReturnType) => void, forceRefresh?: boolean);
	}

	export class WidgetReturnType extends internal.Element implements IWidgetReturnType {
		public static typeName: string = "CustomWidgets$WidgetReturnType";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsWidgetValueType() { return super.getContainerAs<WidgetValueType>(WidgetValueType); }

		private __type: internal.EnumProperty<WidgetReturnTypeEnum> =
			new internal.EnumProperty<WidgetReturnTypeEnum>(WidgetReturnType, this, "type", WidgetReturnTypeEnum.Boolean, WidgetReturnTypeEnum);
		public get type(): WidgetReturnTypeEnum { return this.__type.get(); }
		public set type(newValue: WidgetReturnTypeEnum) { this.__type.set(newValue); }
		private __isList: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(WidgetReturnType, this, "isList", false, internal.PrimitiveTypeEnum.Boolean);
		public get isList(): boolean { return this.__isList.get(); }
		public set isList(newValue: boolean) { this.__isList.set(newValue); }
		private __entityProperty: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(WidgetReturnType, this, "entityProperty", "", internal.PrimitiveTypeEnum.String);
		public get entityProperty(): string { return this.__entityProperty.get(); }
		public set entityProperty(newValue: string) { this.__entityProperty.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new WidgetReturnType() cannot be invoked directly, please use 'model.customwidgets.createWidgetReturnType()'"
				);
			}
		}

		/**
		 * Creates and returns a new WidgetReturnType instance in the SDK and on the server.
		 * The new WidgetReturnType will be automatically stored in the 'returnType' property
		 * of the parent WidgetValueType element passed as argument.
		 */
		public static createIn(container: WidgetValueType): WidgetReturnType {
			return internal.instancehelpers.createElement(container, WidgetReturnType, "returnType", false);
		}

		/**
		 * Creates and returns a new WidgetReturnType instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): WidgetReturnType {
			return internal.instancehelpers.createElement(model, WidgetReturnType);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.type = WidgetReturnTypeEnum.Boolean;
		}

	}

	export interface IWidgetTranslation extends internal.IElement {
		model: IModel;
		containerAsWidgetValueType: IWidgetValueType;
		load(): WidgetTranslation;
		load(callback: (element: WidgetTranslation) => void, forceRefresh?: boolean);
	}

	export class WidgetTranslation extends internal.Element implements IWidgetTranslation {
		public static typeName: string = "CustomWidgets$WidgetTranslation";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsWidgetValueType() { return super.getContainerAs<WidgetValueType>(WidgetValueType); }

		private __languageCode: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(WidgetTranslation, this, "languageCode", "", internal.PrimitiveTypeEnum.String);
		public get languageCode(): string { return this.__languageCode.get(); }
		public set languageCode(newValue: string) { this.__languageCode.set(newValue); }
		private __text: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(WidgetTranslation, this, "text", "", internal.PrimitiveTypeEnum.String);
		public get text(): string { return this.__text.get(); }
		public set text(newValue: string) { this.__text.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new WidgetTranslation() cannot be invoked directly, please use 'model.customwidgets.createWidgetTranslation()'"
				);
			}
		}

		/**
		 * Creates and returns a new WidgetTranslation instance in the SDK and on the server.
		 * The new WidgetTranslation will be automatically stored in the 'translations' property
		 * of the parent WidgetValueType element passed as argument.
		 */
		public static createIn(container: WidgetValueType): WidgetTranslation {
			return internal.instancehelpers.createElement(container, WidgetTranslation, "translations", true);
		}

		/**
		 * Creates and returns a new WidgetTranslation instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): WidgetTranslation {
			return internal.instancehelpers.createElement(model, WidgetTranslation);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IWidgetValue extends internal.IElement {
		model: IModel;
		containerAsWidgetProperty: IWidgetProperty;
		load(): WidgetValue;
		load(callback: (element: WidgetValue) => void, forceRefresh?: boolean);
	}

	export class WidgetValue extends internal.Element implements IWidgetValue {
		public static typeName: string = "CustomWidgets$WidgetValue";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"type" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.Element);
		model: IModel;

		get containerAsWidgetProperty() { return super.getContainerAs<WidgetProperty>(WidgetProperty); }

		private __type: internal.ByIdReferenceProperty<WidgetValueType> =
			new internal.ByIdReferenceProperty<WidgetValueType>(WidgetValue, this, "type", null);
		public get type(): WidgetValueType { return this.__type.get(); }
		public set type(newValue: WidgetValueType) { this.__type.set(newValue); }
		private __primitiveValue: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(WidgetValue, this, "primitiveValue", "", internal.PrimitiveTypeEnum.String);
		public get primitiveValue(): string { return this.__primitiveValue.get(); }
		public set primitiveValue(newValue: string) { this.__primitiveValue.set(newValue); }
		private __entityPath: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(WidgetValue, this, "entityPath", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type paths.EntityPath.
		 */
		public get entityPath(): string { return this.__entityPath.get(); }
		public set entityPath(newValue: string) { this.__entityPath.set(newValue); }
		private __attributePath: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(WidgetValue, this, "attributePath", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type paths.AttributePath.
		 */
		public get attributePath(): string { return this.__attributePath.get(); }
		public set attributePath(newValue: string) { this.__attributePath.set(newValue); }
		private __page: internal.ByNameReferenceProperty<pages.IPage> =
			new internal.ByNameReferenceProperty<pages.IPage>(WidgetValue, this, "page", null, "Pages$Page");
		public get page(): pages.IPage { return this.__page.get(); }
		public set page(newValue: pages.IPage) { this.__page.set(newValue); }
		get pageQualifiedName(): string { return this.__page.qualifiedName(); }
		private __microflow: internal.ByNameReferenceProperty<microflows.IMicroflow> =
			new internal.ByNameReferenceProperty<microflows.IMicroflow>(WidgetValue, this, "microflow", null, "Microflows$Microflow");
		public get microflow(): microflows.IMicroflow { return this.__microflow.get(); }
		public set microflow(newValue: microflows.IMicroflow) { this.__microflow.set(newValue); }
		get microflowQualifiedName(): string { return this.__microflow.qualifiedName(); }
		private __image: internal.ByNameReferenceProperty<images.IImage> =
			new internal.ByNameReferenceProperty<images.IImage>(WidgetValue, this, "image", null, "Images$Image");
		public get image(): images.IImage { return this.__image.get(); }
		public set image(newValue: images.IImage) { this.__image.set(newValue); }
		get imageQualifiedName(): string { return this.__image.qualifiedName(); }
		private __translatableValue: internal.PartProperty<texts.Text> =
			new internal.PartProperty<texts.Text>(WidgetValue, this, "translatableValue", null, false);
		public get translatableValue(): texts.Text { return this.__translatableValue.get(); }
		public set translatableValue(newValue: texts.Text) { this.__translatableValue.set(newValue); }
		private __xPathConstraint: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(WidgetValue, this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
		/**
		 * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
		 */
		public get xPathConstraint(): string { return this.__xPathConstraint.get(); }
		public set xPathConstraint(newValue: string) { this.__xPathConstraint.set(newValue); }
		private __objects: internal.PartListProperty<WidgetObject> =
			new internal.PartListProperty<WidgetObject>(WidgetValue, this, "objects", []);
		public get objects(): internal.IList<WidgetObject> { return this.__objects.get(); }
		public set objects(newValue: internal.IList<WidgetObject>) { this.__objects.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new WidgetValue() cannot be invoked directly, please use 'model.customwidgets.createWidgetValue()'"
				);
			}
		}

		/**
		 * Creates and returns a new WidgetValue instance in the SDK and on the server.
		 * The new WidgetValue will be automatically stored in the 'value' property
		 * of the parent WidgetProperty element passed as argument.
		 */
		public static createIn(container: WidgetProperty): WidgetValue {
			return internal.instancehelpers.createElement(container, WidgetValue, "value", false);
		}

		/**
		 * Creates and returns a new WidgetValue instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): WidgetValue {
			return internal.instancehelpers.createElement(model, WidgetValue);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}

	export interface IWidgetValueType extends internal.IElement {
		model: IModel;
		containerAsWidgetPropertyType: IWidgetPropertyType;
		load(): WidgetValueType;
		load(callback: (element: WidgetValueType) => void, forceRefresh?: boolean);
	}

	export class WidgetValueType extends internal.Element implements IWidgetValueType {
		public static typeName: string = "CustomWidgets$WidgetValueType";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({ }, internal.StructureType.Element);
		model: IModel;

		get containerAsWidgetPropertyType() { return super.getContainerAs<WidgetPropertyType>(WidgetPropertyType); }

		private __type: internal.EnumProperty<WidgetValueTypeEnum> =
			new internal.EnumProperty<WidgetValueTypeEnum>(WidgetValueType, this, "type", WidgetValueTypeEnum.String, WidgetValueTypeEnum);
		public get type(): WidgetValueTypeEnum { return this.__type.get(); }
		public set type(newValue: WidgetValueTypeEnum) { this.__type.set(newValue); }
		private __isList: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(WidgetValueType, this, "isList", false, internal.PrimitiveTypeEnum.Boolean);
		public get isList(): boolean { return this.__isList.get(); }
		public set isList(newValue: boolean) { this.__isList.set(newValue); }
		private __entityProperty: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(WidgetValueType, this, "entityProperty", "", internal.PrimitiveTypeEnum.String);
		public get entityProperty(): string { return this.__entityProperty.get(); }
		public set entityProperty(newValue: string) { this.__entityProperty.set(newValue); }
		private __allowNonPersistableEntities: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(WidgetValueType, this, "allowNonPersistableEntities", false, internal.PrimitiveTypeEnum.Boolean);
		public get allowNonPersistableEntities(): boolean { return this.__allowNonPersistableEntities.get(); }
		public set allowNonPersistableEntities(newValue: boolean) { this.__allowNonPersistableEntities.set(newValue); }
		private __isPath: internal.EnumProperty<IsPath> =
			new internal.EnumProperty<IsPath>(WidgetValueType, this, "isPath", IsPath.No, IsPath);
		public get isPath(): IsPath { return this.__isPath.get(); }
		public set isPath(newValue: IsPath) { this.__isPath.set(newValue); }
		private __pathType: internal.EnumProperty<PathType> =
			new internal.EnumProperty<PathType>(WidgetValueType, this, "pathType", PathType.None, PathType);
		public get pathType(): PathType { return this.__pathType.get(); }
		public set pathType(newValue: PathType) { this.__pathType.set(newValue); }
		private __parameterIsList: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(WidgetValueType, this, "parameterIsList", false, internal.PrimitiveTypeEnum.Boolean);
		public get parameterIsList(): boolean { return this.__parameterIsList.get(); }
		public set parameterIsList(newValue: boolean) { this.__parameterIsList.set(newValue); }
		private __multiline: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(WidgetValueType, this, "multiline", false, internal.PrimitiveTypeEnum.Boolean);
		public get multiline(): boolean { return this.__multiline.get(); }
		public set multiline(newValue: boolean) { this.__multiline.set(newValue); }
		private __defaultValue: internal.PrimitiveProperty<string> =
			new internal.PrimitiveProperty<string>(WidgetValueType, this, "defaultValue", "", internal.PrimitiveTypeEnum.String);
		public get defaultValue(): string { return this.__defaultValue.get(); }
		public set defaultValue(newValue: string) { this.__defaultValue.set(newValue); }
		private __required: internal.PrimitiveProperty<boolean> =
			new internal.PrimitiveProperty<boolean>(WidgetValueType, this, "required", false, internal.PrimitiveTypeEnum.Boolean);
		public get required(): boolean { return this.__required.get(); }
		public set required(newValue: boolean) { this.__required.set(newValue); }
		private __attributeTypes: internal.EnumListProperty<CustomWidgetAttributeType> =
			new internal.EnumListProperty<CustomWidgetAttributeType>(WidgetValueType, this, "attributeTypes", [], CustomWidgetAttributeType);
		public get attributeTypes(): internal.IList<CustomWidgetAttributeType> { return this.__attributeTypes.get(); }
		public set attributeTypes(newValue: internal.IList<CustomWidgetAttributeType>) { this.__attributeTypes.set(newValue); }
		private __enumerationValues: internal.PartListProperty<WidgetEnumerationValue> =
			new internal.PartListProperty<WidgetEnumerationValue>(WidgetValueType, this, "enumerationValues", []);
		public get enumerationValues(): internal.IList<WidgetEnumerationValue> { return this.__enumerationValues.get(); }
		public set enumerationValues(newValue: internal.IList<WidgetEnumerationValue>) { this.__enumerationValues.set(newValue); }
		private __objectType: internal.PartProperty<WidgetObjectType> =
			new internal.PartProperty<WidgetObjectType>(WidgetValueType, this, "objectType", null, false);
		public get objectType(): WidgetObjectType { return this.__objectType.get(); }
		public set objectType(newValue: WidgetObjectType) { this.__objectType.set(newValue); }
		private __returnType: internal.PartProperty<WidgetReturnType> =
			new internal.PartProperty<WidgetReturnType>(WidgetValueType, this, "returnType", null, false);
		public get returnType(): WidgetReturnType { return this.__returnType.get(); }
		public set returnType(newValue: WidgetReturnType) { this.__returnType.set(newValue); }
		private __translations: internal.PartListProperty<WidgetTranslation> =
			new internal.PartListProperty<WidgetTranslation>(WidgetValueType, this, "translations", []);
		public get translations(): internal.IList<WidgetTranslation> { return this.__translations.get(); }
		public set translations(newValue: internal.IList<WidgetTranslation>) { this.__translations.set(newValue); }

		constructor(
			model: internal.AbstractModel,
			typeName: string,
			id: string,
			isPartial: boolean,
			unit: internal.ModelUnit,
			container: internal.AbstractElement
		) {
			super(model, typeName, id, isPartial, unit, container);
			if (arguments.length < 4) {
				throw new Error(
					"new WidgetValueType() cannot be invoked directly, please use 'model.customwidgets.createWidgetValueType()'"
				);
			}
		}

		/**
		 * Creates and returns a new WidgetValueType instance in the SDK and on the server.
		 * The new WidgetValueType will be automatically stored in the 'valueType' property
		 * of the parent WidgetPropertyType element passed as argument.
		 */
		public static createIn(container: WidgetPropertyType): WidgetValueType {
			return internal.instancehelpers.createElement(container, WidgetValueType, "valueType", false);
		}

		/**
		 * Creates and returns a new WidgetValueType instance in the SDK and on the server.
		 * Expects one argument: the IModel object the instance will "live on".
		 * After creation, assign or add this instance to a property that accepts this kind of objects.
		 */
		public static create(model: IModel): WidgetValueType {
			return internal.instancehelpers.createElement(model, WidgetValueType);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
			this.isPath = IsPath.No;
			this.pathType = PathType.None;
			this.type = WidgetValueTypeEnum.String;
		}

	}
}

import {images} from "./images";
import {microflows} from "./microflows";
import {reports} from "./reports";
import {texts} from "./texts";

import {IModel} from "./base-model";
