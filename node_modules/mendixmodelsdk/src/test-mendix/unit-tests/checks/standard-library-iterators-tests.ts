

import {standardIterators} from "../../../sdk/checks/standard-library-iterators";

import {assert} from "chai";


describe("iterators in the standard library", () => {

	const map = standardIterators["MAP"];
	const some = standardIterators["SOME"];
	const every = standardIterators["EVERY"];
	const filter = standardIterators["FILTER"];
	const findFirst = standardIterators["FIND_FIRST"];

	it("should all do the right thing on undefined", () => {
		const trueFunc = item => true;
		assert.equal(map(undefined, trueFunc), undefined);
		assert.equal(some(undefined, trueFunc), false);
		assert.equal(every(undefined, trueFunc), false);
		assert.equal(filter(undefined, trueFunc), undefined);
		assert.equal(findFirst(undefined, trueFunc), undefined);
	});

	const oddFunc = (n: number) => n % 2 === 1;
	const undefinedFunc = (x: any) => undefined;

	it("map", () => {
		const asymDoubler = (n: number) => n < 0 ? undefined : 2 * n;
		assert.deepEqual(map([1, 2, 3, -1, 4], asymDoubler), [2, 4, 6, 8]);
		assert.deepEqual(map([], asymDoubler), []);
		assert.deepEqual(map([1, 2], undefinedFunc), []);
	});

	it("some", () => {
		const boolId = (b: boolean) => b;
		assert.deepEqual(some([true, undefined], boolId), true);
		assert.deepEqual(some([undefined, undefined], boolId), undefined);
		assert.deepEqual(some([undefined, false], boolId), false);
		assert.deepEqual(some([], boolId), false, "exists on empty");
		assert.deepEqual(some([1, 2], undefinedFunc), undefined);
	});

	const asymOddFunc = (n: number) => n < 0 ? undefined : oddFunc(n);

	it("every", () => {
		assert.deepEqual(every([1, 2, 3, -1, 4], asymOddFunc), false);
		assert.deepEqual(every([1, 3], oddFunc), true);
		assert.deepEqual(every([], oddFunc), true, "forAll on empty");
		assert.deepEqual(every([42], oddFunc), false);
		assert.deepEqual(every([42], undefinedFunc), false);
	});

	it("filter", () => {
		assert.deepEqual(filter([1, 2, 3, -1, 4], asymOddFunc), [1, 3]);
		assert.deepEqual(filter([1, 2, 3, -1, 4], undefinedFunc), []);
		assert.deepEqual(filter([], asymOddFunc), []);	// not undefined
	});

	it("findFirst", () => {
		assert.deepEqual(findFirst([1, 2, 3, -1, 4], asymOddFunc), 1);
		assert.deepEqual(findFirst([1, 2, 3, -1, 4], undefinedFunc), undefined);
		assert.deepEqual(findFirst([], asymOddFunc), undefined);
	});

});

