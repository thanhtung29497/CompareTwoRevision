import {assert} from "chai";
import {xTimes} from "../../helpers/string-util";

import {checks} from "../../../sdk/checks/checks-index";


describe("name validation", () => {

	it("validateNameSyntax", () => {
		assertValidateName((source: any, args: void | any[]) => checks.validateNameSyntax(source));
	});

});


export function assertValidateName(validationFunction: (source: any, args: void | any[]) => any) {
	const emptyMessage = "Name cannot be empty";
	assert.equal(validationFunction(undefined, []), emptyMessage);
	assert.equal(validationFunction(null, []), emptyMessage);
	assert.equal(validationFunction("", []), emptyMessage);

	assert.equal(validationFunction("foo", []), null);
	assert.equal(validationFunction("foo_bar_123456789", []), null);

	assert.equal(validationFunction(xTimes(256), []), "Name is too long");
	assert.equal(validationFunction(xTimes(255), []), null);

	const formatMessage = "Names should start with a letter and can only contain letters, digits and underscores";
	assert.equal(validationFunction("bar???", []), formatMessage);
	assert.equal(validationFunction("1foo", []), formatMessage);

	assert.equal(validationFunction("public", []), "Name is a reserved word");
}

