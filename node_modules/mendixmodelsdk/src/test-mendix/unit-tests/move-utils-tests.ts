

import {assert} from "chai";
import {observable} from "mobx";
import {range} from "lodash";

import {isPermutation, runLenghtEncode, detectMove} from "../../sdk/internal/properties/move-utils";


describe("move utils:", () => {

	it("isPermutation works correctly", () => {
		assert.isFalse(isPermutation([1]));
		assert.isTrue(isPermutation([1, 0]));
		assert.isFalse(isPermutation([3, -1, 2, 1, 0]));
		assert.isFalse(isPermutation([0, 1.1, 2]));

		const n = 20;	// needs to be at least 11, because of: [ 1, 2, 10 ].sort() === [ 1, 10, 2 ]...
		const arr = range(n).reverse();
		assert.isTrue(isPermutation(arr), "defeat broken JS sorting");
		assert.deepEqual(arr, range(n).reverse(), "indices are passed by value");
	});

	it("run-length encoding works correctly", () => {
		assert.deepEqual(runLenghtEncode([]), []);
		assert.deepEqual(runLenghtEncode([ -1 ]), [ { count: 1, value: -1 } ]);
		assert.deepEqual(runLenghtEncode([ 5, 5, 5, 5, 5 ]), [ { count: 5, value: 5 } ]);
		assert.deepEqual(runLenghtEncode([ 0, 0, -1, 1, 1, 0 ]), [
			{ count: 2, value: 0 }, { count: 1, value: -1 }, { count: 2, value: 1 }, { count: 1, value: 0 }
		]);
		assert.isNull(runLenghtEncode([0, 1], 1));
	});

	it("detectMove detects moves correctly", () => {
		// some explicit examples:
		assert.deepEqual(detectMove([0, 1, 3, 2, 4]), [2, 3]);
		assert.deepEqual(detectMove([0, 1, 3, 4, 2]), [2, 4]);
		assert.deepEqual(detectMove([0, 1, 4, 2, 3]), [4, 2]);

		function testMove(indices: number[], fromIndex: number, toIndex: number) {
			const oIndices = observable(indices.slice());	// (defensive copy)
			oIndices.move(fromIndex, toIndex);
			assert.deepEqual(detectMove(oIndices.slice()), [ fromIndex, toIndex ]);
		}

		const n = 50;
		const arr = range(n);

		for (let i = 0; i < n; i++) {
			for (let j = 0; j < n; j++) {
				const diff = i - j;
				if (diff !== 0 && diff !== 1) {
					testMove(arr, i, j);
				}
			}
		}
	});

	it("detectMove detects non-moves correctly", () => {
		// not a permutation:
		assert.isNull(detectMove([1]));
		assert.isNull(detectMove([3, -1, 2, 1, 0]));
		assert.isNull(detectMove([0, 1.1, 2]));

		assert.isNull(detectMove([0]), "not movable");
		assert.isNull(detectMove([0, 1]), "identity");
		assert.isNull(detectMove([1, 0, 2, 4, 3]), "2 moves");
	});

});
