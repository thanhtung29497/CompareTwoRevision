import {common, utils, configuration,
	IWorkingCopy, Model,
	IAbstractUnit, AbstractUnit, ModelUnit,
	IModelApiClient,
	IEditorData
} from "../../index";
import {readJson, testDataPathPrefix} from "./file-helper";
import {createSdkClient} from "../helpers/test-model-helper";
import {IEnvironmentStatus, IDeployJobStatus} from "../../sdk/internal/transport-interfaces";
import {pages_simple} from "../gen/pages_simple";


/**
 * A stub implementation of {@link IModelApiClient} which mimics a Model API where every working copy
 * is initialized using provided JSON, and deltas are simply recorded.
 */
export abstract class StubClient implements IModelApiClient {

	deltas: any[] = [];

	private models: { [workingCopyId: string]: Model } = {};

	constructor(
		private config: configuration.ISdkConfig,
		private unitInterfaces: IAbstractUnit[],
		private units: { [unitId: string]: AbstractUnit },
		private productVersion: string
	) { }

	createWorkingCopy(
		workingCopyInfo: configuration.ICreateWorkingCopyParameters,
		callback: common.ICallback<IWorkingCopy>,
		errorCallback: common.IErrorCallback
	) {
		const model = new Model(this, errorCallback, this.config);
		const workingCopyId = utils.randomUuid();
		this.loadWorkingCopyMetaData(
			workingCopyId, info => {
				this.models[workingCopyId] = model;
				callback(info);
			},
			errorCallback
		);
	}

	deleteWorkingCopy(workingCopyId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback) {
		if (this.models[workingCopyId]) {
			delete this.models[workingCopyId];
			return void callback();
		} else {
			return void errorCallback("working copy not found: " + workingCopyId);
		}
	}

	loadWorkingCopyMetaData(workingCopyId: string, callback: common.ICallback<IWorkingCopy>, errorCallback: common.IErrorCallback) {
		return void callback({
			id: workingCopyId,
			metaData: {
				name: "Stub project",
				description: "Stub project for testing",
				metaModelVersion: this.productVersion,
				avatarUrl: ""
			},
			members: [],
			mprFileName: "mpr.mpr",
			mprMetaData: {
				_ProductVersion: this.productVersion,
				_BuildVersion: "0",
				_SchemaHash: ""
			}
		} as IWorkingCopy);
	}

	loadUnitInterfaces(workingCopyId: string, callback: common.ICallback<any[]>, errorCallback: common.IErrorCallback) {
		return void callback(this.unitInterfaces);
	}

	getMyWorkingCopies(callback: common.ICallback<IWorkingCopy[]>, errorCallback: common.IErrorCallback) {
		return void callback([]);
	}

	grantAccess(workingCopyId: string, memberOpenId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback) {
		return void callback();
	}

	revokeAccess(workingCopyId: string, memberOpenId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback) {
		return void callback();
	}

	checkAccess(workingCopyId: string, memberOpenId: string, callback: common.ICallback<boolean>, errorCallback: common.IErrorCallback) {
		return void callback(true);
	}

	grantAccessByProject(projectId: string, memberOpenId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback) {
		return void callback();
	}

	revokeAccessByProject(projectId: string, memberOpenId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback) {
		return void callback();
	}

	exportMpk(workingCopyId: string, outFilePath: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback) {
		return void callback();
	}

	getFiles(workingCopyId: string, options: any, callback: common.ICallback<string[]>, errorCallback: common.IErrorCallback) {
		return void callback([]);
	}

	getFile(
		workingCopyId: string, filePath: string, outFilePath: string,
		callback: common.IVoidCallback, errorCallback: common.IErrorCallback
	) {
		return void callback();
	}

	putFile(
		workingCopyId: string, inFilePath: string, filePath: string,
		callback: common.IVoidCallback, errorCallback: common.IErrorCallback
	) {
		return void callback();
	}

	deleteFile(workingCopyId: string, filePath: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback) {
		return void callback();
	}

	loadUnitById<T extends ModelUnit>(workingCopyId: string, unitId: string, callback) {
		const unit = this.units[unitId];
		if (unit) {
			return void callback(unit);
		}
		throw new Error(`Unknown unit id ${unitId}`);
	}

	sendDeltas(workingCopyId: string, deltas: any[], onSuccess: common.ICallback<Object>, onError: common.IErrorCallback) {
		this.deltas.push(...deltas);
		const results = [];
		for (let i = 0; i < deltas.length; i++) {
			results.push({});
		}
		return void onSuccess({ successResults: results, firstError: null });
	}

	getAppEnvironmentStatus(workingCopyId: string, callback: common.ICallback<IEnvironmentStatus>, errorCallback: common.IErrorCallback) {
		return void callback({
			name: "",
			url: "example.com/app",
			profile: "free",
			state: "STARTED",
			endpoint: "euwest",
			instances: 1,
			memory: 1024,
			disk: 1,
			buildstatus: null,
			environmentId: "",
			consistencyErrors: []
		});
	}

	startAppUpdate(
		workingCopyId: string,
		callback: common.ICallback<IDeployJobStatus>,
		errorCallback: common.IErrorCallback
	) {
		return void callback({
			jobid: "123456789",
			startTime: Date.now(),
			status: "started",
			buildstatus: null,
			trace: []
		});
	};

	getAppUpdateStatus(
		workingCopyId: string,
		jobId: string,
		callback: common.ICallback<IDeployJobStatus>,
		errorCallback: common.IErrorCallback
	) {
		return void callback({
			jobid: "123456789",
			startTime: Date.now(),
			status: "started",
			buildstatus: null,
			trace: []
		});
	};

	getEditorData(callback: common.ICallback<IEditorData>, errorCallback: common.IErrorCallback) {
		return void callback({
			"6.3.0": {
				pageTemplates: "53839423-715e-490d-8eb8-5e1c6bc9525h"
			},
			"6.4.0": {
				pageTemplates: "f95f2763-4fdc-4758-8a02-69a8e126742b"
			}
		});
	}

	getWorkingCopyByProject(projectId, callback: common.ICallback<string>, errorCallback: common.IErrorCallback) {
		return void callback(null);
	}

	createWorkingCopyByProject(
		projectId: string,
		workingCopyId: string,
		callback: common.IVoidCallback,
		errorCallback: common.IErrorCallback
	) {
		return void callback();
	}

	updateWorkingCopyByProject(
		projectId: string,
		workingCopyId: string,
		callback: common.IVoidCallback,
		errorCallback: common.IErrorCallback
	) {
		return void callback();
	}

	deleteWorkingCopyByProject(projectId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback) {
		return void callback();
	}

	lockWorkingCopy(workingCopyId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback) {
		return void callback();
	}

	unlockWorkingCopy(workingCopyId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback) {
		return void callback();
	}

}


function readTestDataJson(fileName: string) {
	return readJson<any>(testDataPathPrefix + fileName);
}

export class CompanyExpensesStubClient extends StubClient {

	public static domainModelUnitId: string = "6ff9f92e-d8b1-4392-a0c8-dedb47bded2d";
	public static domainModelUnitId2: string = "0844e404-5674-445c-b4d4-55089b2750b0";
	public static domainModelUnitId3: string = "b55c4efc-0ba1-4e2f-a682-9cef7d26042b";

	constructor(config: configuration.ISdkConfig, version: string) {
		super(
			config,
			readTestDataJson("company-expenses/unit-interfaces.json"),
			{
				[CompanyExpensesStubClient.domainModelUnitId]: readTestDataJson("company-expenses/domain-model.json"),
				[CompanyExpensesStubClient.domainModelUnitId2]: {
					"$ID": "0844e404-5674-445c-b4d4-55089b2750b0",
					"$Type": "DomainModels$DomainModel",
					"containerId": "a9009087-36cd-41a0-aa8f-cc1520fb9564",
					"containmentName": "domainModel",
					"contents": {
						"entities": [],
						"associations": [],
						"crossAssociations": []
					}
				},
				[CompanyExpensesStubClient.domainModelUnitId3]: {
					"$ID": "b55c4efc-0ba1-4e2f-a682-9cef7d26042b",
					"$Type": "DomainModels$DomainModel",
					"containerId": "82724765-dc37-4909-b410-7dc92c3ce74c",
					"containmentName": "domainModel",
					"contents": {
						"entities": [],
						"associations": [],
						"crossAssociations": []
					}
				}
			},
			version
		);
	}

}


const unitIdsToJson = {
	"01e537da-b654-4265-b3d1-c91cb630244e": "test-model/domain-model.json",
	"0cd96945-dba5-4f84-b082-627dc7520272": "test-model/move-elements-page.json",
	"2d7d4afc-01fc-4df3-82db-37f188b58fde": "test-model/navigation.json"
};

export class TestModelStubClient extends StubClient {

	constructor(config: configuration.ISdkConfig, version: string) {
		const unitsMap: { [id: string]: any } = {};
		for (let unitId in unitIdsToJson) {
			unitsMap[unitId] = readTestDataJson(unitIdsToJson[unitId]);
		}
		super(
			config,
			readTestDataJson("test-model/unit-interfaces.json"),
			unitsMap,
			version
		);
	}

}


export function withPage0(successCallback: common.ICallback<pages_simple.Page>, errorCallback: common.IErrorCallback): void {
	createSdkClient("6.0.4").openWorkingCopy("1", model => {
		(model.allPages()[0]).load(page => {
			return void successCallback(page);
		});
	}, errorCallback);
}

