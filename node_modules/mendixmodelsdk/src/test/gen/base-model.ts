import {IAbstractModel, AbstractModel} from "../../sdk/internal/abstract-model";

import {domainmodels_simple} from "./domainmodels_simple";
import {navigation_simple} from "./navigation_simple";
import {pages_simple} from "./pages_simple";
import {parsing_simple} from "./parsing_simple";
import {testmodel} from "./testmodel";

export interface IBaseModel extends IAbstractModel {
	allDomainModels(): domainmodels_simple.IDomainModel[];
	allNavigations(): navigation_simple.INavigation[];
	allPages(): pages_simple.IPage[];
	allProjects(): testmodel.IProject[];
	allUnitWithParserProperties(): parsing_simple.IUnitWithParserProperties[];

	findEntityByQualifiedName(qname: string): domainmodels_simple.IEntity;
	findPageByQualifiedName(qname: string): pages_simple.IPage;
}

/**
 * Class to find generated model units.
 */
export class BaseModel extends AbstractModel {

	public allDomainModels(): domainmodels_simple.IDomainModel[] {
		return super._allOfTypes<domainmodels_simple.IDomainModel>([
			"DomainModels_simple$DomainModel"
		]);
	}

	public allNavigations(): navigation_simple.INavigation[] {
		return super._allOfTypes<navigation_simple.INavigation>([
			"Navigation_simple$Navigation"
		]);
	}

	public allPages(): pages_simple.IPage[] {
		return super._allOfTypes<pages_simple.IPage>([
			"Pages_simple$Page"
		]);
	}

	public allProjects(): testmodel.IProject[] {
		return super._allOfTypes<testmodel.IProject>([
			"TestModel$Project"
		]);
	}

	public allUnitWithParserProperties(): parsing_simple.IUnitWithParserProperties[] {
		return super._allOfTypes<parsing_simple.IUnitWithParserProperties>([
			"Parsing_simple$UnitWithParserProperties"
		]);
	}

	findEntityByQualifiedName(qname: string): domainmodels_simple.IEntity {
		return this._resolveName("DomainModels_simple$Entity", qname) as domainmodels_simple.IEntity;
	}

	findPageByQualifiedName(qname: string): pages_simple.IPage {
		return this._resolveName("Pages_simple$Page", qname) as pages_simple.IPage;
	}

}

/**
 * This interface exposes a single Mendix Model.
 * This interface contains the parts of the {@link Model} that are exposed through the SDK.
 */
export interface IModel extends IBaseModel {

	/**
	 * The actual contents of the model.
	 */
	root: testmodel.IProject;

}
