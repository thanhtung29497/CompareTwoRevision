/* tslint:disable */

import * as internal from "../../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;


export namespace navigation_simple {


	/**
	 * Interfaces and instance classes for types from the Mendix sub meta model `Navigation_simple`.
	 */


	export interface INavigation extends internal.IModelUnit {
		model: IModel;
		containerAsProject: testmodel.IProject;
		load(): Navigation;
		load(callback: (element: Navigation) => void, forceRefresh?: boolean);
	}

	export class Navigation extends internal.ModelUnit implements INavigation {
		public static typeName: string = "Navigation_simple$Navigation";
		public static versionInfo: StructureVersionInfo = new StructureVersionInfo({
			"properties" : {
				"homePage" : {
					"required" : {
						"currentValue" : true
					}
				},
				"awayPage" : {
					"required" : {
						"currentValue" : true
					}
				}
			}
		}, internal.StructureType.ModelUnit);
		model: IModel;

		get containerAsProject() { return super.getContainerAs<testmodel.Project>(testmodel.Project); }

		private __homePage: internal.ByNameReferenceProperty<pages_simple.IPage> =
			new internal.ByNameReferenceProperty<pages_simple.IPage>(Navigation, this, "homePage", null, "Pages_simple$Page");
		public get homePage(): pages_simple.IPage { return this.__homePage.get(); }
		public set homePage(newValue: pages_simple.IPage) { this.__homePage.set(newValue); }
		get homePageQualifiedName(): string { return this.__homePage.qualifiedName(); }
		private __awayPage: internal.ByNameReferenceProperty<pages_simple.IPage> =
			new internal.ByNameReferenceProperty<pages_simple.IPage>(Navigation, this, "awayPage", null, "Pages_simple$Page");
		public get awayPage(): pages_simple.IPage { return this.__awayPage.get(); }
		public set awayPage(newValue: pages_simple.IPage) { this.__awayPage.set(newValue); }
		get awayPageQualifiedName(): string { return this.__awayPage.qualifiedName(); }

		constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: testmodel.IProject) {
			super(model, typeName, id, isPartial, container);
			this._containmentName = "navigation";
		}

		/**
		 * Creates a new Navigation unit in the SDK and on the server.
		 * Expects one argument, the testmodel.IProject in which this unit is contained.
		 */
		public static createIn(container: testmodel.IProject): Navigation {
			return internal.instancehelpers.createUnit(container, Navigation);
		}

		_initializeDefaultProperties() {
			super._initializeDefaultProperties();
		}

	}
}

import {pages_simple} from "./pages_simple";
import {testmodel} from "./testmodel";

import {IModel} from "./base-model";
