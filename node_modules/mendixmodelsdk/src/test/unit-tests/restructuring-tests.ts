

import {assert} from "chai";

import {pages_simple} from "../gen/pages_simple";
import {StubClient, withPage0} from "../helpers/stub-model-client";


describe("when restructuring a widget, it", () => {

	it("should work (using Pages_simple)", done => {
		withPage0(page => {
			function verify<T extends pages_simple.Widget>(widget: T, expectedDescription: string): T {
				assert.ok(widget);
				assert.equal(widget.description, expectedDescription);
				// console.warn(`widget(description="${widget.description}", id=${widget.id})`);
				return widget;
			}

			const snippet = verify(page.widgets[4] as pages_simple.SingleContainer, "[4] single-container ~ Snippet");
			const verticalFlow = verify(snippet.widget as pages_simple.MultiContainer, "~ VerticalFlow");
			const saveButton = verify(verticalFlow.widgets[0], "~ SaveButton");
			const groupBox = verify(verticalFlow.widgets[1], "~ GroupBox");

			// Deleting the one but last widget from a vertical flow eliminates the vertical flow and replaces it with the remaining widget.
			// In this example, we are deleting the group box leaving only the save button.
			//
			// Before
			// ======
			// Snippet
			// +- Vertical flow
			//    +- SaveButton
			//    +- Group Box
			//
			// After
			// =====
			// Snippet
			// +- SaveButton

			groupBox.delete();	// <-- action
			assert.equal(groupBox.container, null);

			snippet.widget = saveButton;	// <-- action
			assert.equal(verticalFlow.container, null, "after: verticalFlow.container === null");	// verticalFlow should be detached now
			assert.equal(saveButton.container, snippet);
			assert.equal(verticalFlow.widgets.length, 0);

			page.traverse(structure => {
				if (structure === verticalFlow || structure === groupBox) {
					assert.fail(null, null, "deleted elements still found in snippet");
				}
			});

			page.model.closeConnection(() => {
				// verify the deltas created during the process:
				const deltas = (page.model["_client"] as StubClient).deltas.slice();
				assert.deepEqual(deltas, [
					{
						"deltaType": "DELETE_ELEMENT",
						"elementId": groupBox.id,
						"unitId": page.id
					},
					{
						"deltaType": "MOVE_ELEMENT",
						"elementId": saveButton.id,
						"newParentId": snippet.id,
						"newParentPropertyName": "widget",
						"unitId": page.id
					},
					{
						"deltaType": "DELETE_ELEMENT",
						"elementId": verticalFlow.id,
						"unitId": page.id
					}
				]);
				done();
			}, done);
		}, done);
	});

});
