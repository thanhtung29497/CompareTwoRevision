import {assert} from "chai";

import * as version from "../../sdk/internal/version-checks";
const toV = version.Version.parse;


describe("version checks", () => {

	it("should compare versions correctly", () => {
		const v = new version.Version(1, 2, 3);
		assert.equal(v.isAfter(toV("0.2.9")), true);
		assert.equal(v.isAfter(toV("0.0.0")), true);
		assert.equal(v.isAfter(toV("1.1.4")), true);
		assert.equal(v.isAfter(toV("1.2.2")), true);
		assert.equal(v.isAfter(toV("1.2.3")), false);
		assert.equal(v.isAfter(toV("1.2.4")), false);
		assert.equal(v.isAfter(toV("1.4.0")), false);
		assert.equal(v.isAfter(toV("7.0.0")), false);
		assert.equal(v.isAfterOrEqual(toV("1.2.4")), false);
		assert.equal(v.isAfterOrEqual(toV("1.2.3")), true);
		assert.equal(v.isAfterOrEqual(toV("1.2.2")), true);
		assert.equal(v.isBefore(toV("1.2.3")), false);
		assert.equal(v.isBefore(toV("7.0.0")), true);
		assert.equal(v.isBefore(toV("1.2.3")), false);
		assert.equal(v.isBefore(toV("1.2.2")), false);
		assert.equal(v.isBefore(toV("0.8.9")), false);
		assert.equal(v.isBeforeOrEqual(toV("1.2.4")), true);
		assert.equal(v.isBeforeOrEqual(toV("1.2.3")), true);
		assert.equal(v.isBeforeOrEqual(toV("1.2.2")), false);
	});

	it("should handle feature lifecycles correctly", () => {
		const unversioned = new version.LifeCycle(null);
		assert.equal(unversioned.isAvailableIn(toV("1.2.3")), true);
		assert.equal(unversioned.isDeprecatedIn(toV("1.2.3")), false);
		assert.equal(unversioned.isRemovedIn(toV("1.2.3")), false);

		const unversionedButRemoved = new version.LifeCycle({ deleted: "2.0.0" });
		assert.equal(unversionedButRemoved.isAvailableIn(toV("1.2.3")), true);
		assert.equal(unversionedButRemoved.isDeprecatedIn(toV("1.2.3")), false);
		assert.equal(unversionedButRemoved.isRemovedIn(toV("1.2.3")), false);

		assert.equal(unversionedButRemoved.isAvailableIn(toV("2.0.0")), false);
		assert.equal(unversionedButRemoved.isDeprecatedIn(toV("2.0.0")), false);
		assert.equal(unversionedButRemoved.isRemovedIn(toV("2.0.0")), true);

		assert.equal(unversionedButRemoved.isAvailableIn(toV("3.0.0")), false);
		assert.equal(unversionedButRemoved.isDeprecatedIn(toV("3.0.0")), false);
		assert.equal(unversionedButRemoved.isRemovedIn(toV("3.0.0")), true);

		const unversionedButDeprecated = new version.LifeCycle({ deprecated: "2.0.0" });
		assert.equal(unversionedButDeprecated.isAvailableIn(toV("1.2.3")), true);
		assert.equal(unversionedButDeprecated.isDeprecatedIn(toV("1.2.3")), false);
		assert.equal(unversionedButDeprecated.isRemovedIn(toV("1.2.3")), false);

		assert.equal(unversionedButDeprecated.isAvailableIn(toV("2.0.0")), true);
		assert.equal(unversionedButDeprecated.isDeprecatedIn(toV("2.0.0")), true);
		assert.equal(unversionedButDeprecated.isRemovedIn(toV("2.0.0")), false);

		assert.equal(unversionedButDeprecated.isAvailableIn(toV("3.0.0")), true);
		assert.equal(unversionedButDeprecated.isDeprecatedIn(toV("3.0.0")), true);
		assert.equal(unversionedButDeprecated.isRemovedIn(toV("3.0.0")), false);

		const addedLater = new version.LifeCycle({ introduced: "2.0.0" });
		assert.equal(addedLater.isAvailableIn(toV("1.2.3")), false);
		assert.equal(addedLater.isDeprecatedIn(toV("1.2.3")), false);
		assert.equal(addedLater.isRemovedIn(toV("1.2.3")), false);

		assert.equal(addedLater.isAvailableIn(toV("2.0.0")), true);
		assert.equal(addedLater.isDeprecatedIn(toV("2.0.0")), false);
		assert.equal(addedLater.isRemovedIn(toV("2.0.0")), false);

		assert.equal(addedLater.isAvailableIn(toV("3.0.0")), true);
		assert.equal(addedLater.isDeprecatedIn(toV("3.0.0")), false);
		assert.equal(addedLater.isRemovedIn(toV("3.0.0")), false);

		const fullVersioned = new version.LifeCycle({ introduced: "1.0.0", deprecated: "2.0.0", deleted: "3.0.0" });
		assert.equal(fullVersioned.isAvailableIn(toV("0.0.5")), false);
		assert.equal(fullVersioned.isDeprecatedIn(toV("0.0.5")), false);
		assert.equal(fullVersioned.isRemovedIn(toV("0.0.5")), false);

		assert.equal(fullVersioned.isAvailableIn(toV("1.0.0")), true);
		assert.equal(fullVersioned.isDeprecatedIn(toV("1.0.0")), false);
		assert.equal(fullVersioned.isRemovedIn(toV("1.0.0")), false);

		assert.equal(fullVersioned.isAvailableIn(toV("1.5.0")), true);
		assert.equal(fullVersioned.isDeprecatedIn(toV("1.5.0")), false);
		assert.equal(fullVersioned.isRemovedIn(toV("1.5.0")), false);

		assert.equal(fullVersioned.isAvailableIn(toV("2.0.0")), true);
		assert.equal(fullVersioned.isDeprecatedIn(toV("2.0.0")), true);
		assert.equal(fullVersioned.isRemovedIn(toV("2.0.0")), false);

		assert.equal(fullVersioned.isAvailableIn(toV("2.5.0")), true);
		assert.equal(fullVersioned.isDeprecatedIn(toV("2.5.0")), true);
		assert.equal(fullVersioned.isRemovedIn(toV("2.5.0")), false);

		assert.equal(fullVersioned.isAvailableIn(toV("3.0.0")), false);
		assert.equal(fullVersioned.isDeprecatedIn(toV("3.0.0")), false);
		assert.equal(fullVersioned.isRemovedIn(toV("3.0.0")), true);

		assert.equal(fullVersioned.isAvailableIn(toV("3.5.0")), false);
		assert.equal(fullVersioned.isDeprecatedIn(toV("3.5.0")), false);
		assert.equal(fullVersioned.isRemovedIn(toV("3.5.0")), true);
	});

	it("should report lifecycle state correctly", () => {
		const fullVersioned = new version.LifeCycle({ introduced: "1.0.0", deprecated: "2.0.0", deleted: "3.0.0" });

		assert.equal(fullVersioned.getCurrentState(toV("0.0.5")), version.LifeCycleState.UNAVAILABLE);
		assert.equal(fullVersioned.getCurrentState(toV("1.0.0")), version.LifeCycleState.AVAILABLE);
		assert.equal(fullVersioned.getCurrentState(version.parseAsNormalizedVersion("1.0.0-rc1")), version.LifeCycleState.AVAILABLE);
		assert.equal(fullVersioned.getCurrentState(toV("1.4.5")), version.LifeCycleState.AVAILABLE);
		assert.equal(fullVersioned.getCurrentState(toV("2.0.0")), version.LifeCycleState.DEPRECATED);
		assert.equal(fullVersioned.getCurrentState(toV("2.4.0")), version.LifeCycleState.DEPRECATED);
		assert.equal(fullVersioned.getCurrentState(toV("3.0.0")), version.LifeCycleState.REMOVED);
		assert.equal(fullVersioned.getCurrentState(version.parseAsNormalizedVersion("3.0-beta")), version.LifeCycleState.REMOVED);
		assert.equal(fullVersioned.getCurrentState(toV("3.5.0")), version.LifeCycleState.REMOVED);

		assert.throw(() => fullVersioned.reportVersionIssues(toV("0.5.0"), "test", true), "is not yet available in Mendix version 0.5.0");
		assert.equal(fullVersioned.reportVersionIssues(toV("1.0.0"), "test", true), false);	// all ok
		assert.equal(fullVersioned.reportVersionIssues(toV("2.0.0"), "test", true), true);	// warning
		assert.throw(
			() => fullVersioned.reportVersionIssues(toV("3.0.0"), "test", true),
			"can no longer be instantiated in Mendix version 3.0.0"
		);
	});

	it("should handle modifiers lifecycles correctly", () => {
		// test annotations pre conditions
		assert.throws(
			() => new version.ModifierValueHistory({ currentValue: true, changedIn: ["1.0.0", "1.0.0"] }, false),
			"The list of version changes is not ordered correctly"
		);

		assert.throws(
			() => new version.ModifierValueHistory({ currentValue: true, changedIn: ["1.0.0", "2.0.0"] }, false),
			"The list of version changes is not ordered correctly"
		);

		// test fallbacks
		assert.equal(new version.ModifierValueHistory(null, false).isEnabledIn(toV("0.0.0")), false);
		assert.equal(new version.ModifierValueHistory(null, true).isEnabledIn(toV("0.0.0")), true);

		const unchangedModifier = new version.ModifierValueHistory({ currentValue: true }, false);
		assert.equal(unchangedModifier.isEnabledIn(toV("0.0.0")), true);

		const unchangedModifier2 = new version.ModifierValueHistory({ currentValue: false }, true);
		assert.equal(unchangedModifier2.isEnabledIn(toV("0.0.0")), false);

		const changingModifier = new version.ModifierValueHistory(
			{
				currentValue: false, changedIn: [
					"3.0.0",
					"2.0.0",
					"1.0.0"
				]
			},
			false
		);
		assert.equal(changingModifier.isEnabledIn(toV("3.5.0")), false);
		assert.equal(changingModifier.isEnabledIn(toV("3.0.0")), false);
		assert.equal(changingModifier.isEnabledIn(toV("2.5.0")), true);
		assert.equal(changingModifier.isEnabledIn(toV("2.0.0")), true);
		assert.equal(changingModifier.isEnabledIn(toV("1.5.0")), false);
		assert.equal(changingModifier.isEnabledIn(toV("1.0.0")), false);
		assert.equal(changingModifier.isEnabledIn(toV("0.5.0")), true);

		const changingModifier2 = new version.ModifierValueHistory(
			{
				currentValue: true, changedIn: [
					"3.0.0",
					"2.0.0",
					"1.0.0",
					"0.0.2"
				]
			},
			true
		);
		assert.equal(changingModifier2.isEnabledIn(toV("3.5.0")), true);
		assert.equal(changingModifier2.isEnabledIn(toV("3.0.0")), true);
		assert.equal(changingModifier2.isEnabledIn(toV("2.5.0")), false);
		assert.equal(changingModifier2.isEnabledIn(toV("2.0.0")), false);
		assert.equal(changingModifier2.isEnabledIn(toV("1.5.0")), true);
		assert.equal(changingModifier2.isEnabledIn(toV("1.0.0")), true);
		assert.equal(changingModifier2.isEnabledIn(toV("0.5.0")), false);
		assert.equal(changingModifier2.isEnabledIn(toV("0.0.2")), false);
		assert.equal(changingModifier2.isEnabledIn(toV("0.0.1")), true);
	});

	it("should determine normalized (sem-)version correctly", () => {
		assert.equal(version.parseAsNormalizedVersion("1.2.3").toString(), "1.2.3");
		assert.equal(version.parseAsNormalizedVersion("1.2").toString(), "1.2.0");
		assert.equal(version.parseAsNormalizedVersion("1").toString(), "1.0.0");
		assert.equal(version.parseAsNormalizedVersion("1.2.3.beta").toString(), "1.2.3");
		assert.equal(version.parseAsNormalizedVersion("1.2.3-beta56").toString(), "1.2.3");
		assert.equal(version.parseAsNormalizedVersion("1.2.beta").toString(), "1.2.0");
		assert.equal(version.parseAsNormalizedVersion("1.2-beta56").toString(), "1.2.0");
	});

	it("should test structure version info objects", () => {
		const x = new version.StructureVersionInfo(
			{
				properties: {
					prop1: {}
				}
			},
			version.StructureType.Element
		);

		assert.equal(x.isExperimental.isEnabledIn(toV("0.0.0")), false);
		assert.equal(x.isPublic.isEnabledIn(toV("0.0.0")), false);
		assert.equal(x.getPropertyVersionInfo("prop1").isPublic.isEnabledIn(toV("0.0.0")), false);
		assert.equal(x.getPropertyVersionInfo("prop1").isRequired.isEnabledIn(toV("0.0.0")), false);

		assert.equal(x.getPropertyVersionInfo("undeclaredProp").isPublic.isEnabledIn(toV("0.0.0")), false);
		assert.equal(x.getPropertyVersionInfo("undeclaredProp").isRequired.isEnabledIn(toV("0.0.0")), false);

		const x2 = new version.StructureVersionInfo(
			{
				properties: {
					prop1: {}
				}
			},
			version.StructureType.StructuralUnit
		);

		assert.equal(x2.isExperimental.isEnabledIn(toV("0.0.0")), false);
		assert.equal(x2.isPublic.isEnabledIn(toV("0.0.0")), true);
		assert.equal(x2.getPropertyVersionInfo("prop1").isPublic.isEnabledIn(toV("0.0.0")), true);
		assert.equal(x2.getPropertyVersionInfo("prop1").isRequired.isEnabledIn(toV("0.0.0")), false);
		assert.equal(x2.getPropertyVersionInfo("undeclaredProp").isPublic.isEnabledIn(toV("0.0.0")), true);
		assert.equal(x2.getPropertyVersionInfo("undeclaredProp").isRequired.isEnabledIn(toV("0.0.0")), false);

		const x4 = new version.StructureVersionInfo(
			{
				properties: {
					prop1: {}
				}
			},
			version.StructureType.ModelUnit
		);

		assert.equal(x4.isExperimental.isEnabledIn(toV("0.0.0")), false);
		assert.equal(x4.isPublic.isEnabledIn(toV("0.0.0")), true);
		assert.equal(x4.getPropertyVersionInfo("prop1").isPublic.isEnabledIn(toV("0.0.0")), false);

		const x3 = new version.StructureVersionInfo(
			{
				public: {
					currentValue: false,
					changedIn: ["2.0.0"]
				},
				experimental: {
					currentValue: true
				},
				deprecated: "2.0.0",
				properties: {
					prop1: {
						introduced: "1.0.0"
					}
				}
			},
			version.StructureType.Element
		);
		assert.equal(x3.isPublic.isEnabledIn(toV("1.0.0")), true);
		assert.equal(x3.isPublic.isEnabledIn(toV("2.0.0")), false);
		assert.equal(x3.isExperimental.isEnabledIn(toV("2.0.0")), true);
		assert.equal(x3.availability.isDeprecatedIn(toV("1.0.0")), false);
		assert.equal(x3.availability.isDeprecatedIn(toV("2.0.0")), true);
		assert.equal(x3.getPropertyVersionInfo("prop1").availability.isAvailableIn(toV("0.0.0")), false);
		assert.equal(x3.getPropertyVersionInfo("prop1").availability.isAvailableIn(toV("1.0.0")), true);
	});

});
