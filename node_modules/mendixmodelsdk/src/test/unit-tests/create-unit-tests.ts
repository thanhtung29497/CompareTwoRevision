import {assert} from "chai";

import {get, isEmpty} from "lodash";

import {domainmodels, projects, pages, texts, IModel, Model} from "../../index";
import {StubClient} from "../helpers/stub-model-client";
import {createSdkClient} from "../helpers/sdk-client-helper";
import {writeJson} from "../helpers/file-helper";


describe("creating unit", () => {

	it("should create a snippet and module", done => {
		const client = createSdkClient();
		client.openWorkingCopy("1", model => {
			const module = projects.Module.createIn(model.root);
			pages.Snippet.createIn(module);
			done();
		}, done);
	});

	it("should create a domain model, folder and page (without fetching parents first)", done => {
		const client = createSdkClient();
		client.openWorkingCopy("1", model => {
			performAssertion(model, model.root, done);
		}, done);
	});

	function performAssertion(model: IModel, project: projects.IProject, done) {
		assert.equal(model.allDomainModels().length, 3);
		const module = projects.Module.createIn(project);
		module.name = "bla";
		const domainModel = domainmodels.DomainModel.createIn(module);

		assert.equal(model.allDomainModels().length, 4);
		assert.equal(model.allDomainModels().indexOf(domainModel) !== -1, true);

		const folder = projects.Folder.createIn(module);
		folder.name = "some folder";

		const page = pages.Page.createIn(folder);
		page.name = "firstpage";

		// check default value of Page.title:
		assert.ok(page.title);
		assert.equal(page.title.typeName, texts.Text.typeName);
		assert.equal(page.title.translations.length, 1);
		const translation = page.title.translations[0];
		assert.equal(translation.languageCode, "en_US");
		assert.equal(translation.text, "Page Title");

		assert.deepEqual(model.allPages().indexOf(page) !== -1, true);
		assert.deepEqual(project.modules[3].folders[0].documents[0], page);

		model.closeConnection(() => {

			// verify the deltas created during the process:
			const deltas = ((model as Model)["_client"] as StubClient).deltas.slice();
			writeJson("create-unit-deltas-non-prefetch.json", deltas);
			const expectedDeltas = makeExpectedDeltas(module, project, domainModel, folder, page);

			const processedDeltas = [];
			for (let i in deltas) {
				if (isEmpty(get(expectedDeltas, `[${i}].elementId`)) && expectedDeltas[i].deltaType !== "CREATE_UNIT") {
					delete expectedDeltas[i]["elementId"];
					processedDeltas.push(deltas[i]);
					delete deltas[i]["elementId"];
				}

				assert.deepEqual(deltas[i], expectedDeltas[i], `Difference at delta index ${i}`);
			}

			assert.equal(processedDeltas.length, 3);
			assert.equal(processedDeltas[0].deltaType, "CREATE_ELEMENT");
			assert.equal(processedDeltas[1].deltaType, "UPDATE_PROPERTY_VALUE");
			assert.equal(processedDeltas[2].deltaType, "DELETE_ELEMENT");
			assert.equal(processedDeltas[0].elementId, processedDeltas[1].elementId);
			assert.equal(processedDeltas[0].elementId, processedDeltas[2].elementId);

			done();
		});
	}

	function makeExpectedDeltas(
		module: projects.IModule,
		project: projects.IProject,
		domainModel: domainmodels.IDomainModel,
		folder: projects.IFolder,
		page: pages.Page
	) {
		return [
			{
				"deltaType": "CREATE_UNIT",
				"unitId": module.id,
				"containerId": project.id,
				"containmentName": "modules",
				"contentType": projects.Module.typeName
			},
			{
				"unitId": module.id,
				"elementId": module.id,
				"deltaType": "UPDATE_PROPERTY_VALUE",
				"propertyName": "name",
				"mutator": {
					"value": "bla",
					"mutatorType": "CHANGE"
				}
			},
			{
				"deltaType": "CREATE_UNIT",
				"unitId": domainModel.id,
				"containerId": module.id,
				"containmentName": "domainModel",
				"contentType": domainmodels.DomainModel.typeName
			},
			{
				"deltaType": "CREATE_UNIT",
				"unitId": folder.id,
				"containerId": module.id,
				"containmentName": "folders",
				"contentType": projects.Folder.typeName
			},
			{
				"unitId": folder.id,
				"elementId": folder.id,
				"deltaType": "UPDATE_PROPERTY_VALUE",
				"propertyName": "name",
				"mutator": {
					"value": "some folder",
					"mutatorType": "CHANGE"
				}
			},
			{
				"deltaType": "CREATE_UNIT",
				"unitId": page.id,
				"containerId": folder.id,
				"containmentName": "documents",
				"contentType": pages.Page.typeName
			},
			{
				"unitId": page.id,
				"elementId": page.id,
				"deltaType": "UPDATE_PROPERTY_VALUE",
				"propertyName": "canvasHeight",
				"mutator": {
					"value": 600,
					"mutatorType": "CHANGE"
				}
			},
			{
				"unitId": page.id,
				"elementId": page.id,
				"deltaType": "UPDATE_PROPERTY_VALUE",
				"propertyName": "canvasWidth",
				"mutator": {
					"value": 800,
					"mutatorType": "CHANGE"
				}
			},
			{
				"parentId": page.id,
				"elementType": pages.LayoutCall.typeName,
				"parentPropertyName": "layoutCall",
				"deltaType": "CREATE_ELEMENT",
				"unitId": page.id,
				"elementId": page.layoutCall.id
			},
			{
				"unitId": page.id,
				"elementId": page.id,
				"deltaType": "UPDATE_PROPERTY_VALUE",
				"propertyName": "popupResizable",
				"mutator": {
					"mutatorType": "CHANGE",
					"value": true
				}
			},
			{
				"parentId": page.id,
				"elementType": texts.Text.typeName,
				"parentPropertyName": "title",
				"deltaType": "CREATE_ELEMENT",
				"unitId": page.id,
				"elementId": page.title.id
			},
			{
				"parentId": page.title.id,
				"elementType": texts.Translation.typeName,
				"parentPropertyName": "translations",
				"deltaType": "CREATE_ELEMENT",
				"unitId": page.id,
				"elementId": null
			},
			{
				"unitId": page.id,
				"deltaType": "UPDATE_PROPERTY_VALUE",
				"propertyName": "languageCode",
				"mutator": {
					"value": "en_US",
					"mutatorType": "CHANGE"
				},
				"elementId": null
			},
			{
				"deltaType": "DELETE_ELEMENT",
				"unitId": page.id,
				"elementId": null
			},
			{
				"parentId": page.title.id,
				"elementType": texts.Translation.typeName,
				"parentPropertyName": "translations",
				"deltaType": "CREATE_ELEMENT",
				"unitId": page.id,
				"elementId": page.title.translations[0].id
			},
			{
				"unitId": page.id,
				"elementId": page.title.translations[0].id,
				"deltaType": "UPDATE_PROPERTY_VALUE",
				"propertyName": "languageCode",
				"mutator": {
					"value": "en_US",
					"mutatorType": "CHANGE"
				}
			},
			{
				"unitId": page.id,
				"elementId": page.title.translations[0].id,
				"deltaType": "UPDATE_PROPERTY_VALUE",
				"propertyName": "text",
				"mutator": {
					"value": "Page Title",
					"mutatorType": "CHANGE"
				}
			},
			{
				"unitId": page.id,
				"elementId": page.id,
				"deltaType": "UPDATE_PROPERTY_VALUE",
				"propertyName": "name",
				"mutator": {
					"value": "firstpage",
					"mutatorType": "CHANGE"
				}
			}
		];

	}

});
