

import {assert} from "chai";

import {createSdkClient} from "../helpers/sdk-client-helper";


describe("assert not loaded", () => {

	it("should create a domain model, folder and page without fetching parents first", done => {
		const client = createSdkClient();
		client.openWorkingCopy("1", model => {
			const ERROR_MSG = "not fully loaded";

			// not allowed, load() on unloaded document
			assert.throws(() => model.allMicroflows()[0].load(), "Microflows$Microflow");
			assert.throws(() => model.allMicroflows()[0].load(), ERROR_MSG);

			// not allowed, access non public property on unloaded document
			assert.throws(() => model.allMicroflows()[0]["objectCollection"], "objectCollection");
			assert.throws(() => model.allMicroflows()[0]["objectCollection"], "Microflows$Microflow");
			assert.throws(() => model.allMicroflows()[0]["objectCollection"], ERROR_MSG);

			// allowed; change structural unit
			model.allFolders()[0].name = "testing";

			// not allowed, change model unit
			assert.throws(() => model.allMicroflows()[0].name = "testing", "'name'");
			assert.throws(() => model.allMicroflows()[0].name = "testing", "'Microflows$Microflow'");
			assert.throws(() => model.allMicroflows()[0].name = "testing", ERROR_MSG);

			// not allowed, change inside model unit
			const dm = model.allDomainModels()[1];
			assert.ok(dm.entities.length > 0);
			assert.throws(() => dm.entities[0].name = "testing", "'name'");
			assert.throws(() => dm.entities[0].name = "testing", "'DomainModels$Entity'");
			assert.throws(() => dm.entities[0].name = "testing", ERROR_MSG);

			done();
		}, done);
	});
});
