import {domainmodels_simple} from "../../gen/domainmodels_simple";

export function augmentWithSimpleEntities(domainModel: domainmodels_simple.DomainModel) {

	const simpleEntities = {};

	function mkSimpleSubEntity(name: string, generalization?: domainmodels_simple.SimpleEntity) {
		const newSimpleSubEntity = domainmodels_simple.SimpleSubEntity.createIn(domainModel);
		newSimpleSubEntity.name = name;
		if (generalization) {
			newSimpleSubEntity.generalization = generalization;
		}
		simpleEntities[name] = newSimpleSubEntity;
		return newSimpleSubEntity;
	}

	mkSimpleSubEntity("NonInheriting");

	const cInCycle = mkSimpleSubEntity("CInCycle");
	const aInCycle = mkSimpleSubEntity("AInCycle", mkSimpleSubEntity("BInCycle", cInCycle));
	mkSimpleSubEntity("AlphaBeforeCycle", mkSimpleSubEntity("OmegaBeforeCycle", aInCycle));
	cInCycle.generalization = aInCycle;
	// cycle: \alpha -> \omega -> A -> B -> C -> A

	mkSimpleSubEntity("ANotInCycle", mkSimpleSubEntity("BNotInCycle", mkSimpleSubEntity("CNotInCycle", mkSimpleSubEntity("DNotInCycle"))));
	// non-cycle: A -> B -> C -> D

	return simpleEntities;
}
