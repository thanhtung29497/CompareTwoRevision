

import {assert} from "chai";

import {StubClient} from "../helpers/stub-model-client";
import {createSdkClient} from "../helpers/test-model-helper";


describe("deleting units", () => {

	// Note: test meta model has no (by-name) references to units, so we can't check for references being cleared.

	it("should work for listy structural child properties", done => {
		createSdkClient("6.0.4").openWorkingCopy("1", model => {

			model.root.navigation.load((navDocument) => {
				assert.equal(model.root.pages.length, 1);
				const page0Id = model.root.pages[0].id;
				assert.ok(page0Id);
				model.root.pages.splice(0, 1);
				assert.equal(model.root.pages.length, 0);
				assert.isNull(navDocument.awayPage);

				model.closeConnection(() => {
					const deltas = (model["_client"] as StubClient).deltas.slice();
					assert.deepEqual(deltas, [
						{
							"deltaType": "DELETE_UNIT",
							"unitId": page0Id
						}
					]);
					assert.equal(model.root.pages.length, 0);
					done();
				}, done);
			}, true);
		}, done);
	});

	it("should work for a non-listy structural child property", done => {
		createSdkClient("6.0.4").openWorkingCopy("1", model => {
			const domainModelId = model.root.domainModel.id;
			assert.ok(domainModelId);
			model.root.domainModel = null;
			model.closeConnection(() => {
				const deltas = (model["_client"] as StubClient).deltas.slice();
				assert.deepEqual(deltas, [
					{
						"deltaType": "DELETE_UNIT",
						"unitId": domainModelId
					}
				]);
				assert.isNull(model.root.domainModel);
				done();
			}, done);
		}, done);
	});

});
