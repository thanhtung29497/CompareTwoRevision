

import {assert} from "chai";

import {configuration} from "../../index";
import {createSdkClient, createBackendSdkClient} from "../helpers/sdk-client-helper";
import {IEnvironmentStatus} from "../../sdk/internal/transport-interfaces";


const createWorkingCopyParams: configuration.ICreateWorkingCopyParameters = {
	name: "testName",
	description: "description",
	avatarUrl: "avatarUrl",
	template: "../model-api/test-data/NewApp.mpk"
};


describe("sdk must be able to", () => {

	it("open a working copy", done => {
		createSdkClient().openWorkingCopy("1", model => {
			done();
		}, done);
	});

	it("read a working copy and then download it", done => {
		createSdkClient().exportMpk("1", "temp_mpr.mpk", () => {
			done();
		}, done);
	});

	it("create a working copy as backend", done => {
		createBackendSdkClient().createWorkingCopy(createWorkingCopyParams, model => {
			done();
		}, done);
	});

	it("create a working copy", done => {
		createSdkClient().createWorkingCopy(createWorkingCopyParams, model => {
			done();
		}, done);
	});

	it("delete a just created working copy", done => {
		const client = createBackendSdkClient();
		client.createWorkingCopy(createWorkingCopyParams, model => {
			client.deleteWorkingCopy(model.id, () => {
				done();
			}, done);
		}, done);
	});

	it("throw an error when you try to delete a working copy without backend params", done => {
		try {
			createSdkClient().deleteWorkingCopy("1", () => {
				done("should not be able to delete a working copy without backend params");
			}, (error) => {
				done();
			});
		} catch (e) {
			done();
		}
	});

	// doesn't actually grant a user anything, just checks if the calls don't throw errors
	it("grant access to a user", done => {
		createBackendSdkClient().grantAccess("1", "qwe", () => {
			done();
		}, done);
	});

	// doesn't actually grant a user anything, just checks if the calls don't throw errors
	it("throw an error when you try to grant access to a working copy without backend params", done => {
		try {
			createSdkClient().grantAccess("1", "qwe", () => {
				done("should not be able to grant access to a working copy without backend params");
			}, (error) => {
				done();
			});
		} catch (e) {
			done();
		}
	});

	// doesn't actually remove a user from anywhere, just checks if the calls don't throw errors
	it("revoke access to a working copy for a user", done => {
		createBackendSdkClient().revokeAccess("1", "qwe", () => {
			done();
		}, done);
	});

	// doesn't actually remove a user from anywhere, just checks if the calls don't throw errors
	it("throw an error when you try to revoke access to a working copy without backend params", done => {
		try {
			createSdkClient().revokeAccess("1", "qwe", () => {
				done("should not be able to revoke access to a working copy without backend params");
			}, (error) => {
				done();
			});
		} catch (e) {
			done();
		}
	});

	// doesn't actually check anything, just checks if the calls don't throw errors
	it("check access to a working copy for a user", done => {
		createBackendSdkClient().checkAccess("1", "qwe", (hasAccess: boolean) => {
			done();
		}, done);
	});

	// doesn't actually check anything, just checks if the calls don't throw errors
	it("throw an error when you try to check access to a working copy without backend params", done => {
		try {
			createSdkClient().checkAccess("1", "qwe", (hasAccess: boolean) => {
				done("should not be able to check access to a working copy without backend params");
			}, (error) => {
				done();
			});
		} catch (e) {
			done();
		}
	});

	// doesn't actually check anything, just checks if the calls don't throw errors
	it("grant access to a project's default working copy for a user", done => {
		createBackendSdkClient().grantAccessByProject("1", "qwe", done, done);
	});


	// doesn't actually check anything, just checks if the calls don't throw errors
	it("revoke access to a project's default working copy for a user", done => {
		createBackendSdkClient().revokeAccessByProject("1", "qwe", done, done);
	});

	it("get editor data aka template working copy ids", done => {
		// XXX: find a better name for this endpoint (ogu)
		// maybe /metadata/:version
		createSdkClient().getEditorData(res => {
			assert.property(res, "6.4.0");
			done();
		}, done);
	});

	it("get a working copy to project mapping", done => {
		// Both the SDK and WM need to be able to get this mapping.
		createSdkClient().getWorkingCopyByProject("1", () => {
			done();
		}, done);
	});

	it("throw an error when updating a working copy as a user", done => {
		try {
			createSdkClient().updateWorkingCopyByProject("1", "1", () => { /* nop */ }, done);
		} catch (e) {
			done();
		}
	});

	it("update a working copy to project mapping as backend", done => {
		// Updating the mapping is only allowed for backend users
		createBackendSdkClient().updateWorkingCopyByProject("1", "1", () => {
			done();
		}, done);
	});

	it("throw an error when deleting a working copy as a user", done => {
		try {
			createSdkClient().deleteWorkingCopyByProject("1", () => { /* nop */ }, done);
		} catch (e) {
			done();
		}
	});

	it("delete a working copy to project mapping as backend", done => {
		// Deleting the mapping is only allowed for backend users
		createBackendSdkClient().deleteWorkingCopyByProject("1", () => {
			done();
		}, done);
	});

	it("lock a working copy as backend", done => {
		// Deleting the mapping is only allowed for backend users
		createBackendSdkClient().lockWorkingCopy("wc1", done, done);
	});

	it("unlock a working copy as backend", done => {
		// Deleting the mapping is only allowed for backend users
		createBackendSdkClient().unlockWorkingCopy("wc1", done, done);
	});

});
