

import {assert} from "chai";

import {ModelUnit, projects} from "../../index";
import {createSdkClient} from "../helpers/sdk-client-helper";


describe("model checks", () => {

	it("should be able to read all units", done => {
		createSdkClient().openWorkingCopy("1", (m) => {
			m.allUnits().forEach(unit => {
				assert.isTrue(
					unit instanceof ModelUnit || unit instanceof projects.Project || unit instanceof projects.FolderBase,
					`not a unit: ${unit.typeName}`
				);
			});
			assert.equal(m.allUnits().length, 139);
			done();
		}, done);
	});

	it("should not be possible to mix up models", done => {
		createSdkClient().openWorkingCopy("1", (m1) => {
			createSdkClient().openWorkingCopy("1", (m2) => {
				const getFirstPopulatedDomainModel = (m) => m.allDomainModels().filter(dm => dm.entities.length > 0 && dm.associations.length > 0)[0];
				const populatedDomainModel1 = getFirstPopulatedDomainModel(m1);
				const populatedDomainModel2 = getFirstPopulatedDomainModel(m2);
				assert.ok(populatedDomainModel1);
				assert.ok(populatedDomainModel2);

				populatedDomainModel1.load(dm1 => {
					populatedDomainModel2.load(dm2 => {
						assert.ok(dm1.entities[0]);
						assert.ok(dm1.associations[0]);

						/* test parts */
						assert.throw(() => {
							dm1.entities.push(dm2.entities[0]);
						}, "It is not possible to combine values coming from two different models");

						/* test references */
						assert.throw(() => {
							dm1.associations[0].child = dm2.entities[0];
						}, "It is not possible to combine values coming from two different models");

						done();
					});
				});
			}, done);
		}, done);
	});

});
