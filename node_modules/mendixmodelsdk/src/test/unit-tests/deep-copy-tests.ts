

import {assert} from "chai";

import {domainmodels, pages, projects} from "../../index";
import {createSdkClient} from "../helpers/sdk-client-helper";


describe("deep-copy", () => {

	it("deep copies elements", done => {
		const client = createSdkClient();
		client.openWorkingCopy("1", model => {
			const dm = model.allDomainModels()[1];
			assert.ok(dm.entities.length > 0);
			dm.load(dm => {
				const entity1 = dm.entities[0];
				const entity2 = entity1.deepCopyInto(dm, "entities") as domainmodels.Entity;

				assert.equal(entity1.name, entity2.name);
				assert.notEqual(entity1.id, entity2.id);
				assert.notEqual(entity1.dataStorageGuid, entity2.dataStorageGuid);

				assert.ok(entity1.attributes.length > 0);
				assert.equal(entity1.attributes.length, entity2.attributes.length);

				assert.equal(entity1.attributes[0].name, entity2.attributes[0].name);
				assert.notEqual(entity1.attributes[0].id, entity2.attributes[0].id);

				const assoc1 = dm.associations[0];
				const assoc2 = assoc1.deepCopyInto(dm, "associations") as domainmodels.Association;

				// tests out-scope references:
				assert.equal(assoc1.parent, assoc2.parent);
				assert.equal(assoc1.child, assoc2.child);

				done();
			});
		}, done);
	});

	it("in scope references should work", done => {
		const client = createSdkClient();
		client.openWorkingCopy("1", model => {
			const snippet = pages.Snippet.createIn(model.allModules()[0]);
			const dv = pages.DataView.createInSnippetUnderWidget(snippet);
			const db = dv.controlBar;
			assert.isObject(db, "DataView.controlBar");
			const closeButton = pages.DataViewCloseButton.createIn(db);
			db.closeButton = closeButton;

			const snippet2 = pages.Snippet.createIn(model.allModules()[0]);
			const dv2 = dv.deepCopyInto(snippet2, "widget") as pages.DataView;
			assert.notEqual(dv.controlBar.closeButton, dv2.controlBar.closeButton);
			assert.notEqual(dv.controlBar.closeButton.id, dv2.controlBar.closeButton.id);
			done();
		}, done);
	});

	it("copies by name references, clears out-of-scope by-id-references", done => {
		const client = createSdkClient();
		client.openWorkingCopy("1", model => {
			const mod1 = projects.Module.createIn(model.root);
			const mod2 = projects.Module.createIn(model.root);

			const dm1 = domainmodels.DomainModel.createIn(mod1);
			const ent1 = domainmodels.Entity.createIn(dm1);
			mod1.name = "A";
			ent1.name = "a";

			const dm2 = domainmodels.DomainModel.createIn(mod2);
			const ent2 = domainmodels.Entity.createIn(dm2);
			mod2.name = "B";
			ent2.name = "b";

			const ca1 = domainmodels.CrossAssociation.createIn(dm1);
			ca1.parent = ent1;
			ca1.child = ent2;

			const ca2 = ca1.deepCopyInto(dm2, "crossAssociations") as domainmodels.CrossAssociation;

			assert.equal(ca1.childQualifiedName, "B.b");
			assert.equal(ca2.childQualifiedName, "B.b");
			assert.equal(ca1.parent, ent1);
			assert.equal(ca2.parent, null);
			assert.equal(ca1.child, ent2);
			assert.equal(ca2.child, ent2);

			model.closeConnection(() => {
				// regression test for 812090
				const deltas = model["_client"].deltas;
				const qnDeltas = deltas.filter(change => change.propertyName === "child");
				assert.equal(qnDeltas.length, 2);
				assert.equal(qnDeltas.every(d => d.mutator.value === "B.b"), true);
				done();
			});
		}, done);
	});

	it("scoped references should work", done => {
		const client = createSdkClient();
		client.openWorkingCopy("1", model => {
			const snippet = pages.Snippet.createIn(model.allModules()[0]);
			const dv = pages.DataView.createInSnippetUnderWidget(snippet);
			const db = dv.controlBar;
			assert.isObject(db, "DataView.controlBar");
			const closeButton = pages.DataViewCloseButton.createIn(db);
			db.closeButton = closeButton;

			const snippet2 = pages.Snippet.createIn(model.allModules()[0]);
			const dv2 = dv.deepCopyInto(snippet2, "widget") as pages.DataView;
			assert.notEqual(dv.controlBar.closeButton, dv2.controlBar.closeButton);
			assert.notEqual(dv.controlBar.closeButton.id, dv2.controlBar.closeButton.id);
			done();
		}, done);
	});

	it("copying model units should work", done => {
		const client = createSdkClient();
		client.openWorkingCopy("1", model => {
			const snippet = pages.Snippet.createIn(model.allModules()[0]);
			const dv = pages.DataView.createInSnippetUnderWidget(snippet);
			const db = dv.controlBar;
			assert.isObject(db, "DataView.controlBar");
			const closeButton = pages.DataViewCloseButton.createIn(db);
			db.closeButton = closeButton;

			const snippet2 = snippet.deepCopyInto(model.allModules()[0]) as pages.Snippet;
			const dv2 = snippet2.widget as pages.DataView;
			assert.notEqual(snippet, snippet2);
			assert.notEqual(snippet.id, snippet2.id);
			assert.notEqual(dv.id, dv2.id);
			assert.notEqual(dv.controlBar.closeButton, dv2.controlBar.closeButton);
			assert.notEqual(dv.controlBar.closeButton.id, dv2.controlBar.closeButton.id);
			done();
		}, done);
	});

	it("copying structural units should fail", done => {
		const client = createSdkClient();
		client.openWorkingCopy("1", model => {
			assert.throws(
				() => {
					(model.allModules()[0] as any).deepCopyInto(model.root);
					// requires upcast since deepCopyInto is hidden by the types
				},
				"Structural units like folders and modules cannot be cloned."
			);

			done();
		}, done);
	});

	// regression-test for 697498
	it("should copy part-lists properly", done => {
		const client = createSdkClient();
		client.openWorkingCopy("1", model => {
				const snippet = pages.Snippet.createIn(model.allModules()[0]);
				const lg = pages.LayoutGrid.createInSnippetUnderWidget(snippet);
				const row = pages.LayoutGridRow.createIn(lg);
				const col = pages.LayoutGridColumn.createIn(row);
				pages.DynamicText.createInLayoutGridColumnUnderWidget(col);

				const snippet2 = snippet.deepCopyInto(model.allModules()[0]) as pages.Snippet;
				const lg2 = snippet2.widget as pages.LayoutGrid;
				assert.equal(lg2.rows.length, lg.rows.length, "rows of deep-copied layoutgrid not the same as original.");
				assert.equal(lg2.rows[0].columns.length, lg.rows[0].columns.length, "cols of deep-copied layoutgrid not the same as original.");

				done();
		}, done);
	});

});
