import {expressionsTypes as expressions} from "../../gen/expressions-types";
import {IVersioned} from "./versioning";
import {loadQueries, loadSuperTypes} from "./metadata-loaders";


export interface IQuery {
	queryVersions : IQueryBody[];
	parameters    : IQueryParameter[];
}

export interface IQueryParameter {
    name  : string;
    $type : string;
}

export interface IQueryVariable {
	name: string;
	value: expressions.MxExpression;
}

export interface IQueryBody extends IVersioned {
	value: expressions.MxExpression;
	variables?: IQueryVariable[];
}


export type IQueryResolver = (queryName: string, qualifiedStructureName: string) => IQuery;

export type IQueryMap = { [qualifiedTypeName: string]: { [queryName: string]: IQuery } };

export type ISuperTypeMap = { [qualifiedTypeName: string]: string };


export function makeQueryResolver(queryMap: IQueryMap = loadQueries(), superTypeMap: ISuperTypeMap = loadSuperTypes()): IQueryResolver {

	return (queryName: string, qualifiedStructureName: string) : IQuery => {
		let currentQSN = qualifiedStructureName;
		while (!(
			/* stop: */ currentQSN === undefined || (queryMap[currentQSN] && queryMap[currentQSN][queryName])
		)) {
			currentQSN = superTypeMap[currentQSN];
		}
		return (currentQSN && queryMap[currentQSN] && queryMap[currentQSN][queryName])
			? queryMap[currentQSN][queryName]
			: undefined;
	};

}

