import {ITyped} from "./base-types";
import {expressionsTypes as expressions} from "../../gen/expressions-types";
import {IStructure} from "../internal/structures";
import {IVersioned} from "./versioning";


export interface ICheck {

	/** Qualified type name (matching Structure.typeName) */
	structure: string;

	/** Qualified type names of all assignment-compatible and concrete types (among sub types of structure including self). */
	allCompatibleTypes: string[];

	name: string;

	versionCheckBodies: ICheckBodyForVersion[];

}

export interface ICheckBodyForVersion extends IVersioned {

	/** (NONE,) WARNING, ERROR, DEPRECATION */
	severity: string;

	checkCondition: ICheckCondition;

	message: ICheckMessage;

	/** A property of the indicated structure. */
	incorrectProperty?: string;

	variables?: ICheckVariable[];

	/**
	 * Spec. of when to run.
	 * A value of null means: always run and effectively corresponds to { group: null, level: 0 }.
	 */
	runSpec?: IRunSpecification;

}

export interface IRunSpecification {

	/** 1-based index describing the level. */
	level: number;

	/**
	 * 1-based index describing the group.
	 * (Could be a string apart from that MxCheckLevelGroup-s don't have a name in MxCheck yet.)
	 */
	group: number;

}

export interface ICheckCondition extends ITyped {

	rule: expressions.MxExpression;

	/** can be present iff $type == 'MxCheckConditionForList': */
	errorVar?: ICheckErrorVariable;

}

export interface ICheckMessage {
	text: string;
	arguments?: expressions.MxExpression[];
}

export interface ICheckErrorVariable {
	name: string;
}

export interface IStructureTypeDeclaration {
	structure: string;
}


export interface ICheckVariable {
	name: string;
	value: expressions.MxExpression;
}


export interface ICheckIssue {

	/** The structure to which this issue applies
	 * - may be different from the structure that triggered the check.
	 */
	structure: IStructure;

	message: string;

	severity: string;

	incorrectProperty: string;

	/** The name of the check's definition. */
	checkName: string;

}

