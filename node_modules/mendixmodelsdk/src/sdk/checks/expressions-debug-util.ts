import {isObservableArray} from "mobx";
import {omit, isArray} from "lodash";

import {Evaluatable} from "./expressions-evaluator";
import {expressionsTypes} from "../../gen/expressions-types";


/*
 * A couple of debug utils for expression evaluation:
 * 	not actually referenced, but has been used and was useful during debugging.
 *
 * It needs to be in the SDK code base (not in the test part) to be able to refer to it when necessary.
 * See comments in expressions-evaluator on how/where to use this.
 * Note: do not expose any of this through `checks-index.ts`!
 */

function verbose(source: any) {
	if (source === undefined) {
		return "undefined";
	}
	if (source === null) {
		return "null";
	}
	if (source.typeName) {
		const name = source.qualifiedName || source.name;
		return `<${source.typeName}>` + (name ? `'${name}'` : "");
	}
	if (isObservableArray(source) || isArray(source)) {
		return source.length > 0 ? `${isObservableArray(source) ? "@" : ""}[ ${source.slice().map(item => verbose(item)).join(", ")} ]` : "[]";
	}
	return JSON.stringify(source);
}


export function logBaseEval(evaluatable: Evaluatable, source: any, baseEval: any) {
	const evaluatableAst = JSON.stringify(omit(evaluatable, ["appliedFeature"]));
	console.log(`eval(\n    ${evaluatableAst}\n  )(source=${verbose(source)}) -> ${verbose(baseEval)}\n`);
}


export function logMethodCall(expr: expressionsTypes.MxMethodCall, source: any, argValues: any[], result: any) {
	console.log(`call('${expr.referredMethod}')(source=${verbose(source)}, args=${verbose(argValues)}) -> ${verbose(result)}`);
}

