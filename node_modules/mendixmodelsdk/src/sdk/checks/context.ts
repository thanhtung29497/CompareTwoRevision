import {IStructure} from "../internal/structures";
import {IterationState} from "./standard-library-iterators";

export class Context {

	static createWithThis(thisStructure: IStructure): Context {
		return new Context(null, thisStructure, {});
	}

	constructor(
		private parent: Context = null,
		private thisStructure: IStructure = null,
		private vars: { [name: string]: any } = {},
		private iterationStates: { [name: string]: IterationState<any> } = {}
	) {}

	getThis(): IStructure {
		if (this.thisStructure) {
			return this.thisStructure;
		}
		if (this.parent) {
			return this.parent.getThis();
		}
		console.warn("'this' not defined");	// (happens in principle only in tests...)
		return undefined;
	}

	withThis(newThis: IStructure): Context {
		const newContext = new Context(this);
		newContext.thisStructure = newThis;
		return newContext;
	}

	getValue(_varName: string): any {	// Note: "`${varName}`" screws up syntax highlighting in VS Code
		if (_varName in this.vars) {
			return this.vars[_varName];
		}
		if (this.parent) {
			return this.parent.getValue(_varName);
		}
		throw new Error(`Undefined variable: '${_varName}'`);
	}

	withValue<T, R>(varName: string, value: T): Context {
		const newContext = new Context(this);
		newContext.vars[varName] = value;
		return newContext;
	}

	getIterationState(_varName: string): IterationState<any> {	// Note: "`${varName}`" screws up syntax highlighting in VS Code
		if (_varName in this.vars) {
			return this.iterationStates[_varName];
		}
		if (this.parent) {
			return this.parent.getIterationState(_varName);
		}
		throw new Error(`Undefined iterator argument for variable: '${_varName}'`);
	}

	withIterationState<T>(varName: string, iterationState: IterationState<T>) {
		const newContext = new Context(this);
		newContext.vars[varName] = iterationState.value();
		newContext.iterationStates[varName] = iterationState;
		return newContext;
	}

}
