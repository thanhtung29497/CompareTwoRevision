import * as classes from "./gen/all-model-classes";
import {configuration} from "./sdk/config";
import * as lodash from "lodash";
import * as base from "./gen/base-model";
import {ModelSdkClientImpl} from "./model-sdk-client";

export type IModel = base.IModel;

/**
 * Implementation of {@link IModel}.
 */
export class Model extends base.BaseModel implements IModel {

	private allModelClasses: any;

	public static createSdkClient(connectionConfig: configuration.ISdkConfig) {
		return new ModelSdkClientImpl<IModel, Model>(connectionConfig, Model);
	}

	/**
	 * Returns the structural unit of type "Projects$Project" which is the project's root,
	 * cast to the appropriate type.
	 */
	public get root(): classes.projects.IProject {
		if (this._unitsByType["Projects$Project"].length !== 1) {
			throw new Error("Illegal State: project root data not available");
		}
		return this._unitsByType["Projects$Project"][0] as classes.projects.IProject;
	}

	_allModelClasses() {
		if (!this.allModelClasses) {
			this.allModelClasses = require("./gen/all-model-classes");
		}
		return this.allModelClasses;
	}

	findModuleByQualifiedName(qname: string): classes.projects.IModule {
		return lodash.find(this._unitsByType["Projects$Module"], (m: classes.projects.IModule) => m.name === qname) as classes.projects.IModule;
	}

}

export type ModelSdkClient = ModelSdkClientImpl<IModel, Model>;

