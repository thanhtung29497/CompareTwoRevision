import * as internal from "./sdk/internal";
import { configuration } from "./sdk/config";
import { common } from "./common";
import { IDeployJobStatus, IEnvironmentStatus } from "./sdk/internal/transport-interfaces";
import { IModelApiClient, IEditorData } from "./sdk/internal/model-api-client";
import { IWorkingCopy } from "./sdk/internal/transport-interfaces";
/**
 * Client class of the Mendix Model SDK.
 * By instantiating this class with appropriate configuration, you can create and read working copies.
 */
export declare class ModelSdkClientImpl<IT extends internal.IAbstractModel, CT extends internal.AbstractModel> {
    private connectionConfig;
    private modelConstructor;
    private client;
    constructor(connectionConfig: configuration.ISdkConfig, modelConstructor: {
        new (_client: IModelApiClient, _errorHandler: common.IErrorCallback, _connectionConfig: configuration.ISdkConfig): CT;
    });
    /**
     * Create a new working copy on the model server, and reads it for immediate editing.
     */
    createWorkingCopy(workingCopyParameters: configuration.ICreateWorkingCopyParameters, callback: common.ICallback<IT>, errorCallback: common.IErrorCallback): void;
    /**
     * Reads a working copy on the model server so it can be edited.
     */
    openWorkingCopy(workingCopyId: string, callback: common.ICallback<IT>, errorCallback: common.IErrorCallback): void;
    /**
     * Gets meta data of a working copy
     */
    loadWorkingCopyMetaData(workingCopyId: string, callback: common.ICallback<internal.IWorkingCopy>, errorCallback: common.IErrorCallback): void;
    /**
     * Deletes this working copy from the server, and the (SDK) client.
     */
    deleteWorkingCopy(workingCopyId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): void;
    /**
     * Grants access to the member specified to his/her OpenID on this working copy.
     */
    grantAccess(workingCopyId: string, memberOpenId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): void;
    /**
     * Revokes access of the member specified to his/her OpenID on this working copy.
     */
    revokeAccess(workingCopyId: string, memberOpenId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): void;
    /**
     * Grants access to the member specified to his/her OpenID to the default working copy of this project.
     */
    grantAccessByProject(projectId: string, memberOpenId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): void;
    /**
     * Revokes access of the member specified to his/her OpenID to the default working copy of this project.
     */
    revokeAccessByProject(projectId: string, memberOpenId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): void;
    /**
     * Returns whether the member specified to his/her OpenID has (been granted) access to this working copy.
     */
    checkAccess(workingCopyId: string, memberOpenId: string, callback: common.ICallback<boolean>, errorCallback: common.IErrorCallback): void;
    /**
     * Exports this working copy as MPK.
     */
    exportMpk(workingCopyId: string, outFilePath: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): void;
    /**
     * Start deploy this working copy and create new job.
     */
    startAppUpdate(workingCopyId: string, callback: common.ICallback<IDeployJobStatus>, errorCallback: common.IErrorCallback): void;
    /**
     * Start deploy this working copy and create new job.
     */
    getAppUpdateStatus(workingCopyId: string, jobId: string, callback: common.ICallback<IDeployJobStatus>, errorCallback: common.IErrorCallback): void;
    getAppEnvironmentStatus(workingCopyId: string, callback: common.ICallback<IEnvironmentStatus>, errorCallback: common.IErrorCallback): void;
    /**
     * Retrieves an array of all working copies you are a member of.
     */
    getMyWorkingCopies(callback: common.ICallback<IWorkingCopy[]>, errorCallback: common.IErrorCallback): void;
    /**
     * Retrieves an array of UUIDs for helper working copies for each supported Mendix version.
     *
     * These are pre-defined working copies that are accessible for read operations,
     * and contain units that might come in handy when creating pages from templates.
     */
    getEditorData(callback: common.ICallback<IEditorData>, errorCallback: common.IErrorCallback): void;
    /**
     * Retrieves the working copy id that the given project ID maps to.
     */
    getWorkingCopyByProject(projectId: string, callback: common.ICallback<string>, errorCallback: common.IErrorCallback): void;
    /**
     * Update the project-to-working copy mapping with the given data.
     */
    updateWorkingCopyByProject(projectId: string, workingCopyId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): void;
    /**
     * Deletes the project-to-working copy mapping for given project ID.
     */
    deleteWorkingCopyByProject(projectId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): void;
    /**
     * Lock the working copy (will be locked for the currently authenticated openid)
     */
    lockWorkingCopy(workingCopyId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): void;
    /**
     * Unlock the working copy (will be unlocked for the currently authenticated openid, will fail if it's locked by another openid)
     */
    unlockWorkingCopy(workingCopyId: string, callback: common.IVoidCallback, errorCallback: common.IErrorCallback): void;
}
