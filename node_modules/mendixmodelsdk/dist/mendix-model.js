"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lodash = require("lodash");
var base = require("./gen/base-model");
var model_sdk_client_1 = require("./model-sdk-client");
/**
 * Implementation of {@link IModel}.
 */
var Model = (function (_super) {
    __extends(Model, _super);
    function Model() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Model.createSdkClient = function (connectionConfig) {
        return new model_sdk_client_1.ModelSdkClientImpl(connectionConfig, Model);
    };
    Object.defineProperty(Model.prototype, "root", {
        /**
         * Returns the structural unit of type "Projects$Project" which is the project's root,
         * cast to the appropriate type.
         */
        get: function () {
            if (this._unitsByType["Projects$Project"].length !== 1) {
                throw new Error("Illegal State: project root data not available");
            }
            return this._unitsByType["Projects$Project"][0];
        },
        enumerable: true,
        configurable: true
    });
    Model.prototype._allModelClasses = function () {
        if (!this.allModelClasses) {
            this.allModelClasses = require("./gen/all-model-classes");
        }
        return this.allModelClasses;
    };
    Model.prototype.findModuleByQualifiedName = function (qname) {
        return lodash.find(this._unitsByType["Projects$Module"], function (m) { return m.name === qname; });
    };
    return Model;
}(base.BaseModel));
exports.Model = Model;
