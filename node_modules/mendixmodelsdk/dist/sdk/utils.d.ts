import * as internal from "./internal";
/**
 * The `utils` module contains various utility interfaces and functions.
 */
export declare namespace utils {
    /**
     * Generates a random UUID to set the ID of an element or unit to.
     * There is no intrinsic ID collision detection/avoidance mechanism but it's good enough in practice.
     */
    function randomUuid(): any;
    /**
     * Flattens an array of arrays of items of type `T`, returning a single array
     * that consists of the concatenation of the original arrays.
     * This is especially useful for arrays of arrays of observables since the `lodash`
     * doesn't handle these correctly.
     */
    function flatten<T>(array: T[][]): T[];
    /**
     * Combines the given `parts` and returns them as an URL, avoiding duplicate slashes.
     */
    function combineUrl(...parts: string[]): string;
    /**
     * Given a unit, generates JavaScript(/TypeScript) code that would re-create the same unit.
     * Useful as scaffolding for model generators.
     */
    function serializeToJs(unit: internal.IAbstractUnit): string;
    interface IMap<T> {
        [key: string]: T;
    }
    function removeFromArray<T>(list: T[], item: T): void;
    function getOrCreateMapEntry<T>(map: IMap<T>, key: string, initializer: () => T): T;
    /**
     * Prints a warning, but only if it has not been printed before
     */
    function warnOnce(message: string): void;
    /**
     * resets the state of remembered warnings; so that all warnings are reported again.
     */
    function resetAlreadyPrintedWarningsState(): void;
    function assertNotNull<T>(value: T, propertyName: string, listy?: boolean): void;
}
