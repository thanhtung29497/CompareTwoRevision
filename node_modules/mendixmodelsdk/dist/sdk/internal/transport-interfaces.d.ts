/**
 * Types defined in this file express JSON serialization and are shared with the Model API Server.
 * Some types (points, deltas) are used verbatim through the rest of the SDK.
 */
/**
 * The contents of the `MetaData` table (which always contains one row) in the MPR contained in the working copy's MPK.
 * This is useful to determine product version and to be able to re-export the MPR as part of an MPK
 * that can be read in by the Business Modeler.
 */
export interface IMprMetaData {
    /** docs:keep */ _ProductVersion: string;
    /** docs:keep */ _BuildVersion: string;
    /** docs:keep */ _SchemaHash: string;
}
/**
 * The meta data for a working copy (- not for the MPR).
 */
export interface IWorkingCopyMetaData {
    name: string;
    description: string;
    avatarUrl: string;
    projectId: string;
    metaModelVersion: string;
    teamServerBaseRevision?: number;
    teamServerBaseBranch?: string;
}
export interface IMergeState {
    id: string;
    requestedBy: string;
    timestamp: number;
}
/**
 * The representation of a working copy.
 */
export interface IWorkingCopy {
    id: string;
    /**
     * ProjectID as used in the Mendix platform. Used for deployment, team server etc.
     */
    projectId: string;
    metaData: IWorkingCopyMetaData;
    /**
     * OpenIDs of all users that are granted access.
     */
    members: string[];
    /**
     * The name of the MPR file within the working copy's MPK, relative to its root.
     * This will typically but not necessarily equal `project.mpr`.
     */
    mprFileName: string;
    mprMetaData: IMprMetaData;
    mergeData: IMergeState;
    uploadDateTime: number;
}
/**
 * The base interface of any "structure", i.e. either any unit or an element within a model unit.
 */
export interface IStructureJson {
    $Type: string;
    $ID: string;
}
/**
 * The base serialization structure of a unit, i.e. either a structural or a model unit.
 */
export interface IAbstractUnitJson extends IStructureJson {
    contents: IAbstractElementJson;
    containerId: string;
    containmentName: string;
}
/**
 * The base interface of an (model) element (within a model unit).
 * (It extends {@link IStructureJson} with a general map structure to hold arbitrary properties.)
 */
export interface IAbstractElementJson extends IStructureJson {
    [key: string]: any;
}
/**
 * The base interface for any delta.
 */
export interface IDelta {
    /**
     * The type of the delta, which can be one of deltas.deltas.DeltaTypes, as a string.
     * This type determines the rest of the JSON serialization:<br/>
     *  "CREATE_ELEMENT" &rarr; ICreateElementDelta,<br/>
     *  "UPDATE_PROPERTY_VALUE" &rarr; IUpdatePropertyValueDelta,<br/>
     *  "MOVE_ELEMENT" &rarr; IMoveElementDelta,<br/>
     *  "DELETE_ELEMENT" &rarr; IDeleteElementDelta,<br/>
     *  "CREATE_UNIT" &rarr; ICreateUnitDelta.
     */
    deltaType: string;
    /**
     * The ID of the unit (containing an element or property value) to which the delta is to be applied.
     */
    unitId: string;
}
/**
 * Base interface for deltas acting on/in elements.
 */
export interface IElementDelta extends IDelta {
    elementId: string;
}
/**
 * A delta to create an element.
 */
export interface ICreateElementDelta extends IElementDelta {
    /**
     * The ID of the parent element to create the new element in.
     */
    parentId: string;
    /**
     * The name of the property to create the new element on/in.
     * This must a property of PART kind with an element type compatible with `elementType`.
     */
    parentPropertyName: string;
    /**
     * The qualified name of the type of element to create.
     */
    elementType: string;
}
/**
 * Information returned from a successful creation of an element.
 */
export interface ICreateElementDeltaResult {
    /**
     * The index of a listy property to which the element was added,
     * or -1 if the property is not listy.
     */
    additionIndex: number;
}
/**
 * A delta to change the value of a property of an element,
 * in a way that's specific by the "_mutator_"" given.
 */
export interface IUpdatePropertyValueDelta extends IElementDelta {
    propertyName: string;
    mutator: IMutator;
}
/**
 * Base interface for mutators acting on a property's value.
 */
export interface IMutator {
    /**
     * The type of the mutator, which can be one of deltas.deltas.MutatorTypes, as a string.
     * This type determines the rest of the JSON serialization:<br/>
     *  "CHANGE" &rarr; IChangeMutator,<br/>
     *  "ADD" &rarr; IAddMutator,<br/>
     *  "REMOVE" &rarr; IRemoveMutator,<br/>
     *  "MOVE" &rarr; IMoveMutator.<br/>
     */
    mutatorType: string;
}
/**
 * Sets the value of the whole property (if non-listy),
 * or a specific item (if listy - which item is indicated by `updateIndex`) to the given `value`.
 */
export interface IChangeMutator extends IMutator {
    value: any;
    updateIndex?: number;
}
/**
 * Adds the given `value` to a listy property,
 * either at the end if `insertionIndex` is not set,
 * or at the indicated index, shifting any and all subsequent items "down".
 */
export interface IAddMutator extends IMutator {
    value: any;
    insertionIndex?: number;
}
/**
 * Removes the item of a listy property with the given `removalIndex`,
 * shifting any and all subsequent items "up".
 */
export interface IRemoveMutator extends IMutator {
    removalIndex: number;
}
/**
 * Moves the item of listy property at the given `fromIndex` to the given `toIndex`,
 * reshuffling all other items accordingly.
 */
export interface IMoveMutator extends IMutator {
    fromIndex: number;
    toIndex: number;
}
/**
 * Information returned from a successful update of a property value.
 */
export interface IUpdatePropertyValueDeltaResult {
}
/**
 * A delta to move an element from one parent element to another.
 */
export interface IMoveElementDelta extends IElementDelta {
    /**
     * The ID of the parent element to move the element indicated by `elementId` to.
     */
    newParentId: string;
    /**
     * The name of the property of the new parent element to put the element-to-move in/on.
     */
    newParentPropertyName: string;
    /**
     * If the indicated new property is listy, `newIndex` is the index where the element-to-move will end up.
     * If not set, the element-to-move will be added at the end.
     */
    newIndex?: number;
}
/**
 * Information returned from a successful move of an element.
 */
export interface IMoveElementDeltaResult {
    /**
     * The ID of the parent element the element-to-move was removed from.
     */
    oldParentId: string;
    /**
     * The name of the property of the parent element the element-to-move was removed from.
     */
    oldParentPropertyName: string;
    /**
     * If the old property is listy, this was the index of the element-to-move within that list,
     * or -1 otherwise.
     */
    oldIndex: number;
    /**
     * If the new property is listy, this is the index of the moved element within that list,
     * or -1 otherwise.
     */
    newIndex: number;
}
/**
 * A delta to delete an element, including all its contained properties and children.
 */
export interface IDeleteElementDelta extends IElementDelta {
}
/**
 * Information returned from a successful deletion of an element.
 */
export interface IDeleteElementDeltaResult {
    /** The ID of the parent element from which the element was removed. */
    parentId: string;
    /**
     * The name of the property that contained the element.
     */
    propertyName: string;
    /**
     * The zero-based index at which the element was found,
     * if it resided inside a listy property; otherwise: -1.
     */
    removalIndex: number;
}
/**
 * A delta to create a (structural or model) unit.
 */
export interface ICreateUnitDelta extends IDelta {
    /**
     * The ID of the containing unit.
     * (This relates to the project tree.)
     */
    containerId: string;
    /**
     * The name of the property of the containing unit which will contain the unit-to-create.
     * (This relates to the project tree.)
     */
    containmentName: string;
    /**
     * The qualified name of the type of unit to create.
     */
    contentType: string;
}
/**
 * Information returned from a successful creation of a unit.
 */
export interface ICreateUnitDeltaResult {
}
export interface IDeleteUnitDelta extends IDelta {
}
export interface IDeleteUnitDeltaResult {
}
export interface IGetFilesOptions {
    filter?: string;
    format?: "json" | "zip";
    path?: string;
}
export interface IProblem {
    name: string;
    severity: string;
    message: string;
    locations?: IProblemLocation[];
}
export interface IProblemLocation {
    elementId?: string;
    unitId?: string;
    element?: string;
    document?: string;
    module?: string;
}
export declare type IUpdateAppJobStatus = "updating" | "resuming" | "provisioning" | "started" | "consistencyerrors" | "failed";
export interface IDeployJobStatus {
    jobid: string;
    startTime: number;
    status: IUpdateAppJobStatus;
    buildstatus: string;
    consistencyErrors?: IProblem[];
    appUrl?: string;
    /**
     * Used to keep track of which steps this app update went trough,
     * mainly for debugging
     *
     * @memberOf IGetUpdateAppStatusResponse
     */
    trace: string[];
}
export declare type AppState = "APP_NOT_FOUND" | "STAGING" | "UPDATING" | "STARTING" | "FAILED_STAGING" | "FAILED" | "STARTED" | "MXBUILD_STARTED" | "STOPPED" | "UNKNOWN";
export interface IEnvironmentStatus {
    name: string;
    url: string;
    profile: string;
    state: AppState;
    endpoint: string;
    instances: number;
    memory: number;
    disk: number;
    buildstatus: string;
    environmentId: string;
    consistencyErrors?: IProblem[];
}
