"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var elements = require("./elements");
var structures = require("./structures");
/**
 * Base class for implementations of {@link IAbstractUnit}.
 */
var AbstractUnit = (function (_super) {
    __extends(AbstractUnit, _super);
    function AbstractUnit(model, typeName, id, isPartial, container) {
        var _this = _super.call(this, model, typeName, id, isPartial, container) || this;
        _this._afterLoadCallbacks = [];
        _this._isLoading = false;
        return _this;
    }
    Object.defineProperty(AbstractUnit.prototype, "isLoaded", {
        /**
         * Checks whether all attributes are available at this instant;
         * if false, a load is required to access these properties.
         */
        get: function () {
            return !this._isPartial;
        },
        enumerable: true,
        configurable: true
    });
    AbstractUnit.prototype._markNotLoaded = function () {
        this._isLoading = false;
        this._isPartial = true;
    };
    AbstractUnit.prototype._markLoaded = function () {
        var _this = this;
        this._isLoading = false;
        this._isPartial = false;
        this._afterLoadCallbacks.splice(0).forEach(function (cb) { return cb(_this); });
    };
    AbstractUnit.prototype._markLoading = function () {
        if (this._isLoading || this.isLoaded) {
            throw new Error("Illegal state: cannot re-load a unit that's already loaded");
        }
        this._isLoading = true;
    };
    AbstractUnit.prototype._registerAfterLoadCallback = function (callback) {
        this._afterLoadCallbacks.push(callback);
    };
    AbstractUnit.prototype._updateWithJsonImpl = function (json) {
        _super.prototype._updateWithJsonImpl.call(this, json.contents);
    };
    AbstractUnit.prototype._dispose = function () {
        this._model._uncache(this);
        _super.prototype._dispose.call(this);
    };
    /**
     * Sends the create delta for this unit and all pending deltas.
     */
    AbstractUnit.prototype._handleCreateSelf = function () {
        var _this = this;
        this.unit._model._sendDelta({
            deltaType: deltas.DeltaTypes.CREATE_UNIT,
            unitId: this.id,
            containerId: this.container.id,
            containmentName: this._containmentName,
            contentType: this.typeName
        });
        this._isNew = false;
        this._pendingDeltasAfterCreate.forEach(function (pending) {
            // FIXME: MWE: this is ugly, put lambdas in the queue or something. also see elements.ts
            if (pending instanceof Array) {
                pending[0]._sendCreateDelta(_this, pending[1]);
            }
            else {
                var delta = pending;
                delta.unitId = _this.unit.id;
                _this.unit._model._sendDelta(delta);
            }
        });
    };
    AbstractUnit.prototype.deepCopyInto = function (newParent) {
        return _super.prototype.deepCopyInto.call(this, newParent);
    };
    return AbstractUnit;
}(structures.Structure));
exports.AbstractUnit = AbstractUnit;
/**
 * Implementation of {@link IStructuralUnit}.
 */
var StructuralUnit = (function (_super) {
    __extends(StructuralUnit, _super);
    function StructuralUnit(model, typeName, id, _ignoredIsPartial, container) {
        // _ignoredPartial argument is here, because structural units are always loaded completely,
        // but it is nice to keep the constructors for all units uniform so that the factories are simpler.
        return _super.call(this, model, typeName, id, false, container) || this;
    }
    Object.defineProperty(StructuralUnit.prototype, "unit", {
        get: function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    StructuralUnit.prototype.deepCopyInto = function (newParent) {
        // MWE: note that this is techinically possible, but what should be the semantics?
        // also clone structural children? Then the need to be loaded first. See also
        // comments in StructuralChild properties.
        throw new Error("Structural units like folders and modules cannot be cloned.");
    };
    return StructuralUnit;
}(AbstractUnit));
exports.StructuralUnit = StructuralUnit;
/**
 * Implementation of {@link IModelUnit}.
 */
var ModelUnit = (function (_super) {
    __extends(ModelUnit, _super);
    function ModelUnit(model, typeName, id, isPartial, container) {
        var _this = _super.call(this, model, typeName, id, isPartial, container) || this;
        _this._elementsCache = {}; // all elements that are contained in this model unit - used to resolve references-by-id for example
        _this._isLoading = false;
        // Note: flagged as unused by tslint but needs to be in (see failing unit tests otherwise)!
        _this._afterLoadCallbacks = [];
        /* mimics multiple inheritance */
        _this._markNotLoaded = AbstractUnit.prototype._markNotLoaded;
        _this._markLoaded = AbstractUnit.prototype._markLoaded;
        _this._markLoading = AbstractUnit.prototype._markLoading;
        _this._registerAfterLoadCallback = AbstractUnit.prototype._registerAfterLoadCallback;
        _this._handleCreateSelf = AbstractUnit.prototype._handleCreateSelf;
        _this._elementsCache[_this.id] = _this;
        return _this;
    }
    ModelUnit.prototype._updateWithJsonImpl = function (json) {
        AbstractUnit.prototype._updateWithJsonImpl.call(this, json); // delegate
    };
    Object.defineProperty(ModelUnit.prototype, "unit", {
        get: function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModelUnit.prototype, "isLoaded", {
        get: function () {
            return !this._isPartial;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Given an element id, returns the element in the current model unit with that id, or null
     */
    ModelUnit.prototype.findElementById = function (id) {
        return this._elementsCache.hasOwnProperty(id) ? this._elementsCache[id] : null;
    };
    ModelUnit.prototype._dispose = function () {
        this._model._uncache(this);
        _super.prototype._dispose.call(this); // follow AbstractElement chain
    };
    ModelUnit.prototype.deepCopyInto = function (newParent) {
        if (!this.isLoaded) {
            throw new Error("Only loaded elements can be copied. Use .load() first");
        }
        return structures.Structure.prototype.deepCopyInto.call(this, newParent);
    };
    ModelUnit.prototype.delete = function () {
        this.unit._model._sendDelta({
            deltaType: deltas.DeltaTypes.DELETE_UNIT,
            unitId: this.id
        });
        this._dispose();
    };
    return ModelUnit;
}(elements.AbstractElement));
exports.ModelUnit = ModelUnit;
var deltas = require("./deltas");
