import { IArrayChange, IArraySplice, IObservableArray, IObservableValue } from "mobx";
import { AbstractProperty } from "./abstract-property";
import { IList } from "../instances";
import { IModelUnit, IStructuralUnit, StructuralUnit } from "../units";
/**
 * Note: structural child values are updated through AbstractModel._addUnitToStructuralParent.
 */
/**
 * Value of a property owned by a structural unit.
 */
export declare class StructuralChildProperty<T extends IStructuralUnit | IModelUnit> extends AbstractProperty<T, IObservableValue<T>> {
    constructor(declaredOn: any, parent: StructuralUnit, name: string, value: T, targetRefType?: string);
    initialize(value: T): IObservableValue<T>;
    get(): T;
    set(value: T): void;
    updateWithRawValue(value: any): void;
    onChange(changeData: any): void;
    dispose(): void;
    deepCopyInto(): void;
}
/**
 * Property instance that wraps a list of structural units.
 * Structural child values are updated through AbstractModel._addUnitToStructuralParent.
 */
export declare class StructuralChildListProperty<T extends IStructuralUnit | IModelUnit> extends AbstractProperty<T[], IObservableArray<T>> {
    constructor(declaredOn: any, parent: StructuralUnit, name: string, value: T[], targetRefType?: string);
    initialize(values: any): any;
    get(): IList<T>;
    set(value: T[]): void;
    updateWithRawValue(value: any): void;
    onChange(changeData: IArrayChange<T> | IArraySplice<T>): void;
    processChildRemoval(unit: T): void;
    processChildAddition(index: number): void;
    dispose(): void;
    deepCopyInto(clone: any): void;
}
