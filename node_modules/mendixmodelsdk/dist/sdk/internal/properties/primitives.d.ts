import { IArrayChange, IArraySplice, IObservableArray, IObservableValue } from "mobx";
import { AbstractProperty } from "./abstract-property";
import { IEnum } from "../instances";
import { Structure } from "../structures";
import { ILifeCycle } from "../version-checks";
/**
 * All primitive types.
 * Note: must match exactly with MxPrimitiveTypeEnum!
 */
export declare enum PrimitiveTypeEnum {
    Integer = 0,
    String = 1,
    Boolean = 2,
    Double = 3,
    DateTime = 4,
    Guid = 5,
    Point = 6,
    Size = 7,
    Color = 8,
    Blob = 9,
}
export declare class PrimitiveProperty<T> extends AbstractProperty<T, IObservableValue<T>> {
    private defaultValue;
    private primitiveType;
    initialize(defaultValue: T, primitiveType: PrimitiveTypeEnum): IObservableValue<T>;
    get(): T;
    set(newValue: T): void;
    updateWithRawValue(value: T): void;
    onChange(newValue: T, oldValue: T): void;
    markCurrentValueAsDefault(): void;

    deepCopyInto(clone: any): void;
}
/**
 * Primitive-typed property values list.
 */
export declare class PrimitiveListProperty<T> extends AbstractProperty<T[], IObservableArray<T>> {
    private primitiveType;
    initialize(initialItems: T[], primitiveType: PrimitiveTypeEnum): IObservableArray<T>;
    get(): IObservableArray<T>;
    set(newValue: T[]): void;
    updateWithRawValue(value: T[]): void;
    onChange(change: IArraySplice<T> | IArrayChange<T>): void;
    toRawChangeValue(value: T): any;

    deepCopyInto(clone: any): void;
}
/**
 * A property value that is an enum literal.
 */
export declare class EnumProperty<T extends IEnum> extends PrimitiveProperty<T> {
    private initialValue;
    protected enumType: new (key: string, lifeCycle: ILifeCycle) => IEnum;
    constructor(declaredOn: any, parent: Structure, name: string, initialValue: T, enumType: new (key: string, lifeCycle: ILifeCycle) => IEnum);
    updateWithRawValue(value: any): void;
    set(value: T): void;
    onChange(newValue: any, oldValue: any): void;

}
/**
 * A property value that is a list of enum literals.
 */
export declare class EnumListProperty<T extends IEnum> extends PrimitiveListProperty<T> {
    private initialValue;
    protected enumType: new (key: string, lifeCycle: ILifeCycle) => IEnum;
    constructor(declaredOn: any, parent: Structure, name: string, initialValue: T[], enumType: new (key: string, lifeCycle: ILifeCycle) => IEnum);
    updateWithRawValue(value: any): void;
    toRawChangeValue(value: T): any;

}
