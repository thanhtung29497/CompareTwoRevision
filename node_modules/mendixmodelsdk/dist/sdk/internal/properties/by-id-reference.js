"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var abstract_property_1 = require("./abstract-property");
var references_1 = require("../references");
/**
 * Property value that references a (model) element by id.
 */
var ByIdReferenceProperty = (function (_super) {
    __extends(ByIdReferenceProperty, _super);
    function ByIdReferenceProperty() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ByIdReferenceProperty.prototype.initialize = function (value) {
        return new references_1.ByIdReference(this.parent);
    };
    ByIdReferenceProperty.prototype.get = function () {
        this.assertReadable();
        return this.observableValue.get();
    };
    ByIdReferenceProperty.prototype.set = function (value) {
        this.assertWritable();
        if (!value && this.isRequired) {
            throw new Error("Cannot unset property that is a required by-id reference");
        }
        this.observableValue.set(value);
    };
    ByIdReferenceProperty.prototype.updateWithRawValue = function (value) {
        this.observableValue.updateWithRawValue(value);
    };
    ByIdReferenceProperty.prototype.resolveReferences = function () {
        this.observableValue.resolve();
    };
    ByIdReferenceProperty.prototype.onChange = function (newValue, oldValue) {
        this.assertWritable();
        this.observableValue.assertValueHasSameUnit();
        this.parent._sendChangeDelta(this.name, newValue ? newValue.id : null);
    };
    ByIdReferenceProperty.prototype.updateElementContainer = function () {
        // We didn't know our container before, now we know it, let's check the referred value:
        this.observableValue.assertValueHasSameUnit();
    };
    ByIdReferenceProperty.prototype.dispose = function () {
        this.observableValue.dispose();
        _super.prototype.dispose.call(this);
    };
    ByIdReferenceProperty.prototype._toJSON = function () {
        var value = this.get();
        return value ? value.id : null;
    };
    ByIdReferenceProperty.prototype.deepCopyInto = function (clone, idMap, unresolvedIdentifierFixers) {
        var _this = this;
        unresolvedIdentifierFixers.push(function (idMap) {
            var val = _this.get();
            if (!val) {
                // no target
                clone[_this.name] = val;
            }
            else {
                if (idMap.hasOwnProperty(val.id)) {
                    // The target was cloned
                    clone[_this.name] = idMap[val.id];
                }
                else {
                    // The target was outside the cloned range, restore ref if still in same unit.
                    if (clone.unit === val.unit) {
                        clone[_this.name] = val;
                    }
                }
            }
        });
    };
    return ByIdReferenceProperty;
}(abstract_property_1.AbstractProperty));
exports.ByIdReferenceProperty = ByIdReferenceProperty;
// TODO  ByIdReferenceListProperty
