import { IArrayChange, IArraySplice, IObservableArray, IObservableValue } from "mobx";
import { AbstractProperty } from "./abstract-property";
import { AbstractElement, Element } from "../elements";
import { ModelUnit } from "../units";
/**
 * A property value that is a (model) element.
 * Will detect when children are moved, added, deleted and sends the appropriate deltas.
 */
export declare class PartProperty<T extends Element> extends AbstractProperty<T, IObservableValue<T>> {
    parent: AbstractElement;
    private hasDefaultValue;
    initialize(value: T, hasDefaultValue: boolean): IObservableValue<T>;
    get(): T;
    set(newValue: T): void;
    updateWithRawValue(value: any): void;
    onChange(newValue: T, oldValue: T): void;
    resolveReferences(): void;
    updateElementContainer(unit: ModelUnit): void;
    dispose(): void;

    deepCopyInto(clone: any, idMap: any, unresolvedIdentifierFixers: any): void;
}
/**
 * A property value that is a list of (model) elements.
 * Will detect when children are moved, added, deleted and sends the appropriate deltas.
 */
export declare class PartListProperty<T extends Element> extends AbstractProperty<T[], IObservableArray<T>> {
    parent: AbstractElement;
    initialize(initialItems: T[]): IObservableArray<T>;
    get(): IObservableArray<T>;
    set(newValue: T[]): void;
    updateWithRawValue(value: any): void;
    onChange(changeData: IArrayChange<T> | IArraySplice<T>): void;
    processChildRemoval(element: T): void;
    processChildAddition(index: number): void;
    resolveReferences(): void;
    updateElementContainer(unit: ModelUnit): void;
    removeChild(child: T): boolean;
    dispose(): void;

    deepCopyInto(clone: any, idMap: any, unresolvedIdentifierFixers: any): void;
}
