"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var mobx_1 = require("mobx");
var abstract_property_1 = require("./abstract-property");
var deltas_1 = require("../deltas");
var utils_1 = require("../../utils");
/**
 * All primitive types.
 * Note: must match exactly with MxPrimitiveTypeEnum!
 */
var PrimitiveTypeEnum;
(function (PrimitiveTypeEnum) {
    PrimitiveTypeEnum[PrimitiveTypeEnum["Integer"] = 0] = "Integer";
    PrimitiveTypeEnum[PrimitiveTypeEnum["String"] = 1] = "String";
    PrimitiveTypeEnum[PrimitiveTypeEnum["Boolean"] = 2] = "Boolean";
    PrimitiveTypeEnum[PrimitiveTypeEnum["Double"] = 3] = "Double";
    PrimitiveTypeEnum[PrimitiveTypeEnum["DateTime"] = 4] = "DateTime";
    PrimitiveTypeEnum[PrimitiveTypeEnum["Guid"] = 5] = "Guid";
    PrimitiveTypeEnum[PrimitiveTypeEnum["Point"] = 6] = "Point";
    PrimitiveTypeEnum[PrimitiveTypeEnum["Size"] = 7] = "Size";
    PrimitiveTypeEnum[PrimitiveTypeEnum["Color"] = 8] = "Color";
    PrimitiveTypeEnum[PrimitiveTypeEnum["Blob"] = 9] = "Blob";
})(PrimitiveTypeEnum = exports.PrimitiveTypeEnum || (exports.PrimitiveTypeEnum = {}));
/*
 * Primitive-typed property value
 */
var PrimitiveProperty = (function (_super) {
    __extends(PrimitiveProperty, _super);
    function PrimitiveProperty() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PrimitiveProperty.prototype.initialize = function (defaultValue, primitiveType) {
        this.defaultValue = defaultValue;
        this.primitiveType = primitiveType;
        return mobx_1.observable(mobx_1.asReference(defaultValue));
    };
    PrimitiveProperty.prototype.get = function () {
        this.assertReadable();
        return this.observableValue.get();
    };
    PrimitiveProperty.prototype.set = function (newValue) {
        utils_1.utils.assertNotNull(newValue, this.name);
        this.assertWritable();
        this.observableValue.set(newValue);
    };
    PrimitiveProperty.prototype.updateWithRawValue = function (value) {
        utils_1.utils.assertNotNull(value, this.name);
        this.observableValue.set(value);
    };
    PrimitiveProperty.prototype.onChange = function (newValue, oldValue) {
        if (this.name === "name") {
            this.parent._processNameChange();
        }
        this.parent._sendChangeDelta(this.name, newValue);
    };
    PrimitiveProperty.prototype.markCurrentValueAsDefault = function () {
        this.defaultValue = this.get();
    };
    PrimitiveProperty.prototype._toJSON = function () {
        // skip values which are unlikely to have any human-readable meaning:
        if (this.primitiveType === PrimitiveTypeEnum.Guid || this.primitiveType === PrimitiveTypeEnum.Blob) {
            return void 0;
        }
        else {
            return this.get();
        }
    };
    PrimitiveProperty.prototype.deepCopyInto = function (clone) {
        if (this.primitiveType !== PrimitiveTypeEnum.Guid) {
            // Guids should never be cloned
            clone[this.name] = this.get();
        }
    };
    return PrimitiveProperty;
}(abstract_property_1.AbstractProperty));
exports.PrimitiveProperty = PrimitiveProperty;
/**
 * Primitive-typed property values list.
 */
var PrimitiveListProperty = (function (_super) {
    __extends(PrimitiveListProperty, _super);
    function PrimitiveListProperty() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /*
    * Currently, only possible default value for listy properties is [],
    * so we don't have to store initialItems to be able to distinguish from default value.
    */
    PrimitiveListProperty.prototype.initialize = function (initialItems, primitiveType) {
        this.primitiveType = primitiveType;
        return mobx_1.observable(mobx_1.asFlat(initialItems || []));
    };
    PrimitiveListProperty.prototype.get = function () {
        this.assertReadable();
        return this.observableValue;
    };
    PrimitiveListProperty.prototype.set = function (newValue) {
        this.assertWritable();
        this.observableValue.replace(newValue);
    };
    PrimitiveListProperty.prototype.updateWithRawValue = function (value) {
        this.observableValue.replace(value);
    };
    PrimitiveListProperty.prototype.onChange = function (change) {
        this.assertWritable();
        switch (change.type) {
            case "update": {
                var c = change;
                utils_1.utils.assertNotNull(c.object[c.index], this.name, true);
                this.parent._sendChangeDelta(this.name, this.toRawChangeValue(c.object[c.index]), deltas_1.MutatorTypes.CHANGE, c.index);
                return;
            }
            case "splice": {
                var c = change;
                for (var i = c.removed.length; i > 0; i--) {
                    this.parent._sendChangeDelta(this.name, null, deltas_1.MutatorTypes.REMOVE, c.index + i);
                }
                for (var i = 0; i < c.addedCount; i++) {
                    utils_1.utils.assertNotNull(c.object[c.index + i], this.name, true);
                    this.parent._sendChangeDelta(this.name, this.toRawChangeValue(c.object[c.index + i]), deltas_1.MutatorTypes.ADD, c.index + i);
                }
                return;
            }
        }
    };
    PrimitiveListProperty.prototype.toRawChangeValue = function (value) {
        return value; // primitives can be sent verbatim to the server
    };
    PrimitiveListProperty.prototype._toJSON = function () {
        return this.get();
    };
    PrimitiveListProperty.prototype.deepCopyInto = function (clone) {
        if (this.primitiveType !== PrimitiveTypeEnum.Guid) {
            // Guids should never be cloned
            clone[this.name] = this.get().slice();
        }
    };
    return PrimitiveListProperty;
}(abstract_property_1.AbstractProperty));
exports.PrimitiveListProperty = PrimitiveListProperty;
/**
 * A property value that is an enum literal.
 */
var EnumProperty = (function (_super) {
    __extends(EnumProperty, _super);
    function EnumProperty(declaredOn, parent, name, initialValue, enumType) {
        var _this = _super.call(this, declaredOn, parent, name, initialValue) || this;
        _this.initialValue = initialValue;
        _this.enumType = enumType;
        return _this;
    }
    EnumProperty.prototype.updateWithRawValue = function (value) {
        this.observableValue.set(this.enumType[value] || this.initialValue);
    };
    EnumProperty.prototype.set = function (value) {
        if (value) {
            value.checkEnumVersion(this.parent.model.metaModelVersion, true);
        }
        _super.prototype.set.call(this, value);
    };
    EnumProperty.prototype.onChange = function (newValue, oldValue) {
        _super.prototype.onChange.call(this, newValue.toString(), oldValue.toString());
    };
    EnumProperty.prototype._toJSON = function () {
        return this.get().name;
    };
    return EnumProperty;
}(PrimitiveProperty));
exports.EnumProperty = EnumProperty;
/**
 * A property value that is a list of enum literals.
 */
var EnumListProperty = (function (_super) {
    __extends(EnumListProperty, _super);
    function EnumListProperty(declaredOn, parent, name, initialValue, enumType) {
        var _this = _super.call(this, declaredOn, parent, name, initialValue) || this;
        _this.initialValue = initialValue;
        _this.enumType = enumType;
        return _this;
    }
    EnumListProperty.prototype.updateWithRawValue = function (value) {
        var _this = this;
        this.observableValue.replace(value
            ? value.map(function (e) { return _this.enumType[e] || _this.initialValue; })
            : []);
    };
    EnumListProperty.prototype.toRawChangeValue = function (value) {
        if (value) {
            value.checkEnumVersion(this.parent.model.metaModelVersion, true);
            return value.toString(); // send enum string representation to the server
        }
        return null;
    };
    EnumListProperty.prototype._toJSON = function () {
        return this.get().map(function (item) { return item.name; });
    };
    return EnumListProperty;
}(PrimitiveListProperty));
exports.EnumListProperty = EnumListProperty;
