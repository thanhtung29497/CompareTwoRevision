import { common } from "../../common";
import { configuration } from "../config";
/**
 * The `transportation` module is responsible for performing requests on the (/a) Model API Server.
 */
/**
 * Implementations of this interface are capable of placing a request with the Model API Server over HTTP.
 * Default implementation: {@link RestTransportation}.
 */
export interface ITransportation {
    /**
     * Fire off a HTTP request, with specified method, url, data, and success and failure callbacks.
     */
    request<T>(method: string, url: string, data: Object, success: common.ICallback<T>, failure: common.IErrorCallback, longTimeout?: boolean): any;
    requestMultipartBinaryFileUpload<T>(method: string, url: string, data: Object, fileParameterName: string, filename: string | Blob, success: common.ICallback<T>, failure: common.IErrorCallback): any;
    requestFileDownload<T>(method: string, url: string, success: common.ICallback<T>, failure: common.IErrorCallback): any;
}
/**
 * Default implementation of {@link ITransportation} that communicates with the Model API Server over
 * HTTP using Restler.
 */
export declare class RestTransportation implements ITransportation {
    private config;
    constructor(config: configuration.ISdkConfig);
    request<T>(method: string, url: string, data: Object, success: common.ICallback<T>, failure: common.IErrorCallback, longTimeout?: boolean): void;
    requestMultipartBinaryFileUpload<T>(method: string, url: string, data: Object, fileParameterName: string, filename: string | Blob, success: common.ICallback<T>, failure: common.IErrorCallback): void;
    requestFileDownload<T>(method: string, url: string, success: common.ICallback<T>, failure: common.IErrorCallback): void;
    private sanitizedMethod(method);
    private url(urlEndpoint);
    private generateStandardOptions();
    private handleRequest<T>(request, url, data, success, failure);
}
