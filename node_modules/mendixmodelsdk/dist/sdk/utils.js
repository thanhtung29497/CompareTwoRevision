"use strict";
var node_uuid = require("node-uuid");
var as_model_sdk_code_serializer_1 = require("./extras/as-model-sdk-code-serializer");
/**
 * The `utils` module contains various utility interfaces and functions.
 */
var utils;
(function (utils) {
    /**
     * Generates a random UUID to set the ID of an element or unit to.
     * There is no intrinsic ID collision detection/avoidance mechanism but it's good enough in practice.
     */
    function randomUuid() {
        return node_uuid.v4();
    }
    utils.randomUuid = randomUuid;
    /**
     * Flattens an array of arrays of items of type `T`, returning a single array
     * that consists of the concatenation of the original arrays.
     * This is especially useful for arrays of arrays of observables since the `lodash`
     * doesn't handle these correctly.
     */
    function flatten(array) {
        /*
        * Note: lodash does not handle observable arrays correctly in the flatten function.
        * We could use the raw values instead, but this one is more strongly-typed anyway.
        */
        var result = [];
        for (var i = 0, l = array.length; i < l; i++) {
            result.splice.apply(result, [result.length, 0].concat(array[i].slice()));
        }
        return result;
    }
    utils.flatten = flatten;
    /**
     * Combines the given `parts` and returns them as an URL, avoiding duplicate slashes.
     */
    function combineUrl() {
        var parts = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            parts[_i] = arguments[_i];
        }
        return parts.reduce(function (previousValue, currentValue) {
            // strip all trailing slashes from previousValue, strip all leading slashes from currentValue, and combine the two with a slash
            return previousValue.replace(/\/+$/, "") + "/" + currentValue.replace(/^\/+/, "");
        });
    }
    utils.combineUrl = combineUrl;
    /**
     * Given a unit, generates JavaScript(/TypeScript) code that would re-create the same unit.
     * Useful as scaffolding for model generators.
     */
    function serializeToJs(unit) {
        return as_model_sdk_code_serializer_1.JavaScriptSerializer.serializeToJs(unit);
    }
    utils.serializeToJs = serializeToJs;
    function removeFromArray(list, item) {
        var idx = list.indexOf(item);
        if (idx !== -1) {
            list.splice(idx, 1);
        }
    }
    utils.removeFromArray = removeFromArray;
    function getOrCreateMapEntry(map, key, initializer) {
        var result = map[key];
        return result !== undefined ? result : (map[key] = initializer());
    }
    utils.getOrCreateMapEntry = getOrCreateMapEntry;
    var alreadyPrintedWarnings = {};
    /**
     * Prints a warning, but only if it has not been printed before
     */
    function warnOnce(message) {
        if (alreadyPrintedWarnings[message]) {
            return;
        }
        alreadyPrintedWarnings[message] = true;
        console.warn(message);
    }
    utils.warnOnce = warnOnce;
    /**
     * resets the state of remembered warnings; so that all warnings are reported again.
     */
    function resetAlreadyPrintedWarningsState() {
        alreadyPrintedWarnings = {};
    }
    utils.resetAlreadyPrintedWarningsState = resetAlreadyPrintedWarningsState;
    function assertNotNull(value, propertyName, listy) {
        if (listy === void 0) { listy = false; }
        if (typeof value === "undefined" || value === null) {
            throw new Error(listy ? "Cannot push null to " + propertyName : "Cannot set " + propertyName + " to null");
        }
    }
    utils.assertNotNull = assertNotNull;
})(utils = exports.utils || (exports.utils = {}));
