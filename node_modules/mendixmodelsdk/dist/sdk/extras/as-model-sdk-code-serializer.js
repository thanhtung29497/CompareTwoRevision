"use strict";
var properties = require("../internal/properties");
var units = require("../internal/units");
var PropertyKind;
(function (PropertyKind) {
    PropertyKind[PropertyKind["primitive"] = 0] = "primitive";
    PropertyKind[PropertyKind["enumeration"] = 1] = "enumeration";
    PropertyKind[PropertyKind["byIdReference"] = 2] = "byIdReference";
    PropertyKind[PropertyKind["byNameReference"] = 3] = "byNameReference";
    PropertyKind[PropertyKind["part"] = 4] = "part";
})(PropertyKind || (PropertyKind = {}));
function toFirstLowerCase(str) {
    return str.charAt(0).toLowerCase() + str.slice(1);
}
/**
 * Class which allows to serialize a given model part as TypeScript code that constructs that model piece.
 * Limitations:
 *  - Can only do elements in one (model) unit.
 */
var JavaScriptSerializer = (function () {
    function JavaScriptSerializer(_unit) {
        this._unit = _unit;
        this._creations = [];
        this._creationsById = {};
        this._varNamesById = {};
        this._varNames = {};
    }
    JavaScriptSerializer.serializeToJs = function (unit) {
        if (!unit.isLoaded) {
            throw new Error("serializeToJs can be used on loaded units only!");
        }
        var serializer = new JavaScriptSerializer(unit);
        serializer.schedule(unit);
        return serializer.source();
    };
    JavaScriptSerializer.prototype.schedule = function (structure) {
        if (!structure || this._creationsById[structure.id]) {
            return;
        }
        this._creationsById[structure.id] = true;
        this._creations.push(this._asCreation(structure));
    };
    JavaScriptSerializer.prototype.source = function () {
        var _this = this;
        // 1. compute varNames:
        for (var _i = 0, _a = this._creations; _i < _a.length; _i++) {
            var creation = _a[_i];
            this._computeVarName(creation);
        }
        // 2. build source for everything but assignments of by-id references:
        var phase1 = this._creations.map(function (creation) { return _this._creationAsSource(creation); }).join("\n");
        // 3. add source for assignments of by-id references:
        var creationsWithByIdRefencesAssigments = this._creations.filter(function (creation) { return creation.settings.some(function (setting) { return setting.kind === PropertyKind.byIdReference; }); });
        var phase2 = creationsWithByIdRefencesAssigments.map(function (creation) { return "\n" +
            creation.settings
                .filter(function (setting) { return setting.kind === PropertyKind.byIdReference; })
                .map(function (setting) { return "\t" + _this._settingAsSource(_this._varNamesById[creation.id], setting) + "\n"; })
                .join(""); }).join("");
        var today = new Date();
        var header = "(function (unit, model) {\n\n\t/*\n\t * JavaScript code generated by mendixmodelsdk.sdk.extras.JavaScriptSerializer\n\t * from unit with id \"" + this._unit.id + "\" of type " + this._unit.typeName + "\n\t * in working copy \"" + this._unit._model.metadata.metaData.name + "\"\n\t * on " + today.getDate() + "-" + (today.getMonth() + 1) + "-" + today.getFullYear() + ".\n\t */\n\n";
        return header + phase1 + phase2 + "\n})";
    };
    JavaScriptSerializer.prototype._computeVarName = function (creation) {
        var preName, name, uniqueIndex = 0, addUnderscore = false;
        if (creation.name) {
            preName = this._sanitizeName(creation.name);
            name = preName;
            addUnderscore = !!preName.match(/\d$/);
        }
        else {
            preName = toFirstLowerCase(creation.unqualifiedTypeName);
            name = preName + "1";
            uniqueIndex = 1;
        }
        while (this._varNames[name]) {
            uniqueIndex++;
            name = preName + (addUnderscore ? "_" : "") + uniqueIndex;
        }
        this._varNamesById[creation.id] = name;
        this._varNames[name] = true;
    };
    JavaScriptSerializer.prototype._sanitizeName = function (name) {
        name = name.replace(/[!\"#$%&'\(\)\*\+,\.\/:;<=>\?\@\[\\\]\^`\{\|\}~]/g, "");
        name = name.replace(/^\d+/, "");
        name = name.charAt(0).toLowerCase() + name.substring(1); // == toFirstLowerCase
        return name;
    };
    JavaScriptSerializer.prototype._creationAsSource = function (creation) {
        var _this = this;
        var lines = [];
        var varName = this._varNamesById[creation.id];
        lines.push("var " + varName + " = " + creation.subMetaModel.toLowerCase() + "." + creation.unqualifiedTypeName + ".create" + (creation.unit ? "In(unit" : "(model") + ");");
        creation.settings.filter(function (setting) { return setting.kind !== PropertyKind.byIdReference; }).forEach(function (setting) { return lines.push.apply(lines, _this._settingAsSource(varName, setting)); });
        return lines.map(function (line) { return "\t" + line + "\n"; }).join("");
    };
    JavaScriptSerializer.prototype._settingAsSource = function (varName, setting) {
        var _this = this;
        var commentsPostfix = setting.couldBeDefaultValue ? "   // Note: for this property a default value is defined." : "";
        return setting.listy
            ? setting.value.map(function (singleValue) { return varName + "." + setting.propertyName + ".push(" + _this._singleValueAsTsExpr(varName, setting, singleValue) + ");" + commentsPostfix; })
            : [varName + "." + setting.propertyName + " = " + this._singleValueAsTsExpr(varName, setting, setting.value) + ";" + commentsPostfix];
    };
    JavaScriptSerializer.prototype._singleValueAsTsExpr = function (varName, setting, singleValue) {
        switch (setting.kind) {
            case PropertyKind.primitive: return JSON.stringify(singleValue);
            case PropertyKind.enumeration: return singleValue.qualifiedTsLiteralName();
            case PropertyKind.byIdReference: return this._varNamesById[singleValue];
            case PropertyKind.byNameReference: {
                var $index = setting.targetType.indexOf("$");
                return "model.find" + setting.targetType.substring($index + 1) + "ByQualifiedName(\"" + singleValue + "\")";
            }
            case PropertyKind.part: return !singleValue ? null : (this._varNamesById[singleValue.id]);
            default:
                throw new Error("unmapped property kind (" + setting.kind + ") for setting of " + setting.propertyName + " in " + varName);
        }
    };
    JavaScriptSerializer.prototype._asCreation = function (structure) {
        var _this = this;
        var typeParts = structure.typeName.split("$");
        var creation = {
            id: structure.id,
            subMetaModel: typeParts[0],
            unqualifiedTypeName: typeParts[1],
            settings: []
        };
        if (structure["name"]) {
            creation.name = structure["name"];
        }
        if (structure instanceof units.ModelUnit || structure instanceof units.StructuralUnit) {
            // i.e. structure instanceof units.AbstractUnit if the TS type hierarchy actually matched the one in MxCore
            creation.unit = true;
        }
        structure.allProperties().forEach(function (property) {
            if (!property.isAvailable) {
                return;
            }
            if (property instanceof properties.EnumProperty) {
                var value = property.get();
                if (value !== property["defaultValue"]) {
                    creation.settings.push({ propertyName: property["name"], kind: PropertyKind.enumeration, value: value });
                }
                return;
            }
            if (property instanceof properties.EnumListProperty) {
                var value = property.get();
                if (value.length > 0) {
                    creation.settings.push({ propertyName: property["name"], kind: PropertyKind.enumeration, value: value, listy: true });
                }
                return;
            }
            // Primitive(List)Property must be handled _after_ Enum(List)Property since the latter inherit from the first!
            if (property instanceof properties.PrimitiveProperty) {
                if (property["primitiveType"] === properties.PrimitiveTypeEnum.Guid) {
                    return;
                }
                var value = property.get();
                if (value !== property["defaultValue"]) {
                    creation.settings.push({ propertyName: property["name"], kind: PropertyKind.primitive, value: value });
                }
                return;
            }
            if (property instanceof properties.PrimitiveListProperty) {
                var value = property.get();
                if (value.length > 0) {
                    creation.settings.push({ propertyName: property["name"], kind: PropertyKind.primitive, value: value, listy: true });
                }
                return;
            }
            if (property instanceof properties.PartProperty) {
                var value = property.get();
                if (value) {
                    _this.schedule(value);
                }
                if (property["hasDefaultValue"] || value) {
                    creation.settings.push({
                        propertyName: property["name"],
                        kind: PropertyKind.part,
                        value: value,
                        couldBeDefaultValue: property["hasDefaultValue"]
                    });
                }
                return;
            }
            if (property instanceof properties.PartListProperty) {
                var value = property.get();
                if (value.length > 0) {
                    value.forEach(function (item) { return _this.schedule(item); });
                    creation.settings.push({ propertyName: property["name"], kind: PropertyKind.part, value: value, listy: true });
                }
                return;
            }
            if (property instanceof properties.ByNameReferenceProperty) {
                var value = property.get();
                if (value) {
                    creation.settings.push({
                        propertyName: property["name"],
                        kind: PropertyKind.byNameReference,
                        value: property.qualifiedName(),
                        targetType: property.targetType
                    });
                }
                return;
            }
            if (property instanceof properties.ByNameReferenceListProperty) {
                var value = property.get();
                if (value.length > 0) {
                    creation.settings.push({
                        propertyName: property["name"],
                        kind: PropertyKind.byNameReference,
                        value: property.qualifiedNames(),
                        targetType: property.targetType,
                        listy: true
                    });
                }
                return;
            }
            if (property instanceof properties.ByIdReferenceProperty) {
                var value = property.get();
                if (value) {
                    _this.schedule(value);
                    creation.settings.push({ propertyName: property["name"], kind: PropertyKind.byIdReference, value: value.id });
                }
                return;
            }
            throw new Error("cannot serialize property: " + property);
        });
        return creation;
    };
    return JavaScriptSerializer;
}());
exports.JavaScriptSerializer = JavaScriptSerializer;
