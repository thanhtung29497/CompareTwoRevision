"use strict";
var version_checks_1 = require("../internal/version-checks");
function lookupByVersion(versionedThings, mmVersion) {
    if (!versionedThings || versionedThings.length === 0) {
        throw new Error("No versioned things provided.");
    }
    var matchingVersionThing = null;
    for (var _i = 0, versionedThings_1 = versionedThings; _i < versionedThings_1.length; _i++) {
        var versionOfThing = versionedThings_1[_i];
        if (!versionOfThing.range
            || ((!versionOfThing.range.from || mmVersion.isAfterOrEqual(version_checks_1.Version.parse(versionOfThing.range.from))) // [ -infty | vFrom, ...)
                &&
                    (!versionOfThing.range.to || mmVersion.isBefore(version_checks_1.Version.parse(versionOfThing.range.to))) // [..., infty | vTo ]
            )) {
            if (matchingVersionThing) {
                throw Error("More than one valid match on " + mmVersion + "; ranges: " + versionedThings.map(rangeToString).join(", ") + ".");
            }
            else {
                matchingVersionThing = versionOfThing;
            }
        }
    }
    if (matchingVersionThing) {
        return matchingVersionThing;
    }
    throw new Error("No versioned thing which matches meta model version " + mmVersion + " provided; ");
}
exports.lookupByVersion = lookupByVersion;
function rangeToString(versionedThing) {
    var leftBoundary = (versionedThing.range && versionedThing.range.from) ? versionedThing.range.from : "-∞";
    var rightBoundary = (versionedThing.range && versionedThing.range.to) ? versionedThing.range.to : "∞";
    return "[" + leftBoundary + ", " + rightBoundary + ")";
}
