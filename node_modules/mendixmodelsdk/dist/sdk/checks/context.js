"use strict";
var Context = (function () {
    function Context(parent, thisStructure, vars, iterationStates) {
        if (parent === void 0) { parent = null; }
        if (thisStructure === void 0) { thisStructure = null; }
        if (vars === void 0) { vars = {}; }
        if (iterationStates === void 0) { iterationStates = {}; }
        this.parent = parent;
        this.thisStructure = thisStructure;
        this.vars = vars;
        this.iterationStates = iterationStates;
    }
    Context.createWithThis = function (thisStructure) {
        return new Context(null, thisStructure, {});
    };
    Context.prototype.getThis = function () {
        if (this.thisStructure) {
            return this.thisStructure;
        }
        if (this.parent) {
            return this.parent.getThis();
        }
        console.warn("'this' not defined"); // (happens in principle only in tests...)
        return undefined;
    };
    Context.prototype.withThis = function (newThis) {
        var newContext = new Context(this);
        newContext.thisStructure = newThis;
        return newContext;
    };
    Context.prototype.getValue = function (_varName) {
        if (_varName in this.vars) {
            return this.vars[_varName];
        }
        if (this.parent) {
            return this.parent.getValue(_varName);
        }
        throw new Error("Undefined variable: '" + _varName + "'");
    };
    Context.prototype.withValue = function (varName, value) {
        var newContext = new Context(this);
        newContext.vars[varName] = value;
        return newContext;
    };
    Context.prototype.getIterationState = function (_varName) {
        if (_varName in this.vars) {
            return this.iterationStates[_varName];
        }
        if (this.parent) {
            return this.parent.getIterationState(_varName);
        }
        throw new Error("Undefined iterator argument for variable: '" + _varName + "'");
    };
    Context.prototype.withIterationState = function (varName, iterationState) {
        var newContext = new Context(this);
        newContext.vars[varName] = iterationState.value();
        newContext.iterationStates[varName] = iterationState;
        return newContext;
    };
    return Context;
}());
exports.Context = Context;
