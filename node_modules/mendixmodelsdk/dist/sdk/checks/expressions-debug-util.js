"use strict";
var mobx_1 = require("mobx");
var lodash_1 = require("lodash");
/*
 * A couple of debug utils for expression evaluation:
 * 	not actually referenced, but has been used and was useful during debugging.
 *
 * It needs to be in the SDK code base (not in the test part) to be able to refer to it when necessary.
 * See comments in expressions-evaluator on how/where to use this.
 * Note: do not expose any of this through `checks-index.ts`!
 */
function verbose(source) {
    if (source === undefined) {
        return "undefined";
    }
    if (source === null) {
        return "null";
    }
    if (source.typeName) {
        var name_1 = source.qualifiedName || source.name;
        return "<" + source.typeName + ">" + (name_1 ? "'" + name_1 + "'" : "");
    }
    if (mobx_1.isObservableArray(source) || lodash_1.isArray(source)) {
        return source.length > 0 ? (mobx_1.isObservableArray(source) ? "@" : "") + "[ " + source.slice().map(function (item) { return verbose(item); }).join(", ") + " ]" : "[]";
    }
    return JSON.stringify(source);
}
function logBaseEval(evaluatable, source, baseEval) {
    var evaluatableAst = JSON.stringify(lodash_1.omit(evaluatable, ["appliedFeature"]));
    console.log("eval(\n    " + evaluatableAst + "\n  )(source=" + verbose(source) + ") -> " + verbose(baseEval) + "\n");
}
exports.logBaseEval = logBaseEval;
function logMethodCall(expr, source, argValues, result) {
    console.log("call('" + expr.referredMethod + "')(source=" + verbose(source) + ", args=" + verbose(argValues) + ") -> " + verbose(result));
}
exports.logMethodCall = logMethodCall;
