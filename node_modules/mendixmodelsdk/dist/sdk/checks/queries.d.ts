import { expressionsTypes as expressions } from "../../gen/expressions-types";
import { IVersioned } from "./versioning";
export interface IQuery {
    queryVersions: IQueryBody[];
    parameters: IQueryParameter[];
}
export interface IQueryParameter {
    name: string;
    $type: string;
}
export interface IQueryVariable {
    name: string;
    value: expressions.MxExpression;
}
export interface IQueryBody extends IVersioned {
    value: expressions.MxExpression;
    variables?: IQueryVariable[];
}
export declare type IQueryResolver = (queryName: string, qualifiedStructureName: string) => IQuery;
export declare type IQueryMap = {
    [qualifiedTypeName: string]: {
        [queryName: string]: IQuery;
    };
};
export declare type ISuperTypeMap = {
    [qualifiedTypeName: string]: string;
};
export declare function makeQueryResolver(queryMap?: IQueryMap, superTypeMap?: ISuperTypeMap): IQueryResolver;
