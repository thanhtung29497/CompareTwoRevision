export declare const standardIterators: {
    [name: string]: (operand: any[] | void, boundExpr: IteratorLambda<any, any>) => any;
};
/**
 * Algebraic data type (!) of (ostensibly: iterator-)functions/lambdas
 * taking a value and its previous value of a list,
 * with previousValue === null for the head list item.
 */
export declare type IteratorLambda<T, R> = (value: T, index: number, array: Array<T>) => R;
/**
 * A class to capture the state of an iteration which consists of the array of which is iterated,
 * the current index and the current value - which equals array[index] if index is valid and undefined otherwise.
 * It helps in implementing the previous operator (and even more generic offset operators)
 * by updating the iteration state in the current context to it.previous().
 * This is a cleaner way than to keep track of the previous value and passing that to expressions
 * bound in the iterator.
 */
export declare class IterationState<T> {
    index: number;
    array: Array<T>;
    constructor(index: number, array: Array<T>);
    value(): T;
    previous(): IterationState<T>;
}
