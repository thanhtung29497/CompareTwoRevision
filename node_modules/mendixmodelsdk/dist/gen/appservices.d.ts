import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;
import { projects } from "./projects";
export declare namespace appservices {
    class AppServiceLocationEnum extends internal.IEnum {
        static Default: AppServiceLocationEnum;
        static Constant: AppServiceLocationEnum;
        static Parameter: AppServiceLocationEnum;
        protected qualifiedTsTypeName: string;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `AppServices`.
     */
    interface IAppServiceAction extends internal.IElement {
        model: IModel;
        containerAsConsumedAppService: IConsumedAppService;
        name: string;
        parameters: internal.IList<IAppServiceActionParameter>;
        load(): AppServiceAction;
        load(callback: (element: AppServiceAction) => void, forceRefresh?: boolean): any;
    }
    class AppServiceAction extends internal.Element implements IAppServiceAction {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsConsumedAppService: ConsumedAppService;

        name: string;

        caption: string;

        description: string;

        parameters: internal.IList<AppServiceActionParameter>;

        microflow: microflows.IMicroflow;
        readonly microflowQualifiedName: string;

        /**
         * The value of this property is conceptually of type dataTypes.DataType.
         */
        returnType: string;

        returnTypeCanBeEmpty: boolean;

        image: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new AppServiceAction instance in the SDK and on the server.
         * The new AppServiceAction will be automatically stored in the 'actions' property
         * of the parent ConsumedAppService element passed as argument.
         */
        static createIn(container: ConsumedAppService): AppServiceAction;
        /**
         * Creates and returns a new AppServiceAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): AppServiceAction;


    }
    interface IAppServiceActionParameter extends internal.IElement {
        model: IModel;
        containerAsAppServiceAction: IAppServiceAction;
        name: string;
        load(): AppServiceActionParameter;
        load(callback: (element: AppServiceActionParameter) => void, forceRefresh?: boolean): any;
    }
    class AppServiceActionParameter extends internal.Element implements IAppServiceActionParameter {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsAppServiceAction: AppServiceAction;

        name: string;

        /**
         * The value of this property is conceptually of type dataTypes.DataType.
         */
        type: string;

        canBeEmpty: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new AppServiceActionParameter instance in the SDK and on the server.
         * The new AppServiceActionParameter will be automatically stored in the 'parameters' property
         * of the parent AppServiceAction element passed as argument.
         */
        static createIn(container: AppServiceAction): AppServiceActionParameter;
        /**
         * Creates and returns a new AppServiceActionParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): AppServiceActionParameter;


    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/consumed-app-services relevant section in reference guide}
     */
    interface IConsumedAppService extends projects.IDocument {
        model: IModel;
        containerAsFolderBase: projects.IFolderBase;
        actions: internal.IList<IAppServiceAction>;
        load(): ConsumedAppService;
        load(callback: (element: ConsumedAppService) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/consumed-app-services relevant section in reference guide}
     */
    class ConsumedAppService extends projects.Document implements IConsumedAppService {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsFolderBase: projects.FolderBase;

        actions: internal.IList<AppServiceAction>;

        msd: Msd;

        fromAppStore: boolean;

        appStoreGuid: string;

        appStoreVersionGuid: string;

        appStoreVersion: string;

        appServiceLocation: AppServiceLocationEnum;

        locationConstant: constants.IConstant;
        readonly locationConstantQualifiedName: string;

        useTimeOut: boolean;

        timeOut: number;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new ConsumedAppService unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): ConsumedAppService;

    }
    interface IMsd extends internal.IElement {
        model: IModel;
        containerAsConsumedAppService: IConsumedAppService;
        load(): Msd;
        load(callback: (element: Msd) => void, forceRefresh?: boolean): any;
    }
    class Msd extends internal.Element implements IMsd {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsConsumedAppService: ConsumedAppService;

        version: MsdVersion;

        metadata: MsdMetadata;

        domainModel: MsdDomainModel;

        enumerations: MsdEnumerationContainer;

        wsdlDescription: webservices.WsdlDescription;

        wsdl: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Msd instance in the SDK and on the server.
         * The new Msd will be automatically stored in the 'msd' property
         * of the parent ConsumedAppService element passed as argument.
         */
        static createIn(container: ConsumedAppService): Msd;
        /**
         * Creates and returns a new Msd instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Msd;

    }
    interface IMsdAssociation extends internal.IElement {
        model: IModel;
        containerAsMsdDomainModel: IMsdDomainModel;
        containerAsDataAssociation: webservices.IDataAssociation;
        load(): MsdAssociation;
        load(callback: (element: MsdAssociation) => void, forceRefresh?: boolean): any;
    }
    class MsdAssociation extends internal.Element implements IMsdAssociation {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMsdDomainModel: MsdDomainModel;
        readonly containerAsDataAssociation: webservices.DataAssociation;

        name: string;

        guid: string;

        parentEntityName: string;

        childEntityName: string;

        associationType: string;

        associationOwner: string;

        parentDeleteBehavior: string;

        childDeleteBehavior: string;

        associationKind: string;

        parentX: number;

        parentY: number;

        childX: number;

        childY: number;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MsdAssociation instance in the SDK and on the server.
         * The new MsdAssociation will be automatically stored in the 'associations' property
         * of the parent MsdDomainModel element passed as argument.
         */
        static createInMsdDomainModelUnderAssociations(container: MsdDomainModel): MsdAssociation;
        /**
         * Creates and returns a new MsdAssociation instance in the SDK and on the server.
         * The new MsdAssociation will be automatically stored in the 'associationByContract' property
         * of the parent webservices.DataAssociation element passed as argument.
         */
        static createInDataAssociationUnderAssociationByContract(container: webservices.DataAssociation): MsdAssociation;
        /**
         * Creates and returns a new MsdAssociation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MsdAssociation;

    }
    interface IMsdAttribute extends internal.IElement {
        model: IModel;
        containerAsMsdEntity: IMsdEntity;
        containerAsDataAttribute: webservices.IDataAttribute;
        load(): MsdAttribute;
        load(callback: (element: MsdAttribute) => void, forceRefresh?: boolean): any;
    }
    class MsdAttribute extends internal.Element implements IMsdAttribute {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMsdEntity: MsdEntity;
        readonly containerAsDataAttribute: webservices.DataAttribute;

        name: string;

        guid: string;

        attributeType: string;

        enumerationName: string;

        defaultValue: string;

        length: number;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MsdAttribute instance in the SDK and on the server.
         * The new MsdAttribute will be automatically stored in the 'attributes' property
         * of the parent MsdEntity element passed as argument.
         */
        static createInMsdEntityUnderAttributes(container: MsdEntity): MsdAttribute;
        /**
         * Creates and returns a new MsdAttribute instance in the SDK and on the server.
         * The new MsdAttribute will be automatically stored in the 'attributeByContract' property
         * of the parent webservices.DataAttribute element passed as argument.
         */
        static createInDataAttributeUnderAttributeByContract(container: webservices.DataAttribute): MsdAttribute;
        /**
         * Creates and returns a new MsdAttribute instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MsdAttribute;

    }
    interface IMsdDomainModel extends internal.IElement {
        model: IModel;
        containerAsMsd: IMsd;
        load(): MsdDomainModel;
        load(callback: (element: MsdDomainModel) => void, forceRefresh?: boolean): any;
    }
    class MsdDomainModel extends internal.Element implements IMsdDomainModel {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMsd: Msd;

        entities: internal.IList<MsdEntity>;

        associations: internal.IList<MsdAssociation>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MsdDomainModel instance in the SDK and on the server.
         * The new MsdDomainModel will be automatically stored in the 'domainModel' property
         * of the parent Msd element passed as argument.
         */
        static createIn(container: Msd): MsdDomainModel;
        /**
         * Creates and returns a new MsdDomainModel instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MsdDomainModel;

    }
    interface IMsdEntity extends internal.IElement {
        model: IModel;
        containerAsMsdDomainModel: IMsdDomainModel;
        load(): MsdEntity;
        load(callback: (element: MsdEntity) => void, forceRefresh?: boolean): any;
    }
    class MsdEntity extends internal.Element implements IMsdEntity {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMsdDomainModel: MsdDomainModel;

        name: string;

        guid: string;

        generalizationName: string;

        persistable: boolean;

        locationX: number;

        locationY: number;

        attributes: internal.IList<MsdAttribute>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MsdEntity instance in the SDK and on the server.
         * The new MsdEntity will be automatically stored in the 'entities' property
         * of the parent MsdDomainModel element passed as argument.
         */
        static createIn(container: MsdDomainModel): MsdEntity;
        /**
         * Creates and returns a new MsdEntity instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MsdEntity;

    }
    interface IMsdEnumeration extends internal.IElement {
        model: IModel;
        containerAsMsdEnumerationContainer: IMsdEnumerationContainer;
        load(): MsdEnumeration;
        load(callback: (element: MsdEnumeration) => void, forceRefresh?: boolean): any;
    }
    class MsdEnumeration extends internal.Element implements IMsdEnumeration {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMsdEnumerationContainer: MsdEnumerationContainer;

        name: string;

        guid: string;

        values: internal.IList<MsdEnumerationValue>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MsdEnumeration instance in the SDK and on the server.
         * The new MsdEnumeration will be automatically stored in the 'enumerations' property
         * of the parent MsdEnumerationContainer element passed as argument.
         */
        static createIn(container: MsdEnumerationContainer): MsdEnumeration;
        /**
         * Creates and returns a new MsdEnumeration instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MsdEnumeration;

    }
    interface IMsdEnumerationContainer extends internal.IElement {
        model: IModel;
        containerAsMsd: IMsd;
        containerAsVersionedService: webservices.IVersionedService;
        load(): MsdEnumerationContainer;
        load(callback: (element: MsdEnumerationContainer) => void, forceRefresh?: boolean): any;
    }
    class MsdEnumerationContainer extends internal.Element implements IMsdEnumerationContainer {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMsd: Msd;
        readonly containerAsVersionedService: webservices.VersionedService;

        enumerations: internal.IList<MsdEnumeration>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MsdEnumerationContainer instance in the SDK and on the server.
         * The new MsdEnumerationContainer will be automatically stored in the 'enumerations' property
         * of the parent Msd element passed as argument.
         */
        static createInMsdUnderEnumerations(container: Msd): MsdEnumerationContainer;
        /**
         * Creates and returns a new MsdEnumerationContainer instance in the SDK and on the server.
         * The new MsdEnumerationContainer will be automatically stored in the 'enumerationsByContract' property
         * of the parent webservices.VersionedService element passed as argument.
         */
        static createInVersionedServiceUnderEnumerationsByContract(container: webservices.VersionedService): MsdEnumerationContainer;
        /**
         * Creates and returns a new MsdEnumerationContainer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MsdEnumerationContainer;

    }
    interface IMsdEnumerationValue extends internal.IElement {
        model: IModel;
        containerAsMsdEnumeration: IMsdEnumeration;
        load(): MsdEnumerationValue;
        load(callback: (element: MsdEnumerationValue) => void, forceRefresh?: boolean): any;
    }
    class MsdEnumerationValue extends internal.Element implements IMsdEnumerationValue {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMsdEnumeration: MsdEnumeration;

        name: string;

        guid: string;

        translations: internal.IList<MsdText>;

        image: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MsdEnumerationValue instance in the SDK and on the server.
         * The new MsdEnumerationValue will be automatically stored in the 'values' property
         * of the parent MsdEnumeration element passed as argument.
         */
        static createIn(container: MsdEnumeration): MsdEnumerationValue;
        /**
         * Creates and returns a new MsdEnumerationValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MsdEnumerationValue;

    }
    interface IMsdMetadata extends internal.IElement {
        model: IModel;
        containerAsMsd: IMsd;
        load(): MsdMetadata;
        load(callback: (element: MsdMetadata) => void, forceRefresh?: boolean): any;
    }
    class MsdMetadata extends internal.Element implements IMsdMetadata {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMsd: Msd;

        name: string;

        documentation: string;

        version: number;

        publishDateTime: string;

        serviceGuid: string;

        versionGuid: string;

        instanceGuid: string;

        supportedProtocols: internal.IList<string>;

        headerAuthentication: string;

        microflows: internal.IList<MsdMicroflow>;

        caption: string;

        image: string;

        description: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MsdMetadata instance in the SDK and on the server.
         * The new MsdMetadata will be automatically stored in the 'metadata' property
         * of the parent Msd element passed as argument.
         */
        static createIn(container: Msd): MsdMetadata;
        /**
         * Creates and returns a new MsdMetadata instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MsdMetadata;

    }
    interface IMsdMicroflow extends internal.IElement {
        model: IModel;
        containerAsMsdMetadata: IMsdMetadata;
        load(): MsdMicroflow;
        load(callback: (element: MsdMicroflow) => void, forceRefresh?: boolean): any;
    }
    class MsdMicroflow extends internal.Element implements IMsdMicroflow {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMsdMetadata: MsdMetadata;

        name: string;

        documentation: string;

        image: string;

        description: string;

        parameters: internal.IList<MsdMicroflowParameter>;

        returnType: string;

        /**
         * In version 6.1.0: deleted
         */
        systemEntityType: string;

        returnTypeSpecification: string;

        returnTypeCanBeEmpty: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MsdMicroflow instance in the SDK and on the server.
         * The new MsdMicroflow will be automatically stored in the 'microflows' property
         * of the parent MsdMetadata element passed as argument.
         */
        static createIn(container: MsdMetadata): MsdMicroflow;
        /**
         * Creates and returns a new MsdMicroflow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MsdMicroflow;

    }
    interface IMsdMicroflowParameter extends internal.IElement {
        model: IModel;
        containerAsMsdMicroflow: IMsdMicroflow;
        containerAsPublishedParameter: webservices.IPublishedParameter;
        load(): MsdMicroflowParameter;
        load(callback: (element: MsdMicroflowParameter) => void, forceRefresh?: boolean): any;
    }
    class MsdMicroflowParameter extends internal.Element implements IMsdMicroflowParameter {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMsdMicroflow: MsdMicroflow;
        readonly containerAsPublishedParameter: webservices.PublishedParameter;

        name: string;

        type: string;

        typeSpecification: string;

        /**
         * In version 6.1.0: deleted
         */
        systemEntityType: string;

        canBeEmpty: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MsdMicroflowParameter instance in the SDK and on the server.
         * The new MsdMicroflowParameter will be automatically stored in the 'parameters' property
         * of the parent MsdMicroflow element passed as argument.
         */
        static createInMsdMicroflowUnderParameters(container: MsdMicroflow): MsdMicroflowParameter;
        /**
         * Creates and returns a new MsdMicroflowParameter instance in the SDK and on the server.
         * The new MsdMicroflowParameter will be automatically stored in the 'parameterByContract' property
         * of the parent webservices.PublishedParameter element passed as argument.
         */
        static createInPublishedParameterUnderParameterByContract(container: webservices.PublishedParameter): MsdMicroflowParameter;
        /**
         * Creates and returns a new MsdMicroflowParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MsdMicroflowParameter;

    }
    interface IMsdText extends internal.IElement {
        model: IModel;
        containerAsMsdEnumerationValue: IMsdEnumerationValue;
        load(): MsdText;
        load(callback: (element: MsdText) => void, forceRefresh?: boolean): any;
    }
    class MsdText extends internal.Element implements IMsdText {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMsdEnumerationValue: MsdEnumerationValue;

        languageCode: string;

        caption: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MsdText instance in the SDK and on the server.
         * The new MsdText will be automatically stored in the 'translations' property
         * of the parent MsdEnumerationValue element passed as argument.
         */
        static createIn(container: MsdEnumerationValue): MsdText;
        /**
         * Creates and returns a new MsdText instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MsdText;

    }
    interface IMsdVersion extends internal.IElement {
        model: IModel;
        containerAsMsd: IMsd;
        load(): MsdVersion;
        load(callback: (element: MsdVersion) => void, forceRefresh?: boolean): any;
    }
    class MsdVersion extends internal.Element implements IMsdVersion {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMsd: Msd;

        version: number;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MsdVersion instance in the SDK and on the server.
         * The new MsdVersion will be automatically stored in the 'version' property
         * of the parent Msd element passed as argument.
         */
        static createIn(container: Msd): MsdVersion;
        /**
         * Creates and returns a new MsdVersion instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MsdVersion;

    }
}
import { constants } from "./constants";
import { microflows } from "./microflows";
import { webservices } from "./webservices";
import { IModel } from "./base-model";
