import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;
import { projects } from "./projects";
export declare namespace navigation {
    class DeviceType extends internal.IEnum {
        static Desktop: DeviceType;
        static Tablet: DeviceType;
        static Phone: DeviceType;
        protected qualifiedTsTypeName: string;
    }
    class ProfileType extends internal.IEnum {
        static Desktop: ProfileType;
        static Tablet: ProfileType;
        static Phone: ProfileType;
        static OfflinePhone: ProfileType;
        protected qualifiedTsTypeName: string;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `Navigation`.
     */
    interface IHomePageBase extends internal.IElement {
        model: IModel;
        containerAsNavigationProfile: INavigationProfile;
        load(): HomePageBase;
        load(callback: (element: HomePageBase) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class HomePageBase extends internal.Element implements IHomePageBase {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsNavigationProfile: NavigationProfile;

        page: pages.IPage;
        readonly pageQualifiedName: string;

        microflow: microflows.IMicroflow;
        readonly microflowQualifiedName: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IHomePage extends IHomePageBase {
        model: IModel;
        containerAsNavigationProfile: INavigationProfile;
        load(): HomePage;
        load(callback: (element: HomePage) => void, forceRefresh?: boolean): any;
    }
    class HomePage extends HomePageBase implements IHomePage {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsNavigationProfile: NavigationProfile;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new HomePage instance in the SDK and on the server.
         * The new HomePage will be automatically stored in the 'homePage' property
         * of the parent NavigationProfile element passed as argument.
         */
        static createIn(container: NavigationProfile): HomePage;
        /**
         * Creates and returns a new HomePage instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): HomePage;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/navigation relevant section in reference guide}
     */
    interface INavigationDocument extends projects.IProjectDocument {
        model: IModel;
        containerAsProject: projects.IProject;
        load(): NavigationDocument;
        load(callback: (element: NavigationDocument) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/navigation relevant section in reference guide}
     */
    class NavigationDocument extends projects.ProjectDocument implements INavigationDocument {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsProject: projects.Project;

        phoneProfile: NavigationProfile;

        tabletProfile: NavigationProfile;

        desktopProfile: NavigationProfile;

        offlinePhoneProfile: NavigationProfile;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IProject);
        /**
         * Creates a new NavigationDocument unit in the SDK and on the server.
         * Expects one argument, the projects.IProject in which this unit is contained.
         */
        static createIn(container: projects.IProject): NavigationDocument;

    }
    interface INavigationProfile extends internal.IElement {
        model: IModel;
        containerAsNavigationDocument: INavigationDocument;
        load(): NavigationProfile;
        load(callback: (element: NavigationProfile) => void, forceRefresh?: boolean): any;
    }
    class NavigationProfile extends internal.Element implements INavigationProfile {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsNavigationDocument: NavigationDocument;

        enabled: boolean;

        homePage: HomePage;

        roleBasedHomePages: internal.IList<RoleBasedHomePage>;

        applicationTitle: string;

        menuItemCollection: menus.MenuItemCollection;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new NavigationProfile instance in the SDK and on the server.
         * The new NavigationProfile will be automatically stored in the 'desktopProfile' property
         * of the parent NavigationDocument element passed as argument.
         */
        static createInNavigationDocumentUnderDesktopProfile(container: NavigationDocument): NavigationProfile;
        /**
         * Creates and returns a new NavigationProfile instance in the SDK and on the server.
         * The new NavigationProfile will be automatically stored in the 'offlinePhoneProfile' property
         * of the parent NavigationDocument element passed as argument.
         */
        static createInNavigationDocumentUnderOfflinePhoneProfile(container: NavigationDocument): NavigationProfile;
        /**
         * Creates and returns a new NavigationProfile instance in the SDK and on the server.
         * The new NavigationProfile will be automatically stored in the 'phoneProfile' property
         * of the parent NavigationDocument element passed as argument.
         */
        static createInNavigationDocumentUnderPhoneProfile(container: NavigationDocument): NavigationProfile;
        /**
         * Creates and returns a new NavigationProfile instance in the SDK and on the server.
         * The new NavigationProfile will be automatically stored in the 'tabletProfile' property
         * of the parent NavigationDocument element passed as argument.
         */
        static createInNavigationDocumentUnderTabletProfile(container: NavigationDocument): NavigationProfile;
        /**
         * Creates and returns a new NavigationProfile instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): NavigationProfile;

    }
    interface IRoleBasedHomePage extends IHomePageBase {
        model: IModel;
        containerAsNavigationProfile: INavigationProfile;
        load(): RoleBasedHomePage;
        load(callback: (element: RoleBasedHomePage) => void, forceRefresh?: boolean): any;
    }
    class RoleBasedHomePage extends HomePageBase implements IRoleBasedHomePage {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsNavigationProfile: NavigationProfile;

        userRole: security.IUserRole;
        readonly userRoleQualifiedName: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new RoleBasedHomePage instance in the SDK and on the server.
         * The new RoleBasedHomePage will be automatically stored in the 'roleBasedHomePages' property
         * of the parent NavigationProfile element passed as argument.
         */
        static createIn(container: NavigationProfile): RoleBasedHomePage;
        /**
         * Creates and returns a new RoleBasedHomePage instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): RoleBasedHomePage;

    }
}
import { menus } from "./menus";
import { microflows } from "./microflows";
import { pages } from "./pages";
import { security } from "./security";
import { IModel } from "./base-model";
