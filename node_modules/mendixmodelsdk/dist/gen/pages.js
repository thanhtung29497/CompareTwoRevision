/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require("./projects");
var pages;
(function (pages) {
    var AggregateFunction = (function (_super) {
        __extends(AggregateFunction, _super);
        function AggregateFunction() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.AggregateFunction";
            return _this;
        }
        return AggregateFunction;
    }(internal.IEnum));
    AggregateFunction.None = new AggregateFunction("None", {});
    AggregateFunction.Average = new AggregateFunction("Average", {});
    AggregateFunction.Maximum = new AggregateFunction("Maximum", {});
    AggregateFunction.Minimum = new AggregateFunction("Minimum", {});
    AggregateFunction.Sum = new AggregateFunction("Sum", {});
    AggregateFunction.Count = new AggregateFunction("Count", {});
    pages.AggregateFunction = AggregateFunction;
    var AlignmentEnum = (function (_super) {
        __extends(AlignmentEnum, _super);
        function AlignmentEnum() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.AlignmentEnum";
            return _this;
        }
        return AlignmentEnum;
    }(internal.IEnum));
    AlignmentEnum.Left = new AlignmentEnum("Left", {});
    AlignmentEnum.Center = new AlignmentEnum("Center", {});
    AlignmentEnum.Right = new AlignmentEnum("Right", {});
    pages.AlignmentEnum = AlignmentEnum;
    var ButtonStyle = (function (_super) {
        __extends(ButtonStyle, _super);
        function ButtonStyle() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.ButtonStyle";
            return _this;
        }
        return ButtonStyle;
    }(internal.IEnum));
    ButtonStyle.Default = new ButtonStyle("Default", {});
    ButtonStyle.Inverse = new ButtonStyle("Inverse", {});
    ButtonStyle.Primary = new ButtonStyle("Primary", {});
    ButtonStyle.Info = new ButtonStyle("Info", {});
    ButtonStyle.Success = new ButtonStyle("Success", {});
    ButtonStyle.Warning = new ButtonStyle("Warning", {});
    ButtonStyle.Danger = new ButtonStyle("Danger", {});
    pages.ButtonStyle = ButtonStyle;
    var ClickTypeType = (function (_super) {
        __extends(ClickTypeType, _super);
        function ClickTypeType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.ClickTypeType";
            return _this;
        }
        return ClickTypeType;
    }(internal.IEnum));
    ClickTypeType.Single = new ClickTypeType("Single", {});
    ClickTypeType.Double = new ClickTypeType("Double", {});
    pages.ClickTypeType = ClickTypeType;
    var ContainerWidth = (function (_super) {
        __extends(ContainerWidth, _super);
        function ContainerWidth() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.ContainerWidth";
            return _this;
        }
        return ContainerWidth;
    }(internal.IEnum));
    ContainerWidth.FullWidth = new ContainerWidth("FullWidth", {});
    ContainerWidth.FixedWidth = new ContainerWidth("FixedWidth", {});
    pages.ContainerWidth = ContainerWidth;
    var DataViewReadOnlyStyle = (function (_super) {
        __extends(DataViewReadOnlyStyle, _super);
        function DataViewReadOnlyStyle() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.DataViewReadOnlyStyle";
            return _this;
        }
        return DataViewReadOnlyStyle;
    }(internal.IEnum));
    DataViewReadOnlyStyle.Control = new DataViewReadOnlyStyle("Control", {});
    DataViewReadOnlyStyle.Text = new DataViewReadOnlyStyle("Text", {});
    pages.DataViewReadOnlyStyle = DataViewReadOnlyStyle;
    var DatabaseConstraintOperator = (function (_super) {
        __extends(DatabaseConstraintOperator, _super);
        function DatabaseConstraintOperator() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.DatabaseConstraintOperator";
            return _this;
        }
        return DatabaseConstraintOperator;
    }(internal.IEnum));
    DatabaseConstraintOperator.Equals = new DatabaseConstraintOperator("Equals", {});
    DatabaseConstraintOperator.NotEquals = new DatabaseConstraintOperator("NotEquals", {});
    DatabaseConstraintOperator.Contains = new DatabaseConstraintOperator("Contains", {});
    DatabaseConstraintOperator.NotContains = new DatabaseConstraintOperator("NotContains", {});
    DatabaseConstraintOperator.LessThan = new DatabaseConstraintOperator("LessThan", {});
    DatabaseConstraintOperator.LessThanOrEquals = new DatabaseConstraintOperator("LessThanOrEquals", {});
    DatabaseConstraintOperator.GreaterThan = new DatabaseConstraintOperator("GreaterThan", {});
    DatabaseConstraintOperator.GreaterThanOrEquals = new DatabaseConstraintOperator("GreaterThanOrEquals", {});
    pages.DatabaseConstraintOperator = DatabaseConstraintOperator;
    var DateFormat = (function (_super) {
        __extends(DateFormat, _super);
        function DateFormat() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.DateFormat";
            return _this;
        }
        return DateFormat;
    }(internal.IEnum));
    DateFormat.Date = new DateFormat("Date", {});
    DateFormat.Time = new DateFormat("Time", {});
    DateFormat.DateTime = new DateFormat("DateTime", {});
    DateFormat.Custom = new DateFormat("Custom", {});
    pages.DateFormat = DateFormat;
    var EditableEnum = (function (_super) {
        __extends(EditableEnum, _super);
        function EditableEnum() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.EditableEnum";
            return _this;
        }
        return EditableEnum;
    }(internal.IEnum));
    EditableEnum.Always = new EditableEnum("Always", {});
    EditableEnum.Never = new EditableEnum("Never", {});
    EditableEnum.Conditional = new EditableEnum("Conditional", {});
    pages.EditableEnum = EditableEnum;
    var EnumFormat = (function (_super) {
        __extends(EnumFormat, _super);
        function EnumFormat() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.EnumFormat";
            return _this;
        }
        return EnumFormat;
    }(internal.IEnum));
    EnumFormat.Text = new EnumFormat("Text", {});
    EnumFormat.Image = new EnumFormat("Image", {});
    pages.EnumFormat = EnumFormat;
    var FileManagerType = (function (_super) {
        __extends(FileManagerType, _super);
        function FileManagerType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.FileManagerType";
            return _this;
        }
        return FileManagerType;
    }(internal.IEnum));
    FileManagerType.Upload = new FileManagerType("Upload", {});
    FileManagerType.Download = new FileManagerType("Download", {});
    FileManagerType.Both = new FileManagerType("Both", {});
    pages.FileManagerType = FileManagerType;
    var FormLocation = (function (_super) {
        __extends(FormLocation, _super);
        function FormLocation() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.FormLocation";
            return _this;
        }
        return FormLocation;
    }(internal.IEnum));
    FormLocation.Content = new FormLocation("Content", {});
    FormLocation.Popup = new FormLocation("Popup", {});
    FormLocation.ModalPopup = new FormLocation("ModalPopup", {});
    pages.FormLocation = FormLocation;
    var FormValidations = (function (_super) {
        __extends(FormValidations, _super);
        function FormValidations() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.FormValidations";
            return _this;
        }
        return FormValidations;
    }(internal.IEnum));
    FormValidations.None = new FormValidations("None", {});
    FormValidations.Widget = new FormValidations("Widget", {});
    FormValidations.All = new FormValidations("All", {});
    pages.FormValidations = FormValidations;
    var GridSelectionMode = (function (_super) {
        __extends(GridSelectionMode, _super);
        function GridSelectionMode() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.GridSelectionMode";
            return _this;
        }
        return GridSelectionMode;
    }(internal.IEnum));
    GridSelectionMode.None = new GridSelectionMode("None", {});
    GridSelectionMode.Single = new GridSelectionMode("Single", {});
    GridSelectionMode.SingleAndMaintain = new GridSelectionMode("SingleAndMaintain", {});
    GridSelectionMode.Multi = new GridSelectionMode("Multi", {});
    GridSelectionMode.SimpleMulti = new GridSelectionMode("SimpleMulti", {});
    pages.GridSelectionMode = GridSelectionMode;
    var GroupBoxCollapsible = (function (_super) {
        __extends(GroupBoxCollapsible, _super);
        function GroupBoxCollapsible() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.GroupBoxCollapsible";
            return _this;
        }
        return GroupBoxCollapsible;
    }(internal.IEnum));
    GroupBoxCollapsible.No = new GroupBoxCollapsible("No", {});
    GroupBoxCollapsible.YesInitiallyExpanded = new GroupBoxCollapsible("YesInitiallyExpanded", {});
    GroupBoxCollapsible.YesInitiallyCollapsed = new GroupBoxCollapsible("YesInitiallyCollapsed", {});
    pages.GroupBoxCollapsible = GroupBoxCollapsible;
    var ImageSizeUnit = (function (_super) {
        __extends(ImageSizeUnit, _super);
        function ImageSizeUnit() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.ImageSizeUnit";
            return _this;
        }
        return ImageSizeUnit;
    }(internal.IEnum));
    ImageSizeUnit.Auto = new ImageSizeUnit("Auto", {});
    ImageSizeUnit.Pixels = new ImageSizeUnit("Pixels", {});
    ImageSizeUnit.Percentage = new ImageSizeUnit("Percentage", {});
    pages.ImageSizeUnit = ImageSizeUnit;
    var LayoutModeType = (function (_super) {
        __extends(LayoutModeType, _super);
        function LayoutModeType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.LayoutModeType";
            return _this;
        }
        return LayoutModeType;
    }(internal.IEnum));
    LayoutModeType.Headline = new LayoutModeType("Headline", {});
    LayoutModeType.Sidebar = new LayoutModeType("Sidebar", {});
    pages.LayoutModeType = LayoutModeType;
    var LayoutType = (function (_super) {
        __extends(LayoutType, _super);
        function LayoutType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.LayoutType";
            return _this;
        }
        return LayoutType;
    }(internal.IEnum));
    LayoutType.Responsive = new LayoutType("Responsive", {});
    LayoutType.Tablet = new LayoutType("Tablet", {});
    LayoutType.Phone = new LayoutType("Phone", {});
    LayoutType.ModalPopup = new LayoutType("ModalPopup", {});
    LayoutType.Popup = new LayoutType("Popup", {});
    LayoutType.Legacy = new LayoutType("Legacy", {});
    pages.LayoutType = LayoutType;
    var LinkType = (function (_super) {
        __extends(LinkType, _super);
        function LinkType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.LinkType";
            return _this;
        }
        return LinkType;
    }(internal.IEnum));
    LinkType.Web = new LinkType("Web", {});
    LinkType.Email = new LinkType("Email", {});
    LinkType.Call = new LinkType("Call", {});
    LinkType.Text = new LinkType("Text", {});
    pages.LinkType = LinkType;
    var MobileFooterType = (function (_super) {
        __extends(MobileFooterType, _super);
        function MobileFooterType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.MobileFooterType";
            return _this;
        }
        return MobileFooterType;
    }(internal.IEnum));
    MobileFooterType.None = new MobileFooterType("None", {});
    MobileFooterType.MenuBar = new MobileFooterType("MenuBar", {});
    MobileFooterType.Custom = new MobileFooterType("Custom", {});
    pages.MobileFooterType = MobileFooterType;
    var NewButtonEditLocation = (function (_super) {
        __extends(NewButtonEditLocation, _super);
        function NewButtonEditLocation() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.NewButtonEditLocation";
            return _this;
        }
        return NewButtonEditLocation;
    }(internal.IEnum));
    NewButtonEditLocation.InlineAtTop = new NewButtonEditLocation("InlineAtTop", {});
    NewButtonEditLocation.InlineAtBottom = new NewButtonEditLocation("InlineAtBottom", {});
    NewButtonEditLocation.Form = new NewButtonEditLocation("Form", {});
    pages.NewButtonEditLocation = NewButtonEditLocation;
    var ProgressBarType = (function (_super) {
        __extends(ProgressBarType, _super);
        function ProgressBarType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.ProgressBarType";
            return _this;
        }
        return ProgressBarType;
    }(internal.IEnum));
    ProgressBarType.None = new ProgressBarType("None", {});
    ProgressBarType.NonBlocking = new ProgressBarType("NonBlocking", {});
    ProgressBarType.Blocking = new ProgressBarType("Blocking", {});
    pages.ProgressBarType = ProgressBarType;
    var ReadOnlyStyle = (function (_super) {
        __extends(ReadOnlyStyle, _super);
        function ReadOnlyStyle() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.ReadOnlyStyle";
            return _this;
        }
        return ReadOnlyStyle;
    }(internal.IEnum));
    ReadOnlyStyle.Inherit = new ReadOnlyStyle("Inherit", {});
    ReadOnlyStyle.Control = new ReadOnlyStyle("Control", {});
    ReadOnlyStyle.Text = new ReadOnlyStyle("Text", {});
    pages.ReadOnlyStyle = ReadOnlyStyle;
    var ReferenceSelectorRenderModeType = (function (_super) {
        __extends(ReferenceSelectorRenderModeType, _super);
        function ReferenceSelectorRenderModeType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.ReferenceSelectorRenderModeType";
            return _this;
        }
        return ReferenceSelectorRenderModeType;
    }(internal.IEnum));
    ReferenceSelectorRenderModeType.Form = new ReferenceSelectorRenderModeType("Form", {});
    ReferenceSelectorRenderModeType.DropDown = new ReferenceSelectorRenderModeType("DropDown", {});
    pages.ReferenceSelectorRenderModeType = ReferenceSelectorRenderModeType;
    var RenderType = (function (_super) {
        __extends(RenderType, _super);
        function RenderType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.RenderType";
            return _this;
        }
        return RenderType;
    }(internal.IEnum));
    RenderType.Button = new RenderType("Button", {});
    RenderType.Link = new RenderType("Link", {});
    pages.RenderType = RenderType;
    var ScrollBehavior = (function (_super) {
        __extends(ScrollBehavior, _super);
        function ScrollBehavior() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.ScrollBehavior";
            return _this;
        }
        return ScrollBehavior;
    }(internal.IEnum));
    ScrollBehavior.PerRegion = new ScrollBehavior("PerRegion", {});
    ScrollBehavior.FullWidget = new ScrollBehavior("FullWidget", {});
    pages.ScrollBehavior = ScrollBehavior;
    var SearchBarTypeEnum = (function (_super) {
        __extends(SearchBarTypeEnum, _super);
        function SearchBarTypeEnum() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.SearchBarTypeEnum";
            return _this;
        }
        return SearchBarTypeEnum;
    }(internal.IEnum));
    SearchBarTypeEnum.None = new SearchBarTypeEnum("None", {});
    SearchBarTypeEnum.FoldableOpen = new SearchBarTypeEnum("FoldableOpen", {});
    SearchBarTypeEnum.FoldableClosed = new SearchBarTypeEnum("FoldableClosed", {});
    SearchBarTypeEnum.AlwaysOpen = new SearchBarTypeEnum("AlwaysOpen", {});
    pages.SearchBarTypeEnum = SearchBarTypeEnum;
    var SearchFieldOperator = (function (_super) {
        __extends(SearchFieldOperator, _super);
        function SearchFieldOperator() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.SearchFieldOperator";
            return _this;
        }
        return SearchFieldOperator;
    }(internal.IEnum));
    SearchFieldOperator.Contains = new SearchFieldOperator("Contains", {});
    SearchFieldOperator.StartsWith = new SearchFieldOperator("StartsWith", {});
    SearchFieldOperator.Greater = new SearchFieldOperator("Greater", {});
    SearchFieldOperator.GreaterOrEqual = new SearchFieldOperator("GreaterOrEqual", {});
    SearchFieldOperator.Equal = new SearchFieldOperator("Equal", {});
    SearchFieldOperator.NotEqual = new SearchFieldOperator("NotEqual", {});
    SearchFieldOperator.SmallerOrEqual = new SearchFieldOperator("SmallerOrEqual", {});
    SearchFieldOperator.Smaller = new SearchFieldOperator("Smaller", {});
    pages.SearchFieldOperator = SearchFieldOperator;
    var SearchFieldType = (function (_super) {
        __extends(SearchFieldType, _super);
        function SearchFieldType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.SearchFieldType";
            return _this;
        }
        return SearchFieldType;
    }(internal.IEnum));
    SearchFieldType.Normal = new SearchFieldType("Normal", {});
    SearchFieldType.Hidden = new SearchFieldType("Hidden", {});
    SearchFieldType.ReadOnly = new SearchFieldType("ReadOnly", {});
    pages.SearchFieldType = SearchFieldType;
    var SelectionType = (function (_super) {
        __extends(SelectionType, _super);
        function SelectionType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.SelectionType";
            return _this;
        }
        return SelectionType;
    }(internal.IEnum));
    SelectionType.SelectPage = new SelectionType("SelectPage", {});
    SelectionType.SelectAll = new SelectionType("SelectAll", {});
    pages.SelectionType = SelectionType;
    var SidebarToggleMode = (function (_super) {
        __extends(SidebarToggleMode, _super);
        function SidebarToggleMode() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.SidebarToggleMode";
            return _this;
        }
        return SidebarToggleMode;
    }(internal.IEnum));
    SidebarToggleMode.PushContentAside = new SidebarToggleMode("PushContentAside", {});
    SidebarToggleMode.SlideOverContent = new SidebarToggleMode("SlideOverContent", {});
    SidebarToggleMode.ShrinkContent = new SidebarToggleMode("ShrinkContent", {});
    pages.SidebarToggleMode = SidebarToggleMode;
    var SidebarToggleRegion = (function (_super) {
        __extends(SidebarToggleRegion, _super);
        function SidebarToggleRegion() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.SidebarToggleRegion";
            return _this;
        }
        return SidebarToggleRegion;
    }(internal.IEnum));
    SidebarToggleRegion.Left = new SidebarToggleRegion("Left", {});
    SidebarToggleRegion.Right = new SidebarToggleRegion("Right", {});
    pages.SidebarToggleRegion = SidebarToggleRegion;
    var SimpleMenuBarOrientation = (function (_super) {
        __extends(SimpleMenuBarOrientation, _super);
        function SimpleMenuBarOrientation() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.SimpleMenuBarOrientation";
            return _this;
        }
        return SimpleMenuBarOrientation;
    }(internal.IEnum));
    SimpleMenuBarOrientation.Horizontal = new SimpleMenuBarOrientation("Horizontal", {});
    SimpleMenuBarOrientation.Vertical = new SimpleMenuBarOrientation("Vertical", {});
    pages.SimpleMenuBarOrientation = SimpleMenuBarOrientation;
    var SizeMode = (function (_super) {
        __extends(SizeMode, _super);
        function SizeMode() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.SizeMode";
            return _this;
        }
        return SizeMode;
    }(internal.IEnum));
    SizeMode.Auto = new SizeMode("Auto", {});
    SizeMode.Pixels = new SizeMode("Pixels", {});
    SizeMode.Percentage = new SizeMode("Percentage", {});
    pages.SizeMode = SizeMode;
    var SortDirection = (function (_super) {
        __extends(SortDirection, _super);
        function SortDirection() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.SortDirection";
            return _this;
        }
        return SortDirection;
    }(internal.IEnum));
    SortDirection.Ascending = new SortDirection("Ascending", {});
    SortDirection.Descending = new SortDirection("Descending", {});
    pages.SortDirection = SortDirection;
    var TableCellRenderModeType = (function (_super) {
        __extends(TableCellRenderModeType, _super);
        function TableCellRenderModeType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.TableCellRenderModeType";
            return _this;
        }
        return TableCellRenderModeType;
    }(internal.IEnum));
    TableCellRenderModeType.Default = new TableCellRenderModeType("Default", {});
    TableCellRenderModeType.Header = new TableCellRenderModeType("Header", {});
    TableCellRenderModeType.Title = new TableCellRenderModeType("Title", {});
    pages.TableCellRenderModeType = TableCellRenderModeType;
    var TextRenderMode = (function (_super) {
        __extends(TextRenderMode, _super);
        function TextRenderMode() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.TextRenderMode";
            return _this;
        }
        return TextRenderMode;
    }(internal.IEnum));
    TextRenderMode.Text = new TextRenderMode("Text", {});
    TextRenderMode.Paragraph = new TextRenderMode("Paragraph", {});
    TextRenderMode.H1 = new TextRenderMode("H1", {});
    TextRenderMode.H2 = new TextRenderMode("H2", {});
    TextRenderMode.H3 = new TextRenderMode("H3", {});
    TextRenderMode.H4 = new TextRenderMode("H4", {});
    TextRenderMode.H5 = new TextRenderMode("H5", {});
    TextRenderMode.H6 = new TextRenderMode("H6", {});
    pages.TextRenderMode = TextRenderMode;
    var ToggleMode = (function (_super) {
        __extends(ToggleMode, _super);
        function ToggleMode() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.ToggleMode";
            return _this;
        }
        return ToggleMode;
    }(internal.IEnum));
    ToggleMode.None = new ToggleMode("None", {});
    ToggleMode.PushContentAside = new ToggleMode("PushContentAside", {});
    ToggleMode.SlideOverContent = new ToggleMode("SlideOverContent", {});
    ToggleMode.ShrinkContentInitiallyOpen = new ToggleMode("ShrinkContentInitiallyOpen", {});
    ToggleMode.ShrinkContentInitiallyClosed = new ToggleMode("ShrinkContentInitiallyClosed", {});
    pages.ToggleMode = ToggleMode;
    var UnitEnum = (function (_super) {
        __extends(UnitEnum, _super);
        function UnitEnum() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "pages.UnitEnum";
            return _this;
        }
        return UnitEnum;
    }(internal.IEnum));
    UnitEnum.Weight = new UnitEnum("Weight", {});
    UnitEnum.Pixels = new UnitEnum("Pixels", {});
    pages.UnitEnum = UnitEnum;
    /**
     * See: {@link https://docs.mendix.com/refguide7/pages relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var Widget = (function (_super) {
        __extends(Widget, _super);
        function Widget(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__name = new internal.PrimitiveProperty(Widget, _this, "name", "", internal.PrimitiveTypeEnum.String);
            _this.__class = new internal.PrimitiveProperty(Widget, _this, "class", "", internal.PrimitiveTypeEnum.String);
            _this.__style = new internal.PrimitiveProperty(Widget, _this, "style", "", internal.PrimitiveTypeEnum.String);
            _this.__tabIndex = new internal.PrimitiveProperty(Widget, _this, "tabIndex", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new Widget() cannot be invoked directly, please use 'model.pages.createWidget()'");
            }
            return _this;
        }
        Object.defineProperty(Widget.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "tabIndex", {
            get: function () { return this.__tabIndex.get(); },
            set: function (newValue) { this.__tabIndex.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Widget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return Widget;
    }(internal.Element));
    Widget.typeName = "Pages$Widget";
    Widget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.Widget = Widget;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ConditionallyVisibleWidget = (function (_super) {
        __extends(ConditionallyVisibleWidget, _super);
        function ConditionallyVisibleWidget(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__conditionalVisibilitySettings = new internal.PartProperty(ConditionallyVisibleWidget, _this, "conditionalVisibilitySettings", null, false);
            if (arguments.length < 4) {
                throw new Error("new ConditionallyVisibleWidget() cannot be invoked directly, please use 'model.pages.createConditionallyVisibleWidget()'");
            }
            return _this;
        }
        Object.defineProperty(ConditionallyVisibleWidget.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyVisibleWidget.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyVisibleWidget.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyVisibleWidget.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyVisibleWidget.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyVisibleWidget.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyVisibleWidget.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyVisibleWidget.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyVisibleWidget.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyVisibleWidget.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyVisibleWidget.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyVisibleWidget.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyVisibleWidget.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyVisibleWidget.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyVisibleWidget.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyVisibleWidget.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyVisibleWidget.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyVisibleWidget.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyVisibleWidget.prototype, "conditionalVisibilitySettings", {
            get: function () { return this.__conditionalVisibilitySettings.get(); },
            set: function (newValue) { this.__conditionalVisibilitySettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ConditionallyVisibleWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ConditionallyVisibleWidget;
    }(Widget));
    ConditionallyVisibleWidget.typeName = "Pages$ConditionallyVisibleWidget";
    ConditionallyVisibleWidget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ConditionallyVisibleWidget = ConditionallyVisibleWidget;
    /**
     * See: {@link https://docs.mendix.com/refguide7/button-widgets relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var Button = (function (_super) {
        __extends(Button, _super);
        function Button(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__caption = new internal.PartProperty(Button, _this, "caption", null, false);
            _this.__tooltip = new internal.PartProperty(Button, _this, "tooltip", null, true);
            _this.__icon = new internal.PartProperty(Button, _this, "icon", null, false);
            _this.__renderType = new internal.EnumProperty(Button, _this, "renderType", RenderType.Button, RenderType);
            _this.__buttonStyle = new internal.EnumProperty(Button, _this, "buttonStyle", ButtonStyle.Default, ButtonStyle);
            if (arguments.length < 4) {
                throw new Error("new Button() cannot be invoked directly, please use 'model.pages.createButton()'");
            }
            return _this;
        }
        Object.defineProperty(Button.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "tooltip", {
            get: function () { return this.__tooltip.get(); },
            set: function (newValue) { this.__tooltip.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "icon", {
            get: function () { return this.__icon.get(); },
            set: function (newValue) { this.__icon.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "renderType", {
            get: function () { return this.__renderType.get(); },
            set: function (newValue) { this.__renderType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "buttonStyle", {
            get: function () { return this.__buttonStyle.get(); },
            set: function (newValue) { this.__buttonStyle.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Button.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.buttonStyle = ButtonStyle.Default;
            this.renderType = RenderType.Button;
            this.tooltip = texts_1.texts.Text.create(this.model);
        };
        return Button;
    }(ConditionallyVisibleWidget));
    Button.typeName = "Pages$Button";
    Button.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "caption": {
                "required": {
                    "currentValue": true
                }
            },
            "tooltip": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.Button = Button;
    /**
     * See: {@link https://docs.mendix.com/refguide7/action-button relevant section in reference guide}
     */
    var ActionButton = (function (_super) {
        __extends(ActionButton, _super);
        function ActionButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__action = new internal.PartProperty(ActionButton, _this, "action", null, true);
            _this.__disabledDuringAction = new internal.PrimitiveProperty(ActionButton, _this, "disabledDuringAction", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new ActionButton() cannot be invoked directly, please use 'model.pages.createActionButton()'");
            }
            return _this;
        }
        Object.defineProperty(ActionButton.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionButton.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionButton.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionButton.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionButton.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionButton.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionButton.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionButton.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionButton.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionButton.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionButton.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionButton.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionButton.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionButton.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionButton.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionButton.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionButton.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionButton.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionButton.prototype, "action", {
            get: function () { return this.__action.get(); },
            set: function (newValue) { this.__action.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionButton.prototype, "disabledDuringAction", {
            get: function () { return this.__disabledDuringAction.get(); },
            set: function (newValue) { this.__disabledDuringAction.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        ActionButton.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, ActionButton.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, ActionButton, "footerWidget", false);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        ActionButton.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        ActionButton.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        ActionButton.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        ActionButton.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, ActionButton, "leftWidget", false);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        ActionButton.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, ActionButton, "rightWidget", false);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        ActionButton.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        ActionButton.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        ActionButton.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        ActionButton.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        ActionButton.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        ActionButton.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        ActionButton.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        ActionButton.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        ActionButton.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, ActionButton, "firstWidget", false);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        ActionButton.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, ActionButton, "secondWidget", false);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        ActionButton.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        ActionButton.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        ActionButton.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widget", false);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        ActionButton.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, ActionButton, "widgets", true);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ActionButton.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, ActionButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ActionButton, "parameterWidget", false);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ActionButton.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, ActionButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ActionButton, "reportWidget", false);
        };
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ActionButton.create = function (model) {
            return internal.instancehelpers.createElement(model, ActionButton);
        };
        ActionButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.action = NoClientAction.create(this.model);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Action";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Actie";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        return ActionButton;
    }(Button));
    ActionButton.typeName = "Pages$ActionButton";
    ActionButton.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "action": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ActionButton = ActionButton;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ActionItem = (function (_super) {
        __extends(ActionItem, _super);
        function ActionItem(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__action = new internal.PartProperty(ActionItem, _this, "action", null, true);
            if (arguments.length < 4) {
                throw new Error("new ActionItem() cannot be invoked directly, please use 'model.pages.createActionItem()'");
            }
            return _this;
        }
        Object.defineProperty(ActionItem.prototype, "containerAsDropDownButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, DropDownButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionItem.prototype, "containerAsNavigationList", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationList); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionItem.prototype, "action", {
            get: function () { return this.__action.get(); },
            set: function (newValue) { this.__action.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ActionItem.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.action = NoClientAction.create(this.model);
        };
        return ActionItem;
    }(internal.Element));
    ActionItem.typeName = "Pages$ActionItem";
    ActionItem.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "action": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ActionItem = ActionItem;
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-sources relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var DataSource = (function (_super) {
        __extends(DataSource, _super);
        function DataSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new DataSource() cannot be invoked directly, please use 'model.pages.createDataSource()'");
            }
            return _this;
        }
        Object.defineProperty(DataSource.prototype, "containerAsEntityWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, EntityWidget); },
            enumerable: true,
            configurable: true
        });
        DataSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return DataSource;
    }(internal.Element));
    DataSource.typeName = "Pages$DataSource";
    DataSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.DataSource = DataSource;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var EntityPathSource = (function (_super) {
        __extends(EntityPathSource, _super);
        function EntityPathSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__entityPath = new internal.PrimitiveProperty(EntityPathSource, _this, "entityPath", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new EntityPathSource() cannot be invoked directly, please use 'model.pages.createEntityPathSource()'");
            }
            return _this;
        }
        Object.defineProperty(EntityPathSource.prototype, "containerAsEntityWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, EntityWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityPathSource.prototype, "entityPath", {
            /**
             * The value of this property is conceptually of type paths.EntityPath.
             */
            get: function () { return this.__entityPath.get(); },
            set: function (newValue) { this.__entityPath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        EntityPathSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return EntityPathSource;
    }(DataSource));
    EntityPathSource.typeName = "Pages$EntityPathSource";
    EntityPathSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.EntityPathSource = EntityPathSource;
    var AssociationSource = (function (_super) {
        __extends(AssociationSource, _super);
        function AssociationSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new AssociationSource() cannot be invoked directly, please use 'model.pages.createAssociationSource()'");
            }
            return _this;
        }
        Object.defineProperty(AssociationSource.prototype, "containerAsEntityWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, EntityWidget); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new AssociationSource instance in the SDK and on the server.
         * The new AssociationSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        AssociationSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, AssociationSource, "dataSource", false);
        };
        /**
         * Creates and returns a new AssociationSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AssociationSource.create = function (model) {
            return internal.instancehelpers.createElement(model, AssociationSource);
        };
        AssociationSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return AssociationSource;
    }(EntityPathSource));
    AssociationSource.typeName = "Pages$AssociationSource";
    AssociationSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.AssociationSource = AssociationSource;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ConditionallyEditableWidget = (function (_super) {
        __extends(ConditionallyEditableWidget, _super);
        function ConditionallyEditableWidget(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__conditionalEditabilitySettings = new internal.PartProperty(ConditionallyEditableWidget, _this, "conditionalEditabilitySettings", null, false);
            _this.__editable = new internal.EnumProperty(ConditionallyEditableWidget, _this, "editable", EditableEnum.Always, EditableEnum);
            if (arguments.length < 4) {
                throw new Error("new ConditionallyEditableWidget() cannot be invoked directly, please use 'model.pages.createConditionallyEditableWidget()'");
            }
            return _this;
        }
        Object.defineProperty(ConditionallyEditableWidget.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyEditableWidget.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyEditableWidget.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyEditableWidget.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyEditableWidget.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyEditableWidget.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyEditableWidget.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyEditableWidget.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyEditableWidget.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyEditableWidget.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyEditableWidget.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyEditableWidget.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyEditableWidget.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyEditableWidget.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyEditableWidget.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyEditableWidget.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyEditableWidget.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyEditableWidget.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyEditableWidget.prototype, "conditionalEditabilitySettings", {
            get: function () { return this.__conditionalEditabilitySettings.get(); },
            set: function (newValue) { this.__conditionalEditabilitySettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionallyEditableWidget.prototype, "editable", {
            get: function () { return this.__editable.get(); },
            set: function (newValue) { this.__editable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ConditionallyEditableWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.editable = EditableEnum.Always;
        };
        return ConditionallyEditableWidget;
    }(ConditionallyVisibleWidget));
    ConditionallyEditableWidget.typeName = "Pages$ConditionallyEditableWidget";
    ConditionallyEditableWidget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ConditionallyEditableWidget = ConditionallyEditableWidget;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var InputWidget = (function (_super) {
        __extends(InputWidget, _super);
        function InputWidget(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__label = new internal.PartProperty(InputWidget, _this, "label", null, false);
            if (arguments.length < 4) {
                throw new Error("new InputWidget() cannot be invoked directly, please use 'model.pages.createInputWidget()'");
            }
            return _this;
        }
        Object.defineProperty(InputWidget.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputWidget.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputWidget.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputWidget.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputWidget.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputWidget.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputWidget.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputWidget.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputWidget.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputWidget.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputWidget.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputWidget.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputWidget.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputWidget.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputWidget.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputWidget.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputWidget.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputWidget.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputWidget.prototype, "label", {
            get: function () { return this.__label.get(); },
            set: function (newValue) { this.__label.set(newValue); },
            enumerable: true,
            configurable: true
        });
        InputWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return InputWidget;
    }(ConditionallyEditableWidget));
    InputWidget.typeName = "Pages$InputWidget";
    InputWidget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.InputWidget = InputWidget;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var MemberWidget = (function (_super) {
        __extends(MemberWidget, _super);
        function MemberWidget(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__attributePath = new internal.PrimitiveProperty(MemberWidget, _this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            _this.__readOnlyStyle = new internal.EnumProperty(MemberWidget, _this, "readOnlyStyle", ReadOnlyStyle.Inherit, ReadOnlyStyle);
            if (arguments.length < 4) {
                throw new Error("new MemberWidget() cannot be invoked directly, please use 'model.pages.createMemberWidget()'");
            }
            return _this;
        }
        Object.defineProperty(MemberWidget.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberWidget.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberWidget.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberWidget.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberWidget.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberWidget.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberWidget.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberWidget.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberWidget.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberWidget.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberWidget.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberWidget.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberWidget.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberWidget.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberWidget.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberWidget.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberWidget.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberWidget.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberWidget.prototype, "attributePath", {
            /**
             * The value of this property is conceptually of type paths.AttributePath.
             */
            get: function () { return this.__attributePath.get(); },
            set: function (newValue) { this.__attributePath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberWidget.prototype, "readOnlyStyle", {
            /**
             * In version 6.9.0: introduced
             */
            get: function () { return this.__readOnlyStyle.get(); },
            set: function (newValue) { this.__readOnlyStyle.set(newValue); },
            enumerable: true,
            configurable: true
        });
        MemberWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            if (this.__readOnlyStyle.isAvailable) {
                this.readOnlyStyle = ReadOnlyStyle.Inherit;
            }
        };
        return MemberWidget;
    }(InputWidget));
    MemberWidget.typeName = "Pages$MemberWidget";
    MemberWidget.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "readOnlyStyle": {
                "introduced": "6.9.0"
            }
        }
    }, internal.StructureType.Element);
    pages.MemberWidget = MemberWidget;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var AssociationWidget = (function (_super) {
        __extends(AssociationWidget, _super);
        function AssociationWidget(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__selectorSource = new internal.PartProperty(AssociationWidget, _this, "selectorSource", null, true);
            _this.__selectPageSettings = new internal.PartProperty(AssociationWidget, _this, "selectPageSettings", null, true);
            _this.__onChangeMicroflowSettings = new internal.PartProperty(AssociationWidget, _this, "onChangeMicroflowSettings", null, true);
            if (arguments.length < 4) {
                throw new Error("new AssociationWidget() cannot be invoked directly, please use 'model.pages.createAssociationWidget()'");
            }
            return _this;
        }
        Object.defineProperty(AssociationWidget.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "selectorSource", {
            get: function () { return this.__selectorSource.get(); },
            set: function (newValue) { this.__selectorSource.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "selectPageSettings", {
            get: function () { return this.__selectPageSettings.get(); },
            set: function (newValue) { this.__selectPageSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationWidget.prototype, "onChangeMicroflowSettings", {
            get: function () { return this.__onChangeMicroflowSettings.get(); },
            set: function (newValue) { this.__onChangeMicroflowSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        AssociationWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.onChangeMicroflowSettings = MicroflowSettings.create(this.model);
            this.selectPageSettings = PageSettings.create(this.model);
            this.selectorSource = SelectorXPathSource.create(this.model);
        };
        return AssociationWidget;
    }(MemberWidget));
    AssociationWidget.typeName = "Pages$AssociationWidget";
    AssociationWidget.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "selectorSource": {
                "required": {
                    "currentValue": true
                }
            },
            "selectPageSettings": {
                "required": {
                    "currentValue": true
                }
            },
            "onChangeMicroflowSettings": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.AssociationWidget = AssociationWidget;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var AttributeWidget = (function (_super) {
        __extends(AttributeWidget, _super);
        function AttributeWidget(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__required = new internal.PrimitiveProperty(AttributeWidget, _this, "required", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__requiredMessage = new internal.PartProperty(AttributeWidget, _this, "requiredMessage", null, true);
            _this.__onChangeMicroflowSettings = new internal.PartProperty(AttributeWidget, _this, "onChangeMicroflowSettings", null, true);
            _this.__onEnterMicroflowSettings = new internal.PartProperty(AttributeWidget, _this, "onEnterMicroflowSettings", null, true);
            _this.__onLeaveMicroflowSettings = new internal.PartProperty(AttributeWidget, _this, "onLeaveMicroflowSettings", null, true);
            if (arguments.length < 4) {
                throw new Error("new AttributeWidget() cannot be invoked directly, please use 'model.pages.createAttributeWidget()'");
            }
            return _this;
        }
        Object.defineProperty(AttributeWidget.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "required", {
            get: function () { return this.__required.get(); },
            set: function (newValue) { this.__required.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "requiredMessage", {
            get: function () { return this.__requiredMessage.get(); },
            set: function (newValue) { this.__requiredMessage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "onChangeMicroflowSettings", {
            get: function () { return this.__onChangeMicroflowSettings.get(); },
            set: function (newValue) { this.__onChangeMicroflowSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "onEnterMicroflowSettings", {
            get: function () { return this.__onEnterMicroflowSettings.get(); },
            set: function (newValue) { this.__onEnterMicroflowSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidget.prototype, "onLeaveMicroflowSettings", {
            get: function () { return this.__onLeaveMicroflowSettings.get(); },
            set: function (newValue) { this.__onLeaveMicroflowSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        AttributeWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.onChangeMicroflowSettings = MicroflowSettings.create(this.model);
            this.onEnterMicroflowSettings = MicroflowSettings.create(this.model);
            this.onLeaveMicroflowSettings = MicroflowSettings.create(this.model);
            this.requiredMessage = texts_1.texts.Text.create(this.model);
        };
        return AttributeWidget;
    }(MemberWidget));
    AttributeWidget.typeName = "Pages$AttributeWidget";
    AttributeWidget.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "requiredMessage": {
                "required": {
                    "currentValue": true
                }
            },
            "onChangeMicroflowSettings": {
                "required": {
                    "currentValue": true
                }
            },
            "onEnterMicroflowSettings": {
                "required": {
                    "currentValue": true
                }
            },
            "onLeaveMicroflowSettings": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.AttributeWidget = AttributeWidget;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var AttributeWidgetWithPlaceholder = (function (_super) {
        __extends(AttributeWidgetWithPlaceholder, _super);
        function AttributeWidgetWithPlaceholder(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__placeholder = new internal.PartProperty(AttributeWidgetWithPlaceholder, _this, "placeholder", null, true);
            if (arguments.length < 4) {
                throw new Error("new AttributeWidgetWithPlaceholder() cannot be invoked directly, please use 'model.pages.createAttributeWidgetWithPlaceholder()'");
            }
            return _this;
        }
        Object.defineProperty(AttributeWidgetWithPlaceholder.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidgetWithPlaceholder.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidgetWithPlaceholder.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidgetWithPlaceholder.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidgetWithPlaceholder.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidgetWithPlaceholder.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidgetWithPlaceholder.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidgetWithPlaceholder.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidgetWithPlaceholder.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidgetWithPlaceholder.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidgetWithPlaceholder.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidgetWithPlaceholder.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidgetWithPlaceholder.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidgetWithPlaceholder.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidgetWithPlaceholder.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidgetWithPlaceholder.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidgetWithPlaceholder.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidgetWithPlaceholder.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeWidgetWithPlaceholder.prototype, "placeholder", {
            get: function () { return this.__placeholder.get(); },
            set: function (newValue) { this.__placeholder.set(newValue); },
            enumerable: true,
            configurable: true
        });
        AttributeWidgetWithPlaceholder.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.placeholder = texts_1.texts.Text.create(this.model);
        };
        return AttributeWidgetWithPlaceholder;
    }(AttributeWidget));
    AttributeWidgetWithPlaceholder.typeName = "Pages$AttributeWidgetWithPlaceholder";
    AttributeWidgetWithPlaceholder.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "placeholder": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.AttributeWidgetWithPlaceholder = AttributeWidgetWithPlaceholder;
    /**
     * See: {@link https://docs.mendix.com/refguide7/close-page-button relevant section in reference guide}
     */
    var BackButton = (function (_super) {
        __extends(BackButton, _super);
        function BackButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new BackButton() cannot be invoked directly, please use 'model.pages.createBackButton()'");
            }
            return _this;
        }
        Object.defineProperty(BackButton.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BackButton.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BackButton.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BackButton.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BackButton.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BackButton.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BackButton.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BackButton.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BackButton.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BackButton.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BackButton.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BackButton.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BackButton.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BackButton.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BackButton.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BackButton.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BackButton.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BackButton.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        BackButton.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, BackButton.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, BackButton, "footerWidget", false);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        BackButton.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        BackButton.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        BackButton.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        BackButton.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, BackButton, "leftWidget", false);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        BackButton.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, BackButton, "rightWidget", false);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        BackButton.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        BackButton.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        BackButton.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        BackButton.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        BackButton.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        BackButton.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        BackButton.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        BackButton.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        BackButton.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, BackButton, "firstWidget", false);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        BackButton.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, BackButton, "secondWidget", false);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        BackButton.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        BackButton.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        BackButton.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BackButton, "widget", false);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        BackButton.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, BackButton, "widgets", true);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        BackButton.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, BackButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, BackButton, "parameterWidget", false);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        BackButton.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, BackButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, BackButton, "reportWidget", false);
        };
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BackButton.create = function (model) {
            return internal.instancehelpers.createElement(model, BackButton);
        };
        BackButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Back";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Terug";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        return BackButton;
    }(Button));
    BackButton.typeName = "Pages$BackButton";
    BackButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.BackButton = BackButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/cancel-button relevant section in reference guide}
     */
    var CancelButton = (function (_super) {
        __extends(CancelButton, _super);
        function CancelButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__closePage = new internal.PrimitiveProperty(CancelButton, _this, "closePage", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new CancelButton() cannot be invoked directly, please use 'model.pages.createCancelButton()'");
            }
            return _this;
        }
        Object.defineProperty(CancelButton.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CancelButton.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CancelButton.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CancelButton.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CancelButton.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CancelButton.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CancelButton.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CancelButton.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CancelButton.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CancelButton.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CancelButton.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CancelButton.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CancelButton.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CancelButton.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CancelButton.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CancelButton.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CancelButton.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CancelButton.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CancelButton.prototype, "closePage", {
            /**
             * In version 6.7.0: introduced
             */
            get: function () { return this.__closePage.get(); },
            set: function (newValue) { this.__closePage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        CancelButton.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, CancelButton.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, CancelButton, "footerWidget", false);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        CancelButton.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        CancelButton.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        CancelButton.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        CancelButton.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, CancelButton, "leftWidget", false);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        CancelButton.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, CancelButton, "rightWidget", false);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        CancelButton.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        CancelButton.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        CancelButton.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        CancelButton.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        CancelButton.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        CancelButton.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        CancelButton.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        CancelButton.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        CancelButton.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, CancelButton, "firstWidget", false);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        CancelButton.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, CancelButton, "secondWidget", false);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        CancelButton.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        CancelButton.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        CancelButton.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CancelButton, "widget", false);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        CancelButton.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, CancelButton, "widgets", true);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        CancelButton.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, CancelButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, CancelButton, "parameterWidget", false);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        CancelButton.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, CancelButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, CancelButton, "reportWidget", false);
        };
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CancelButton.create = function (model) {
            return internal.instancehelpers.createElement(model, CancelButton);
        };
        CancelButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Cancel";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Annuleren";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
            if (this.__closePage.isAvailable) {
                this.closePage = true;
            }
        };
        return CancelButton;
    }(Button));
    CancelButton.typeName = "Pages$CancelButton";
    CancelButton.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "closePage": {
                "introduced": "6.7.0"
            }
        }
    }, internal.StructureType.Element);
    pages.CancelButton = CancelButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/check-box relevant section in reference guide}
     */
    var CheckBox = (function (_super) {
        __extends(CheckBox, _super);
        function CheckBox(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new CheckBox() cannot be invoked directly, please use 'model.pages.createCheckBox()'");
            }
            return _this;
        }
        Object.defineProperty(CheckBox.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        CheckBox.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, CheckBox.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, CheckBox, "footerWidget", false);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        CheckBox.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        CheckBox.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        CheckBox.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        CheckBox.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, CheckBox, "leftWidget", false);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        CheckBox.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, CheckBox, "rightWidget", false);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        CheckBox.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        CheckBox.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        CheckBox.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        CheckBox.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        CheckBox.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        CheckBox.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        CheckBox.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        CheckBox.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        CheckBox.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, CheckBox, "firstWidget", false);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        CheckBox.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, CheckBox, "secondWidget", false);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        CheckBox.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        CheckBox.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        CheckBox.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widget", false);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        CheckBox.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, CheckBox, "widgets", true);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        CheckBox.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, CheckBox.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, CheckBox, "parameterWidget", false);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        CheckBox.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, CheckBox.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, CheckBox, "reportWidget", false);
        };
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CheckBox.create = function (model) {
            return internal.instancehelpers.createElement(model, CheckBox);
        };
        CheckBox.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return CheckBox;
    }(AttributeWidget));
    CheckBox.typeName = "Pages$CheckBox";
    CheckBox.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.CheckBox = CheckBox;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ClientAction = (function (_super) {
        __extends(ClientAction, _super);
        function ClientAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new ClientAction() cannot be invoked directly, please use 'model.pages.createClientAction()'");
            }
            return _this;
        }
        Object.defineProperty(ClientAction.prototype, "containerAsMenuItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, menus_1.menus.MenuItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ClientAction.prototype, "containerAsActionButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ClientAction.prototype, "containerAsActionItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ClientAction.prototype, "containerAsDataViewActionButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataViewActionButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ClientAction.prototype, "containerAsGridActionButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, GridActionButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ClientAction.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ClientAction.prototype, "containerAsStaticImageViewer", {
            get: function () { return _super.prototype.getContainerAs.call(this, StaticImageViewer); },
            enumerable: true,
            configurable: true
        });
        ClientAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ClientAction;
    }(internal.Element));
    ClientAction.typeName = "Pages$ClientAction";
    ClientAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ClientAction = ClientAction;
    var ClientTemplate = (function (_super) {
        __extends(ClientTemplate, _super);
        function ClientTemplate(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__template = new internal.PartProperty(ClientTemplate, _this, "template", null, true);
            _this.__parameters = new internal.PartListProperty(ClientTemplate, _this, "parameters", []);
            if (arguments.length < 4) {
                throw new Error("new ClientTemplate() cannot be invoked directly, please use 'model.pages.createClientTemplate()'");
            }
            return _this;
        }
        Object.defineProperty(ClientTemplate.prototype, "containerAsButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, Button); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ClientTemplate.prototype, "containerAsControlBarButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBarButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ClientTemplate.prototype, "containerAsDynamicText", {
            get: function () { return _super.prototype.getContainerAs.call(this, DynamicText); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ClientTemplate.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ClientTemplate.prototype, "template", {
            get: function () { return this.__template.get(); },
            set: function (newValue) { this.__template.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ClientTemplate.prototype, "parameters", {
            get: function () { return this.__parameters.get(); },
            set: function (newValue) { this.__parameters.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'caption' property
         * of the parent Button element passed as argument.
         */
        ClientTemplate.createInButtonUnderCaption = function (container) {
            return internal.instancehelpers.createElement(container, ClientTemplate, "caption", false);
        };
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'caption' property
         * of the parent ControlBarButton element passed as argument.
         */
        ClientTemplate.createInControlBarButtonUnderCaption = function (container) {
            return internal.instancehelpers.createElement(container, ClientTemplate, "caption", false);
        };
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'content' property
         * of the parent DynamicText element passed as argument.
         */
        ClientTemplate.createInDynamicTextUnderContent = function (container) {
            return internal.instancehelpers.createElement(container, ClientTemplate, "content", false);
        };
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'caption' property
         * of the parent GroupBox element passed as argument.
         */
        ClientTemplate.createInGroupBoxUnderCaption = function (container) {
            return internal.instancehelpers.createElement(container, ClientTemplate, "caption", false);
        };
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ClientTemplate.create = function (model) {
            return internal.instancehelpers.createElement(model, ClientTemplate);
        };
        ClientTemplate.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.template = texts_1.texts.Text.create(this.model);
        };
        return ClientTemplate;
    }(internal.Element));
    ClientTemplate.typeName = "Pages$ClientTemplate";
    ClientTemplate.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "template": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ClientTemplate = ClientTemplate;
    var ClientTemplateParameter = (function (_super) {
        __extends(ClientTemplateParameter, _super);
        function ClientTemplateParameter(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__attributePath = new internal.PrimitiveProperty(ClientTemplateParameter, _this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ClientTemplateParameter() cannot be invoked directly, please use 'model.pages.createClientTemplateParameter()'");
            }
            return _this;
        }
        Object.defineProperty(ClientTemplateParameter.prototype, "containerAsClientTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ClientTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ClientTemplateParameter.prototype, "attributePath", {
            /**
             * The value of this property is conceptually of type paths.AttributePath.
             */
            get: function () { return this.__attributePath.get(); },
            set: function (newValue) { this.__attributePath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ClientTemplateParameter instance in the SDK and on the server.
         * The new ClientTemplateParameter will be automatically stored in the 'parameters' property
         * of the parent ClientTemplate element passed as argument.
         */
        ClientTemplateParameter.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ClientTemplateParameter, "parameters", true);
        };
        /**
         * Creates and returns a new ClientTemplateParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ClientTemplateParameter.create = function (model) {
            return internal.instancehelpers.createElement(model, ClientTemplateParameter);
        };
        ClientTemplateParameter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ClientTemplateParameter;
    }(internal.Element));
    ClientTemplateParameter.typeName = "Pages$ClientTemplateParameter";
    ClientTemplateParameter.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ClientTemplateParameter = ClientTemplateParameter;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var EntityWidget = (function (_super) {
        __extends(EntityWidget, _super);
        function EntityWidget(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__dataSource = new internal.PartProperty(EntityWidget, _this, "dataSource", null, false);
            if (arguments.length < 4) {
                throw new Error("new EntityWidget() cannot be invoked directly, please use 'model.pages.createEntityWidget()'");
            }
            return _this;
        }
        Object.defineProperty(EntityWidget.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityWidget.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityWidget.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityWidget.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityWidget.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityWidget.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityWidget.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityWidget.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityWidget.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityWidget.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityWidget.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityWidget.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityWidget.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityWidget.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityWidget.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityWidget.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityWidget.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityWidget.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityWidget.prototype, "dataSource", {
            get: function () { return this.__dataSource.get(); },
            set: function (newValue) { this.__dataSource.set(newValue); },
            enumerable: true,
            configurable: true
        });
        EntityWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return EntityWidget;
    }(ConditionallyVisibleWidget));
    EntityWidget.typeName = "Pages$EntityWidget";
    EntityWidget.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "dataSource": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.EntityWidget = EntityWidget;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ListenTargetWidget = (function (_super) {
        __extends(ListenTargetWidget, _super);
        function ListenTargetWidget(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new ListenTargetWidget() cannot be invoked directly, please use 'model.pages.createListenTargetWidget()'");
            }
            return _this;
        }
        Object.defineProperty(ListenTargetWidget.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListenTargetWidget.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListenTargetWidget.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListenTargetWidget.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListenTargetWidget.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListenTargetWidget.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListenTargetWidget.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListenTargetWidget.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListenTargetWidget.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListenTargetWidget.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListenTargetWidget.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListenTargetWidget.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListenTargetWidget.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListenTargetWidget.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListenTargetWidget.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListenTargetWidget.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListenTargetWidget.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListenTargetWidget.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        ListenTargetWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ListenTargetWidget;
    }(EntityWidget));
    ListenTargetWidget.typeName = "Pages$ListenTargetWidget";
    ListenTargetWidget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ListenTargetWidget = ListenTargetWidget;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var Grid = (function (_super) {
        __extends(Grid, _super);
        function Grid(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__isControlBarVisible = new internal.PrimitiveProperty(Grid, _this, "isControlBarVisible", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__isPagingEnabled = new internal.PrimitiveProperty(Grid, _this, "isPagingEnabled", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__selectionMode = new internal.EnumProperty(Grid, _this, "selectionMode", GridSelectionMode.Single, GridSelectionMode);
            _this.__selectFirst = new internal.PrimitiveProperty(Grid, _this, "selectFirst", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__defaultButtonTrigger = new internal.EnumProperty(Grid, _this, "defaultButtonTrigger", ClickTypeType.Double, ClickTypeType);
            _this.__refreshTime = new internal.PrimitiveProperty(Grid, _this, "refreshTime", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__controlBar = new internal.PartProperty(Grid, _this, "controlBar", null, true);
            if (arguments.length < 4) {
                throw new Error("new Grid() cannot be invoked directly, please use 'model.pages.createGrid()'");
            }
            return _this;
        }
        Object.defineProperty(Grid.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "isControlBarVisible", {
            get: function () { return this.__isControlBarVisible.get(); },
            set: function (newValue) { this.__isControlBarVisible.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "isPagingEnabled", {
            get: function () { return this.__isPagingEnabled.get(); },
            set: function (newValue) { this.__isPagingEnabled.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "selectionMode", {
            get: function () { return this.__selectionMode.get(); },
            set: function (newValue) { this.__selectionMode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "selectFirst", {
            get: function () { return this.__selectFirst.get(); },
            set: function (newValue) { this.__selectFirst.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "defaultButtonTrigger", {
            get: function () { return this.__defaultButtonTrigger.get(); },
            set: function (newValue) { this.__defaultButtonTrigger.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "refreshTime", {
            get: function () { return this.__refreshTime.get(); },
            set: function (newValue) { this.__refreshTime.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "controlBar", {
            get: function () { return this.__controlBar.get(); },
            set: function (newValue) { this.__controlBar.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Grid.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.controlBar = GridControlBar.create(this.model);
            this.dataSource = GridXPathSource.create(this.model);
            this.defaultButtonTrigger = ClickTypeType.Double;
            this.isControlBarVisible = true;
            this.isPagingEnabled = true;
            this.selectionMode = GridSelectionMode.Single;
        };
        return Grid;
    }(ListenTargetWidget));
    Grid.typeName = "Pages$Grid";
    Grid.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "controlBar": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.Grid = Grid;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ColumnGrid = (function (_super) {
        __extends(ColumnGrid, _super);
        function ColumnGrid(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__columns = new internal.PartListProperty(ColumnGrid, _this, "columns", []);
            _this.__numberOfRows = new internal.PrimitiveProperty(ColumnGrid, _this, "numberOfRows", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__showEmptyRows = new internal.PrimitiveProperty(ColumnGrid, _this, "showEmptyRows", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__widthUnit = new internal.EnumProperty(ColumnGrid, _this, "widthUnit", UnitEnum.Weight, UnitEnum);
            _this.__tooltipPage = new internal.ByNameReferenceProperty(ColumnGrid, _this, "tooltipPage", null, "Pages$Page");
            if (arguments.length < 4) {
                throw new Error("new ColumnGrid() cannot be invoked directly, please use 'model.pages.createColumnGrid()'");
            }
            return _this;
        }
        Object.defineProperty(ColumnGrid.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "columns", {
            get: function () { return this.__columns.get(); },
            set: function (newValue) { this.__columns.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "numberOfRows", {
            get: function () { return this.__numberOfRows.get(); },
            set: function (newValue) { this.__numberOfRows.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "showEmptyRows", {
            get: function () { return this.__showEmptyRows.get(); },
            set: function (newValue) { this.__showEmptyRows.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "widthUnit", {
            get: function () { return this.__widthUnit.get(); },
            set: function (newValue) { this.__widthUnit.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "tooltipPage", {
            get: function () { return this.__tooltipPage.get(); },
            set: function (newValue) { this.__tooltipPage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColumnGrid.prototype, "tooltipPageQualifiedName", {
            get: function () { return this.__tooltipPage.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        ColumnGrid.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.columns.replace([(function (gridColumn) {
                    gridColumn.width = 1;
                    return gridColumn;
                })(GridColumn.create(this.model))]);
            this.numberOfRows = 20;
            this.widthUnit = UnitEnum.Weight;
        };
        return ColumnGrid;
    }(Grid));
    ColumnGrid.typeName = "Pages$ColumnGrid";
    ColumnGrid.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ColumnGrid = ColumnGrid;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ControlBarItem = (function (_super) {
        __extends(ControlBarItem, _super);
        function ControlBarItem(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__name = new internal.PrimitiveProperty(ControlBarItem, _this, "name", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ControlBarItem() cannot be invoked directly, please use 'model.pages.createControlBarItem()'");
            }
            return _this;
        }
        Object.defineProperty(ControlBarItem.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlBarItem.prototype, "containerAsGridControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, GridControlBar); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlBarItem.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ControlBarItem.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ControlBarItem;
    }(internal.Element));
    ControlBarItem.typeName = "Pages$ControlBarItem";
    ControlBarItem.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ControlBarItem = ControlBarItem;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var SearchField = (function (_super) {
        __extends(SearchField, _super);
        function SearchField(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__caption = new internal.PartProperty(SearchField, _this, "caption", null, true);
            _this.__type = new internal.EnumProperty(SearchField, _this, "type", SearchFieldType.Normal, SearchFieldType);
            _this.__defaultValue = new internal.PrimitiveProperty(SearchField, _this, "defaultValue", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new SearchField() cannot be invoked directly, please use 'model.pages.createSearchField()'");
            }
            return _this;
        }
        Object.defineProperty(SearchField.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SearchField.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SearchField.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SearchField.prototype, "defaultValue", {
            get: function () { return this.__defaultValue.get(); },
            set: function (newValue) { this.__defaultValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        SearchField.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Caption";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.type = SearchFieldType.Normal;
        };
        return SearchField;
    }(ControlBarItem));
    SearchField.typeName = "Pages$SearchField";
    SearchField.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "caption": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.SearchField = SearchField;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var SingleSearchField = (function (_super) {
        __extends(SingleSearchField, _super);
        function SingleSearchField(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__attributePath = new internal.PrimitiveProperty(SingleSearchField, _this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            _this.__operator = new internal.EnumProperty(SingleSearchField, _this, "operator", SearchFieldOperator.Contains, SearchFieldOperator);
            if (arguments.length < 4) {
                throw new Error("new SingleSearchField() cannot be invoked directly, please use 'model.pages.createSingleSearchField()'");
            }
            return _this;
        }
        Object.defineProperty(SingleSearchField.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SingleSearchField.prototype, "attributePath", {
            /**
             * The value of this property is conceptually of type paths.AttributePath.
             */
            get: function () { return this.__attributePath.get(); },
            set: function (newValue) { this.__attributePath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SingleSearchField.prototype, "operator", {
            get: function () { return this.__operator.get(); },
            set: function (newValue) { this.__operator.set(newValue); },
            enumerable: true,
            configurable: true
        });
        SingleSearchField.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return SingleSearchField;
    }(SearchField));
    SingleSearchField.typeName = "Pages$SingleSearchField";
    SingleSearchField.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.SingleSearchField = SingleSearchField;
    /**
     * See: {@link https://docs.mendix.com/refguide7/comparison-search-field relevant section in reference guide}
     */
    var ComparisonSearchField = (function (_super) {
        __extends(ComparisonSearchField, _super);
        function ComparisonSearchField(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new ComparisonSearchField() cannot be invoked directly, please use 'model.pages.createComparisonSearchField()'");
            }
            return _this;
        }
        Object.defineProperty(ComparisonSearchField.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ComparisonSearchField instance in the SDK and on the server.
         * The new ComparisonSearchField will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        ComparisonSearchField.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ComparisonSearchField, "items", true);
        };
        /**
         * Creates and returns a new ComparisonSearchField instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ComparisonSearchField.create = function (model) {
            return internal.instancehelpers.createElement(model, ComparisonSearchField);
        };
        ComparisonSearchField.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.operator = SearchFieldOperator.Contains;
        };
        return ComparisonSearchField;
    }(SingleSearchField));
    ComparisonSearchField.typeName = "Pages$ComparisonSearchField";
    ComparisonSearchField.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ComparisonSearchField = ComparisonSearchField;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ConditionalSettings = (function (_super) {
        __extends(ConditionalSettings, _super);
        function ConditionalSettings(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__attribute = new internal.ByNameReferenceProperty(ConditionalSettings, _this, "attribute", null, "DomainModels$Attribute");
            _this.__conditions = new internal.PartListProperty(ConditionalSettings, _this, "conditions", []);
            _this.__expression = new internal.PrimitiveProperty(ConditionalSettings, _this, "expression", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ConditionalSettings() cannot be invoked directly, please use 'model.pages.createConditionalSettings()'");
            }
            return _this;
        }
        Object.defineProperty(ConditionalSettings.prototype, "containerAsConditionallyEditableWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, ConditionallyEditableWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalSettings.prototype, "containerAsConditionallyVisibleWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, ConditionallyVisibleWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalSettings.prototype, "containerAsControlBarButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBarButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalSettings.prototype, "containerAsLayoutGridRow", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridRow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalSettings.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalSettings.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalSettings.prototype, "containerAsTableRow", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableRow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalSettings.prototype, "attribute", {
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalSettings.prototype, "attributeQualifiedName", {
            get: function () { return this.__attribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalSettings.prototype, "conditions", {
            get: function () { return this.__conditions.get(); },
            set: function (newValue) { this.__conditions.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalSettings.prototype, "expression", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             *
             * In version 7.0.1: introduced
             */
            get: function () { return this.__expression.get(); },
            set: function (newValue) { this.__expression.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ConditionalSettings.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ConditionalSettings;
    }(internal.Element));
    ConditionalSettings.typeName = "Pages$ConditionalSettings";
    ConditionalSettings.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "expression": {
                "introduced": "7.0.1"
            }
        }
    }, internal.StructureType.Element);
    pages.ConditionalSettings = ConditionalSettings;
    var ConditionalEditabilitySettings = (function (_super) {
        __extends(ConditionalEditabilitySettings, _super);
        function ConditionalEditabilitySettings(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new ConditionalEditabilitySettings() cannot be invoked directly, please use 'model.pages.createConditionalEditabilitySettings()'");
            }
            return _this;
        }
        Object.defineProperty(ConditionalEditabilitySettings.prototype, "containerAsConditionallyEditableWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, ConditionallyEditableWidget); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ConditionalEditabilitySettings instance in the SDK and on the server.
         * The new ConditionalEditabilitySettings will be automatically stored in the 'conditionalEditabilitySettings' property
         * of the parent ConditionallyEditableWidget element passed as argument.
         */
        ConditionalEditabilitySettings.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ConditionalEditabilitySettings, "conditionalEditabilitySettings", false);
        };
        /**
         * Creates and returns a new ConditionalEditabilitySettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ConditionalEditabilitySettings.create = function (model) {
            return internal.instancehelpers.createElement(model, ConditionalEditabilitySettings);
        };
        ConditionalEditabilitySettings.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ConditionalEditabilitySettings;
    }(ConditionalSettings));
    ConditionalEditabilitySettings.typeName = "Pages$ConditionalEditabilitySettings";
    ConditionalEditabilitySettings.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ConditionalEditabilitySettings = ConditionalEditabilitySettings;
    var ConditionalVisibilitySettings = (function (_super) {
        __extends(ConditionalVisibilitySettings, _super);
        function ConditionalVisibilitySettings(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__moduleRoles = new internal.ByNameReferenceListProperty(ConditionalVisibilitySettings, _this, "moduleRoles", [], "Security$ModuleRole");
            _this.__ignoreSecurity = new internal.PrimitiveProperty(ConditionalVisibilitySettings, _this, "ignoreSecurity", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new ConditionalVisibilitySettings() cannot be invoked directly, please use 'model.pages.createConditionalVisibilitySettings()'");
            }
            return _this;
        }
        Object.defineProperty(ConditionalVisibilitySettings.prototype, "containerAsConditionallyVisibleWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, ConditionallyVisibleWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalVisibilitySettings.prototype, "containerAsControlBarButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBarButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalVisibilitySettings.prototype, "containerAsLayoutGridRow", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridRow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalVisibilitySettings.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalVisibilitySettings.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalVisibilitySettings.prototype, "containerAsTableRow", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableRow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalVisibilitySettings.prototype, "moduleRoles", {
            get: function () { return this.__moduleRoles.get(); },
            set: function (newValue) { this.__moduleRoles.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalVisibilitySettings.prototype, "moduleRolesQualifiedNames", {
            get: function () { return this.__moduleRoles.qualifiedNames(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalVisibilitySettings.prototype, "ignoreSecurity", {
            get: function () { return this.__ignoreSecurity.get(); },
            set: function (newValue) { this.__ignoreSecurity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent ConditionallyVisibleWidget element passed as argument.
         */
        ConditionalVisibilitySettings.createInConditionallyVisibleWidgetUnderConditionalVisibilitySettings = function (container) {
            return internal.instancehelpers.createElement(container, ConditionalVisibilitySettings, "conditionalVisibilitySettings", false);
        };
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent ControlBarButton element passed as argument.
         */
        ConditionalVisibilitySettings.createInControlBarButtonUnderConditionalVisibilitySettings = function (container) {
            return internal.instancehelpers.createElement(container, ConditionalVisibilitySettings, "conditionalVisibilitySettings", false);
        };
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent LayoutGridRow element passed as argument.
         */
        ConditionalVisibilitySettings.createInLayoutGridRowUnderConditionalVisibilitySettings = function (container) {
            return internal.instancehelpers.createElement(container, ConditionalVisibilitySettings, "conditionalVisibilitySettings", false);
        };
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent NavigationListItem element passed as argument.
         */
        ConditionalVisibilitySettings.createInNavigationListItemUnderConditionalVisibilitySettings = function (container) {
            return internal.instancehelpers.createElement(container, ConditionalVisibilitySettings, "conditionalVisibilitySettings", false);
        };
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent TabPage element passed as argument.
         */
        ConditionalVisibilitySettings.createInTabPageUnderConditionalVisibilitySettings = function (container) {
            return internal.instancehelpers.createElement(container, ConditionalVisibilitySettings, "conditionalVisibilitySettings", false);
        };
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent TableRow element passed as argument.
         */
        ConditionalVisibilitySettings.createInTableRowUnderConditionalVisibilitySettings = function (container) {
            return internal.instancehelpers.createElement(container, ConditionalVisibilitySettings, "conditionalVisibilitySettings", false);
        };
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ConditionalVisibilitySettings.create = function (model) {
            return internal.instancehelpers.createElement(model, ConditionalVisibilitySettings);
        };
        ConditionalVisibilitySettings.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ConditionalVisibilitySettings;
    }(ConditionalSettings));
    ConditionalVisibilitySettings.typeName = "Pages$ConditionalVisibilitySettings";
    ConditionalVisibilitySettings.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ConditionalVisibilitySettings = ConditionalVisibilitySettings;
    var ConfirmationInfo = (function (_super) {
        __extends(ConfirmationInfo, _super);
        function ConfirmationInfo(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__question = new internal.PartProperty(ConfirmationInfo, _this, "question", null, true);
            _this.__proceedButtonCaption = new internal.PartProperty(ConfirmationInfo, _this, "proceedButtonCaption", null, true);
            _this.__cancelButtonCaption = new internal.PartProperty(ConfirmationInfo, _this, "cancelButtonCaption", null, true);
            if (arguments.length < 4) {
                throw new Error("new ConfirmationInfo() cannot be invoked directly, please use 'model.pages.createConfirmationInfo()'");
            }
            return _this;
        }
        Object.defineProperty(ConfirmationInfo.prototype, "containerAsMicroflowSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConfirmationInfo.prototype, "question", {
            get: function () { return this.__question.get(); },
            set: function (newValue) { this.__question.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConfirmationInfo.prototype, "proceedButtonCaption", {
            get: function () { return this.__proceedButtonCaption.get(); },
            set: function (newValue) { this.__proceedButtonCaption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConfirmationInfo.prototype, "cancelButtonCaption", {
            get: function () { return this.__cancelButtonCaption.get(); },
            set: function (newValue) { this.__cancelButtonCaption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ConfirmationInfo instance in the SDK and on the server.
         * The new ConfirmationInfo will be automatically stored in the 'confirmationInfo' property
         * of the parent MicroflowSettings element passed as argument.
         */
        ConfirmationInfo.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ConfirmationInfo, "confirmationInfo", false);
        };
        /**
         * Creates and returns a new ConfirmationInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ConfirmationInfo.create = function (model) {
            return internal.instancehelpers.createElement(model, ConfirmationInfo);
        };
        ConfirmationInfo.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.cancelButtonCaption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Cancel";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                        translation.languageCode = "nl_NL";
                        translation.text = "Annuleren";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.proceedButtonCaption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Proceed";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                        translation.languageCode = "nl_NL";
                        translation.text = "Doorgaan";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.question = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Are you sure?";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                        translation.languageCode = "nl_NL";
                        translation.text = "Weet u het zeker?";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
        };
        return ConfirmationInfo;
    }(internal.Element));
    ConfirmationInfo.typeName = "Pages$ConfirmationInfo";
    ConfirmationInfo.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "question": {
                "required": {
                    "currentValue": true
                }
            },
            "proceedButtonCaption": {
                "required": {
                    "currentValue": true
                }
            },
            "cancelButtonCaption": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ConfirmationInfo = ConfirmationInfo;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ControlBar = (function (_super) {
        __extends(ControlBar, _super);
        function ControlBar(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__items = new internal.PartListProperty(ControlBar, _this, "items", []);
            if (arguments.length < 4) {
                throw new Error("new ControlBar() cannot be invoked directly, please use 'model.pages.createControlBar()'");
            }
            return _this;
        }
        Object.defineProperty(ControlBar.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlBar.prototype, "containerAsGrid", {
            get: function () { return _super.prototype.getContainerAs.call(this, Grid); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlBar.prototype, "containerAsGridBaseSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, GridBaseSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlBar.prototype, "containerAsGridDatabaseSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, GridDatabaseSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlBar.prototype, "items", {
            get: function () { return this.__items.get(); },
            set: function (newValue) { this.__items.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ControlBar.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ControlBar;
    }(internal.Element));
    ControlBar.typeName = "Pages$ControlBar";
    ControlBar.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ControlBar = ControlBar;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ControlBarButton = (function (_super) {
        __extends(ControlBarButton, _super);
        function ControlBarButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__caption = new internal.PartProperty(ControlBarButton, _this, "caption", null, false);
            _this.__tooltip = new internal.PartProperty(ControlBarButton, _this, "tooltip", null, true);
            _this.__icon = new internal.PartProperty(ControlBarButton, _this, "icon", null, false);
            _this.__class = new internal.PrimitiveProperty(ControlBarButton, _this, "class", "", internal.PrimitiveTypeEnum.String);
            _this.__style = new internal.PrimitiveProperty(ControlBarButton, _this, "style", "", internal.PrimitiveTypeEnum.String);
            _this.__conditionalVisibilitySettings = new internal.PartProperty(ControlBarButton, _this, "conditionalVisibilitySettings", null, false);
            _this.__buttonStyle = new internal.EnumProperty(ControlBarButton, _this, "buttonStyle", ButtonStyle.Default, ButtonStyle);
            if (arguments.length < 4) {
                throw new Error("new ControlBarButton() cannot be invoked directly, please use 'model.pages.createControlBarButton()'");
            }
            return _this;
        }
        Object.defineProperty(ControlBarButton.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlBarButton.prototype, "containerAsGridControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, GridControlBar); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlBarButton.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlBarButton.prototype, "tooltip", {
            get: function () { return this.__tooltip.get(); },
            set: function (newValue) { this.__tooltip.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlBarButton.prototype, "icon", {
            get: function () { return this.__icon.get(); },
            set: function (newValue) { this.__icon.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlBarButton.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlBarButton.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlBarButton.prototype, "conditionalVisibilitySettings", {
            get: function () { return this.__conditionalVisibilitySettings.get(); },
            set: function (newValue) { this.__conditionalVisibilitySettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlBarButton.prototype, "buttonStyle", {
            get: function () { return this.__buttonStyle.get(); },
            set: function (newValue) { this.__buttonStyle.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ControlBarButton.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.buttonStyle = ButtonStyle.Default;
            this.tooltip = texts_1.texts.Text.create(this.model);
        };
        return ControlBarButton;
    }(ControlBarItem));
    ControlBarButton.typeName = "Pages$ControlBarButton";
    ControlBarButton.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "caption": {
                "required": {
                    "currentValue": true
                }
            },
            "tooltip": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ControlBarButton = ControlBarButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-grid relevant section in reference guide}
     */
    var DataGrid = (function (_super) {
        __extends(DataGrid, _super);
        function DataGrid(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new DataGrid() cannot be invoked directly, please use 'model.pages.createDataGrid()'");
            }
            return _this;
        }
        Object.defineProperty(DataGrid.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        DataGrid.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, DataGrid.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, DataGrid, "footerWidget", false);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        DataGrid.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        DataGrid.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        DataGrid.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        DataGrid.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataGrid, "leftWidget", false);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        DataGrid.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataGrid, "rightWidget", false);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        DataGrid.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        DataGrid.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        DataGrid.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        DataGrid.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        DataGrid.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        DataGrid.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        DataGrid.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        DataGrid.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        DataGrid.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataGrid, "firstWidget", false);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        DataGrid.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataGrid, "secondWidget", false);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        DataGrid.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        DataGrid.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        DataGrid.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widget", false);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        DataGrid.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, DataGrid, "widgets", true);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        DataGrid.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, DataGrid.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, DataGrid, "parameterWidget", false);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        DataGrid.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, DataGrid.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, DataGrid, "reportWidget", false);
        };
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataGrid.create = function (model) {
            return internal.instancehelpers.createElement(model, DataGrid);
        };
        DataGrid.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return DataGrid;
    }(ColumnGrid));
    DataGrid.typeName = "Pages$DataGrid";
    DataGrid.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.DataGrid = DataGrid;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var GridControlBarButton = (function (_super) {
        __extends(GridControlBarButton, _super);
        function GridControlBarButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new GridControlBarButton() cannot be invoked directly, please use 'model.pages.createGridControlBarButton()'");
            }
            return _this;
        }
        Object.defineProperty(GridControlBarButton.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridControlBarButton.prototype, "containerAsGridControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, GridControlBar); },
            enumerable: true,
            configurable: true
        });
        GridControlBarButton.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return GridControlBarButton;
    }(ControlBarButton));
    GridControlBarButton.typeName = "Pages$GridControlBarButton";
    GridControlBarButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.GridControlBarButton = GridControlBarButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/add-button relevant section in reference guide}
     */
    var DataGridAddButton = (function (_super) {
        __extends(DataGridAddButton, _super);
        function DataGridAddButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__pageSettings = new internal.PartProperty(DataGridAddButton, _this, "pageSettings", null, true);
            if (arguments.length < 4) {
                throw new Error("new DataGridAddButton() cannot be invoked directly, please use 'model.pages.createDataGridAddButton()'");
            }
            return _this;
        }
        Object.defineProperty(DataGridAddButton.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridAddButton.prototype, "pageSettings", {
            get: function () { return this.__pageSettings.get(); },
            set: function (newValue) { this.__pageSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DataGridAddButton instance in the SDK and on the server.
         * The new DataGridAddButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        DataGridAddButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataGridAddButton, "items", true);
        };
        /**
         * Creates and returns a new DataGridAddButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataGridAddButton.create = function (model) {
            return internal.instancehelpers.createElement(model, DataGridAddButton);
        };
        DataGridAddButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Add";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Toevoegen";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
            this.pageSettings = PageSettings.create(this.model);
        };
        return DataGridAddButton;
    }(GridControlBarButton));
    DataGridAddButton.typeName = "Pages$DataGridAddButton";
    DataGridAddButton.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "pageSettings": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.DataGridAddButton = DataGridAddButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/export-to-csv-button relevant section in reference guide}
     */
    var DataGridExportToCSVButton = (function (_super) {
        __extends(DataGridExportToCSVButton, _super);
        function DataGridExportToCSVButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__maxNumberOfRows = new internal.PrimitiveProperty(DataGridExportToCSVButton, _this, "maxNumberOfRows", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__decimalSeparator = new internal.PrimitiveProperty(DataGridExportToCSVButton, _this, "decimalSeparator", "", internal.PrimitiveTypeEnum.String);
            _this.__groupSeparator = new internal.PrimitiveProperty(DataGridExportToCSVButton, _this, "groupSeparator", "", internal.PrimitiveTypeEnum.String);
            _this.__delimiter = new internal.PrimitiveProperty(DataGridExportToCSVButton, _this, "delimiter", "", internal.PrimitiveTypeEnum.String);
            _this.__generateExcelHint = new internal.PrimitiveProperty(DataGridExportToCSVButton, _this, "generateExcelHint", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__useGridDateFormat = new internal.PrimitiveProperty(DataGridExportToCSVButton, _this, "useGridDateFormat", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new DataGridExportToCSVButton() cannot be invoked directly, please use 'model.pages.createDataGridExportToCSVButton()'");
            }
            return _this;
        }
        Object.defineProperty(DataGridExportToCSVButton.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridExportToCSVButton.prototype, "maxNumberOfRows", {
            get: function () { return this.__maxNumberOfRows.get(); },
            set: function (newValue) { this.__maxNumberOfRows.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridExportToCSVButton.prototype, "decimalSeparator", {
            get: function () { return this.__decimalSeparator.get(); },
            set: function (newValue) { this.__decimalSeparator.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridExportToCSVButton.prototype, "groupSeparator", {
            get: function () { return this.__groupSeparator.get(); },
            set: function (newValue) { this.__groupSeparator.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridExportToCSVButton.prototype, "delimiter", {
            get: function () { return this.__delimiter.get(); },
            set: function (newValue) { this.__delimiter.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridExportToCSVButton.prototype, "generateExcelHint", {
            get: function () { return this.__generateExcelHint.get(); },
            set: function (newValue) { this.__generateExcelHint.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridExportToCSVButton.prototype, "useGridDateFormat", {
            get: function () { return this.__useGridDateFormat.get(); },
            set: function (newValue) { this.__useGridDateFormat.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DataGridExportToCSVButton instance in the SDK and on the server.
         * The new DataGridExportToCSVButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        DataGridExportToCSVButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataGridExportToCSVButton, "items", true);
        };
        /**
         * Creates and returns a new DataGridExportToCSVButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataGridExportToCSVButton.create = function (model) {
            return internal.instancehelpers.createElement(model, DataGridExportToCSVButton);
        };
        DataGridExportToCSVButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Export to CSV";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Naar CSV exporteren";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
            this.decimalSeparator = ".";
            this.delimiter = ";";
            this.groupSeparator = ",";
            this.maxNumberOfRows = 1000;
        };
        return DataGridExportToCSVButton;
    }(GridControlBarButton));
    DataGridExportToCSVButton.typeName = "Pages$DataGridExportToCSVButton";
    DataGridExportToCSVButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.DataGridExportToCSVButton = DataGridExportToCSVButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/export-to-excel-button relevant section in reference guide}
     */
    var DataGridExportToExcelButton = (function (_super) {
        __extends(DataGridExportToExcelButton, _super);
        function DataGridExportToExcelButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__maxNumberOfRows = new internal.PrimitiveProperty(DataGridExportToExcelButton, _this, "maxNumberOfRows", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__useExcelDateType = new internal.PrimitiveProperty(DataGridExportToExcelButton, _this, "useExcelDateType", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new DataGridExportToExcelButton() cannot be invoked directly, please use 'model.pages.createDataGridExportToExcelButton()'");
            }
            return _this;
        }
        Object.defineProperty(DataGridExportToExcelButton.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridExportToExcelButton.prototype, "maxNumberOfRows", {
            get: function () { return this.__maxNumberOfRows.get(); },
            set: function (newValue) { this.__maxNumberOfRows.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridExportToExcelButton.prototype, "useExcelDateType", {
            get: function () { return this.__useExcelDateType.get(); },
            set: function (newValue) { this.__useExcelDateType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DataGridExportToExcelButton instance in the SDK and on the server.
         * The new DataGridExportToExcelButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        DataGridExportToExcelButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataGridExportToExcelButton, "items", true);
        };
        /**
         * Creates and returns a new DataGridExportToExcelButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataGridExportToExcelButton.create = function (model) {
            return internal.instancehelpers.createElement(model, DataGridExportToExcelButton);
        };
        DataGridExportToExcelButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Export to Excel";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Naar Excel exporteren";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
            this.maxNumberOfRows = 1000;
            this.useExcelDateType = true;
        };
        return DataGridExportToExcelButton;
    }(GridControlBarButton));
    DataGridExportToExcelButton.typeName = "Pages$DataGridExportToExcelButton";
    DataGridExportToExcelButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.DataGridExportToExcelButton = DataGridExportToExcelButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/remove-button relevant section in reference guide}
     */
    var DataGridRemoveButton = (function (_super) {
        __extends(DataGridRemoveButton, _super);
        function DataGridRemoveButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new DataGridRemoveButton() cannot be invoked directly, please use 'model.pages.createDataGridRemoveButton()'");
            }
            return _this;
        }
        Object.defineProperty(DataGridRemoveButton.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DataGridRemoveButton instance in the SDK and on the server.
         * The new DataGridRemoveButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        DataGridRemoveButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataGridRemoveButton, "items", true);
        };
        /**
         * Creates and returns a new DataGridRemoveButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataGridRemoveButton.create = function (model) {
            return internal.instancehelpers.createElement(model, DataGridRemoveButton);
        };
        DataGridRemoveButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Remove";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Weghalen";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        return DataGridRemoveButton;
    }(GridControlBarButton));
    DataGridRemoveButton.typeName = "Pages$DataGridRemoveButton";
    DataGridRemoveButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.DataGridRemoveButton = DataGridRemoveButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view relevant section in reference guide}
     */
    var DataView = (function (_super) {
        __extends(DataView, _super);
        function DataView(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__widget = new internal.PartProperty(DataView, _this, "widget", null, false);
            _this.__footerWidget = new internal.PartProperty(DataView, _this, "footerWidget", null, false);
            _this.__editable = new internal.PrimitiveProperty(DataView, _this, "editable", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__showControlBar = new internal.PrimitiveProperty(DataView, _this, "showControlBar", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__showFooter = new internal.PrimitiveProperty(DataView, _this, "showFooter", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__closeOnSaveOrCancel = new internal.PrimitiveProperty(DataView, _this, "closeOnSaveOrCancel", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__useSchema = new internal.PrimitiveProperty(DataView, _this, "useSchema", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__noEntityMessage = new internal.PartProperty(DataView, _this, "noEntityMessage", null, true);
            _this.__labelWidth = new internal.PrimitiveProperty(DataView, _this, "labelWidth", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__controlBar = new internal.PartProperty(DataView, _this, "controlBar", null, false);
            _this.__readOnlyStyle = new internal.EnumProperty(DataView, _this, "readOnlyStyle", DataViewReadOnlyStyle.Control, DataViewReadOnlyStyle);
            if (arguments.length < 4) {
                throw new Error("new DataView() cannot be invoked directly, please use 'model.pages.createDataView()'");
            }
            return _this;
        }
        Object.defineProperty(DataView.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "footerWidget", {
            /**
             * In version 6.7.0: introduced
             */
            get: function () { return this.__footerWidget.get(); },
            set: function (newValue) { this.__footerWidget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "editable", {
            get: function () { return this.__editable.get(); },
            set: function (newValue) { this.__editable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "showControlBar", {
            /**
             * In version 6.7.0: deleted
             */
            get: function () { return this.__showControlBar.get(); },
            set: function (newValue) { this.__showControlBar.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "showFooter", {
            /**
             * In version 6.7.0: introduced
             */
            get: function () { return this.__showFooter.get(); },
            set: function (newValue) { this.__showFooter.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "closeOnSaveOrCancel", {
            /**
             * In version 6.7.0: deleted
             */
            get: function () { return this.__closeOnSaveOrCancel.get(); },
            set: function (newValue) { this.__closeOnSaveOrCancel.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "useSchema", {
            get: function () { return this.__useSchema.get(); },
            set: function (newValue) { this.__useSchema.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "noEntityMessage", {
            get: function () { return this.__noEntityMessage.get(); },
            set: function (newValue) { this.__noEntityMessage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "labelWidth", {
            get: function () { return this.__labelWidth.get(); },
            set: function (newValue) { this.__labelWidth.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "controlBar", {
            /**
             * In version 6.7.0: deleted
             * In version 6.5.0: added optional
             */
            get: function () { return this.__controlBar.get(); },
            set: function (newValue) { this.__controlBar.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "readOnlyStyle", {
            /**
             * In version 6.9.0: introduced
             */
            get: function () { return this.__readOnlyStyle.get(); },
            set: function (newValue) { this.__readOnlyStyle.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        DataView.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, DataView.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, DataView, "footerWidget", false);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        DataView.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        DataView.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        DataView.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        DataView.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataView, "leftWidget", false);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        DataView.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataView, "rightWidget", false);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        DataView.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        DataView.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        DataView.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        DataView.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        DataView.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        DataView.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        DataView.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        DataView.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        DataView.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataView, "firstWidget", false);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        DataView.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataView, "secondWidget", false);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        DataView.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        DataView.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        DataView.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DataView, "widget", false);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        DataView.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, DataView, "widgets", true);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        DataView.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, DataView.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, DataView, "parameterWidget", false);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        DataView.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, DataView.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, DataView, "reportWidget", false);
        };
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataView.create = function (model) {
            return internal.instancehelpers.createElement(model, DataView);
        };
        DataView.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            if (this.__closeOnSaveOrCancel.isAvailable) {
                this.closeOnSaveOrCancel = true;
            }
            if (this.__controlBar.isAvailable) {
                this.controlBar = DataViewControlBar.create(this.model);
            }
            this.dataSource = DataViewSource.create(this.model);
            this.editable = true;
            this.labelWidth = 3;
            this.noEntityMessage = texts_1.texts.Text.create(this.model);
            if (this.__readOnlyStyle.isAvailable) {
                this.readOnlyStyle = DataViewReadOnlyStyle.Control;
            }
            if (this.__showControlBar.isAvailable) {
                this.showControlBar = true;
            }
            if (this.__showFooter.isAvailable) {
                this.showFooter = true;
            }
        };
        return DataView;
    }(EntityWidget));
    DataView.typeName = "Pages$DataView";
    DataView.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "footerWidget": {
                "introduced": "6.7.0"
            },
            "showControlBar": {
                "deleted": "6.7.0",
                "deletionMessage": null
            },
            "showFooter": {
                "introduced": "6.7.0"
            },
            "closeOnSaveOrCancel": {
                "deleted": "6.7.0",
                "deletionMessage": null
            },
            "noEntityMessage": {
                "required": {
                    "currentValue": true
                }
            },
            "controlBar": {
                "deleted": "6.7.0",
                "deletionMessage": null,
                "required": {
                    "currentValue": false,
                    "changedIn": [
                        "6.5.0"
                    ]
                }
            },
            "readOnlyStyle": {
                "introduced": "6.9.0"
            }
        }
    }, internal.StructureType.Element);
    pages.DataView = DataView;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.

     *
     * In version 6.7.0: deleted
     */
    var DataViewControlBarButton = (function (_super) {
        __extends(DataViewControlBarButton, _super);
        function DataViewControlBarButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__tabIndex = new internal.PrimitiveProperty(DataViewControlBarButton, _this, "tabIndex", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new DataViewControlBarButton() cannot be invoked directly, please use 'model.pages.createDataViewControlBarButton()'");
            }
            return _this;
        }
        Object.defineProperty(DataViewControlBarButton.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataViewControlBarButton.prototype, "tabIndex", {
            get: function () { return this.__tabIndex.get(); },
            set: function (newValue) { this.__tabIndex.set(newValue); },
            enumerable: true,
            configurable: true
        });
        DataViewControlBarButton.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return DataViewControlBarButton;
    }(ControlBarButton));
    DataViewControlBarButton.typeName = "Pages$DataViewControlBarButton";
    DataViewControlBarButton.versionInfo = new exports.StructureVersionInfo({
        "deleted": "6.7.0",
        "deletionMessage": null
    }, internal.StructureType.Element);
    pages.DataViewControlBarButton = DataViewControlBarButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-action-button relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    var DataViewActionButton = (function (_super) {
        __extends(DataViewActionButton, _super);
        function DataViewActionButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__action = new internal.PartProperty(DataViewActionButton, _this, "action", null, true);
            if (arguments.length < 4) {
                throw new Error("new DataViewActionButton() cannot be invoked directly, please use 'model.pages.createDataViewActionButton()'");
            }
            return _this;
        }
        Object.defineProperty(DataViewActionButton.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataViewActionButton.prototype, "action", {
            get: function () { return this.__action.get(); },
            set: function (newValue) { this.__action.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DataViewActionButton instance in the SDK and on the server.
         * The new DataViewActionButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
         */
        DataViewActionButton.createIn = function (container) {
            internal.createInVersionCheck(container.model, DataViewActionButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0"]);
            return internal.instancehelpers.createElement(container, DataViewActionButton, "items", true);
        };
        /**
         * Creates and returns a new DataViewActionButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataViewActionButton.create = function (model) {
            return internal.instancehelpers.createElement(model, DataViewActionButton);
        };
        DataViewActionButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.action = NoClientAction.create(this.model);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Action";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Actie";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        return DataViewActionButton;
    }(DataViewControlBarButton));
    DataViewActionButton.typeName = "Pages$DataViewActionButton";
    DataViewActionButton.versionInfo = new exports.StructureVersionInfo({
        "deleted": "6.7.0",
        "deletionMessage": "Use 'ActionButton' in data view footer instead.",
        "properties": {
            "action": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.DataViewActionButton = DataViewActionButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-cancel-button relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    var DataViewCancelButton = (function (_super) {
        __extends(DataViewCancelButton, _super);
        function DataViewCancelButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new DataViewCancelButton() cannot be invoked directly, please use 'model.pages.createDataViewCancelButton()'");
            }
            return _this;
        }
        Object.defineProperty(DataViewCancelButton.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DataViewCancelButton instance in the SDK and on the server.
         * The new DataViewCancelButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
         */
        DataViewCancelButton.createIn = function (container) {
            internal.createInVersionCheck(container.model, DataViewCancelButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0"]);
            return internal.instancehelpers.createElement(container, DataViewCancelButton, "items", true);
        };
        /**
         * Creates and returns a new DataViewCancelButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataViewCancelButton.create = function (model) {
            return internal.instancehelpers.createElement(model, DataViewCancelButton);
        };
        DataViewCancelButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Cancel";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Annuleren";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        return DataViewCancelButton;
    }(DataViewControlBarButton));
    DataViewCancelButton.typeName = "Pages$DataViewCancelButton";
    DataViewCancelButton.versionInfo = new exports.StructureVersionInfo({
        "deleted": "6.7.0",
        "deletionMessage": "Use 'CancelButton' in data view footer instead."
    }, internal.StructureType.Element);
    pages.DataViewCancelButton = DataViewCancelButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-close-button relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    var DataViewCloseButton = (function (_super) {
        __extends(DataViewCloseButton, _super);
        function DataViewCloseButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new DataViewCloseButton() cannot be invoked directly, please use 'model.pages.createDataViewCloseButton()'");
            }
            return _this;
        }
        Object.defineProperty(DataViewCloseButton.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DataViewCloseButton instance in the SDK and on the server.
         * The new DataViewCloseButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
         */
        DataViewCloseButton.createIn = function (container) {
            internal.createInVersionCheck(container.model, DataViewCloseButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0"]);
            return internal.instancehelpers.createElement(container, DataViewCloseButton, "items", true);
        };
        /**
         * Creates and returns a new DataViewCloseButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataViewCloseButton.create = function (model) {
            return internal.instancehelpers.createElement(model, DataViewCloseButton);
        };
        DataViewCloseButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Close";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Sluiten";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        return DataViewCloseButton;
    }(DataViewControlBarButton));
    DataViewCloseButton.typeName = "Pages$DataViewCloseButton";
    DataViewCloseButton.versionInfo = new exports.StructureVersionInfo({
        "deleted": "6.7.0",
        "deletionMessage": "Use 'BackButton' in data view footer instead."
    }, internal.StructureType.Element);
    pages.DataViewCloseButton = DataViewCloseButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-control-bar relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    var DataViewControlBar = (function (_super) {
        __extends(DataViewControlBar, _super);
        function DataViewControlBar(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__closeButton = new internal.ByIdReferenceProperty(DataViewControlBar, _this, "closeButton", null);
            if (arguments.length < 4) {
                throw new Error("new DataViewControlBar() cannot be invoked directly, please use 'model.pages.createDataViewControlBar()'");
            }
            return _this;
        }
        Object.defineProperty(DataViewControlBar.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataViewControlBar.prototype, "closeButton", {
            get: function () { return this.__closeButton.get(); },
            set: function (newValue) { this.__closeButton.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DataViewControlBar instance in the SDK and on the server.
         * The new DataViewControlBar will be automatically stored in the 'controlBar' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
         */
        DataViewControlBar.createIn = function (container) {
            internal.createInVersionCheck(container.model, DataViewControlBar.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0"]);
            return internal.instancehelpers.createElement(container, DataViewControlBar, "controlBar", false);
        };
        /**
         * Creates and returns a new DataViewControlBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataViewControlBar.create = function (model) {
            return internal.instancehelpers.createElement(model, DataViewControlBar);
        };
        DataViewControlBar.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return DataViewControlBar;
    }(ControlBar));
    DataViewControlBar.typeName = "Pages$DataViewControlBar";
    DataViewControlBar.versionInfo = new exports.StructureVersionInfo({
        "deleted": "6.7.0",
        "deletionMessage": "Use the data view footer instead."
    }, internal.StructureType.Element);
    pages.DataViewControlBar = DataViewControlBar;
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-save-button relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    var DataViewSaveButton = (function (_super) {
        __extends(DataViewSaveButton, _super);
        function DataViewSaveButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__syncAutomatically = new internal.PrimitiveProperty(DataViewSaveButton, _this, "syncAutomatically", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new DataViewSaveButton() cannot be invoked directly, please use 'model.pages.createDataViewSaveButton()'");
            }
            return _this;
        }
        Object.defineProperty(DataViewSaveButton.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataViewSaveButton.prototype, "syncAutomatically", {
            /**
             * In version 6.6.0: introduced
             */
            get: function () { return this.__syncAutomatically.get(); },
            set: function (newValue) { this.__syncAutomatically.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DataViewSaveButton instance in the SDK and on the server.
         * The new DataViewSaveButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
         */
        DataViewSaveButton.createIn = function (container) {
            internal.createInVersionCheck(container.model, DataViewSaveButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0"]);
            return internal.instancehelpers.createElement(container, DataViewSaveButton, "items", true);
        };
        /**
         * Creates and returns a new DataViewSaveButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataViewSaveButton.create = function (model) {
            return internal.instancehelpers.createElement(model, DataViewSaveButton);
        };
        DataViewSaveButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Save";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Opslaan";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        return DataViewSaveButton;
    }(DataViewControlBarButton));
    DataViewSaveButton.typeName = "Pages$DataViewSaveButton";
    DataViewSaveButton.versionInfo = new exports.StructureVersionInfo({
        "deleted": "6.7.0",
        "deletionMessage": "Use 'SaveButton' in data view footer instead.",
        "properties": {
            "syncAutomatically": {
                "introduced": "6.6.0"
            }
        }
    }, internal.StructureType.Element);
    pages.DataViewSaveButton = DataViewSaveButton;
    var DataViewSource = (function (_super) {
        __extends(DataViewSource, _super);
        function DataViewSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new DataViewSource() cannot be invoked directly, please use 'model.pages.createDataViewSource()'");
            }
            return _this;
        }
        Object.defineProperty(DataViewSource.prototype, "containerAsEntityWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, EntityWidget); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DataViewSource instance in the SDK and on the server.
         * The new DataViewSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        DataViewSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DataViewSource, "dataSource", false);
        };
        /**
         * Creates and returns a new DataViewSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DataViewSource.create = function (model) {
            return internal.instancehelpers.createElement(model, DataViewSource);
        };
        DataViewSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return DataViewSource;
    }(EntityPathSource));
    DataViewSource.typeName = "Pages$DataViewSource";
    DataViewSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.DataViewSource = DataViewSource;
    var DatabaseConstraint = (function (_super) {
        __extends(DatabaseConstraint, _super);
        function DatabaseConstraint(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__attribute = new internal.ByNameReferenceProperty(DatabaseConstraint, _this, "attribute", null, "DomainModels$Attribute");
            _this.__operator = new internal.EnumProperty(DatabaseConstraint, _this, "operator", DatabaseConstraintOperator.Equals, DatabaseConstraintOperator);
            _this.__value = new internal.PrimitiveProperty(DatabaseConstraint, _this, "value", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new DatabaseConstraint() cannot be invoked directly, please use 'model.pages.createDatabaseConstraint()'");
            }
            return _this;
        }
        Object.defineProperty(DatabaseConstraint.prototype, "containerAsDatabaseSourceBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, DatabaseSourceBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatabaseConstraint.prototype, "containerAsSelectorDatabaseSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, SelectorDatabaseSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatabaseConstraint.prototype, "attribute", {
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatabaseConstraint.prototype, "attributeQualifiedName", {
            get: function () { return this.__attribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatabaseConstraint.prototype, "operator", {
            get: function () { return this.__operator.get(); },
            set: function (newValue) { this.__operator.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatabaseConstraint.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
         * The new DatabaseConstraint will be automatically stored in the 'databaseConstraints' property
         * of the parent DatabaseSourceBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1
         */
        DatabaseConstraint.createIn = function (container) {
            internal.createInVersionCheck(container.model, DatabaseConstraint.typeName, ["6.0.0", "6.0.1"]);
            return internal.instancehelpers.createElement(container, DatabaseConstraint, "databaseConstraints", true);
        };
        /**
         * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
         * The new DatabaseConstraint will be automatically stored in the 'databaseConstraints' property
         * of the parent DatabaseSourceBase element passed as argument.
         */
        DatabaseConstraint.createInDatabaseSourceBaseUnderDatabaseConstraints = function (container) {
            return internal.instancehelpers.createElement(container, DatabaseConstraint, "databaseConstraints", true);
        };
        /**
         * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
         * The new DatabaseConstraint will be automatically stored in the 'databaseConstraints' property
         * of the parent SelectorDatabaseSource element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        DatabaseConstraint.createInSelectorDatabaseSourceUnderDatabaseConstraints = function (container) {
            internal.createInVersionCheck(container.model, DatabaseConstraint.typeName, ["6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, DatabaseConstraint, "databaseConstraints", true);
        };
        /**
         * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DatabaseConstraint.create = function (model) {
            return internal.instancehelpers.createElement(model, DatabaseConstraint);
        };
        DatabaseConstraint.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.operator = DatabaseConstraintOperator.Equals;
        };
        return DatabaseConstraint;
    }(internal.Element));
    DatabaseConstraint.typeName = "Pages$DatabaseConstraint";
    DatabaseConstraint.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.DatabaseConstraint = DatabaseConstraint;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var SortableEntityPathSource = (function (_super) {
        __extends(SortableEntityPathSource, _super);
        function SortableEntityPathSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__sortBar = new internal.PartProperty(SortableEntityPathSource, _this, "sortBar", null, true);
            if (arguments.length < 4) {
                throw new Error("new SortableEntityPathSource() cannot be invoked directly, please use 'model.pages.createSortableEntityPathSource()'");
            }
            return _this;
        }
        Object.defineProperty(SortableEntityPathSource.prototype, "containerAsEntityWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, EntityWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SortableEntityPathSource.prototype, "sortBar", {
            get: function () { return this.__sortBar.get(); },
            set: function (newValue) { this.__sortBar.set(newValue); },
            enumerable: true,
            configurable: true
        });
        SortableEntityPathSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.sortBar = GridSortBar.create(this.model);
        };
        return SortableEntityPathSource;
    }(EntityPathSource));
    SortableEntityPathSource.typeName = "Pages$SortableEntityPathSource";
    SortableEntityPathSource.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "sortBar": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.SortableEntityPathSource = SortableEntityPathSource;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var DatabaseSourceBase = (function (_super) {
        __extends(DatabaseSourceBase, _super);
        function DatabaseSourceBase(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__databaseConstraints = new internal.PartListProperty(DatabaseSourceBase, _this, "databaseConstraints", []);
            if (arguments.length < 4) {
                throw new Error("new DatabaseSourceBase() cannot be invoked directly, please use 'model.pages.createDatabaseSourceBase()'");
            }
            return _this;
        }
        Object.defineProperty(DatabaseSourceBase.prototype, "containerAsEntityWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, EntityWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatabaseSourceBase.prototype, "databaseConstraints", {
            get: function () { return this.__databaseConstraints.get(); },
            set: function (newValue) { this.__databaseConstraints.set(newValue); },
            enumerable: true,
            configurable: true
        });
        DatabaseSourceBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return DatabaseSourceBase;
    }(SortableEntityPathSource));
    DatabaseSourceBase.typeName = "Pages$DatabaseSourceBase";
    DatabaseSourceBase.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.DatabaseSourceBase = DatabaseSourceBase;
    /**
     * See: {@link https://docs.mendix.com/refguide7/date-picker relevant section in reference guide}
     */
    var DatePicker = (function (_super) {
        __extends(DatePicker, _super);
        function DatePicker(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__formattingInfo = new internal.PartProperty(DatePicker, _this, "formattingInfo", null, true);
            if (arguments.length < 4) {
                throw new Error("new DatePicker() cannot be invoked directly, please use 'model.pages.createDatePicker()'");
            }
            return _this;
        }
        Object.defineProperty(DatePicker.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "formattingInfo", {
            get: function () { return this.__formattingInfo.get(); },
            set: function (newValue) { this.__formattingInfo.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        DatePicker.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, DatePicker.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, DatePicker, "footerWidget", false);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        DatePicker.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        DatePicker.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        DatePicker.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        DatePicker.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, DatePicker, "leftWidget", false);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        DatePicker.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, DatePicker, "rightWidget", false);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        DatePicker.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        DatePicker.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        DatePicker.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        DatePicker.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        DatePicker.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        DatePicker.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        DatePicker.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        DatePicker.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        DatePicker.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, DatePicker, "firstWidget", false);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        DatePicker.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, DatePicker, "secondWidget", false);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        DatePicker.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        DatePicker.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        DatePicker.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widget", false);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        DatePicker.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, DatePicker, "widgets", true);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        DatePicker.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, DatePicker.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, DatePicker, "parameterWidget", false);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        DatePicker.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, DatePicker.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, DatePicker, "reportWidget", false);
        };
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DatePicker.create = function (model) {
            return internal.instancehelpers.createElement(model, DatePicker);
        };
        DatePicker.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.formattingInfo = FormattingInfo.create(this.model);
        };
        return DatePicker;
    }(AttributeWidgetWithPlaceholder));
    DatePicker.typeName = "Pages$DatePicker";
    DatePicker.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "formattingInfo": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.DatePicker = DatePicker;
    /**
     * See: {@link https://docs.mendix.com/refguide7/container relevant section in reference guide}
     */
    var DivContainer = (function (_super) {
        __extends(DivContainer, _super);
        function DivContainer(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__widget = new internal.PartProperty(DivContainer, _this, "widget", null, false);
            if (arguments.length < 4) {
                throw new Error("new DivContainer() cannot be invoked directly, please use 'model.pages.createDivContainer()'");
            }
            return _this;
        }
        Object.defineProperty(DivContainer.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DivContainer.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DivContainer.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DivContainer.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DivContainer.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DivContainer.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DivContainer.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DivContainer.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DivContainer.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DivContainer.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DivContainer.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DivContainer.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DivContainer.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DivContainer.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DivContainer.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DivContainer.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DivContainer.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DivContainer.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DivContainer.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        DivContainer.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, DivContainer.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, DivContainer, "footerWidget", false);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        DivContainer.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        DivContainer.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        DivContainer.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        DivContainer.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, DivContainer, "leftWidget", false);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        DivContainer.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, DivContainer, "rightWidget", false);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        DivContainer.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        DivContainer.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        DivContainer.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        DivContainer.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        DivContainer.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        DivContainer.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        DivContainer.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        DivContainer.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        DivContainer.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, DivContainer, "firstWidget", false);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        DivContainer.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, DivContainer, "secondWidget", false);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        DivContainer.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        DivContainer.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        DivContainer.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widget", false);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        DivContainer.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, DivContainer, "widgets", true);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        DivContainer.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, DivContainer.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, DivContainer, "parameterWidget", false);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        DivContainer.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, DivContainer.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, DivContainer, "reportWidget", false);
        };
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DivContainer.create = function (model) {
            return internal.instancehelpers.createElement(model, DivContainer);
        };
        DivContainer.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return DivContainer;
    }(ConditionallyVisibleWidget));
    DivContainer.typeName = "Pages$DivContainer";
    DivContainer.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.DivContainer = DivContainer;
    /**
     * See: {@link https://docs.mendix.com/refguide7/drop-down-widget relevant section in reference guide}
     */
    var DropDown = (function (_super) {
        __extends(DropDown, _super);
        function DropDown(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new DropDown() cannot be invoked directly, please use 'model.pages.createDropDown()'");
            }
            return _this;
        }
        Object.defineProperty(DropDown.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDown.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDown.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDown.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDown.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDown.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDown.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDown.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDown.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDown.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDown.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDown.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDown.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDown.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDown.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDown.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDown.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDown.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        DropDown.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, DropDown.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, DropDown, "footerWidget", false);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        DropDown.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        DropDown.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        DropDown.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        DropDown.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDown, "leftWidget", false);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        DropDown.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDown, "rightWidget", false);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        DropDown.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        DropDown.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        DropDown.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        DropDown.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        DropDown.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        DropDown.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        DropDown.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        DropDown.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        DropDown.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDown, "firstWidget", false);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        DropDown.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDown, "secondWidget", false);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        DropDown.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        DropDown.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        DropDown.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDown, "widget", false);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        DropDown.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, DropDown, "widgets", true);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        DropDown.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, DropDown.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, DropDown, "parameterWidget", false);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        DropDown.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, DropDown.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, DropDown, "reportWidget", false);
        };
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DropDown.create = function (model) {
            return internal.instancehelpers.createElement(model, DropDown);
        };
        DropDown.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return DropDown;
    }(AttributeWidget));
    DropDown.typeName = "Pages$DropDown";
    DropDown.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.DropDown = DropDown;
    /**
     * See: {@link https://docs.mendix.com/refguide7/drop-down-button relevant section in reference guide}
     */
    var DropDownButton = (function (_super) {
        __extends(DropDownButton, _super);
        function DropDownButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__items = new internal.PartListProperty(DropDownButton, _this, "items", []);
            if (arguments.length < 4) {
                throw new Error("new DropDownButton() cannot be invoked directly, please use 'model.pages.createDropDownButton()'");
            }
            return _this;
        }
        Object.defineProperty(DropDownButton.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButton.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButton.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButton.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButton.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButton.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButton.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButton.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButton.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButton.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButton.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButton.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButton.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButton.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButton.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButton.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButton.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButton.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButton.prototype, "items", {
            get: function () { return this.__items.get(); },
            set: function (newValue) { this.__items.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        DropDownButton.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, DropDownButton.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, DropDownButton, "footerWidget", false);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        DropDownButton.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        DropDownButton.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        DropDownButton.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        DropDownButton.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "leftWidget", false);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        DropDownButton.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "rightWidget", false);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        DropDownButton.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        DropDownButton.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        DropDownButton.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        DropDownButton.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        DropDownButton.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        DropDownButton.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        DropDownButton.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        DropDownButton.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        DropDownButton.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "firstWidget", false);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        DropDownButton.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "secondWidget", false);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        DropDownButton.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        DropDownButton.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        DropDownButton.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widget", false);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        DropDownButton.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, DropDownButton, "widgets", true);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        DropDownButton.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, DropDownButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, DropDownButton, "parameterWidget", false);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        DropDownButton.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, DropDownButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, DropDownButton, "reportWidget", false);
        };
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DropDownButton.create = function (model) {
            return internal.instancehelpers.createElement(model, DropDownButton);
        };
        DropDownButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Drop down";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Uitklappen";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        return DropDownButton;
    }(Button));
    DropDownButton.typeName = "Pages$DropDownButton";
    DropDownButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.DropDownButton = DropDownButton;
    var DropDownButtonItem = (function (_super) {
        __extends(DropDownButtonItem, _super);
        function DropDownButtonItem(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__caption = new internal.PartProperty(DropDownButtonItem, _this, "caption", null, true);
            _this.__image = new internal.ByNameReferenceProperty(DropDownButtonItem, _this, "image", null, "Images$Image");
            if (arguments.length < 4) {
                throw new Error("new DropDownButtonItem() cannot be invoked directly, please use 'model.pages.createDropDownButtonItem()'");
            }
            return _this;
        }
        Object.defineProperty(DropDownButtonItem.prototype, "containerAsDropDownButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, DropDownButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButtonItem.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButtonItem.prototype, "image", {
            get: function () { return this.__image.get(); },
            set: function (newValue) { this.__image.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownButtonItem.prototype, "imageQualifiedName", {
            get: function () { return this.__image.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DropDownButtonItem instance in the SDK and on the server.
         * The new DropDownButtonItem will be automatically stored in the 'items' property
         * of the parent DropDownButton element passed as argument.
         */
        DropDownButtonItem.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DropDownButtonItem, "items", true);
        };
        /**
         * Creates and returns a new DropDownButtonItem instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DropDownButtonItem.create = function (model) {
            return internal.instancehelpers.createElement(model, DropDownButtonItem);
        };
        DropDownButtonItem.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Item";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
        };
        return DropDownButtonItem;
    }(ActionItem));
    DropDownButtonItem.typeName = "Pages$DropDownButtonItem";
    DropDownButtonItem.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "caption": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.DropDownButtonItem = DropDownButtonItem;
    /**
     * See: {@link https://docs.mendix.com/refguide7/drop-down-search-field relevant section in reference guide}
     */
    var DropDownSearchField = (function (_super) {
        __extends(DropDownSearchField, _super);
        function DropDownSearchField(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__sortBar = new internal.PartProperty(DropDownSearchField, _this, "sortBar", null, true);
            _this.__xPathConstraint = new internal.PrimitiveProperty(DropDownSearchField, _this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
            _this.__allowMultipleSelect = new internal.PrimitiveProperty(DropDownSearchField, _this, "allowMultipleSelect", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new DropDownSearchField() cannot be invoked directly, please use 'model.pages.createDropDownSearchField()'");
            }
            return _this;
        }
        Object.defineProperty(DropDownSearchField.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownSearchField.prototype, "sortBar", {
            get: function () { return this.__sortBar.get(); },
            set: function (newValue) { this.__sortBar.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownSearchField.prototype, "xPathConstraint", {
            /**
             * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
             */
            get: function () { return this.__xPathConstraint.get(); },
            set: function (newValue) { this.__xPathConstraint.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownSearchField.prototype, "allowMultipleSelect", {
            get: function () { return this.__allowMultipleSelect.get(); },
            set: function (newValue) { this.__allowMultipleSelect.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DropDownSearchField instance in the SDK and on the server.
         * The new DropDownSearchField will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        DropDownSearchField.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DropDownSearchField, "items", true);
        };
        /**
         * Creates and returns a new DropDownSearchField instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DropDownSearchField.create = function (model) {
            return internal.instancehelpers.createElement(model, DropDownSearchField);
        };
        DropDownSearchField.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.operator = SearchFieldOperator.Equal;
            this.sortBar = GridSortBar.create(this.model);
        };
        return DropDownSearchField;
    }(SingleSearchField));
    DropDownSearchField.typeName = "Pages$DropDownSearchField";
    DropDownSearchField.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "sortBar": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.DropDownSearchField = DropDownSearchField;
    /**
     * See: {@link https://docs.mendix.com/refguide7/image-viewer relevant section in reference guide}
     */
    var DynamicImageViewer = (function (_super) {
        __extends(DynamicImageViewer, _super);
        function DynamicImageViewer(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__defaultImage = new internal.ByNameReferenceProperty(DynamicImageViewer, _this, "defaultImage", null, "Images$Image");
            _this.__widthUnit = new internal.EnumProperty(DynamicImageViewer, _this, "widthUnit", ImageSizeUnit.Percentage, ImageSizeUnit);
            _this.__heightUnit = new internal.EnumProperty(DynamicImageViewer, _this, "heightUnit", ImageSizeUnit.Auto, ImageSizeUnit);
            _this.__width = new internal.PrimitiveProperty(DynamicImageViewer, _this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__height = new internal.PrimitiveProperty(DynamicImageViewer, _this, "height", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__responsive = new internal.PrimitiveProperty(DynamicImageViewer, _this, "responsive", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__showAsThumbnail = new internal.PrimitiveProperty(DynamicImageViewer, _this, "showAsThumbnail", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__onClickBehavior = new internal.PartProperty(DynamicImageViewer, _this, "onClickBehavior", null, true);
            if (arguments.length < 4) {
                throw new Error("new DynamicImageViewer() cannot be invoked directly, please use 'model.pages.createDynamicImageViewer()'");
            }
            return _this;
        }
        Object.defineProperty(DynamicImageViewer.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "defaultImage", {
            get: function () { return this.__defaultImage.get(); },
            set: function (newValue) { this.__defaultImage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "defaultImageQualifiedName", {
            get: function () { return this.__defaultImage.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "widthUnit", {
            get: function () { return this.__widthUnit.get(); },
            set: function (newValue) { this.__widthUnit.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "heightUnit", {
            get: function () { return this.__heightUnit.get(); },
            set: function (newValue) { this.__heightUnit.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "width", {
            get: function () { return this.__width.get(); },
            set: function (newValue) { this.__width.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "height", {
            get: function () { return this.__height.get(); },
            set: function (newValue) { this.__height.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "responsive", {
            get: function () { return this.__responsive.get(); },
            set: function (newValue) { this.__responsive.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "showAsThumbnail", {
            get: function () { return this.__showAsThumbnail.get(); },
            set: function (newValue) { this.__showAsThumbnail.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicImageViewer.prototype, "onClickBehavior", {
            get: function () { return this.__onClickBehavior.get(); },
            set: function (newValue) { this.__onClickBehavior.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        DynamicImageViewer.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, DynamicImageViewer.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "footerWidget", false);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        DynamicImageViewer.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        DynamicImageViewer.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        DynamicImageViewer.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        DynamicImageViewer.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "leftWidget", false);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        DynamicImageViewer.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "rightWidget", false);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        DynamicImageViewer.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        DynamicImageViewer.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        DynamicImageViewer.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        DynamicImageViewer.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        DynamicImageViewer.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        DynamicImageViewer.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        DynamicImageViewer.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        DynamicImageViewer.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        DynamicImageViewer.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "firstWidget", false);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        DynamicImageViewer.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "secondWidget", false);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        DynamicImageViewer.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        DynamicImageViewer.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        DynamicImageViewer.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        DynamicImageViewer.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "widgets", true);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        DynamicImageViewer.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, DynamicImageViewer.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "parameterWidget", false);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        DynamicImageViewer.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, DynamicImageViewer.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, DynamicImageViewer, "reportWidget", false);
        };
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DynamicImageViewer.create = function (model) {
            return internal.instancehelpers.createElement(model, DynamicImageViewer);
        };
        DynamicImageViewer.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.dataSource = ImageViewerSource.create(this.model);
            this.heightUnit = ImageSizeUnit.Auto;
            this.onClickBehavior = OnClickNothing.create(this.model);
            this.responsive = true;
            this.showAsThumbnail = true;
            this.width = 100;
            this.widthUnit = ImageSizeUnit.Percentage;
        };
        return DynamicImageViewer;
    }(EntityWidget));
    DynamicImageViewer.typeName = "Pages$DynamicImageViewer";
    DynamicImageViewer.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "onClickBehavior": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.DynamicImageViewer = DynamicImageViewer;
    /**
     * See: {@link https://docs.mendix.com/refguide7/text relevant section in reference guide}
     */
    var DynamicText = (function (_super) {
        __extends(DynamicText, _super);
        function DynamicText(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__content = new internal.PartProperty(DynamicText, _this, "content", null, true);
            _this.__renderMode = new internal.EnumProperty(DynamicText, _this, "renderMode", TextRenderMode.Text, TextRenderMode);
            if (arguments.length < 4) {
                throw new Error("new DynamicText() cannot be invoked directly, please use 'model.pages.createDynamicText()'");
            }
            return _this;
        }
        Object.defineProperty(DynamicText.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicText.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicText.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicText.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicText.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicText.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicText.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicText.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicText.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicText.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicText.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicText.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicText.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicText.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicText.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicText.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicText.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicText.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicText.prototype, "content", {
            get: function () { return this.__content.get(); },
            set: function (newValue) { this.__content.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicText.prototype, "renderMode", {
            get: function () { return this.__renderMode.get(); },
            set: function (newValue) { this.__renderMode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        DynamicText.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, DynamicText.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, DynamicText, "footerWidget", false);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        DynamicText.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        DynamicText.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        DynamicText.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        DynamicText.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicText, "leftWidget", false);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        DynamicText.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicText, "rightWidget", false);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        DynamicText.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        DynamicText.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        DynamicText.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        DynamicText.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        DynamicText.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        DynamicText.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        DynamicText.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        DynamicText.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        DynamicText.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicText, "firstWidget", false);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        DynamicText.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicText, "secondWidget", false);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        DynamicText.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        DynamicText.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        DynamicText.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widget", false);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        DynamicText.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, DynamicText, "widgets", true);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        DynamicText.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, DynamicText.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, DynamicText, "parameterWidget", false);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        DynamicText.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, DynamicText.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, DynamicText, "reportWidget", false);
        };
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DynamicText.create = function (model) {
            return internal.instancehelpers.createElement(model, DynamicText);
        };
        DynamicText.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.content = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Text";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Tekst";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
            this.renderMode = TextRenderMode.Text;
        };
        return DynamicText;
    }(ConditionallyVisibleWidget));
    DynamicText.typeName = "Pages$DynamicText";
    DynamicText.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "content": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.DynamicText = DynamicText;
    /**
     * See: {@link https://docs.mendix.com/refguide7/file-manager relevant section in reference guide}
     */
    var FileManager = (function (_super) {
        __extends(FileManager, _super);
        function FileManager(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__allowedExtensions = new internal.PrimitiveProperty(FileManager, _this, "allowedExtensions", "", internal.PrimitiveTypeEnum.String);
            _this.__type = new internal.EnumProperty(FileManager, _this, "type", FileManagerType.Both, FileManagerType);
            _this.__maxFileSize = new internal.PrimitiveProperty(FileManager, _this, "maxFileSize", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__showFileInBrowser = new internal.PrimitiveProperty(FileManager, _this, "showFileInBrowser", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new FileManager() cannot be invoked directly, please use 'model.pages.createFileManager()'");
            }
            return _this;
        }
        Object.defineProperty(FileManager.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "allowedExtensions", {
            get: function () { return this.__allowedExtensions.get(); },
            set: function (newValue) { this.__allowedExtensions.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "maxFileSize", {
            get: function () { return this.__maxFileSize.get(); },
            set: function (newValue) { this.__maxFileSize.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileManager.prototype, "showFileInBrowser", {
            get: function () { return this.__showFileInBrowser.get(); },
            set: function (newValue) { this.__showFileInBrowser.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        FileManager.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, FileManager.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, FileManager, "footerWidget", false);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        FileManager.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        FileManager.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        FileManager.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        FileManager.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, FileManager, "leftWidget", false);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        FileManager.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, FileManager, "rightWidget", false);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        FileManager.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        FileManager.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        FileManager.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        FileManager.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        FileManager.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        FileManager.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        FileManager.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        FileManager.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        FileManager.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, FileManager, "firstWidget", false);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        FileManager.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, FileManager, "secondWidget", false);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        FileManager.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        FileManager.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        FileManager.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, FileManager, "widget", false);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        FileManager.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, FileManager, "widgets", true);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        FileManager.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, FileManager.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, FileManager, "parameterWidget", false);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        FileManager.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, FileManager.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, FileManager, "reportWidget", false);
        };
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        FileManager.create = function (model) {
            return internal.instancehelpers.createElement(model, FileManager);
        };
        FileManager.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.label = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "File";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                        translation.languageCode = "nl_NL";
                        translation.text = "Bestand";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.maxFileSize = 5;
            this.type = FileManagerType.Both;
        };
        return FileManager;
    }(InputWidget));
    FileManager.typeName = "Pages$FileManager";
    FileManager.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.FileManager = FileManager;
    /**
     * See: {@link https://docs.mendix.com/refguide7/pages relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var FormBase = (function (_super) {
        __extends(FormBase, _super);
        function FormBase(model, typeName, id, isPartial, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, container) || this;
            _this.__canvasWidth = new internal.PrimitiveProperty(FormBase, _this, "canvasWidth", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__canvasHeight = new internal.PrimitiveProperty(FormBase, _this, "canvasHeight", 0, internal.PrimitiveTypeEnum.Integer);
            return _this;
        }
        Object.defineProperty(FormBase.prototype, "containerAsFolderBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, projects_1.projects.FolderBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormBase.prototype, "canvasWidth", {
            get: function () { return this.__canvasWidth.get(); },
            set: function (newValue) { this.__canvasWidth.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormBase.prototype, "canvasHeight", {
            get: function () { return this.__canvasHeight.get(); },
            set: function (newValue) { this.__canvasHeight.set(newValue); },
            enumerable: true,
            configurable: true
        });
        FormBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.canvasHeight = 600;
            this.canvasWidth = 800;
        };
        return FormBase;
    }(projects_1.projects.Document));
    FormBase.typeName = "Pages$FormBase";
    FormBase.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
    pages.FormBase = FormBase;
    var FormattingInfo = (function (_super) {
        __extends(FormattingInfo, _super);
        function FormattingInfo(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__decimalPrecision = new internal.PrimitiveProperty(FormattingInfo, _this, "decimalPrecision", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__groupDigits = new internal.PrimitiveProperty(FormattingInfo, _this, "groupDigits", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__enumFormat = new internal.EnumProperty(FormattingInfo, _this, "enumFormat", EnumFormat.Text, EnumFormat);
            _this.__dateFormat = new internal.EnumProperty(FormattingInfo, _this, "dateFormat", DateFormat.Date, DateFormat);
            _this.__customDateFormat = new internal.PrimitiveProperty(FormattingInfo, _this, "customDateFormat", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new FormattingInfo() cannot be invoked directly, please use 'model.pages.createFormattingInfo()'");
            }
            return _this;
        }
        Object.defineProperty(FormattingInfo.prototype, "containerAsDataGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.DataGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormattingInfo.prototype, "containerAsDynamicLabel", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.DynamicLabel); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormattingInfo.prototype, "containerAsDatePicker", {
            get: function () { return _super.prototype.getContainerAs.call(this, DatePicker); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormattingInfo.prototype, "containerAsGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, GridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormattingInfo.prototype, "containerAsReferenceSelector", {
            get: function () { return _super.prototype.getContainerAs.call(this, ReferenceSelector); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormattingInfo.prototype, "containerAsTextBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, TextBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormattingInfo.prototype, "decimalPrecision", {
            get: function () { return this.__decimalPrecision.get(); },
            set: function (newValue) { this.__decimalPrecision.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormattingInfo.prototype, "groupDigits", {
            get: function () { return this.__groupDigits.get(); },
            set: function (newValue) { this.__groupDigits.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormattingInfo.prototype, "enumFormat", {
            get: function () { return this.__enumFormat.get(); },
            set: function (newValue) { this.__enumFormat.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormattingInfo.prototype, "dateFormat", {
            get: function () { return this.__dateFormat.get(); },
            set: function (newValue) { this.__dateFormat.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormattingInfo.prototype, "customDateFormat", {
            get: function () { return this.__customDateFormat.get(); },
            set: function (newValue) { this.__customDateFormat.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent documenttemplates.DataGridColumn element passed as argument.
         */
        FormattingInfo.createInDataGridColumnUnderFormattingInfo = function (container) {
            return internal.instancehelpers.createElement(container, FormattingInfo, "formattingInfo", false);
        };
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent documenttemplates.DynamicLabel element passed as argument.
         */
        FormattingInfo.createInDynamicLabelUnderFormattingInfo = function (container) {
            return internal.instancehelpers.createElement(container, FormattingInfo, "formattingInfo", false);
        };
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent DatePicker element passed as argument.
         */
        FormattingInfo.createInDatePickerUnderFormattingInfo = function (container) {
            return internal.instancehelpers.createElement(container, FormattingInfo, "formattingInfo", false);
        };
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent GridColumn element passed as argument.
         */
        FormattingInfo.createInGridColumnUnderFormattingInfo = function (container) {
            return internal.instancehelpers.createElement(container, FormattingInfo, "formattingInfo", false);
        };
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent ReferenceSelector element passed as argument.
         */
        FormattingInfo.createInReferenceSelectorUnderFormattingInfo = function (container) {
            return internal.instancehelpers.createElement(container, FormattingInfo, "formattingInfo", false);
        };
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent TextBox element passed as argument.
         */
        FormattingInfo.createInTextBoxUnderFormattingInfo = function (container) {
            return internal.instancehelpers.createElement(container, FormattingInfo, "formattingInfo", false);
        };
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        FormattingInfo.create = function (model) {
            return internal.instancehelpers.createElement(model, FormattingInfo);
        };
        FormattingInfo.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.dateFormat = DateFormat.Date;
            this.decimalPrecision = 2;
            this.enumFormat = EnumFormat.Text;
        };
        return FormattingInfo;
    }(internal.Element));
    FormattingInfo.typeName = "Pages$FormattingInfo";
    FormattingInfo.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.FormattingInfo = FormattingInfo;
    /**
     * See: {@link https://docs.mendix.com/refguide7/image-property relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var Icon = (function (_super) {
        __extends(Icon, _super);
        function Icon(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new Icon() cannot be invoked directly, please use 'model.pages.createIcon()'");
            }
            return _this;
        }
        Object.defineProperty(Icon.prototype, "containerAsMenuItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, menus_1.menus.MenuItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Icon.prototype, "containerAsButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, Button); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Icon.prototype, "containerAsControlBarButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBarButton); },
            enumerable: true,
            configurable: true
        });
        Icon.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return Icon;
    }(internal.Element));
    Icon.typeName = "Pages$Icon";
    Icon.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.Icon = Icon;
    var GlyphIcon = (function (_super) {
        __extends(GlyphIcon, _super);
        function GlyphIcon(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__code = new internal.PrimitiveProperty(GlyphIcon, _this, "code", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new GlyphIcon() cannot be invoked directly, please use 'model.pages.createGlyphIcon()'");
            }
            return _this;
        }
        Object.defineProperty(GlyphIcon.prototype, "containerAsMenuItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, menus_1.menus.MenuItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GlyphIcon.prototype, "containerAsButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, Button); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GlyphIcon.prototype, "containerAsControlBarButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBarButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GlyphIcon.prototype, "code", {
            get: function () { return this.__code.get(); },
            set: function (newValue) { this.__code.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new GlyphIcon instance in the SDK and on the server.
         * The new GlyphIcon will be automatically stored in the 'icon' property
         * of the parent menus.MenuItem element passed as argument.
         */
        GlyphIcon.createInMenuItemUnderIcon = function (container) {
            return internal.instancehelpers.createElement(container, GlyphIcon, "icon", false);
        };
        /**
         * Creates and returns a new GlyphIcon instance in the SDK and on the server.
         * The new GlyphIcon will be automatically stored in the 'icon' property
         * of the parent Button element passed as argument.
         */
        GlyphIcon.createInButtonUnderIcon = function (container) {
            return internal.instancehelpers.createElement(container, GlyphIcon, "icon", false);
        };
        /**
         * Creates and returns a new GlyphIcon instance in the SDK and on the server.
         * The new GlyphIcon will be automatically stored in the 'icon' property
         * of the parent ControlBarButton element passed as argument.
         */
        GlyphIcon.createInControlBarButtonUnderIcon = function (container) {
            return internal.instancehelpers.createElement(container, GlyphIcon, "icon", false);
        };
        /**
         * Creates and returns a new GlyphIcon instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GlyphIcon.create = function (model) {
            return internal.instancehelpers.createElement(model, GlyphIcon);
        };
        GlyphIcon.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.code = -1;
        };
        return GlyphIcon;
    }(Icon));
    GlyphIcon.typeName = "Pages$GlyphIcon";
    GlyphIcon.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.GlyphIcon = GlyphIcon;
    /**
     * See: {@link https://docs.mendix.com/refguide7/grid-action-button relevant section in reference guide}
     */
    var GridActionButton = (function (_super) {
        __extends(GridActionButton, _super);
        function GridActionButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__action = new internal.PartProperty(GridActionButton, _this, "action", null, true);
            _this.__maintainSelectionAfterMicroflow = new internal.PrimitiveProperty(GridActionButton, _this, "maintainSelectionAfterMicroflow", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new GridActionButton() cannot be invoked directly, please use 'model.pages.createGridActionButton()'");
            }
            return _this;
        }
        Object.defineProperty(GridActionButton.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridActionButton.prototype, "action", {
            get: function () { return this.__action.get(); },
            set: function (newValue) { this.__action.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridActionButton.prototype, "maintainSelectionAfterMicroflow", {
            get: function () { return this.__maintainSelectionAfterMicroflow.get(); },
            set: function (newValue) { this.__maintainSelectionAfterMicroflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new GridActionButton instance in the SDK and on the server.
         * The new GridActionButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        GridActionButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridActionButton, "items", true);
        };
        /**
         * Creates and returns a new GridActionButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridActionButton.create = function (model) {
            return internal.instancehelpers.createElement(model, GridActionButton);
        };
        GridActionButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.action = NoClientAction.create(this.model);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Action";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Actie";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        return GridActionButton;
    }(GridControlBarButton));
    GridActionButton.typeName = "Pages$GridActionButton";
    GridActionButton.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "action": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.GridActionButton = GridActionButton;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var GridBaseSource = (function (_super) {
        __extends(GridBaseSource, _super);
        function GridBaseSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__searchBar = new internal.PartProperty(GridBaseSource, _this, "searchBar", null, true);
            if (arguments.length < 4) {
                throw new Error("new GridBaseSource() cannot be invoked directly, please use 'model.pages.createGridBaseSource()'");
            }
            return _this;
        }
        Object.defineProperty(GridBaseSource.prototype, "containerAsEntityWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, EntityWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridBaseSource.prototype, "searchBar", {
            get: function () { return this.__searchBar.get(); },
            set: function (newValue) { this.__searchBar.set(newValue); },
            enumerable: true,
            configurable: true
        });
        GridBaseSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.searchBar = SearchBar.create(this.model);
        };
        return GridBaseSource;
    }(SortableEntityPathSource));
    GridBaseSource.typeName = "Pages$GridBaseSource";
    GridBaseSource.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "searchBar": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.GridBaseSource = GridBaseSource;
    /**
     * See: {@link https://docs.mendix.com/refguide7/columns relevant section in reference guide}
     */
    var GridColumn = (function (_super) {
        __extends(GridColumn, _super);
        function GridColumn(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__name = new internal.PrimitiveProperty(GridColumn, _this, "name", "", internal.PrimitiveTypeEnum.String);
            _this.__caption = new internal.PartProperty(GridColumn, _this, "caption", null, true);
            _this.__attributePath = new internal.PrimitiveProperty(GridColumn, _this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            _this.__formattingInfo = new internal.PartProperty(GridColumn, _this, "formattingInfo", null, true);
            _this.__showTooltip = new internal.PrimitiveProperty(GridColumn, _this, "showTooltip", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__aggregateCaption = new internal.PartProperty(GridColumn, _this, "aggregateCaption", null, true);
            _this.__aggregateFunction = new internal.EnumProperty(GridColumn, _this, "aggregateFunction", AggregateFunction.None, AggregateFunction);
            _this.__editable = new internal.PrimitiveProperty(GridColumn, _this, "editable", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__width = new internal.PrimitiveProperty(GridColumn, _this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__class = new internal.PrimitiveProperty(GridColumn, _this, "class", "", internal.PrimitiveTypeEnum.String);
            _this.__style = new internal.PrimitiveProperty(GridColumn, _this, "style", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new GridColumn() cannot be invoked directly, please use 'model.pages.createGridColumn()'");
            }
            return _this;
        }
        Object.defineProperty(GridColumn.prototype, "containerAsColumnGrid", {
            get: function () { return _super.prototype.getContainerAs.call(this, ColumnGrid); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "attributePath", {
            /**
             * The value of this property is conceptually of type paths.AttributePath.
             */
            get: function () { return this.__attributePath.get(); },
            set: function (newValue) { this.__attributePath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "formattingInfo", {
            get: function () { return this.__formattingInfo.get(); },
            set: function (newValue) { this.__formattingInfo.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "showTooltip", {
            get: function () { return this.__showTooltip.get(); },
            set: function (newValue) { this.__showTooltip.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "aggregateCaption", {
            get: function () { return this.__aggregateCaption.get(); },
            set: function (newValue) { this.__aggregateCaption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "aggregateFunction", {
            get: function () { return this.__aggregateFunction.get(); },
            set: function (newValue) { this.__aggregateFunction.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "editable", {
            get: function () { return this.__editable.get(); },
            set: function (newValue) { this.__editable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "width", {
            get: function () { return this.__width.get(); },
            set: function (newValue) { this.__width.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new GridColumn instance in the SDK and on the server.
         * The new GridColumn will be automatically stored in the 'columns' property
         * of the parent ColumnGrid element passed as argument.
         */
        GridColumn.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridColumn, "columns", true);
        };
        /**
         * Creates and returns a new GridColumn instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridColumn.create = function (model) {
            return internal.instancehelpers.createElement(model, GridColumn);
        };
        GridColumn.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.aggregateCaption = texts_1.texts.Text.create(this.model);
            this.aggregateFunction = AggregateFunction.None;
            this.caption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Column";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.formattingInfo = FormattingInfo.create(this.model);
        };
        return GridColumn;
    }(internal.Element));
    GridColumn.typeName = "Pages$GridColumn";
    GridColumn.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "caption": {
                "required": {
                    "currentValue": true
                }
            },
            "formattingInfo": {
                "required": {
                    "currentValue": true
                }
            },
            "aggregateCaption": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.GridColumn = GridColumn;
    /**
     * See: {@link https://docs.mendix.com/refguide7/control-bar relevant section in reference guide}
     */
    var GridControlBar = (function (_super) {
        __extends(GridControlBar, _super);
        function GridControlBar(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__searchButton = new internal.PartProperty(GridControlBar, _this, "searchButton", null, true);
            _this.__defaultButton = new internal.ByIdReferenceProperty(GridControlBar, _this, "defaultButton", null);
            if (arguments.length < 4) {
                throw new Error("new GridControlBar() cannot be invoked directly, please use 'model.pages.createGridControlBar()'");
            }
            return _this;
        }
        Object.defineProperty(GridControlBar.prototype, "containerAsGrid", {
            get: function () { return _super.prototype.getContainerAs.call(this, Grid); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridControlBar.prototype, "searchButton", {
            get: function () { return this.__searchButton.get(); },
            set: function (newValue) { this.__searchButton.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridControlBar.prototype, "defaultButton", {
            get: function () { return this.__defaultButton.get(); },
            set: function (newValue) { this.__defaultButton.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new GridControlBar instance in the SDK and on the server.
         * The new GridControlBar will be automatically stored in the 'controlBar' property
         * of the parent Grid element passed as argument.
         */
        GridControlBar.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridControlBar, "controlBar", false);
        };
        /**
         * Creates and returns a new GridControlBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridControlBar.create = function (model) {
            return internal.instancehelpers.createElement(model, GridControlBar);
        };
        GridControlBar.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.searchButton = GridSearchButton.create(this.model);
        };
        return GridControlBar;
    }(ControlBar));
    GridControlBar.typeName = "Pages$GridControlBar";
    GridControlBar.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "searchButton": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.GridControlBar = GridControlBar;
    var GridDatabaseSource = (function (_super) {
        __extends(GridDatabaseSource, _super);
        function GridDatabaseSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__searchBar = new internal.PartProperty(GridDatabaseSource, _this, "searchBar", null, true);
            if (arguments.length < 4) {
                throw new Error("new GridDatabaseSource() cannot be invoked directly, please use 'model.pages.createGridDatabaseSource()'");
            }
            return _this;
        }
        Object.defineProperty(GridDatabaseSource.prototype, "containerAsEntityWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, EntityWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridDatabaseSource.prototype, "searchBar", {
            get: function () { return this.__searchBar.get(); },
            set: function (newValue) { this.__searchBar.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new GridDatabaseSource instance in the SDK and on the server.
         * The new GridDatabaseSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        GridDatabaseSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridDatabaseSource, "dataSource", false);
        };
        /**
         * Creates and returns a new GridDatabaseSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridDatabaseSource.create = function (model) {
            return internal.instancehelpers.createElement(model, GridDatabaseSource);
        };
        GridDatabaseSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.searchBar = SearchBar.create(this.model);
        };
        return GridDatabaseSource;
    }(DatabaseSourceBase));
    GridDatabaseSource.typeName = "Pages$GridDatabaseSource";
    GridDatabaseSource.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "searchBar": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.GridDatabaseSource = GridDatabaseSource;
    /**
     * See: {@link https://docs.mendix.com/refguide7/delete-button relevant section in reference guide}
     */
    var GridDeleteButton = (function (_super) {
        __extends(GridDeleteButton, _super);
        function GridDeleteButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new GridDeleteButton() cannot be invoked directly, please use 'model.pages.createGridDeleteButton()'");
            }
            return _this;
        }
        Object.defineProperty(GridDeleteButton.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new GridDeleteButton instance in the SDK and on the server.
         * The new GridDeleteButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        GridDeleteButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridDeleteButton, "items", true);
        };
        /**
         * Creates and returns a new GridDeleteButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridDeleteButton.create = function (model) {
            return internal.instancehelpers.createElement(model, GridDeleteButton);
        };
        GridDeleteButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Delete";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Verwijderen";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        return GridDeleteButton;
    }(GridControlBarButton));
    GridDeleteButton.typeName = "Pages$GridDeleteButton";
    GridDeleteButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.GridDeleteButton = GridDeleteButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/deselect-all-button relevant section in reference guide}
     */
    var GridDeselectAllButton = (function (_super) {
        __extends(GridDeselectAllButton, _super);
        function GridDeselectAllButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new GridDeselectAllButton() cannot be invoked directly, please use 'model.pages.createGridDeselectAllButton()'");
            }
            return _this;
        }
        Object.defineProperty(GridDeselectAllButton.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new GridDeselectAllButton instance in the SDK and on the server.
         * The new GridDeselectAllButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        GridDeselectAllButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridDeselectAllButton, "items", true);
        };
        /**
         * Creates and returns a new GridDeselectAllButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridDeselectAllButton.create = function (model) {
            return internal.instancehelpers.createElement(model, GridDeselectAllButton);
        };
        GridDeselectAllButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Deselect all";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Alles deselecteren";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        return GridDeselectAllButton;
    }(GridControlBarButton));
    GridDeselectAllButton.typeName = "Pages$GridDeselectAllButton";
    GridDeselectAllButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.GridDeselectAllButton = GridDeselectAllButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/edit-button relevant section in reference guide}
     */
    var GridEditButton = (function (_super) {
        __extends(GridEditButton, _super);
        function GridEditButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__pageSettings = new internal.PartProperty(GridEditButton, _this, "pageSettings", null, true);
            _this.__pagesForSpecializations = new internal.PartListProperty(GridEditButton, _this, "pagesForSpecializations", []);
            if (arguments.length < 4) {
                throw new Error("new GridEditButton() cannot be invoked directly, please use 'model.pages.createGridEditButton()'");
            }
            return _this;
        }
        Object.defineProperty(GridEditButton.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridEditButton.prototype, "pageSettings", {
            get: function () { return this.__pageSettings.get(); },
            set: function (newValue) { this.__pageSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridEditButton.prototype, "pagesForSpecializations", {
            get: function () { return this.__pagesForSpecializations.get(); },
            set: function (newValue) { this.__pagesForSpecializations.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new GridEditButton instance in the SDK and on the server.
         * The new GridEditButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        GridEditButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridEditButton, "items", true);
        };
        /**
         * Creates and returns a new GridEditButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridEditButton.create = function (model) {
            return internal.instancehelpers.createElement(model, GridEditButton);
        };
        GridEditButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Edit";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Bewerken";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
            this.pageSettings = PageSettings.create(this.model);
        };
        return GridEditButton;
    }(GridControlBarButton));
    GridEditButton.typeName = "Pages$GridEditButton";
    GridEditButton.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "pageSettings": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.GridEditButton = GridEditButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/grid-new-button relevant section in reference guide}
     */
    var GridNewButton = (function (_super) {
        __extends(GridNewButton, _super);
        function GridNewButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__entity = new internal.ByNameReferenceProperty(GridNewButton, _this, "entity", null, "DomainModels$Entity");
            _this.__editLocation = new internal.EnumProperty(GridNewButton, _this, "editLocation", NewButtonEditLocation.Form, NewButtonEditLocation);
            _this.__pageSettings = new internal.PartProperty(GridNewButton, _this, "pageSettings", null, true);
            _this.__isPersistent = new internal.PrimitiveProperty(GridNewButton, _this, "isPersistent", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new GridNewButton() cannot be invoked directly, please use 'model.pages.createGridNewButton()'");
            }
            return _this;
        }
        Object.defineProperty(GridNewButton.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridNewButton.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridNewButton.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridNewButton.prototype, "editLocation", {
            get: function () { return this.__editLocation.get(); },
            set: function (newValue) { this.__editLocation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridNewButton.prototype, "pageSettings", {
            get: function () { return this.__pageSettings.get(); },
            set: function (newValue) { this.__pageSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridNewButton.prototype, "isPersistent", {
            /**
             * In version 6.2.0: deleted
             * In version 6.0.0: deprecated
             */
            get: function () { return this.__isPersistent.get(); },
            set: function (newValue) { this.__isPersistent.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new GridNewButton instance in the SDK and on the server.
         * The new GridNewButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        GridNewButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridNewButton, "items", true);
        };
        /**
         * Creates and returns a new GridNewButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridNewButton.create = function (model) {
            return internal.instancehelpers.createElement(model, GridNewButton);
        };
        GridNewButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "New";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Nieuw";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
            this.editLocation = NewButtonEditLocation.Form;
            this.pageSettings = PageSettings.create(this.model);
        };
        return GridNewButton;
    }(GridControlBarButton));
    GridNewButton.typeName = "Pages$GridNewButton";
    GridNewButton.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "pageSettings": {
                "required": {
                    "currentValue": true
                }
            },
            "isPersistent": {
                "deprecated": "6.0.0",
                "deprecationMessage": "Persistent 'New' buttons are not supported in Mendix 6.",
                "deleted": "6.2.0",
                "deletionMessage": null
            }
        }
    }, internal.StructureType.Element);
    pages.GridNewButton = GridNewButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/search-button relevant section in reference guide}
     */
    var GridSearchButton = (function (_super) {
        __extends(GridSearchButton, _super);
        function GridSearchButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new GridSearchButton() cannot be invoked directly, please use 'model.pages.createGridSearchButton()'");
            }
            return _this;
        }
        Object.defineProperty(GridSearchButton.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridSearchButton.prototype, "containerAsGridControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, GridControlBar); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new GridSearchButton instance in the SDK and on the server.
         * The new GridSearchButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        GridSearchButton.createInControlBarUnderItems = function (container) {
            return internal.instancehelpers.createElement(container, GridSearchButton, "items", true);
        };
        /**
         * Creates and returns a new GridSearchButton instance in the SDK and on the server.
         * The new GridSearchButton will be automatically stored in the 'searchButton' property
         * of the parent GridControlBar element passed as argument.
         */
        GridSearchButton.createInGridControlBarUnderSearchButton = function (container) {
            return internal.instancehelpers.createElement(container, GridSearchButton, "searchButton", false);
        };
        /**
         * Creates and returns a new GridSearchButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridSearchButton.create = function (model) {
            return internal.instancehelpers.createElement(model, GridSearchButton);
        };
        GridSearchButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Search";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Zoeken";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        return GridSearchButton;
    }(GridControlBarButton));
    GridSearchButton.typeName = "Pages$GridSearchButton";
    GridSearchButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.GridSearchButton = GridSearchButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/select-all-button relevant section in reference guide}
     */
    var GridSelectAllButton = (function (_super) {
        __extends(GridSelectAllButton, _super);
        function GridSelectAllButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__selectionType = new internal.EnumProperty(GridSelectAllButton, _this, "selectionType", SelectionType.SelectPage, SelectionType);
            if (arguments.length < 4) {
                throw new Error("new GridSelectAllButton() cannot be invoked directly, please use 'model.pages.createGridSelectAllButton()'");
            }
            return _this;
        }
        Object.defineProperty(GridSelectAllButton.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridSelectAllButton.prototype, "selectionType", {
            get: function () { return this.__selectionType.get(); },
            set: function (newValue) { this.__selectionType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new GridSelectAllButton instance in the SDK and on the server.
         * The new GridSelectAllButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        GridSelectAllButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridSelectAllButton, "items", true);
        };
        /**
         * Creates and returns a new GridSelectAllButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridSelectAllButton.create = function (model) {
            return internal.instancehelpers.createElement(model, GridSelectAllButton);
        };
        GridSelectAllButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Select all";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Alles selecteren";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
            this.selectionType = SelectionType.SelectPage;
        };
        return GridSelectAllButton;
    }(GridControlBarButton));
    GridSelectAllButton.typeName = "Pages$GridSelectAllButton";
    GridSelectAllButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.GridSelectAllButton = GridSelectAllButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/sort-bar relevant section in reference guide}
     */
    var GridSortBar = (function (_super) {
        __extends(GridSortBar, _super);
        function GridSortBar(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__sortItems = new internal.PartListProperty(GridSortBar, _this, "sortItems", []);
            if (arguments.length < 4) {
                throw new Error("new GridSortBar() cannot be invoked directly, please use 'model.pages.createGridSortBar()'");
            }
            return _this;
        }
        Object.defineProperty(GridSortBar.prototype, "containerAsDropDownSearchField", {
            get: function () { return _super.prototype.getContainerAs.call(this, DropDownSearchField); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridSortBar.prototype, "containerAsSelectorDatabaseSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, SelectorDatabaseSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridSortBar.prototype, "containerAsSelectorXPathSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, SelectorXPathSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridSortBar.prototype, "containerAsSortableEntityPathSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, SortableEntityPathSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridSortBar.prototype, "sortItems", {
            get: function () { return this.__sortItems.get(); },
            set: function (newValue) { this.__sortItems.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * The new GridSortBar will be automatically stored in the 'sortBar' property
         * of the parent DropDownSearchField element passed as argument.
         */
        GridSortBar.createInDropDownSearchFieldUnderSortBar = function (container) {
            return internal.instancehelpers.createElement(container, GridSortBar, "sortBar", false);
        };
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * The new GridSortBar will be automatically stored in the 'sortBar' property
         * of the parent SelectorDatabaseSource element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        GridSortBar.createInSelectorDatabaseSourceUnderSortBar = function (container) {
            internal.createInVersionCheck(container.model, GridSortBar.typeName, ["6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, GridSortBar, "sortBar", false);
        };
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * The new GridSortBar will be automatically stored in the 'sortBar' property
         * of the parent SelectorXPathSource element passed as argument.
         */
        GridSortBar.createInSelectorXPathSourceUnderSortBar = function (container) {
            return internal.instancehelpers.createElement(container, GridSortBar, "sortBar", false);
        };
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * The new GridSortBar will be automatically stored in the 'sortBar' property
         * of the parent SortableEntityPathSource element passed as argument.
         */
        GridSortBar.createInSortableEntityPathSourceUnderSortBar = function (container) {
            return internal.instancehelpers.createElement(container, GridSortBar, "sortBar", false);
        };
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridSortBar.create = function (model) {
            return internal.instancehelpers.createElement(model, GridSortBar);
        };
        GridSortBar.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return GridSortBar;
    }(internal.Element));
    GridSortBar.typeName = "Pages$GridSortBar";
    GridSortBar.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.GridSortBar = GridSortBar;
    var GridSortItem = (function (_super) {
        __extends(GridSortItem, _super);
        function GridSortItem(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__attributePath = new internal.PrimitiveProperty(GridSortItem, _this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            _this.__sortDirection = new internal.EnumProperty(GridSortItem, _this, "sortDirection", SortDirection.Ascending, SortDirection);
            if (arguments.length < 4) {
                throw new Error("new GridSortItem() cannot be invoked directly, please use 'model.pages.createGridSortItem()'");
            }
            return _this;
        }
        Object.defineProperty(GridSortItem.prototype, "containerAsGridSortBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, GridSortBar); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridSortItem.prototype, "attributePath", {
            /**
             * The value of this property is conceptually of type paths.AttributePath.
             */
            get: function () { return this.__attributePath.get(); },
            set: function (newValue) { this.__attributePath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridSortItem.prototype, "sortDirection", {
            get: function () { return this.__sortDirection.get(); },
            set: function (newValue) { this.__sortDirection.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new GridSortItem instance in the SDK and on the server.
         * The new GridSortItem will be automatically stored in the 'sortItems' property
         * of the parent GridSortBar element passed as argument.
         */
        GridSortItem.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridSortItem, "sortItems", true);
        };
        /**
         * Creates and returns a new GridSortItem instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridSortItem.create = function (model) {
            return internal.instancehelpers.createElement(model, GridSortItem);
        };
        GridSortItem.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.attributePath = "";
            this.sortDirection = SortDirection.Ascending;
        };
        return GridSortItem;
    }(internal.Element));
    GridSortItem.typeName = "Pages$GridSortItem";
    GridSortItem.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "attributePath": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.GridSortItem = GridSortItem;
    var GridXPathSource = (function (_super) {
        __extends(GridXPathSource, _super);
        function GridXPathSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__xPathConstraint = new internal.PrimitiveProperty(GridXPathSource, _this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
            _this.__applyContext = new internal.PrimitiveProperty(GridXPathSource, _this, "applyContext", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__removeAllFromContext = new internal.PrimitiveProperty(GridXPathSource, _this, "removeAllFromContext", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__removeFromContextIds = new internal.ByNameReferenceListProperty(GridXPathSource, _this, "removeFromContextIds", [], "DomainModels$Entity");
            if (arguments.length < 4) {
                throw new Error("new GridXPathSource() cannot be invoked directly, please use 'model.pages.createGridXPathSource()'");
            }
            return _this;
        }
        Object.defineProperty(GridXPathSource.prototype, "containerAsEntityWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, EntityWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridXPathSource.prototype, "xPathConstraint", {
            /**
             * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
             */
            get: function () { return this.__xPathConstraint.get(); },
            set: function (newValue) { this.__xPathConstraint.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridXPathSource.prototype, "applyContext", {
            get: function () { return this.__applyContext.get(); },
            set: function (newValue) { this.__applyContext.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridXPathSource.prototype, "removeAllFromContext", {
            get: function () { return this.__removeAllFromContext.get(); },
            set: function (newValue) { this.__removeAllFromContext.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridXPathSource.prototype, "removeFromContextIds", {
            get: function () { return this.__removeFromContextIds.get(); },
            set: function (newValue) { this.__removeFromContextIds.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridXPathSource.prototype, "removeFromContextIdsQualifiedNames", {
            get: function () { return this.__removeFromContextIds.qualifiedNames(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new GridXPathSource instance in the SDK and on the server.
         * The new GridXPathSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        GridXPathSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GridXPathSource, "dataSource", false);
        };
        /**
         * Creates and returns a new GridXPathSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GridXPathSource.create = function (model) {
            return internal.instancehelpers.createElement(model, GridXPathSource);
        };
        GridXPathSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return GridXPathSource;
    }(GridBaseSource));
    GridXPathSource.typeName = "Pages$GridXPathSource";
    GridXPathSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.GridXPathSource = GridXPathSource;
    /**
     * See: {@link https://docs.mendix.com/refguide7/group-box relevant section in reference guide}
     */
    var GroupBox = (function (_super) {
        __extends(GroupBox, _super);
        function GroupBox(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__caption = new internal.PartProperty(GroupBox, _this, "caption", null, true);
            _this.__collapsible = new internal.EnumProperty(GroupBox, _this, "collapsible", GroupBoxCollapsible.YesInitiallyExpanded, GroupBoxCollapsible);
            _this.__widget = new internal.PartProperty(GroupBox, _this, "widget", null, false);
            if (arguments.length < 4) {
                throw new Error("new GroupBox() cannot be invoked directly, please use 'model.pages.createGroupBox()'");
            }
            return _this;
        }
        Object.defineProperty(GroupBox.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "collapsible", {
            get: function () { return this.__collapsible.get(); },
            set: function (newValue) { this.__collapsible.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupBox.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        GroupBox.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, GroupBox.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, GroupBox, "footerWidget", false);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        GroupBox.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        GroupBox.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        GroupBox.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        GroupBox.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, GroupBox, "leftWidget", false);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        GroupBox.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, GroupBox, "rightWidget", false);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        GroupBox.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        GroupBox.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        GroupBox.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        GroupBox.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        GroupBox.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        GroupBox.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        GroupBox.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        GroupBox.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        GroupBox.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, GroupBox, "firstWidget", false);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        GroupBox.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, GroupBox, "secondWidget", false);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        GroupBox.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        GroupBox.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        GroupBox.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widget", false);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        GroupBox.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, GroupBox, "widgets", true);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        GroupBox.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, GroupBox.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, GroupBox, "parameterWidget", false);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        GroupBox.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, GroupBox.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, GroupBox, "reportWidget", false);
        };
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GroupBox.create = function (model) {
            return internal.instancehelpers.createElement(model, GroupBox);
        };
        GroupBox.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Group box";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Group box";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
            this.collapsible = GroupBoxCollapsible.YesInitiallyExpanded;
        };
        return GroupBox;
    }(ConditionallyVisibleWidget));
    GroupBox.typeName = "Pages$GroupBox";
    GroupBox.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.GroupBox = GroupBox;
    /**
     * See: {@link https://docs.mendix.com/refguide7/header relevant section in reference guide}
     */
    var Header = (function (_super) {
        __extends(Header, _super);
        function Header(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__leftWidget = new internal.PartProperty(Header, _this, "leftWidget", null, false);
            _this.__rightWidget = new internal.PartProperty(Header, _this, "rightWidget", null, false);
            if (arguments.length < 4) {
                throw new Error("new Header() cannot be invoked directly, please use 'model.pages.createHeader()'");
            }
            return _this;
        }
        Object.defineProperty(Header.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Header.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Header.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Header.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Header.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Header.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Header.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Header.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Header.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Header.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Header.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Header.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Header.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Header.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Header.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Header.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Header.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Header.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Header.prototype, "leftWidget", {
            get: function () { return this.__leftWidget.get(); },
            set: function (newValue) { this.__leftWidget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Header.prototype, "rightWidget", {
            get: function () { return this.__rightWidget.get(); },
            set: function (newValue) { this.__rightWidget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        Header.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, Header.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, Header, "footerWidget", false);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        Header.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        Header.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        Header.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        Header.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, Header, "leftWidget", false);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        Header.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, Header, "rightWidget", false);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        Header.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        Header.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        Header.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        Header.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        Header.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        Header.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        Header.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        Header.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        Header.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, Header, "firstWidget", false);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        Header.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, Header, "secondWidget", false);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        Header.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        Header.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        Header.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Header, "widget", false);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        Header.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, Header, "widgets", true);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        Header.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, Header.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, Header, "parameterWidget", false);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        Header.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, Header.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, Header, "reportWidget", false);
        };
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Header.create = function (model) {
            return internal.instancehelpers.createElement(model, Header);
        };
        Header.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return Header;
    }(Widget));
    Header.typeName = "Pages$Header";
    Header.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.Header = Header;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var SplitPane = (function (_super) {
        __extends(SplitPane, _super);
        function SplitPane(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__firstWidget = new internal.PartProperty(SplitPane, _this, "firstWidget", null, false);
            _this.__secondWidget = new internal.PartProperty(SplitPane, _this, "secondWidget", null, false);
            _this.__animatedResize = new internal.PrimitiveProperty(SplitPane, _this, "animatedResize", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__height = new internal.PrimitiveProperty(SplitPane, _this, "height", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__position = new internal.PrimitiveProperty(SplitPane, _this, "position", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new SplitPane() cannot be invoked directly, please use 'model.pages.createSplitPane()'");
            }
            return _this;
        }
        Object.defineProperty(SplitPane.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "firstWidget", {
            get: function () { return this.__firstWidget.get(); },
            set: function (newValue) { this.__firstWidget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "secondWidget", {
            get: function () { return this.__secondWidget.get(); },
            set: function (newValue) { this.__secondWidget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "animatedResize", {
            get: function () { return this.__animatedResize.get(); },
            set: function (newValue) { this.__animatedResize.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "height", {
            get: function () { return this.__height.get(); },
            set: function (newValue) { this.__height.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPane.prototype, "position", {
            get: function () { return this.__position.get(); },
            set: function (newValue) { this.__position.set(newValue); },
            enumerable: true,
            configurable: true
        });
        SplitPane.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.position = 50;
        };
        return SplitPane;
    }(Widget));
    SplitPane.typeName = "Pages$SplitPane";
    SplitPane.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.SplitPane = SplitPane;
    /**
     * See: {@link https://docs.mendix.com/refguide7/horizontal-split-pane relevant section in reference guide}
     */
    var HorizontalSplitPane = (function (_super) {
        __extends(HorizontalSplitPane, _super);
        function HorizontalSplitPane(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new HorizontalSplitPane() cannot be invoked directly, please use 'model.pages.createHorizontalSplitPane()'");
            }
            return _this;
        }
        Object.defineProperty(HorizontalSplitPane.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HorizontalSplitPane.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HorizontalSplitPane.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HorizontalSplitPane.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HorizontalSplitPane.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HorizontalSplitPane.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HorizontalSplitPane.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HorizontalSplitPane.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HorizontalSplitPane.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HorizontalSplitPane.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HorizontalSplitPane.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HorizontalSplitPane.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HorizontalSplitPane.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HorizontalSplitPane.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HorizontalSplitPane.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HorizontalSplitPane.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HorizontalSplitPane.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HorizontalSplitPane.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        HorizontalSplitPane.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, HorizontalSplitPane.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "footerWidget", false);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        HorizontalSplitPane.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        HorizontalSplitPane.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        HorizontalSplitPane.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        HorizontalSplitPane.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "leftWidget", false);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        HorizontalSplitPane.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "rightWidget", false);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        HorizontalSplitPane.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        HorizontalSplitPane.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        HorizontalSplitPane.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        HorizontalSplitPane.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        HorizontalSplitPane.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        HorizontalSplitPane.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        HorizontalSplitPane.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        HorizontalSplitPane.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        HorizontalSplitPane.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "firstWidget", false);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        HorizontalSplitPane.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "secondWidget", false);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        HorizontalSplitPane.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        HorizontalSplitPane.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        HorizontalSplitPane.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        HorizontalSplitPane.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "widgets", true);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        HorizontalSplitPane.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, HorizontalSplitPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "parameterWidget", false);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        HorizontalSplitPane.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, HorizontalSplitPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, HorizontalSplitPane, "reportWidget", false);
        };
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        HorizontalSplitPane.create = function (model) {
            return internal.instancehelpers.createElement(model, HorizontalSplitPane);
        };
        HorizontalSplitPane.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return HorizontalSplitPane;
    }(SplitPane));
    HorizontalSplitPane.typeName = "Pages$HorizontalSplitPane";
    HorizontalSplitPane.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.HorizontalSplitPane = HorizontalSplitPane;
    var ImageIcon = (function (_super) {
        __extends(ImageIcon, _super);
        function ImageIcon(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__image = new internal.ByNameReferenceProperty(ImageIcon, _this, "image", null, "Images$Image");
            if (arguments.length < 4) {
                throw new Error("new ImageIcon() cannot be invoked directly, please use 'model.pages.createImageIcon()'");
            }
            return _this;
        }
        Object.defineProperty(ImageIcon.prototype, "containerAsMenuItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, menus_1.menus.MenuItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageIcon.prototype, "containerAsButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, Button); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageIcon.prototype, "containerAsControlBarButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBarButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageIcon.prototype, "image", {
            get: function () { return this.__image.get(); },
            set: function (newValue) { this.__image.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageIcon.prototype, "imageQualifiedName", {
            get: function () { return this.__image.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ImageIcon instance in the SDK and on the server.
         * The new ImageIcon will be automatically stored in the 'icon' property
         * of the parent menus.MenuItem element passed as argument.
         */
        ImageIcon.createInMenuItemUnderIcon = function (container) {
            return internal.instancehelpers.createElement(container, ImageIcon, "icon", false);
        };
        /**
         * Creates and returns a new ImageIcon instance in the SDK and on the server.
         * The new ImageIcon will be automatically stored in the 'icon' property
         * of the parent Button element passed as argument.
         */
        ImageIcon.createInButtonUnderIcon = function (container) {
            return internal.instancehelpers.createElement(container, ImageIcon, "icon", false);
        };
        /**
         * Creates and returns a new ImageIcon instance in the SDK and on the server.
         * The new ImageIcon will be automatically stored in the 'icon' property
         * of the parent ControlBarButton element passed as argument.
         */
        ImageIcon.createInControlBarButtonUnderIcon = function (container) {
            return internal.instancehelpers.createElement(container, ImageIcon, "icon", false);
        };
        /**
         * Creates and returns a new ImageIcon instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ImageIcon.create = function (model) {
            return internal.instancehelpers.createElement(model, ImageIcon);
        };
        ImageIcon.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ImageIcon;
    }(Icon));
    ImageIcon.typeName = "Pages$ImageIcon";
    ImageIcon.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "image": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ImageIcon = ImageIcon;
    /**
     * See: {@link https://docs.mendix.com/refguide7/image-uploader relevant section in reference guide}
     */
    var ImageUploader = (function (_super) {
        __extends(ImageUploader, _super);
        function ImageUploader(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__allowedExtensions = new internal.PrimitiveProperty(ImageUploader, _this, "allowedExtensions", "", internal.PrimitiveTypeEnum.String);
            _this.__thumbnailSize = new internal.PrimitiveProperty(ImageUploader, _this, "thumbnailSize", { width: 0, height: 0 }, internal.PrimitiveTypeEnum.Size);
            _this.__maxFileSize = new internal.PrimitiveProperty(ImageUploader, _this, "maxFileSize", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new ImageUploader() cannot be invoked directly, please use 'model.pages.createImageUploader()'");
            }
            return _this;
        }
        Object.defineProperty(ImageUploader.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "allowedExtensions", {
            get: function () { return this.__allowedExtensions.get(); },
            set: function (newValue) { this.__allowedExtensions.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "thumbnailSize", {
            get: function () { return this.__thumbnailSize.get(); },
            set: function (newValue) { this.__thumbnailSize.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageUploader.prototype, "maxFileSize", {
            get: function () { return this.__maxFileSize.get(); },
            set: function (newValue) { this.__maxFileSize.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        ImageUploader.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, ImageUploader.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, ImageUploader, "footerWidget", false);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        ImageUploader.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        ImageUploader.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        ImageUploader.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        ImageUploader.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "leftWidget", false);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        ImageUploader.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "rightWidget", false);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        ImageUploader.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        ImageUploader.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        ImageUploader.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        ImageUploader.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        ImageUploader.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        ImageUploader.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        ImageUploader.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        ImageUploader.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        ImageUploader.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "firstWidget", false);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        ImageUploader.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "secondWidget", false);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        ImageUploader.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        ImageUploader.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        ImageUploader.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widget", false);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        ImageUploader.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, ImageUploader, "widgets", true);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ImageUploader.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, ImageUploader.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ImageUploader, "parameterWidget", false);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ImageUploader.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, ImageUploader.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ImageUploader, "reportWidget", false);
        };
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ImageUploader.create = function (model) {
            return internal.instancehelpers.createElement(model, ImageUploader);
        };
        ImageUploader.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.label = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Upload image";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                        translation.languageCode = "nl_NL";
                        translation.text = "Upload afbeelding";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.maxFileSize = 5;
            this.thumbnailSize = { width: 100, height: 75 };
        };
        return ImageUploader;
    }(InputWidget));
    ImageUploader.typeName = "Pages$ImageUploader";
    ImageUploader.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ImageUploader = ImageUploader;
    var ImageViewerSource = (function (_super) {
        __extends(ImageViewerSource, _super);
        function ImageViewerSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new ImageViewerSource() cannot be invoked directly, please use 'model.pages.createImageViewerSource()'");
            }
            return _this;
        }
        Object.defineProperty(ImageViewerSource.prototype, "containerAsEntityWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, EntityWidget); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ImageViewerSource instance in the SDK and on the server.
         * The new ImageViewerSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        ImageViewerSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ImageViewerSource, "dataSource", false);
        };
        /**
         * Creates and returns a new ImageViewerSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ImageViewerSource.create = function (model) {
            return internal.instancehelpers.createElement(model, ImageViewerSource);
        };
        ImageViewerSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ImageViewerSource;
    }(EntityPathSource));
    ImageViewerSource.typeName = "Pages$ImageViewerSource";
    ImageViewerSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ImageViewerSource = ImageViewerSource;
    /**
     * See: {@link https://docs.mendix.com/refguide7/input-reference-set-selector relevant section in reference guide}
     */
    var InputReferenceSetSelector = (function (_super) {
        __extends(InputReferenceSetSelector, _super);
        function InputReferenceSetSelector(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new InputReferenceSetSelector() cannot be invoked directly, please use 'model.pages.createInputReferenceSetSelector()'");
            }
            return _this;
        }
        Object.defineProperty(InputReferenceSetSelector.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputReferenceSetSelector.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputReferenceSetSelector.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputReferenceSetSelector.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputReferenceSetSelector.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputReferenceSetSelector.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputReferenceSetSelector.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputReferenceSetSelector.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputReferenceSetSelector.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputReferenceSetSelector.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputReferenceSetSelector.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputReferenceSetSelector.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputReferenceSetSelector.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputReferenceSetSelector.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputReferenceSetSelector.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputReferenceSetSelector.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputReferenceSetSelector.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputReferenceSetSelector.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        InputReferenceSetSelector.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, InputReferenceSetSelector.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "footerWidget", false);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        InputReferenceSetSelector.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        InputReferenceSetSelector.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        InputReferenceSetSelector.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        InputReferenceSetSelector.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "leftWidget", false);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        InputReferenceSetSelector.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "rightWidget", false);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        InputReferenceSetSelector.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        InputReferenceSetSelector.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        InputReferenceSetSelector.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        InputReferenceSetSelector.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        InputReferenceSetSelector.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        InputReferenceSetSelector.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        InputReferenceSetSelector.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        InputReferenceSetSelector.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        InputReferenceSetSelector.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "firstWidget", false);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        InputReferenceSetSelector.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "secondWidget", false);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        InputReferenceSetSelector.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        InputReferenceSetSelector.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        InputReferenceSetSelector.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        InputReferenceSetSelector.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "widgets", true);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        InputReferenceSetSelector.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, InputReferenceSetSelector.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "parameterWidget", false);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        InputReferenceSetSelector.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, InputReferenceSetSelector.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, InputReferenceSetSelector, "reportWidget", false);
        };
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        InputReferenceSetSelector.create = function (model) {
            return internal.instancehelpers.createElement(model, InputReferenceSetSelector);
        };
        InputReferenceSetSelector.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return InputReferenceSetSelector;
    }(AssociationWidget));
    InputReferenceSetSelector.typeName = "Pages$InputReferenceSetSelector";
    InputReferenceSetSelector.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.InputReferenceSetSelector = InputReferenceSetSelector;
    /**
     * See: {@link https://docs.mendix.com/refguide7/label relevant section in reference guide}
     */
    var Label = (function (_super) {
        __extends(Label, _super);
        function Label(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__caption = new internal.PartProperty(Label, _this, "caption", null, true);
            if (arguments.length < 4) {
                throw new Error("new Label() cannot be invoked directly, please use 'model.pages.createLabel()'");
            }
            return _this;
        }
        Object.defineProperty(Label.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        Label.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, Label.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, Label, "footerWidget", false);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        Label.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        Label.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        Label.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        Label.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, Label, "leftWidget", false);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        Label.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, Label, "rightWidget", false);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        Label.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        Label.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        Label.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        Label.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        Label.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        Label.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        Label.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        Label.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        Label.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, Label, "firstWidget", false);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        Label.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, Label, "secondWidget", false);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        Label.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        Label.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        Label.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Label, "widget", false);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        Label.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, Label, "widgets", true);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        Label.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, Label.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, Label, "parameterWidget", false);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        Label.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, Label.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, Label, "reportWidget", false);
        };
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Label.create = function (model) {
            return internal.instancehelpers.createElement(model, Label);
        };
        Label.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Label";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
        };
        return Label;
    }(ConditionallyVisibleWidget));
    Label.typeName = "Pages$Label";
    Label.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "caption": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.Label = Label;
    /**
     * See: {@link https://docs.mendix.com/refguide7/layout relevant section in reference guide}
     */
    var Layout = (function (_super) {
        __extends(Layout, _super);
        function Layout(model, typeName, id, isPartial, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, container) || this;
            _this.__widget = new internal.PartProperty(Layout, _this, "widget", null, false);
            _this.__layoutCall = new internal.PartProperty(Layout, _this, "layoutCall", null, false);
            _this.__layoutType = new internal.EnumProperty(Layout, _this, "layoutType", LayoutType.Responsive, LayoutType);
            _this.__mainPlaceholder = new internal.ByNameReferenceProperty(Layout, _this, "mainPlaceholder", null, "Pages$LayoutParameter");
            _this.__acceptButtonPlaceholder = new internal.ByNameReferenceProperty(Layout, _this, "acceptButtonPlaceholder", null, "Pages$LayoutParameter");
            _this.__cancelButtonPlaceholder = new internal.ByNameReferenceProperty(Layout, _this, "cancelButtonPlaceholder", null, "Pages$LayoutParameter");
            _this.__mainPlaceholderName = new internal.PrimitiveProperty(Layout, _this, "mainPlaceholderName", "", internal.PrimitiveTypeEnum.String);
            _this.__acceptPlaceholderName = new internal.PrimitiveProperty(Layout, _this, "acceptPlaceholderName", "", internal.PrimitiveTypeEnum.String);
            _this.__cancelPlaceholderName = new internal.PrimitiveProperty(Layout, _this, "cancelPlaceholderName", "", internal.PrimitiveTypeEnum.String);
            _this.__useMainPlaceholderForPopups = new internal.PrimitiveProperty(Layout, _this, "useMainPlaceholderForPopups", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__class = new internal.PrimitiveProperty(Layout, _this, "class", "", internal.PrimitiveTypeEnum.String);
            _this.__style = new internal.PrimitiveProperty(Layout, _this, "style", "", internal.PrimitiveTypeEnum.String);
            _this._containmentName = "documents";
            return _this;
        }
        Object.defineProperty(Layout.prototype, "containerAsFolderBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, projects_1.projects.FolderBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "layoutCall", {
            /**
             * In version 6.8.0: added optional
             */
            get: function () { return this.__layoutCall.get(); },
            set: function (newValue) { this.__layoutCall.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "layoutType", {
            /**
             * In version 6.8.0: added public
             */
            get: function () { return this.__layoutType.get(); },
            set: function (newValue) { this.__layoutType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "mainPlaceholder", {
            /**
             * In version 6.8.0: deleted
             */
            get: function () { return this.__mainPlaceholder.get(); },
            set: function (newValue) { this.__mainPlaceholder.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "mainPlaceholderQualifiedName", {
            get: function () { return this.__mainPlaceholder.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "acceptButtonPlaceholder", {
            /**
             * In version 6.8.0: deleted
             */
            get: function () { return this.__acceptButtonPlaceholder.get(); },
            set: function (newValue) { this.__acceptButtonPlaceholder.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "acceptButtonPlaceholderQualifiedName", {
            get: function () { return this.__acceptButtonPlaceholder.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "cancelButtonPlaceholder", {
            /**
             * In version 6.8.0: deleted
             */
            get: function () { return this.__cancelButtonPlaceholder.get(); },
            set: function (newValue) { this.__cancelButtonPlaceholder.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "cancelButtonPlaceholderQualifiedName", {
            get: function () { return this.__cancelButtonPlaceholder.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "mainPlaceholderName", {
            /**
             * In version 6.8.0: introduced
             */
            get: function () { return this.__mainPlaceholderName.get(); },
            set: function (newValue) { this.__mainPlaceholderName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "acceptPlaceholderName", {
            /**
             * In version 6.8.0: introduced
             */
            get: function () { return this.__acceptPlaceholderName.get(); },
            set: function (newValue) { this.__acceptPlaceholderName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "cancelPlaceholderName", {
            /**
             * In version 6.8.0: introduced
             */
            get: function () { return this.__cancelPlaceholderName.get(); },
            set: function (newValue) { this.__cancelPlaceholderName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "useMainPlaceholderForPopups", {
            get: function () { return this.__useMainPlaceholderForPopups.get(); },
            set: function (newValue) { this.__useMainPlaceholderForPopups.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Layout.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new Layout unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        Layout.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, Layout);
        };
        Layout.prototype._isByNameReferrable = function () { return true; };
        Layout.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.layoutCall = LayoutCall.create(this.model);
            this.layoutType = LayoutType.Responsive;
        };
        return Layout;
    }(FormBase));
    Layout.typeName = "Pages$Layout";
    Layout.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "layoutCall": {
                "required": {
                    "currentValue": false,
                    "changedIn": [
                        "6.8.0"
                    ]
                }
            },
            "layoutType": {
                "public": {
                    "currentValue": true,
                    "changedIn": [
                        "6.8.0"
                    ]
                }
            },
            "mainPlaceholder": {
                "deleted": "6.8.0",
                "deletionMessage": null
            },
            "acceptButtonPlaceholder": {
                "deleted": "6.8.0",
                "deletionMessage": null
            },
            "cancelButtonPlaceholder": {
                "deleted": "6.8.0",
                "deletionMessage": null
            },
            "mainPlaceholderName": {
                "introduced": "6.8.0"
            },
            "acceptPlaceholderName": {
                "introduced": "6.8.0"
            },
            "cancelPlaceholderName": {
                "introduced": "6.8.0"
            }
        }
    }, internal.StructureType.ModelUnit);
    pages.Layout = Layout;
    var LayoutCall = (function (_super) {
        __extends(LayoutCall, _super);
        function LayoutCall(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__layout = new internal.ByNameReferenceProperty(LayoutCall, _this, "layout", null, "Pages$Layout");
            _this.__arguments = new internal.PartListProperty(LayoutCall, _this, "arguments", []);
            if (arguments.length < 4) {
                throw new Error("new LayoutCall() cannot be invoked directly, please use 'model.pages.createLayoutCall()'");
            }
            return _this;
        }
        Object.defineProperty(LayoutCall.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutCall.prototype, "containerAsPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, Page); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutCall.prototype, "layout", {
            get: function () { return this.__layout.get(); },
            set: function (newValue) { this.__layout.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutCall.prototype, "layoutQualifiedName", {
            get: function () { return this.__layout.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutCall.prototype, "arguments", {
            get: function () { return this.__arguments.get(); },
            set: function (newValue) { this.__arguments.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new LayoutCall instance in the SDK and on the server.
         * The new LayoutCall will be automatically stored in the 'layoutCall' property
         * of the parent Layout element passed as argument.
         */
        LayoutCall.createInLayoutUnderLayoutCall = function (container) {
            return internal.instancehelpers.createElement(container, LayoutCall, "layoutCall", false);
        };
        /**
         * Creates and returns a new LayoutCall instance in the SDK and on the server.
         * The new LayoutCall will be automatically stored in the 'layoutCall' property
         * of the parent Page element passed as argument.
         */
        LayoutCall.createInPageUnderLayoutCall = function (container) {
            return internal.instancehelpers.createElement(container, LayoutCall, "layoutCall", false);
        };
        /**
         * Creates and returns a new LayoutCall instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LayoutCall.create = function (model) {
            return internal.instancehelpers.createElement(model, LayoutCall);
        };
        LayoutCall.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return LayoutCall;
    }(internal.Element));
    LayoutCall.typeName = "Pages$LayoutCall";
    LayoutCall.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.LayoutCall = LayoutCall;
    var LayoutCallArgument = (function (_super) {
        __extends(LayoutCallArgument, _super);
        function LayoutCallArgument(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__parameterName = new internal.PrimitiveProperty(LayoutCallArgument, _this, "parameterName", "", internal.PrimitiveTypeEnum.String);
            _this.__parameter = new internal.ByNameReferenceProperty(LayoutCallArgument, _this, "parameter", null, "Pages$LayoutParameter");
            _this.__widget = new internal.PartProperty(LayoutCallArgument, _this, "widget", null, false);
            if (arguments.length < 4) {
                throw new Error("new LayoutCallArgument() cannot be invoked directly, please use 'model.pages.createLayoutCallArgument()'");
            }
            return _this;
        }
        Object.defineProperty(LayoutCallArgument.prototype, "containerAsLayoutCall", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCall); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutCallArgument.prototype, "parameterName", {
            /**
             * In version 6.8.0: deleted
             */
            get: function () { return this.__parameterName.get(); },
            set: function (newValue) { this.__parameterName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutCallArgument.prototype, "parameter", {
            /**
             * In version 6.8.0: introduced
             */
            get: function () { return this.__parameter.get(); },
            set: function (newValue) { this.__parameter.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutCallArgument.prototype, "parameterQualifiedName", {
            get: function () { return this.__parameter.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutCallArgument.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new LayoutCallArgument instance in the SDK and on the server.
         * The new LayoutCallArgument will be automatically stored in the 'arguments' property
         * of the parent LayoutCall element passed as argument.
         */
        LayoutCallArgument.createIn = function (container) {
            return internal.instancehelpers.createElement(container, LayoutCallArgument, "arguments", true);
        };
        /**
         * Creates and returns a new LayoutCallArgument instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LayoutCallArgument.create = function (model) {
            return internal.instancehelpers.createElement(model, LayoutCallArgument);
        };
        LayoutCallArgument.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return LayoutCallArgument;
    }(internal.Element));
    LayoutCallArgument.typeName = "Pages$LayoutCallArgument";
    LayoutCallArgument.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "parameterName": {
                "deleted": "6.8.0",
                "deletionMessage": null
            },
            "parameter": {
                "introduced": "6.8.0",
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.LayoutCallArgument = LayoutCallArgument;
    /**
     * See: {@link https://docs.mendix.com/refguide7/layout-grid relevant section in reference guide}
     */
    var LayoutGrid = (function (_super) {
        __extends(LayoutGrid, _super);
        function LayoutGrid(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__width = new internal.EnumProperty(LayoutGrid, _this, "width", ContainerWidth.FullWidth, ContainerWidth);
            _this.__rows = new internal.PartListProperty(LayoutGrid, _this, "rows", []);
            if (arguments.length < 4) {
                throw new Error("new LayoutGrid() cannot be invoked directly, please use 'model.pages.createLayoutGrid()'");
            }
            return _this;
        }
        Object.defineProperty(LayoutGrid.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGrid.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGrid.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGrid.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGrid.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGrid.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGrid.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGrid.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGrid.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGrid.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGrid.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGrid.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGrid.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGrid.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGrid.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGrid.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGrid.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGrid.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGrid.prototype, "width", {
            get: function () { return this.__width.get(); },
            set: function (newValue) { this.__width.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGrid.prototype, "rows", {
            get: function () { return this.__rows.get(); },
            set: function (newValue) { this.__rows.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        LayoutGrid.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, LayoutGrid.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, LayoutGrid, "footerWidget", false);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        LayoutGrid.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        LayoutGrid.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        LayoutGrid.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        LayoutGrid.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "leftWidget", false);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        LayoutGrid.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "rightWidget", false);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        LayoutGrid.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        LayoutGrid.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        LayoutGrid.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        LayoutGrid.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        LayoutGrid.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        LayoutGrid.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        LayoutGrid.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        LayoutGrid.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        LayoutGrid.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "firstWidget", false);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        LayoutGrid.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "secondWidget", false);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        LayoutGrid.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        LayoutGrid.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        LayoutGrid.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widget", false);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        LayoutGrid.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGrid, "widgets", true);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        LayoutGrid.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, LayoutGrid.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, LayoutGrid, "parameterWidget", false);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        LayoutGrid.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, LayoutGrid.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, LayoutGrid, "reportWidget", false);
        };
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LayoutGrid.create = function (model) {
            return internal.instancehelpers.createElement(model, LayoutGrid);
        };
        LayoutGrid.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.rows.replace([LayoutGridRow.create(this.model)]);
            this.width = ContainerWidth.FullWidth;
        };
        return LayoutGrid;
    }(ConditionallyVisibleWidget));
    LayoutGrid.typeName = "Pages$LayoutGrid";
    LayoutGrid.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.LayoutGrid = LayoutGrid;
    var LayoutGridColumn = (function (_super) {
        __extends(LayoutGridColumn, _super);
        function LayoutGridColumn(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__weight = new internal.PrimitiveProperty(LayoutGridColumn, _this, "weight", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__widget = new internal.PartProperty(LayoutGridColumn, _this, "widget", null, false);
            _this.__class = new internal.PrimitiveProperty(LayoutGridColumn, _this, "class", "", internal.PrimitiveTypeEnum.String);
            _this.__style = new internal.PrimitiveProperty(LayoutGridColumn, _this, "style", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new LayoutGridColumn() cannot be invoked directly, please use 'model.pages.createLayoutGridColumn()'");
            }
            return _this;
        }
        Object.defineProperty(LayoutGridColumn.prototype, "containerAsLayoutGridRow", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridRow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGridColumn.prototype, "weight", {
            get: function () { return this.__weight.get(); },
            set: function (newValue) { this.__weight.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGridColumn.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGridColumn.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGridColumn.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new LayoutGridColumn instance in the SDK and on the server.
         * The new LayoutGridColumn will be automatically stored in the 'columns' property
         * of the parent LayoutGridRow element passed as argument.
         */
        LayoutGridColumn.createIn = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGridColumn, "columns", true);
        };
        /**
         * Creates and returns a new LayoutGridColumn instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LayoutGridColumn.create = function (model) {
            return internal.instancehelpers.createElement(model, LayoutGridColumn);
        };
        LayoutGridColumn.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.weight = 1;
        };
        return LayoutGridColumn;
    }(internal.Element));
    LayoutGridColumn.typeName = "Pages$LayoutGridColumn";
    LayoutGridColumn.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.LayoutGridColumn = LayoutGridColumn;
    var LayoutGridRow = (function (_super) {
        __extends(LayoutGridRow, _super);
        function LayoutGridRow(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__columns = new internal.PartListProperty(LayoutGridRow, _this, "columns", []);
            _this.__conditionalVisibilitySettings = new internal.PartProperty(LayoutGridRow, _this, "conditionalVisibilitySettings", null, false);
            _this.__class = new internal.PrimitiveProperty(LayoutGridRow, _this, "class", "", internal.PrimitiveTypeEnum.String);
            _this.__style = new internal.PrimitiveProperty(LayoutGridRow, _this, "style", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new LayoutGridRow() cannot be invoked directly, please use 'model.pages.createLayoutGridRow()'");
            }
            return _this;
        }
        Object.defineProperty(LayoutGridRow.prototype, "containerAsLayoutGrid", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGrid); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGridRow.prototype, "columns", {
            get: function () { return this.__columns.get(); },
            set: function (newValue) { this.__columns.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGridRow.prototype, "conditionalVisibilitySettings", {
            get: function () { return this.__conditionalVisibilitySettings.get(); },
            set: function (newValue) { this.__conditionalVisibilitySettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGridRow.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutGridRow.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new LayoutGridRow instance in the SDK and on the server.
         * The new LayoutGridRow will be automatically stored in the 'rows' property
         * of the parent LayoutGrid element passed as argument.
         */
        LayoutGridRow.createIn = function (container) {
            return internal.instancehelpers.createElement(container, LayoutGridRow, "rows", true);
        };
        /**
         * Creates and returns a new LayoutGridRow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LayoutGridRow.create = function (model) {
            return internal.instancehelpers.createElement(model, LayoutGridRow);
        };
        LayoutGridRow.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.columns.replace([(function (layoutGridColumn) {
                    layoutGridColumn.weight = 12;
                    return layoutGridColumn;
                })(LayoutGridColumn.create(this.model))]);
        };
        return LayoutGridRow;
    }(internal.Element));
    LayoutGridRow.typeName = "Pages$LayoutGridRow";
    LayoutGridRow.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.LayoutGridRow = LayoutGridRow;
    var LayoutParameter = (function (_super) {
        __extends(LayoutParameter, _super);
        function LayoutParameter(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__name = new internal.PrimitiveProperty(LayoutParameter, _this, "name", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new LayoutParameter() cannot be invoked directly, please use 'model.pages.createLayoutParameter()'");
            }
            return _this;
        }
        Object.defineProperty(LayoutParameter.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutParameter.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        LayoutParameter.prototype._isByNameReferrable = function () { return true; };
        LayoutParameter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return LayoutParameter;
    }(internal.Element));
    LayoutParameter.typeName = "Pages$LayoutParameter";
    LayoutParameter.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "name": {
                "public": {
                    "currentValue": true
                }
            }
        },
        "public": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pages.LayoutParameter = LayoutParameter;
    /**
     * See: {@link https://docs.mendix.com/refguide7/link-button relevant section in reference guide}
     */
    var LinkButton = (function (_super) {
        __extends(LinkButton, _super);
        function LinkButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__linkType = new internal.EnumProperty(LinkButton, _this, "linkType", LinkType.Web, LinkType);
            _this.__address = new internal.PartProperty(LinkButton, _this, "address", null, true);
            if (arguments.length < 4) {
                throw new Error("new LinkButton() cannot be invoked directly, please use 'model.pages.createLinkButton()'");
            }
            return _this;
        }
        Object.defineProperty(LinkButton.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkButton.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkButton.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkButton.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkButton.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkButton.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkButton.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkButton.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkButton.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkButton.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkButton.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkButton.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkButton.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkButton.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkButton.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkButton.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkButton.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkButton.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkButton.prototype, "linkType", {
            get: function () { return this.__linkType.get(); },
            set: function (newValue) { this.__linkType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkButton.prototype, "address", {
            get: function () { return this.__address.get(); },
            set: function (newValue) { this.__address.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        LinkButton.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, LinkButton.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, LinkButton, "footerWidget", false);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        LinkButton.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        LinkButton.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        LinkButton.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        LinkButton.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, LinkButton, "leftWidget", false);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        LinkButton.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, LinkButton, "rightWidget", false);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        LinkButton.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        LinkButton.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        LinkButton.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        LinkButton.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        LinkButton.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        LinkButton.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        LinkButton.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        LinkButton.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        LinkButton.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, LinkButton, "firstWidget", false);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        LinkButton.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, LinkButton, "secondWidget", false);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        LinkButton.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        LinkButton.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        LinkButton.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LinkButton, "widget", false);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        LinkButton.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, LinkButton, "widgets", true);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        LinkButton.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, LinkButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, LinkButton, "parameterWidget", false);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        LinkButton.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, LinkButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, LinkButton, "reportWidget", false);
        };
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LinkButton.create = function (model) {
            return internal.instancehelpers.createElement(model, LinkButton);
        };
        LinkButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.address = (function (staticOrDynamicString) {
                staticOrDynamicString.value = "http://www.mendix.com/";
                return staticOrDynamicString;
            })(StaticOrDynamicString.create(this.model));
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Link";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Koppeling";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
            this.linkType = LinkType.Web;
        };
        return LinkButton;
    }(Button));
    LinkButton.typeName = "Pages$LinkButton";
    LinkButton.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "address": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.LinkButton = LinkButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/list-view relevant section in reference guide}
     */
    var ListView = (function (_super) {
        __extends(ListView, _super);
        function ListView(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__widget = new internal.PartProperty(ListView, _this, "widget", null, false);
            _this.__pageSize = new internal.PrimitiveProperty(ListView, _this, "pageSize", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__clickAction = new internal.PartProperty(ListView, _this, "clickAction", null, true);
            _this.__editable = new internal.PrimitiveProperty(ListView, _this, "editable", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__templates = new internal.PartListProperty(ListView, _this, "templates", []);
            if (arguments.length < 4) {
                throw new Error("new ListView() cannot be invoked directly, please use 'model.pages.createListView()'");
            }
            return _this;
        }
        Object.defineProperty(ListView.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "pageSize", {
            get: function () { return this.__pageSize.get(); },
            set: function (newValue) { this.__pageSize.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "clickAction", {
            get: function () { return this.__clickAction.get(); },
            set: function (newValue) { this.__clickAction.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "editable", {
            get: function () { return this.__editable.get(); },
            set: function (newValue) { this.__editable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "templates", {
            get: function () { return this.__templates.get(); },
            set: function (newValue) { this.__templates.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        ListView.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, ListView.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, ListView, "footerWidget", false);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        ListView.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        ListView.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        ListView.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        ListView.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, ListView, "leftWidget", false);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        ListView.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, ListView, "rightWidget", false);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        ListView.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        ListView.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        ListView.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        ListView.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        ListView.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        ListView.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        ListView.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        ListView.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        ListView.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, ListView, "firstWidget", false);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        ListView.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, ListView, "secondWidget", false);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        ListView.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        ListView.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        ListView.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ListView, "widget", false);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        ListView.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, ListView, "widgets", true);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ListView.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, ListView.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ListView, "parameterWidget", false);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ListView.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, ListView.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ListView, "reportWidget", false);
        };
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ListView.create = function (model) {
            return internal.instancehelpers.createElement(model, ListView);
        };
        ListView.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.clickAction = NoClientAction.create(this.model);
            this.dataSource = ListViewDatabaseSource.create(this.model);
            this.pageSize = 10;
        };
        return ListView;
    }(ListenTargetWidget));
    ListView.typeName = "Pages$ListView";
    ListView.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "clickAction": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ListView = ListView;
    var ListViewDatabaseSource = (function (_super) {
        __extends(ListViewDatabaseSource, _super);
        function ListViewDatabaseSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__search = new internal.PartProperty(ListViewDatabaseSource, _this, "search", null, true);
            if (arguments.length < 4) {
                throw new Error("new ListViewDatabaseSource() cannot be invoked directly, please use 'model.pages.createListViewDatabaseSource()'");
            }
            return _this;
        }
        Object.defineProperty(ListViewDatabaseSource.prototype, "containerAsEntityWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, EntityWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListViewDatabaseSource.prototype, "search", {
            get: function () { return this.__search.get(); },
            set: function (newValue) { this.__search.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ListViewDatabaseSource instance in the SDK and on the server.
         * The new ListViewDatabaseSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        ListViewDatabaseSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ListViewDatabaseSource, "dataSource", false);
        };
        /**
         * Creates and returns a new ListViewDatabaseSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ListViewDatabaseSource.create = function (model) {
            return internal.instancehelpers.createElement(model, ListViewDatabaseSource);
        };
        ListViewDatabaseSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.search = ListViewSearch.create(this.model);
        };
        return ListViewDatabaseSource;
    }(DatabaseSourceBase));
    ListViewDatabaseSource.typeName = "Pages$ListViewDatabaseSource";
    ListViewDatabaseSource.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "search": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ListViewDatabaseSource = ListViewDatabaseSource;
    var ListViewSearch = (function (_super) {
        __extends(ListViewSearch, _super);
        function ListViewSearch(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__searchPaths = new internal.PrimitiveListProperty(ListViewSearch, _this, "searchPaths", [], internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ListViewSearch() cannot be invoked directly, please use 'model.pages.createListViewSearch()'");
            }
            return _this;
        }
        Object.defineProperty(ListViewSearch.prototype, "containerAsListViewDatabaseSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewDatabaseSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListViewSearch.prototype, "containerAsListViewXPathSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewXPathSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListViewSearch.prototype, "searchPaths", {
            /**
             * The value of this property is conceptually of type paths.AttributePath.
             */
            get: function () { return this.__searchPaths.get(); },
            set: function (newValue) { this.__searchPaths.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ListViewSearch instance in the SDK and on the server.
         * The new ListViewSearch will be automatically stored in the 'search' property
         * of the parent ListViewDatabaseSource element passed as argument.
         */
        ListViewSearch.createInListViewDatabaseSourceUnderSearch = function (container) {
            return internal.instancehelpers.createElement(container, ListViewSearch, "search", false);
        };
        /**
         * Creates and returns a new ListViewSearch instance in the SDK and on the server.
         * The new ListViewSearch will be automatically stored in the 'search' property
         * of the parent ListViewXPathSource element passed as argument.
         */
        ListViewSearch.createInListViewXPathSourceUnderSearch = function (container) {
            return internal.instancehelpers.createElement(container, ListViewSearch, "search", false);
        };
        /**
         * Creates and returns a new ListViewSearch instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ListViewSearch.create = function (model) {
            return internal.instancehelpers.createElement(model, ListViewSearch);
        };
        ListViewSearch.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ListViewSearch;
    }(internal.Element));
    ListViewSearch.typeName = "Pages$ListViewSearch";
    ListViewSearch.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ListViewSearch = ListViewSearch;
    var ListViewTemplate = (function (_super) {
        __extends(ListViewTemplate, _super);
        function ListViewTemplate(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__specialization = new internal.ByNameReferenceProperty(ListViewTemplate, _this, "specialization", null, "DomainModels$Entity");
            _this.__widget = new internal.PartProperty(ListViewTemplate, _this, "widget", null, false);
            if (arguments.length < 4) {
                throw new Error("new ListViewTemplate() cannot be invoked directly, please use 'model.pages.createListViewTemplate()'");
            }
            return _this;
        }
        Object.defineProperty(ListViewTemplate.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListViewTemplate.prototype, "specialization", {
            get: function () { return this.__specialization.get(); },
            set: function (newValue) { this.__specialization.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListViewTemplate.prototype, "specializationQualifiedName", {
            get: function () { return this.__specialization.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListViewTemplate.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ListViewTemplate instance in the SDK and on the server.
         * The new ListViewTemplate will be automatically stored in the 'templates' property
         * of the parent ListView element passed as argument.
         */
        ListViewTemplate.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ListViewTemplate, "templates", true);
        };
        /**
         * Creates and returns a new ListViewTemplate instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ListViewTemplate.create = function (model) {
            return internal.instancehelpers.createElement(model, ListViewTemplate);
        };
        ListViewTemplate.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ListViewTemplate;
    }(internal.Element));
    ListViewTemplate.typeName = "Pages$ListViewTemplate";
    ListViewTemplate.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "specialization": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ListViewTemplate = ListViewTemplate;
    var ListViewXPathSource = (function (_super) {
        __extends(ListViewXPathSource, _super);
        function ListViewXPathSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__search = new internal.PartProperty(ListViewXPathSource, _this, "search", null, true);
            _this.__xPathConstraint = new internal.PrimitiveProperty(ListViewXPathSource, _this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ListViewXPathSource() cannot be invoked directly, please use 'model.pages.createListViewXPathSource()'");
            }
            return _this;
        }
        Object.defineProperty(ListViewXPathSource.prototype, "containerAsEntityWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, EntityWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListViewXPathSource.prototype, "search", {
            get: function () { return this.__search.get(); },
            set: function (newValue) { this.__search.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListViewXPathSource.prototype, "xPathConstraint", {
            /**
             * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
             */
            get: function () { return this.__xPathConstraint.get(); },
            set: function (newValue) { this.__xPathConstraint.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ListViewXPathSource instance in the SDK and on the server.
         * The new ListViewXPathSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        ListViewXPathSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ListViewXPathSource, "dataSource", false);
        };
        /**
         * Creates and returns a new ListViewXPathSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ListViewXPathSource.create = function (model) {
            return internal.instancehelpers.createElement(model, ListViewXPathSource);
        };
        ListViewXPathSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.search = ListViewSearch.create(this.model);
        };
        return ListViewXPathSource;
    }(SortableEntityPathSource));
    ListViewXPathSource.typeName = "Pages$ListViewXPathSource";
    ListViewXPathSource.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "search": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ListViewXPathSource = ListViewXPathSource;
    var ListenTargetSource = (function (_super) {
        __extends(ListenTargetSource, _super);
        function ListenTargetSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__listenTarget = new internal.PrimitiveProperty(ListenTargetSource, _this, "listenTarget", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ListenTargetSource() cannot be invoked directly, please use 'model.pages.createListenTargetSource()'");
            }
            return _this;
        }
        Object.defineProperty(ListenTargetSource.prototype, "containerAsEntityWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, EntityWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListenTargetSource.prototype, "listenTarget", {
            get: function () { return this.__listenTarget.get(); },
            set: function (newValue) { this.__listenTarget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ListenTargetSource instance in the SDK and on the server.
         * The new ListenTargetSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        ListenTargetSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ListenTargetSource, "dataSource", false);
        };
        /**
         * Creates and returns a new ListenTargetSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ListenTargetSource.create = function (model) {
            return internal.instancehelpers.createElement(model, ListenTargetSource);
        };
        ListenTargetSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ListenTargetSource;
    }(DataSource));
    ListenTargetSource.typeName = "Pages$ListenTargetSource";
    ListenTargetSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ListenTargetSource = ListenTargetSource;
    /**
     * See: {@link https://docs.mendix.com/refguide7/sign-out-button relevant section in reference guide}
     */
    var LogoutButton = (function (_super) {
        __extends(LogoutButton, _super);
        function LogoutButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new LogoutButton() cannot be invoked directly, please use 'model.pages.createLogoutButton()'");
            }
            return _this;
        }
        Object.defineProperty(LogoutButton.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogoutButton.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogoutButton.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogoutButton.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogoutButton.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogoutButton.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogoutButton.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogoutButton.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogoutButton.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogoutButton.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogoutButton.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogoutButton.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogoutButton.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogoutButton.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogoutButton.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogoutButton.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogoutButton.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogoutButton.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        LogoutButton.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, LogoutButton.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, LogoutButton, "footerWidget", false);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        LogoutButton.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        LogoutButton.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        LogoutButton.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        LogoutButton.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, LogoutButton, "leftWidget", false);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        LogoutButton.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, LogoutButton, "rightWidget", false);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        LogoutButton.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        LogoutButton.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        LogoutButton.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        LogoutButton.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        LogoutButton.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        LogoutButton.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        LogoutButton.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        LogoutButton.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        LogoutButton.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, LogoutButton, "firstWidget", false);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        LogoutButton.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, LogoutButton, "secondWidget", false);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        LogoutButton.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        LogoutButton.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        LogoutButton.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, LogoutButton, "widget", false);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        LogoutButton.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, LogoutButton, "widgets", true);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        LogoutButton.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, LogoutButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, LogoutButton, "parameterWidget", false);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        LogoutButton.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, LogoutButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, LogoutButton, "reportWidget", false);
        };
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LogoutButton.create = function (model) {
            return internal.instancehelpers.createElement(model, LogoutButton);
        };
        LogoutButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Sign out";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Afmelden";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        return LogoutButton;
    }(Button));
    LogoutButton.typeName = "Pages$LogoutButton";
    LogoutButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.LogoutButton = LogoutButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/menu-widgets relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var MenuWidget = (function (_super) {
        __extends(MenuWidget, _super);
        function MenuWidget(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__menuSource = new internal.PartProperty(MenuWidget, _this, "menuSource", null, true);
            if (arguments.length < 4) {
                throw new Error("new MenuWidget() cannot be invoked directly, please use 'model.pages.createMenuWidget()'");
            }
            return _this;
        }
        Object.defineProperty(MenuWidget.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuWidget.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuWidget.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuWidget.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuWidget.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuWidget.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuWidget.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuWidget.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuWidget.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuWidget.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuWidget.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuWidget.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuWidget.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuWidget.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuWidget.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuWidget.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuWidget.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuWidget.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuWidget.prototype, "menuSource", {
            get: function () { return this.__menuSource.get(); },
            set: function (newValue) { this.__menuSource.set(newValue); },
            enumerable: true,
            configurable: true
        });
        MenuWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.menuSource = NavigationSource.create(this.model);
        };
        return MenuWidget;
    }(Widget));
    MenuWidget.typeName = "Pages$MenuWidget";
    MenuWidget.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "menuSource": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.MenuWidget = MenuWidget;
    /**
     * See: {@link https://docs.mendix.com/refguide7/menu-bar relevant section in reference guide}
     */
    var MenuBar = (function (_super) {
        __extends(MenuBar, _super);
        function MenuBar(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new MenuBar() cannot be invoked directly, please use 'model.pages.createMenuBar()'");
            }
            return _this;
        }
        Object.defineProperty(MenuBar.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuBar.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuBar.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuBar.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuBar.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuBar.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuBar.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuBar.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuBar.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuBar.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuBar.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuBar.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuBar.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuBar.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuBar.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuBar.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuBar.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuBar.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        MenuBar.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, MenuBar.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, MenuBar, "footerWidget", false);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        MenuBar.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        MenuBar.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        MenuBar.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        MenuBar.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, MenuBar, "leftWidget", false);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        MenuBar.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, MenuBar, "rightWidget", false);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        MenuBar.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        MenuBar.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        MenuBar.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        MenuBar.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        MenuBar.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        MenuBar.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        MenuBar.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        MenuBar.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        MenuBar.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, MenuBar, "firstWidget", false);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        MenuBar.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, MenuBar, "secondWidget", false);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        MenuBar.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        MenuBar.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        MenuBar.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widget", false);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        MenuBar.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, MenuBar, "widgets", true);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        MenuBar.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, MenuBar.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, MenuBar, "parameterWidget", false);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        MenuBar.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, MenuBar.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, MenuBar, "reportWidget", false);
        };
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MenuBar.create = function (model) {
            return internal.instancehelpers.createElement(model, MenuBar);
        };
        MenuBar.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return MenuBar;
    }(MenuWidget));
    MenuBar.typeName = "Pages$MenuBar";
    MenuBar.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.MenuBar = MenuBar;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var MenuSource = (function (_super) {
        __extends(MenuSource, _super);
        function MenuSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new MenuSource() cannot be invoked directly, please use 'model.pages.createMenuSource()'");
            }
            return _this;
        }
        Object.defineProperty(MenuSource.prototype, "containerAsMenuWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, MenuWidget); },
            enumerable: true,
            configurable: true
        });
        MenuSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return MenuSource;
    }(internal.Element));
    MenuSource.typeName = "Pages$MenuSource";
    MenuSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.MenuSource = MenuSource;
    var MenuDocumentSource = (function (_super) {
        __extends(MenuDocumentSource, _super);
        function MenuDocumentSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__menu = new internal.ByNameReferenceProperty(MenuDocumentSource, _this, "menu", null, "Menus$MenuDocument");
            if (arguments.length < 4) {
                throw new Error("new MenuDocumentSource() cannot be invoked directly, please use 'model.pages.createMenuDocumentSource()'");
            }
            return _this;
        }
        Object.defineProperty(MenuDocumentSource.prototype, "containerAsMenuWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, MenuWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuDocumentSource.prototype, "menu", {
            get: function () { return this.__menu.get(); },
            set: function (newValue) { this.__menu.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuDocumentSource.prototype, "menuQualifiedName", {
            get: function () { return this.__menu.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new MenuDocumentSource instance in the SDK and on the server.
         * The new MenuDocumentSource will be automatically stored in the 'menuSource' property
         * of the parent MenuWidget element passed as argument.
         */
        MenuDocumentSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MenuDocumentSource, "menuSource", false);
        };
        /**
         * Creates and returns a new MenuDocumentSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MenuDocumentSource.create = function (model) {
            return internal.instancehelpers.createElement(model, MenuDocumentSource);
        };
        MenuDocumentSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return MenuDocumentSource;
    }(MenuSource));
    MenuDocumentSource.typeName = "Pages$MenuDocumentSource";
    MenuDocumentSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.MenuDocumentSource = MenuDocumentSource;
    var MicroflowClientAction = (function (_super) {
        __extends(MicroflowClientAction, _super);
        function MicroflowClientAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__microflowSettings = new internal.PartProperty(MicroflowClientAction, _this, "microflowSettings", null, true);
            if (arguments.length < 4) {
                throw new Error("new MicroflowClientAction() cannot be invoked directly, please use 'model.pages.createMicroflowClientAction()'");
            }
            return _this;
        }
        Object.defineProperty(MicroflowClientAction.prototype, "containerAsMenuItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, menus_1.menus.MenuItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowClientAction.prototype, "containerAsActionButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowClientAction.prototype, "containerAsActionItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowClientAction.prototype, "containerAsDataViewActionButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataViewActionButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowClientAction.prototype, "containerAsGridActionButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, GridActionButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowClientAction.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowClientAction.prototype, "containerAsStaticImageViewer", {
            get: function () { return _super.prototype.getContainerAs.call(this, StaticImageViewer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowClientAction.prototype, "microflowSettings", {
            get: function () { return this.__microflowSettings.get(); },
            set: function (newValue) { this.__microflowSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         */
        MicroflowClientAction.createInMenuItemUnderAction = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowClientAction, "action", false);
        };
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         */
        MicroflowClientAction.createInActionButtonUnderAction = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowClientAction, "action", false);
        };
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         */
        MicroflowClientAction.createInActionItemUnderAction = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowClientAction, "action", false);
        };
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent DataViewActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
         */
        MicroflowClientAction.createInDataViewActionButtonUnderAction = function (container) {
            internal.createInVersionCheck(container.model, MicroflowClientAction.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0"]);
            return internal.instancehelpers.createElement(container, MicroflowClientAction, "action", false);
        };
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         */
        MicroflowClientAction.createInGridActionButtonUnderAction = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowClientAction, "action", false);
        };
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         */
        MicroflowClientAction.createInListViewUnderClickAction = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowClientAction, "clickAction", false);
        };
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         */
        MicroflowClientAction.createInStaticImageViewerUnderClickAction = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowClientAction, "clickAction", false);
        };
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MicroflowClientAction.create = function (model) {
            return internal.instancehelpers.createElement(model, MicroflowClientAction);
        };
        MicroflowClientAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.microflowSettings = MicroflowSettings.create(this.model);
        };
        return MicroflowClientAction;
    }(ClientAction));
    MicroflowClientAction.typeName = "Pages$MicroflowClientAction";
    MicroflowClientAction.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "microflowSettings": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.MicroflowClientAction = MicroflowClientAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/starting-microflows relevant section in reference guide}
     */
    var MicroflowSettings = (function (_super) {
        __extends(MicroflowSettings, _super);
        function MicroflowSettings(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__microflow = new internal.ByNameReferenceProperty(MicroflowSettings, _this, "microflow", null, "Microflows$Microflow");
            _this.__useAllPages = new internal.PrimitiveProperty(MicroflowSettings, _this, "useAllPages", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__progressBar = new internal.EnumProperty(MicroflowSettings, _this, "progressBar", ProgressBarType.None, ProgressBarType);
            _this.__progressMessage = new internal.PartProperty(MicroflowSettings, _this, "progressMessage", null, false);
            _this.__asynchronous = new internal.PrimitiveProperty(MicroflowSettings, _this, "asynchronous", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__formValidations = new internal.EnumProperty(MicroflowSettings, _this, "formValidations", FormValidations.All, FormValidations);
            _this.__confirmationInfo = new internal.PartProperty(MicroflowSettings, _this, "confirmationInfo", null, false);
            if (arguments.length < 4) {
                throw new Error("new MicroflowSettings() cannot be invoked directly, please use 'model.pages.createMicroflowSettings()'");
            }
            return _this;
        }
        Object.defineProperty(MicroflowSettings.prototype, "containerAsAssociationWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, AssociationWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSettings.prototype, "containerAsAttributeWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, AttributeWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSettings.prototype, "containerAsMicroflowClientAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowClientAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSettings.prototype, "containerAsMicroflowSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSettings.prototype, "containerAsOnClickMicroflow", {
            get: function () { return _super.prototype.getContainerAs.call(this, OnClickMicroflow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSettings.prototype, "containerAsReferenceSetSelector", {
            get: function () { return _super.prototype.getContainerAs.call(this, ReferenceSetSelector); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSettings.prototype, "containerAsSelectorMicroflowSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, SelectorMicroflowSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSettings.prototype, "microflow", {
            get: function () { return this.__microflow.get(); },
            set: function (newValue) { this.__microflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSettings.prototype, "microflowQualifiedName", {
            get: function () { return this.__microflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSettings.prototype, "useAllPages", {
            get: function () { return this.__useAllPages.get(); },
            set: function (newValue) { this.__useAllPages.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSettings.prototype, "progressBar", {
            get: function () { return this.__progressBar.get(); },
            set: function (newValue) { this.__progressBar.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSettings.prototype, "progressMessage", {
            get: function () { return this.__progressMessage.get(); },
            set: function (newValue) { this.__progressMessage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSettings.prototype, "asynchronous", {
            get: function () { return this.__asynchronous.get(); },
            set: function (newValue) { this.__asynchronous.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSettings.prototype, "formValidations", {
            get: function () { return this.__formValidations.get(); },
            set: function (newValue) { this.__formValidations.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSettings.prototype, "confirmationInfo", {
            get: function () { return this.__confirmationInfo.get(); },
            set: function (newValue) { this.__confirmationInfo.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'onChangeMicroflowSettings' property
         * of the parent AssociationWidget element passed as argument.
         */
        MicroflowSettings.createInAssociationWidgetUnderOnChangeMicroflowSettings = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowSettings, "onChangeMicroflowSettings", false);
        };
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'onChangeMicroflowSettings' property
         * of the parent AttributeWidget element passed as argument.
         */
        MicroflowSettings.createInAttributeWidgetUnderOnChangeMicroflowSettings = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowSettings, "onChangeMicroflowSettings", false);
        };
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'onEnterMicroflowSettings' property
         * of the parent AttributeWidget element passed as argument.
         */
        MicroflowSettings.createInAttributeWidgetUnderOnEnterMicroflowSettings = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowSettings, "onEnterMicroflowSettings", false);
        };
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'onLeaveMicroflowSettings' property
         * of the parent AttributeWidget element passed as argument.
         */
        MicroflowSettings.createInAttributeWidgetUnderOnLeaveMicroflowSettings = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowSettings, "onLeaveMicroflowSettings", false);
        };
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'microflowSettings' property
         * of the parent MicroflowClientAction element passed as argument.
         */
        MicroflowSettings.createInMicroflowClientActionUnderMicroflowSettings = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowSettings, "microflowSettings", false);
        };
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'microflowSettings' property
         * of the parent MicroflowSource element passed as argument.
         */
        MicroflowSettings.createInMicroflowSourceUnderMicroflowSettings = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowSettings, "microflowSettings", false);
        };
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'microflowSettings' property
         * of the parent OnClickMicroflow element passed as argument.
         */
        MicroflowSettings.createInOnClickMicroflowUnderMicroflowSettings = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowSettings, "microflowSettings", false);
        };
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'onChangeMicroflowSettings' property
         * of the parent ReferenceSetSelector element passed as argument.
         */
        MicroflowSettings.createInReferenceSetSelectorUnderOnChangeMicroflowSettings = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowSettings, "onChangeMicroflowSettings", false);
        };
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'dataSourceMicroflowSettings' property
         * of the parent SelectorMicroflowSource element passed as argument.
         */
        MicroflowSettings.createInSelectorMicroflowSourceUnderDataSourceMicroflowSettings = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowSettings, "dataSourceMicroflowSettings", false);
        };
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MicroflowSettings.create = function (model) {
            return internal.instancehelpers.createElement(model, MicroflowSettings);
        };
        MicroflowSettings.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.formValidations = FormValidations.All;
            this.progressBar = ProgressBarType.None;
        };
        return MicroflowSettings;
    }(internal.Element));
    MicroflowSettings.typeName = "Pages$MicroflowSettings";
    MicroflowSettings.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.MicroflowSettings = MicroflowSettings;
    var MicroflowSource = (function (_super) {
        __extends(MicroflowSource, _super);
        function MicroflowSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__microflowSettings = new internal.PartProperty(MicroflowSource, _this, "microflowSettings", null, true);
            if (arguments.length < 4) {
                throw new Error("new MicroflowSource() cannot be invoked directly, please use 'model.pages.createMicroflowSource()'");
            }
            return _this;
        }
        Object.defineProperty(MicroflowSource.prototype, "containerAsEntityWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, EntityWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowSource.prototype, "microflowSettings", {
            get: function () { return this.__microflowSettings.get(); },
            set: function (newValue) { this.__microflowSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new MicroflowSource instance in the SDK and on the server.
         * The new MicroflowSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        MicroflowSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowSource, "dataSource", false);
        };
        /**
         * Creates and returns a new MicroflowSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MicroflowSource.create = function (model) {
            return internal.instancehelpers.createElement(model, MicroflowSource);
        };
        MicroflowSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.microflowSettings = MicroflowSettings.create(this.model);
        };
        return MicroflowSource;
    }(DataSource));
    MicroflowSource.typeName = "Pages$MicroflowSource";
    MicroflowSource.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "microflowSettings": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.MicroflowSource = MicroflowSource;
    /**
     * See: {@link https://docs.mendix.com/refguide7/navigation-list relevant section in reference guide}
     */
    var NavigationList = (function (_super) {
        __extends(NavigationList, _super);
        function NavigationList(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__items = new internal.PartListProperty(NavigationList, _this, "items", []);
            if (arguments.length < 4) {
                throw new Error("new NavigationList() cannot be invoked directly, please use 'model.pages.createNavigationList()'");
            }
            return _this;
        }
        Object.defineProperty(NavigationList.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationList.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationList.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationList.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationList.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationList.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationList.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationList.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationList.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationList.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationList.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationList.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationList.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationList.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationList.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationList.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationList.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationList.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationList.prototype, "items", {
            get: function () { return this.__items.get(); },
            set: function (newValue) { this.__items.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        NavigationList.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, NavigationList.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, NavigationList, "footerWidget", false);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        NavigationList.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        NavigationList.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        NavigationList.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        NavigationList.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationList, "leftWidget", false);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        NavigationList.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationList, "rightWidget", false);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        NavigationList.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        NavigationList.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        NavigationList.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        NavigationList.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        NavigationList.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        NavigationList.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        NavigationList.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        NavigationList.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        NavigationList.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationList, "firstWidget", false);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        NavigationList.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationList, "secondWidget", false);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        NavigationList.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        NavigationList.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        NavigationList.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widget", false);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        NavigationList.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, NavigationList, "widgets", true);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        NavigationList.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, NavigationList.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, NavigationList, "parameterWidget", false);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        NavigationList.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, NavigationList.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, NavigationList, "reportWidget", false);
        };
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NavigationList.create = function (model) {
            return internal.instancehelpers.createElement(model, NavigationList);
        };
        NavigationList.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.items.replace([NavigationListItem.create(this.model), NavigationListItem.create(this.model), NavigationListItem.create(this.model)]);
        };
        return NavigationList;
    }(ConditionallyVisibleWidget));
    NavigationList.typeName = "Pages$NavigationList";
    NavigationList.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.NavigationList = NavigationList;
    var NavigationListItem = (function (_super) {
        __extends(NavigationListItem, _super);
        function NavigationListItem(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__widget = new internal.PartProperty(NavigationListItem, _this, "widget", null, false);
            _this.__class = new internal.PrimitiveProperty(NavigationListItem, _this, "class", "", internal.PrimitiveTypeEnum.String);
            _this.__style = new internal.PrimitiveProperty(NavigationListItem, _this, "style", "", internal.PrimitiveTypeEnum.String);
            _this.__conditionalVisibilitySettings = new internal.PartProperty(NavigationListItem, _this, "conditionalVisibilitySettings", null, false);
            if (arguments.length < 4) {
                throw new Error("new NavigationListItem() cannot be invoked directly, please use 'model.pages.createNavigationListItem()'");
            }
            return _this;
        }
        Object.defineProperty(NavigationListItem.prototype, "containerAsNavigationList", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationList); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationListItem.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationListItem.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationListItem.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationListItem.prototype, "conditionalVisibilitySettings", {
            get: function () { return this.__conditionalVisibilitySettings.get(); },
            set: function (newValue) { this.__conditionalVisibilitySettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new NavigationListItem instance in the SDK and on the server.
         * The new NavigationListItem will be automatically stored in the 'items' property
         * of the parent NavigationList element passed as argument.
         */
        NavigationListItem.createIn = function (container) {
            return internal.instancehelpers.createElement(container, NavigationListItem, "items", true);
        };
        /**
         * Creates and returns a new NavigationListItem instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NavigationListItem.create = function (model) {
            return internal.instancehelpers.createElement(model, NavigationListItem);
        };
        NavigationListItem.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return NavigationListItem;
    }(ActionItem));
    NavigationListItem.typeName = "Pages$NavigationListItem";
    NavigationListItem.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.NavigationListItem = NavigationListItem;
    var NavigationSource = (function (_super) {
        __extends(NavigationSource, _super);
        function NavigationSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__profileType = new internal.EnumProperty(NavigationSource, _this, "profileType", navigation_1.navigation.ProfileType.Desktop, navigation_1.navigation.ProfileType);
            if (arguments.length < 4) {
                throw new Error("new NavigationSource() cannot be invoked directly, please use 'model.pages.createNavigationSource()'");
            }
            return _this;
        }
        Object.defineProperty(NavigationSource.prototype, "containerAsMenuWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, MenuWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationSource.prototype, "profileType", {
            get: function () { return this.__profileType.get(); },
            set: function (newValue) { this.__profileType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new NavigationSource instance in the SDK and on the server.
         * The new NavigationSource will be automatically stored in the 'menuSource' property
         * of the parent MenuWidget element passed as argument.
         */
        NavigationSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, NavigationSource, "menuSource", false);
        };
        /**
         * Creates and returns a new NavigationSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NavigationSource.create = function (model) {
            return internal.instancehelpers.createElement(model, NavigationSource);
        };
        NavigationSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.profileType = navigation_1.navigation.ProfileType.Desktop;
        };
        return NavigationSource;
    }(MenuSource));
    NavigationSource.typeName = "Pages$NavigationSource";
    NavigationSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.NavigationSource = NavigationSource;
    /**
     * See: {@link https://docs.mendix.com/refguide7/navigation-tree relevant section in reference guide}
     */
    var NavigationTree = (function (_super) {
        __extends(NavigationTree, _super);
        function NavigationTree(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new NavigationTree() cannot be invoked directly, please use 'model.pages.createNavigationTree()'");
            }
            return _this;
        }
        Object.defineProperty(NavigationTree.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationTree.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationTree.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationTree.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationTree.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationTree.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationTree.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationTree.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationTree.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationTree.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationTree.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationTree.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationTree.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationTree.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationTree.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationTree.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationTree.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigationTree.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        NavigationTree.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, NavigationTree.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, NavigationTree, "footerWidget", false);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        NavigationTree.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        NavigationTree.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        NavigationTree.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        NavigationTree.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "leftWidget", false);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        NavigationTree.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "rightWidget", false);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        NavigationTree.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        NavigationTree.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        NavigationTree.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        NavigationTree.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        NavigationTree.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        NavigationTree.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        NavigationTree.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        NavigationTree.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        NavigationTree.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "firstWidget", false);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        NavigationTree.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "secondWidget", false);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        NavigationTree.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        NavigationTree.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        NavigationTree.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widget", false);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        NavigationTree.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, NavigationTree, "widgets", true);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        NavigationTree.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, NavigationTree.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, NavigationTree, "parameterWidget", false);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        NavigationTree.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, NavigationTree.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, NavigationTree, "reportWidget", false);
        };
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NavigationTree.create = function (model) {
            return internal.instancehelpers.createElement(model, NavigationTree);
        };
        NavigationTree.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return NavigationTree;
    }(MenuWidget));
    NavigationTree.typeName = "Pages$NavigationTree";
    NavigationTree.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.NavigationTree = NavigationTree;
    /**
     * See: {@link https://docs.mendix.com/refguide7/new-button relevant section in reference guide}
     */
    var NewButton = (function (_super) {
        __extends(NewButton, _super);
        function NewButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__entity = new internal.ByNameReferenceProperty(NewButton, _this, "entity", null, "DomainModels$Entity");
            _this.__entityPath = new internal.PrimitiveProperty(NewButton, _this, "entityPath", "", internal.PrimitiveTypeEnum.String);
            _this.__pageSettings = new internal.PartProperty(NewButton, _this, "pageSettings", null, false);
            if (arguments.length < 4) {
                throw new Error("new NewButton() cannot be invoked directly, please use 'model.pages.createNewButton()'");
            }
            return _this;
        }
        Object.defineProperty(NewButton.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "entity", {
            /**
             * In version 6.3.0: deleted
             */
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "entityPath", {
            /**
             * The value of this property is conceptually of type paths.EntityPath.
             *
             * In version 6.3.0: introduced
             */
            get: function () { return this.__entityPath.get(); },
            set: function (newValue) { this.__entityPath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewButton.prototype, "pageSettings", {
            get: function () { return this.__pageSettings.get(); },
            set: function (newValue) { this.__pageSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        NewButton.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, NewButton.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, NewButton, "footerWidget", false);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        NewButton.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        NewButton.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        NewButton.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        NewButton.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, NewButton, "leftWidget", false);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        NewButton.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, NewButton, "rightWidget", false);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        NewButton.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        NewButton.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        NewButton.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        NewButton.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        NewButton.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        NewButton.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        NewButton.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        NewButton.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        NewButton.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, NewButton, "firstWidget", false);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        NewButton.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, NewButton, "secondWidget", false);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        NewButton.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        NewButton.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        NewButton.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, NewButton, "widget", false);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        NewButton.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, NewButton, "widgets", true);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        NewButton.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, NewButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, NewButton, "parameterWidget", false);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        NewButton.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, NewButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, NewButton, "reportWidget", false);
        };
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NewButton.create = function (model) {
            return internal.instancehelpers.createElement(model, NewButton);
        };
        NewButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "New";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Nieuw";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        return NewButton;
    }(Button));
    NewButton.typeName = "Pages$NewButton";
    NewButton.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "entity": {
                "deleted": "6.3.0",
                "deletionMessage": "Use 'entityPath' instead."
            },
            "entityPath": {
                "introduced": "6.3.0"
            }
        }
    }, internal.StructureType.Element);
    pages.NewButton = NewButton;
    var NoClientAction = (function (_super) {
        __extends(NoClientAction, _super);
        function NoClientAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new NoClientAction() cannot be invoked directly, please use 'model.pages.createNoClientAction()'");
            }
            return _this;
        }
        Object.defineProperty(NoClientAction.prototype, "containerAsMenuItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, menus_1.menus.MenuItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoClientAction.prototype, "containerAsActionButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoClientAction.prototype, "containerAsActionItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoClientAction.prototype, "containerAsDataViewActionButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataViewActionButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoClientAction.prototype, "containerAsGridActionButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, GridActionButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoClientAction.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoClientAction.prototype, "containerAsStaticImageViewer", {
            get: function () { return _super.prototype.getContainerAs.call(this, StaticImageViewer); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         */
        NoClientAction.createInMenuItemUnderAction = function (container) {
            return internal.instancehelpers.createElement(container, NoClientAction, "action", false);
        };
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         */
        NoClientAction.createInActionButtonUnderAction = function (container) {
            return internal.instancehelpers.createElement(container, NoClientAction, "action", false);
        };
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         */
        NoClientAction.createInActionItemUnderAction = function (container) {
            return internal.instancehelpers.createElement(container, NoClientAction, "action", false);
        };
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent DataViewActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
         */
        NoClientAction.createInDataViewActionButtonUnderAction = function (container) {
            internal.createInVersionCheck(container.model, NoClientAction.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0"]);
            return internal.instancehelpers.createElement(container, NoClientAction, "action", false);
        };
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         */
        NoClientAction.createInGridActionButtonUnderAction = function (container) {
            return internal.instancehelpers.createElement(container, NoClientAction, "action", false);
        };
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         */
        NoClientAction.createInListViewUnderClickAction = function (container) {
            return internal.instancehelpers.createElement(container, NoClientAction, "clickAction", false);
        };
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         */
        NoClientAction.createInStaticImageViewerUnderClickAction = function (container) {
            return internal.instancehelpers.createElement(container, NoClientAction, "clickAction", false);
        };
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NoClientAction.create = function (model) {
            return internal.instancehelpers.createElement(model, NoClientAction);
        };
        NoClientAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return NoClientAction;
    }(ClientAction));
    NoClientAction.typeName = "Pages$NoClientAction";
    NoClientAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.NoClientAction = NoClientAction;
    var OfflineSchema = (function (_super) {
        __extends(OfflineSchema, _super);
        function OfflineSchema(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__role = new internal.ByNameReferenceProperty(OfflineSchema, _this, "role", null, "Security$UserRole");
            _this.__tables = new internal.PrimitiveListProperty(OfflineSchema, _this, "tables", [], internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new OfflineSchema() cannot be invoked directly, please use 'model.pages.createOfflineSchema()'");
            }
            return _this;
        }
        Object.defineProperty(OfflineSchema.prototype, "role", {
            get: function () { return this.__role.get(); },
            set: function (newValue) { this.__role.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OfflineSchema.prototype, "roleQualifiedName", {
            get: function () { return this.__role.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OfflineSchema.prototype, "tables", {
            /**
             * In version 6.4.0: introduced
             */
            get: function () { return this.__tables.get(); },
            set: function (newValue) { this.__tables.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new OfflineSchema instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        OfflineSchema.create = function (model) {
            return internal.instancehelpers.createElement(model, OfflineSchema);
        };
        OfflineSchema.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return OfflineSchema;
    }(internal.Element));
    OfflineSchema.typeName = "Pages$OfflineSchema";
    OfflineSchema.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "tables": {
                "introduced": "6.4.0"
            }
        }
    }, internal.StructureType.Element);
    pages.OfflineSchema = OfflineSchema;
    var OfflineSchemaFetchInstruction = (function (_super) {
        __extends(OfflineSchemaFetchInstruction, _super);
        function OfflineSchemaFetchInstruction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__tableName = new internal.PrimitiveProperty(OfflineSchemaFetchInstruction, _this, "tableName", "", internal.PrimitiveTypeEnum.String);
            _this.__xPath = new internal.PrimitiveProperty(OfflineSchemaFetchInstruction, _this, "xPath", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new OfflineSchemaFetchInstruction() cannot be invoked directly, please use 'model.pages.createOfflineSchemaFetchInstruction()'");
            }
            return _this;
        }
        Object.defineProperty(OfflineSchemaFetchInstruction.prototype, "tableName", {
            get: function () { return this.__tableName.get(); },
            set: function (newValue) { this.__tableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OfflineSchemaFetchInstruction.prototype, "xPath", {
            get: function () { return this.__xPath.get(); },
            set: function (newValue) { this.__xPath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new OfflineSchemaFetchInstruction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        OfflineSchemaFetchInstruction.create = function (model) {
            return internal.instancehelpers.createElement(model, OfflineSchemaFetchInstruction);
        };
        OfflineSchemaFetchInstruction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return OfflineSchemaFetchInstruction;
    }(internal.Element));
    OfflineSchemaFetchInstruction.typeName = "Pages$OfflineSchemaFetchInstruction";
    OfflineSchemaFetchInstruction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.OfflineSchemaFetchInstruction = OfflineSchemaFetchInstruction;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var OnClickBehavior = (function (_super) {
        __extends(OnClickBehavior, _super);
        function OnClickBehavior(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new OnClickBehavior() cannot be invoked directly, please use 'model.pages.createOnClickBehavior()'");
            }
            return _this;
        }
        Object.defineProperty(OnClickBehavior.prototype, "containerAsDynamicImageViewer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DynamicImageViewer); },
            enumerable: true,
            configurable: true
        });
        OnClickBehavior.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return OnClickBehavior;
    }(internal.Element));
    OnClickBehavior.typeName = "Pages$OnClickBehavior";
    OnClickBehavior.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.OnClickBehavior = OnClickBehavior;
    var OnClickEnlarge = (function (_super) {
        __extends(OnClickEnlarge, _super);
        function OnClickEnlarge(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new OnClickEnlarge() cannot be invoked directly, please use 'model.pages.createOnClickEnlarge()'");
            }
            return _this;
        }
        Object.defineProperty(OnClickEnlarge.prototype, "containerAsDynamicImageViewer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DynamicImageViewer); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new OnClickEnlarge instance in the SDK and on the server.
         * The new OnClickEnlarge will be automatically stored in the 'onClickBehavior' property
         * of the parent DynamicImageViewer element passed as argument.
         */
        OnClickEnlarge.createIn = function (container) {
            return internal.instancehelpers.createElement(container, OnClickEnlarge, "onClickBehavior", false);
        };
        /**
         * Creates and returns a new OnClickEnlarge instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        OnClickEnlarge.create = function (model) {
            return internal.instancehelpers.createElement(model, OnClickEnlarge);
        };
        OnClickEnlarge.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return OnClickEnlarge;
    }(OnClickBehavior));
    OnClickEnlarge.typeName = "Pages$OnClickEnlarge";
    OnClickEnlarge.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.OnClickEnlarge = OnClickEnlarge;
    var OnClickMicroflow = (function (_super) {
        __extends(OnClickMicroflow, _super);
        function OnClickMicroflow(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__microflowSettings = new internal.PartProperty(OnClickMicroflow, _this, "microflowSettings", null, true);
            if (arguments.length < 4) {
                throw new Error("new OnClickMicroflow() cannot be invoked directly, please use 'model.pages.createOnClickMicroflow()'");
            }
            return _this;
        }
        Object.defineProperty(OnClickMicroflow.prototype, "containerAsDynamicImageViewer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DynamicImageViewer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OnClickMicroflow.prototype, "microflowSettings", {
            get: function () { return this.__microflowSettings.get(); },
            set: function (newValue) { this.__microflowSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new OnClickMicroflow instance in the SDK and on the server.
         * The new OnClickMicroflow will be automatically stored in the 'onClickBehavior' property
         * of the parent DynamicImageViewer element passed as argument.
         */
        OnClickMicroflow.createIn = function (container) {
            return internal.instancehelpers.createElement(container, OnClickMicroflow, "onClickBehavior", false);
        };
        /**
         * Creates and returns a new OnClickMicroflow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        OnClickMicroflow.create = function (model) {
            return internal.instancehelpers.createElement(model, OnClickMicroflow);
        };
        OnClickMicroflow.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.microflowSettings = MicroflowSettings.create(this.model);
        };
        return OnClickMicroflow;
    }(OnClickBehavior));
    OnClickMicroflow.typeName = "Pages$OnClickMicroflow";
    OnClickMicroflow.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "microflowSettings": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.OnClickMicroflow = OnClickMicroflow;
    var OnClickNothing = (function (_super) {
        __extends(OnClickNothing, _super);
        function OnClickNothing(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new OnClickNothing() cannot be invoked directly, please use 'model.pages.createOnClickNothing()'");
            }
            return _this;
        }
        Object.defineProperty(OnClickNothing.prototype, "containerAsDynamicImageViewer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DynamicImageViewer); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new OnClickNothing instance in the SDK and on the server.
         * The new OnClickNothing will be automatically stored in the 'onClickBehavior' property
         * of the parent DynamicImageViewer element passed as argument.
         */
        OnClickNothing.createIn = function (container) {
            return internal.instancehelpers.createElement(container, OnClickNothing, "onClickBehavior", false);
        };
        /**
         * Creates and returns a new OnClickNothing instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        OnClickNothing.create = function (model) {
            return internal.instancehelpers.createElement(model, OnClickNothing);
        };
        OnClickNothing.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return OnClickNothing;
    }(OnClickBehavior));
    OnClickNothing.typeName = "Pages$OnClickNothing";
    OnClickNothing.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.OnClickNothing = OnClickNothing;
    /**
     * See: {@link https://docs.mendix.com/refguide7/page relevant section in reference guide}
     */
    var Page = (function (_super) {
        __extends(Page, _super);
        function Page(model, typeName, id, isPartial, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, container) || this;
            _this.__layoutCall = new internal.PartProperty(Page, _this, "layoutCall", null, true);
            _this.__title = new internal.PartProperty(Page, _this, "title", null, true);
            _this.__class = new internal.PrimitiveProperty(Page, _this, "class", "", internal.PrimitiveTypeEnum.String);
            _this.__style = new internal.PrimitiveProperty(Page, _this, "style", "", internal.PrimitiveTypeEnum.String);
            _this.__allowedRoles = new internal.ByNameReferenceListProperty(Page, _this, "allowedRoles", [], "Security$ModuleRole");
            _this.__popupCloseAction = new internal.PrimitiveProperty(Page, _this, "popupCloseAction", "", internal.PrimitiveTypeEnum.String);
            _this.__popupWidth = new internal.PrimitiveProperty(Page, _this, "popupWidth", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__popupHeight = new internal.PrimitiveProperty(Page, _this, "popupHeight", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__popupResizable = new internal.PrimitiveProperty(Page, _this, "popupResizable", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__markAsUsed = new internal.PrimitiveProperty(Page, _this, "markAsUsed", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__url = new internal.PrimitiveProperty(Page, _this, "url", "", internal.PrimitiveTypeEnum.String);
            _this._containmentName = "documents";
            return _this;
        }
        Object.defineProperty(Page.prototype, "containerAsFolderBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, projects_1.projects.FolderBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Page.prototype, "layoutCall", {
            get: function () { return this.__layoutCall.get(); },
            set: function (newValue) { this.__layoutCall.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Page.prototype, "title", {
            get: function () { return this.__title.get(); },
            set: function (newValue) { this.__title.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Page.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Page.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Page.prototype, "allowedRoles", {
            get: function () { return this.__allowedRoles.get(); },
            set: function (newValue) { this.__allowedRoles.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Page.prototype, "allowedRolesQualifiedNames", {
            get: function () { return this.__allowedRoles.qualifiedNames(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Page.prototype, "popupCloseAction", {
            /**
             * In version 6.7.0: introduced
             */
            get: function () { return this.__popupCloseAction.get(); },
            set: function (newValue) { this.__popupCloseAction.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Page.prototype, "popupWidth", {
            get: function () { return this.__popupWidth.get(); },
            set: function (newValue) { this.__popupWidth.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Page.prototype, "popupHeight", {
            get: function () { return this.__popupHeight.get(); },
            set: function (newValue) { this.__popupHeight.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Page.prototype, "popupResizable", {
            get: function () { return this.__popupResizable.get(); },
            set: function (newValue) { this.__popupResizable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Page.prototype, "markAsUsed", {
            get: function () { return this.__markAsUsed.get(); },
            set: function (newValue) { this.__markAsUsed.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Page.prototype, "url", {
            /**
             * In version 6.7.0: introduced
             */
            get: function () { return this.__url.get(); },
            set: function (newValue) { this.__url.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new Page unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        Page.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, Page);
        };
        Page.prototype._isByNameReferrable = function () { return true; };
        Page.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.layoutCall = LayoutCall.create(this.model);
            this.popupResizable = true;
            this.title = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Page Title";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
        };
        return Page;
    }(FormBase));
    Page.typeName = "Pages$Page";
    Page.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "layoutCall": {
                "required": {
                    "currentValue": true
                }
            },
            "title": {
                "required": {
                    "currentValue": true
                }
            },
            "popupCloseAction": {
                "introduced": "6.7.0"
            },
            "url": {
                "introduced": "6.7.0"
            }
        }
    }, internal.StructureType.ModelUnit);
    pages.Page = Page;
    var PageClientAction = (function (_super) {
        __extends(PageClientAction, _super);
        function PageClientAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__pageSettings = new internal.PartProperty(PageClientAction, _this, "pageSettings", null, true);
            if (arguments.length < 4) {
                throw new Error("new PageClientAction() cannot be invoked directly, please use 'model.pages.createPageClientAction()'");
            }
            return _this;
        }
        Object.defineProperty(PageClientAction.prototype, "containerAsMenuItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, menus_1.menus.MenuItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageClientAction.prototype, "containerAsActionButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageClientAction.prototype, "containerAsActionItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageClientAction.prototype, "containerAsDataViewActionButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataViewActionButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageClientAction.prototype, "containerAsGridActionButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, GridActionButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageClientAction.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageClientAction.prototype, "containerAsStaticImageViewer", {
            get: function () { return _super.prototype.getContainerAs.call(this, StaticImageViewer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageClientAction.prototype, "pageSettings", {
            get: function () { return this.__pageSettings.get(); },
            set: function (newValue) { this.__pageSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         */
        PageClientAction.createInMenuItemUnderAction = function (container) {
            return internal.instancehelpers.createElement(container, PageClientAction, "action", false);
        };
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         */
        PageClientAction.createInActionButtonUnderAction = function (container) {
            return internal.instancehelpers.createElement(container, PageClientAction, "action", false);
        };
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         */
        PageClientAction.createInActionItemUnderAction = function (container) {
            return internal.instancehelpers.createElement(container, PageClientAction, "action", false);
        };
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent DataViewActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
         */
        PageClientAction.createInDataViewActionButtonUnderAction = function (container) {
            internal.createInVersionCheck(container.model, PageClientAction.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0"]);
            return internal.instancehelpers.createElement(container, PageClientAction, "action", false);
        };
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         */
        PageClientAction.createInGridActionButtonUnderAction = function (container) {
            return internal.instancehelpers.createElement(container, PageClientAction, "action", false);
        };
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         */
        PageClientAction.createInListViewUnderClickAction = function (container) {
            return internal.instancehelpers.createElement(container, PageClientAction, "clickAction", false);
        };
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         */
        PageClientAction.createInStaticImageViewerUnderClickAction = function (container) {
            return internal.instancehelpers.createElement(container, PageClientAction, "clickAction", false);
        };
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        PageClientAction.create = function (model) {
            return internal.instancehelpers.createElement(model, PageClientAction);
        };
        PageClientAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.pageSettings = PageSettings.create(this.model);
        };
        return PageClientAction;
    }(ClientAction));
    PageClientAction.typeName = "Pages$PageClientAction";
    PageClientAction.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "pageSettings": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.PageClientAction = PageClientAction;
    var PageForSpecialization = (function (_super) {
        __extends(PageForSpecialization, _super);
        function PageForSpecialization(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__entity = new internal.ByNameReferenceProperty(PageForSpecialization, _this, "entity", null, "DomainModels$Entity");
            _this.__pageSettings = new internal.PartProperty(PageForSpecialization, _this, "pageSettings", null, true);
            if (arguments.length < 4) {
                throw new Error("new PageForSpecialization() cannot be invoked directly, please use 'model.pages.createPageForSpecialization()'");
            }
            return _this;
        }
        Object.defineProperty(PageForSpecialization.prototype, "containerAsGridEditButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, GridEditButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageForSpecialization.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageForSpecialization.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageForSpecialization.prototype, "pageSettings", {
            get: function () { return this.__pageSettings.get(); },
            set: function (newValue) { this.__pageSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new PageForSpecialization instance in the SDK and on the server.
         * The new PageForSpecialization will be automatically stored in the 'pagesForSpecializations' property
         * of the parent GridEditButton element passed as argument.
         */
        PageForSpecialization.createIn = function (container) {
            return internal.instancehelpers.createElement(container, PageForSpecialization, "pagesForSpecializations", true);
        };
        /**
         * Creates and returns a new PageForSpecialization instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        PageForSpecialization.create = function (model) {
            return internal.instancehelpers.createElement(model, PageForSpecialization);
        };
        PageForSpecialization.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.pageSettings = PageSettings.create(this.model);
        };
        return PageForSpecialization;
    }(internal.Element));
    PageForSpecialization.typeName = "Pages$PageForSpecialization";
    PageForSpecialization.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "entity": {
                "required": {
                    "currentValue": true
                }
            },
            "pageSettings": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.PageForSpecialization = PageForSpecialization;
    /**
     * See: {@link https://docs.mendix.com/refguide7/opening-pages relevant section in reference guide}
     */
    var PageSettings = (function (_super) {
        __extends(PageSettings, _super);
        function PageSettings(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__page = new internal.ByNameReferenceProperty(PageSettings, _this, "page", null, "Pages$Page");
            _this.__formTitle = new internal.PartProperty(PageSettings, _this, "formTitle", null, false);
            _this.__location = new internal.EnumProperty(PageSettings, _this, "location", FormLocation.Popup, FormLocation);
            if (arguments.length < 4) {
                throw new Error("new PageSettings() cannot be invoked directly, please use 'model.pages.createPageSettings()'");
            }
            return _this;
        }
        Object.defineProperty(PageSettings.prototype, "containerAsShowPageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.ShowPageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageSettings.prototype, "containerAsAssociationWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, AssociationWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageSettings.prototype, "containerAsDataGridAddButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataGridAddButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageSettings.prototype, "containerAsGridEditButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, GridEditButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageSettings.prototype, "containerAsGridNewButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, GridNewButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageSettings.prototype, "containerAsNewButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, NewButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageSettings.prototype, "containerAsPageClientAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, PageClientAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageSettings.prototype, "containerAsPageForSpecialization", {
            get: function () { return _super.prototype.getContainerAs.call(this, PageForSpecialization); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageSettings.prototype, "containerAsReferenceSelector", {
            get: function () { return _super.prototype.getContainerAs.call(this, ReferenceSelector); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageSettings.prototype, "page", {
            get: function () { return this.__page.get(); },
            set: function (newValue) { this.__page.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageSettings.prototype, "pageQualifiedName", {
            get: function () { return this.__page.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageSettings.prototype, "formTitle", {
            get: function () { return this.__formTitle.get(); },
            set: function (newValue) { this.__formTitle.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageSettings.prototype, "location", {
            get: function () { return this.__location.get(); },
            set: function (newValue) { this.__location.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent microflows.ShowPageAction element passed as argument.
         */
        PageSettings.createInShowPageActionUnderPageSettings = function (container) {
            return internal.instancehelpers.createElement(container, PageSettings, "pageSettings", false);
        };
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'selectPageSettings' property
         * of the parent AssociationWidget element passed as argument.
         */
        PageSettings.createInAssociationWidgetUnderSelectPageSettings = function (container) {
            return internal.instancehelpers.createElement(container, PageSettings, "selectPageSettings", false);
        };
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent DataGridAddButton element passed as argument.
         */
        PageSettings.createInDataGridAddButtonUnderPageSettings = function (container) {
            return internal.instancehelpers.createElement(container, PageSettings, "pageSettings", false);
        };
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent GridEditButton element passed as argument.
         */
        PageSettings.createInGridEditButtonUnderPageSettings = function (container) {
            return internal.instancehelpers.createElement(container, PageSettings, "pageSettings", false);
        };
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent GridNewButton element passed as argument.
         */
        PageSettings.createInGridNewButtonUnderPageSettings = function (container) {
            return internal.instancehelpers.createElement(container, PageSettings, "pageSettings", false);
        };
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent NewButton element passed as argument.
         */
        PageSettings.createInNewButtonUnderPageSettings = function (container) {
            return internal.instancehelpers.createElement(container, PageSettings, "pageSettings", false);
        };
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent PageClientAction element passed as argument.
         */
        PageSettings.createInPageClientActionUnderPageSettings = function (container) {
            return internal.instancehelpers.createElement(container, PageSettings, "pageSettings", false);
        };
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent PageForSpecialization element passed as argument.
         */
        PageSettings.createInPageForSpecializationUnderPageSettings = function (container) {
            return internal.instancehelpers.createElement(container, PageSettings, "pageSettings", false);
        };
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'gotoPageSettings' property
         * of the parent ReferenceSelector element passed as argument.
         */
        PageSettings.createInReferenceSelectorUnderGotoPageSettings = function (container) {
            return internal.instancehelpers.createElement(container, PageSettings, "gotoPageSettings", false);
        };
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        PageSettings.create = function (model) {
            return internal.instancehelpers.createElement(model, PageSettings);
        };
        PageSettings.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.location = FormLocation.Popup;
        };
        return PageSettings;
    }(internal.Element));
    PageSettings.typeName = "Pages$PageSettings";
    PageSettings.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.PageSettings = PageSettings;
    /**
     * See: {@link https://docs.mendix.com/refguide7/placeholder relevant section in reference guide}
     */
    var Placeholder = (function (_super) {
        __extends(Placeholder, _super);
        function Placeholder(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new Placeholder() cannot be invoked directly, please use 'model.pages.createPlaceholder()'");
            }
            return _this;
        }
        Object.defineProperty(Placeholder.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Placeholder.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Placeholder.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Placeholder.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Placeholder.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Placeholder.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Placeholder.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Placeholder.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Placeholder.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Placeholder.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Placeholder.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Placeholder.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Placeholder.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Placeholder.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Placeholder.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Placeholder.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Placeholder.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Placeholder.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        Placeholder.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, Placeholder.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, Placeholder, "footerWidget", false);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        Placeholder.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        Placeholder.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        Placeholder.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        Placeholder.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, Placeholder, "leftWidget", false);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        Placeholder.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, Placeholder, "rightWidget", false);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        Placeholder.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        Placeholder.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        Placeholder.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        Placeholder.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        Placeholder.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        Placeholder.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        Placeholder.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        Placeholder.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        Placeholder.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, Placeholder, "firstWidget", false);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        Placeholder.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, Placeholder, "secondWidget", false);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        Placeholder.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        Placeholder.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        Placeholder.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widget", false);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        Placeholder.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, Placeholder, "widgets", true);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        Placeholder.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, Placeholder.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, Placeholder, "parameterWidget", false);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        Placeholder.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, Placeholder.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, Placeholder, "reportWidget", false);
        };
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Placeholder.create = function (model) {
            return internal.instancehelpers.createElement(model, Placeholder);
        };
        Placeholder.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return Placeholder;
    }(Widget));
    Placeholder.typeName = "Pages$Placeholder";
    Placeholder.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.Placeholder = Placeholder;
    var RadioButtonGroup = (function (_super) {
        __extends(RadioButtonGroup, _super);
        function RadioButtonGroup(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__renderHorizontal = new internal.PrimitiveProperty(RadioButtonGroup, _this, "renderHorizontal", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new RadioButtonGroup() cannot be invoked directly, please use 'model.pages.createRadioButtonGroup()'");
            }
            return _this;
        }
        Object.defineProperty(RadioButtonGroup.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioButtonGroup.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioButtonGroup.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioButtonGroup.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioButtonGroup.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioButtonGroup.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioButtonGroup.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioButtonGroup.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioButtonGroup.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioButtonGroup.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioButtonGroup.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioButtonGroup.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioButtonGroup.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioButtonGroup.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioButtonGroup.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioButtonGroup.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioButtonGroup.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioButtonGroup.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioButtonGroup.prototype, "renderHorizontal", {
            get: function () { return this.__renderHorizontal.get(); },
            set: function (newValue) { this.__renderHorizontal.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        RadioButtonGroup.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, RadioButtonGroup.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "footerWidget", false);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        RadioButtonGroup.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        RadioButtonGroup.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        RadioButtonGroup.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        RadioButtonGroup.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "leftWidget", false);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        RadioButtonGroup.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "rightWidget", false);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        RadioButtonGroup.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        RadioButtonGroup.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        RadioButtonGroup.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        RadioButtonGroup.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        RadioButtonGroup.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        RadioButtonGroup.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        RadioButtonGroup.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        RadioButtonGroup.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        RadioButtonGroup.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "firstWidget", false);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        RadioButtonGroup.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "secondWidget", false);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        RadioButtonGroup.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        RadioButtonGroup.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        RadioButtonGroup.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widget", false);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        RadioButtonGroup.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "widgets", true);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        RadioButtonGroup.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, RadioButtonGroup.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "parameterWidget", false);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        RadioButtonGroup.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, RadioButtonGroup.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, RadioButtonGroup, "reportWidget", false);
        };
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RadioButtonGroup.create = function (model) {
            return internal.instancehelpers.createElement(model, RadioButtonGroup);
        };
        RadioButtonGroup.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.renderHorizontal = true;
        };
        return RadioButtonGroup;
    }(AttributeWidget));
    RadioButtonGroup.typeName = "Pages$RadioButtonGroup";
    RadioButtonGroup.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.RadioButtonGroup = RadioButtonGroup;
    /**
     * See: {@link https://docs.mendix.com/refguide7/range-search-field relevant section in reference guide}
     */
    var RangeSearchField = (function (_super) {
        __extends(RangeSearchField, _super);
        function RangeSearchField(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__lowerBound = new internal.PrimitiveProperty(RangeSearchField, _this, "lowerBound", "", internal.PrimitiveTypeEnum.String);
            _this.__upperBound = new internal.PrimitiveProperty(RangeSearchField, _this, "upperBound", "", internal.PrimitiveTypeEnum.String);
            _this.__includeLower = new internal.PrimitiveProperty(RangeSearchField, _this, "includeLower", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__includeUpper = new internal.PrimitiveProperty(RangeSearchField, _this, "includeUpper", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new RangeSearchField() cannot be invoked directly, please use 'model.pages.createRangeSearchField()'");
            }
            return _this;
        }
        Object.defineProperty(RangeSearchField.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeSearchField.prototype, "lowerBound", {
            /**
             * The value of this property is conceptually of type paths.AttributePath.
             */
            get: function () { return this.__lowerBound.get(); },
            set: function (newValue) { this.__lowerBound.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeSearchField.prototype, "upperBound", {
            /**
             * The value of this property is conceptually of type paths.AttributePath.
             */
            get: function () { return this.__upperBound.get(); },
            set: function (newValue) { this.__upperBound.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeSearchField.prototype, "includeLower", {
            get: function () { return this.__includeLower.get(); },
            set: function (newValue) { this.__includeLower.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeSearchField.prototype, "includeUpper", {
            get: function () { return this.__includeUpper.get(); },
            set: function (newValue) { this.__includeUpper.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new RangeSearchField instance in the SDK and on the server.
         * The new RangeSearchField will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        RangeSearchField.createIn = function (container) {
            return internal.instancehelpers.createElement(container, RangeSearchField, "items", true);
        };
        /**
         * Creates and returns a new RangeSearchField instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RangeSearchField.create = function (model) {
            return internal.instancehelpers.createElement(model, RangeSearchField);
        };
        RangeSearchField.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return RangeSearchField;
    }(SearchField));
    RangeSearchField.typeName = "Pages$RangeSearchField";
    RangeSearchField.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.RangeSearchField = RangeSearchField;
    /**
     * See: {@link https://docs.mendix.com/refguide7/reference-selector relevant section in reference guide}
     */
    var ReferenceSelector = (function (_super) {
        __extends(ReferenceSelector, _super);
        function ReferenceSelector(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__required = new internal.PrimitiveProperty(ReferenceSelector, _this, "required", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__requiredMessage = new internal.PartProperty(ReferenceSelector, _this, "requiredMessage", null, true);
            _this.__renderMode = new internal.EnumProperty(ReferenceSelector, _this, "renderMode", ReferenceSelectorRenderModeType.DropDown, ReferenceSelectorRenderModeType);
            _this.__gotoPageSettings = new internal.PartProperty(ReferenceSelector, _this, "gotoPageSettings", null, true);
            _this.__formattingInfo = new internal.PartProperty(ReferenceSelector, _this, "formattingInfo", null, true);
            if (arguments.length < 4) {
                throw new Error("new ReferenceSelector() cannot be invoked directly, please use 'model.pages.createReferenceSelector()'");
            }
            return _this;
        }
        Object.defineProperty(ReferenceSelector.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "required", {
            get: function () { return this.__required.get(); },
            set: function (newValue) { this.__required.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "requiredMessage", {
            get: function () { return this.__requiredMessage.get(); },
            set: function (newValue) { this.__requiredMessage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "renderMode", {
            get: function () { return this.__renderMode.get(); },
            set: function (newValue) { this.__renderMode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "gotoPageSettings", {
            get: function () { return this.__gotoPageSettings.get(); },
            set: function (newValue) { this.__gotoPageSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSelector.prototype, "formattingInfo", {
            get: function () { return this.__formattingInfo.get(); },
            set: function (newValue) { this.__formattingInfo.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        ReferenceSelector.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, ReferenceSelector.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, ReferenceSelector, "footerWidget", false);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        ReferenceSelector.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        ReferenceSelector.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        ReferenceSelector.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        ReferenceSelector.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "leftWidget", false);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        ReferenceSelector.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "rightWidget", false);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        ReferenceSelector.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        ReferenceSelector.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        ReferenceSelector.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        ReferenceSelector.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        ReferenceSelector.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        ReferenceSelector.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        ReferenceSelector.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        ReferenceSelector.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        ReferenceSelector.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "firstWidget", false);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        ReferenceSelector.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "secondWidget", false);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        ReferenceSelector.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        ReferenceSelector.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        ReferenceSelector.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        ReferenceSelector.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSelector, "widgets", true);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReferenceSelector.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, ReferenceSelector.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReferenceSelector, "parameterWidget", false);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReferenceSelector.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, ReferenceSelector.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReferenceSelector, "reportWidget", false);
        };
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReferenceSelector.create = function (model) {
            return internal.instancehelpers.createElement(model, ReferenceSelector);
        };
        ReferenceSelector.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.formattingInfo = FormattingInfo.create(this.model);
            this.gotoPageSettings = PageSettings.create(this.model);
            this.renderMode = ReferenceSelectorRenderModeType.DropDown;
            this.requiredMessage = texts_1.texts.Text.create(this.model);
        };
        return ReferenceSelector;
    }(AssociationWidget));
    ReferenceSelector.typeName = "Pages$ReferenceSelector";
    ReferenceSelector.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "requiredMessage": {
                "required": {
                    "currentValue": true
                }
            },
            "gotoPageSettings": {
                "required": {
                    "currentValue": true
                }
            },
            "formattingInfo": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ReferenceSelector = ReferenceSelector;
    /**
     * See: {@link https://docs.mendix.com/refguide7/reference-set-selector relevant section in reference guide}
     */
    var ReferenceSetSelector = (function (_super) {
        __extends(ReferenceSetSelector, _super);
        function ReferenceSetSelector(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__onChangeMicroflowSettings = new internal.PartProperty(ReferenceSetSelector, _this, "onChangeMicroflowSettings", null, true);
            _this.__constrainedBy = new internal.PrimitiveListProperty(ReferenceSetSelector, _this, "constrainedBy", [], internal.PrimitiveTypeEnum.String);
            _this.__xPathConstraint = new internal.PrimitiveProperty(ReferenceSetSelector, _this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
            _this.__removeAllFromContext = new internal.PrimitiveProperty(ReferenceSetSelector, _this, "removeAllFromContext", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__removeFromContextEntities = new internal.ByNameReferenceListProperty(ReferenceSetSelector, _this, "removeFromContextEntities", [], "DomainModels$Entity");
            if (arguments.length < 4) {
                throw new Error("new ReferenceSetSelector() cannot be invoked directly, please use 'model.pages.createReferenceSetSelector()'");
            }
            return _this;
        }
        Object.defineProperty(ReferenceSetSelector.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "onChangeMicroflowSettings", {
            get: function () { return this.__onChangeMicroflowSettings.get(); },
            set: function (newValue) { this.__onChangeMicroflowSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "constrainedBy", {
            /**
             * The value of this property is conceptually of type paths.EntityPath.
             */
            get: function () { return this.__constrainedBy.get(); },
            set: function (newValue) { this.__constrainedBy.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "xPathConstraint", {
            /**
             * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
             */
            get: function () { return this.__xPathConstraint.get(); },
            set: function (newValue) { this.__xPathConstraint.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "removeAllFromContext", {
            get: function () { return this.__removeAllFromContext.get(); },
            set: function (newValue) { this.__removeAllFromContext.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "removeFromContextEntities", {
            get: function () { return this.__removeFromContextEntities.get(); },
            set: function (newValue) { this.__removeFromContextEntities.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReferenceSetSelector.prototype, "removeFromContextEntitiesQualifiedNames", {
            get: function () { return this.__removeFromContextEntities.qualifiedNames(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        ReferenceSetSelector.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, ReferenceSetSelector.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "footerWidget", false);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        ReferenceSetSelector.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        ReferenceSetSelector.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        ReferenceSetSelector.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        ReferenceSetSelector.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "leftWidget", false);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        ReferenceSetSelector.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "rightWidget", false);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        ReferenceSetSelector.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        ReferenceSetSelector.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        ReferenceSetSelector.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        ReferenceSetSelector.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        ReferenceSetSelector.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        ReferenceSetSelector.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        ReferenceSetSelector.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        ReferenceSetSelector.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        ReferenceSetSelector.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "firstWidget", false);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        ReferenceSetSelector.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "secondWidget", false);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        ReferenceSetSelector.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        ReferenceSetSelector.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        ReferenceSetSelector.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        ReferenceSetSelector.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "widgets", true);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReferenceSetSelector.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, ReferenceSetSelector.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "parameterWidget", false);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReferenceSetSelector.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, ReferenceSetSelector.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReferenceSetSelector, "reportWidget", false);
        };
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReferenceSetSelector.create = function (model) {
            return internal.instancehelpers.createElement(model, ReferenceSetSelector);
        };
        ReferenceSetSelector.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.dataSource = ReferenceSetSource.create(this.model);
            this.onChangeMicroflowSettings = MicroflowSettings.create(this.model);
        };
        return ReferenceSetSelector;
    }(ColumnGrid));
    ReferenceSetSelector.typeName = "Pages$ReferenceSetSelector";
    ReferenceSetSelector.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "onChangeMicroflowSettings": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ReferenceSetSelector = ReferenceSetSelector;
    var ReferenceSetSource = (function (_super) {
        __extends(ReferenceSetSource, _super);
        function ReferenceSetSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new ReferenceSetSource() cannot be invoked directly, please use 'model.pages.createReferenceSetSource()'");
            }
            return _this;
        }
        Object.defineProperty(ReferenceSetSource.prototype, "containerAsEntityWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, EntityWidget); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ReferenceSetSource instance in the SDK and on the server.
         * The new ReferenceSetSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        ReferenceSetSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ReferenceSetSource, "dataSource", false);
        };
        /**
         * Creates and returns a new ReferenceSetSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReferenceSetSource.create = function (model) {
            return internal.instancehelpers.createElement(model, ReferenceSetSource);
        };
        ReferenceSetSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ReferenceSetSource;
    }(GridBaseSource));
    ReferenceSetSource.typeName = "Pages$ReferenceSetSource";
    ReferenceSetSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.ReferenceSetSource = ReferenceSetSource;
    /**
     * In version 6.2.0: introduced
     */
    var RetrievalSchema = (function (_super) {
        __extends(RetrievalSchema, _super);
        function RetrievalSchema(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__usedAttributes = new internal.PrimitiveListProperty(RetrievalSchema, _this, "usedAttributes", [], internal.PrimitiveTypeEnum.String);
            _this.__entity = new internal.PrimitiveProperty(RetrievalSchema, _this, "entity", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new RetrievalSchema() cannot be invoked directly, please use 'model.pages.createRetrievalSchema()'");
            }
            return _this;
        }
        Object.defineProperty(RetrievalSchema.prototype, "usedAttributes", {
            get: function () { return this.__usedAttributes.get(); },
            set: function (newValue) { this.__usedAttributes.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RetrievalSchema.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new RetrievalSchema instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RetrievalSchema.create = function (model) {
            return internal.instancehelpers.createElement(model, RetrievalSchema);
        };
        RetrievalSchema.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return RetrievalSchema;
    }(internal.Element));
    RetrievalSchema.typeName = "Pages$RetrievalSchema";
    RetrievalSchema.versionInfo = new exports.StructureVersionInfo({
        "introduced": "6.2.0"
    }, internal.StructureType.Element);
    pages.RetrievalSchema = RetrievalSchema;
    /**
     * See: {@link https://docs.mendix.com/refguide7/save-button relevant section in reference guide}
     */
    var SaveButton = (function (_super) {
        __extends(SaveButton, _super);
        function SaveButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__syncAutomatically = new internal.PrimitiveProperty(SaveButton, _this, "syncAutomatically", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__closePage = new internal.PrimitiveProperty(SaveButton, _this, "closePage", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new SaveButton() cannot be invoked directly, please use 'model.pages.createSaveButton()'");
            }
            return _this;
        }
        Object.defineProperty(SaveButton.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SaveButton.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SaveButton.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SaveButton.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SaveButton.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SaveButton.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SaveButton.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SaveButton.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SaveButton.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SaveButton.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SaveButton.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SaveButton.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SaveButton.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SaveButton.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SaveButton.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SaveButton.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SaveButton.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SaveButton.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SaveButton.prototype, "syncAutomatically", {
            /**
             * In version 6.6.0: introduced
             */
            get: function () { return this.__syncAutomatically.get(); },
            set: function (newValue) { this.__syncAutomatically.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SaveButton.prototype, "closePage", {
            /**
             * In version 6.7.0: introduced
             */
            get: function () { return this.__closePage.get(); },
            set: function (newValue) { this.__closePage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        SaveButton.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, SaveButton.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, SaveButton, "footerWidget", false);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        SaveButton.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        SaveButton.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        SaveButton.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        SaveButton.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, SaveButton, "leftWidget", false);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        SaveButton.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, SaveButton, "rightWidget", false);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        SaveButton.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        SaveButton.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        SaveButton.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        SaveButton.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        SaveButton.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        SaveButton.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        SaveButton.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        SaveButton.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        SaveButton.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, SaveButton, "firstWidget", false);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        SaveButton.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, SaveButton, "secondWidget", false);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        SaveButton.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        SaveButton.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        SaveButton.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SaveButton, "widget", false);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        SaveButton.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, SaveButton, "widgets", true);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        SaveButton.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, SaveButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, SaveButton, "parameterWidget", false);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        SaveButton.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, SaveButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, SaveButton, "reportWidget", false);
        };
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SaveButton.create = function (model) {
            return internal.instancehelpers.createElement(model, SaveButton);
        };
        SaveButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Save";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Opslaan";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
            if (this.__closePage.isAvailable) {
                this.closePage = true;
            }
        };
        return SaveButton;
    }(Button));
    SaveButton.typeName = "Pages$SaveButton";
    SaveButton.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "syncAutomatically": {
                "introduced": "6.6.0"
            },
            "closePage": {
                "introduced": "6.7.0"
            }
        }
    }, internal.StructureType.Element);
    pages.SaveButton = SaveButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/scroll-container relevant section in reference guide}
     */
    var ScrollContainer = (function (_super) {
        __extends(ScrollContainer, _super);
        function ScrollContainer(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__center = new internal.PartProperty(ScrollContainer, _this, "center", null, true);
            _this.__left = new internal.PartProperty(ScrollContainer, _this, "left", null, false);
            _this.__right = new internal.PartProperty(ScrollContainer, _this, "right", null, false);
            _this.__top = new internal.PartProperty(ScrollContainer, _this, "top", null, false);
            _this.__bottom = new internal.PartProperty(ScrollContainer, _this, "bottom", null, false);
            _this.__layoutMode = new internal.EnumProperty(ScrollContainer, _this, "layoutMode", LayoutModeType.Headline, LayoutModeType);
            _this.__widthMode = new internal.EnumProperty(ScrollContainer, _this, "widthMode", SizeMode.Auto, SizeMode);
            _this.__width = new internal.PrimitiveProperty(ScrollContainer, _this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__alignment = new internal.EnumProperty(ScrollContainer, _this, "alignment", AlignmentEnum.Center, AlignmentEnum);
            _this.__scrollBehavior = new internal.EnumProperty(ScrollContainer, _this, "scrollBehavior", ScrollBehavior.PerRegion, ScrollBehavior);
            if (arguments.length < 4) {
                throw new Error("new ScrollContainer() cannot be invoked directly, please use 'model.pages.createScrollContainer()'");
            }
            return _this;
        }
        Object.defineProperty(ScrollContainer.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "center", {
            get: function () { return this.__center.get(); },
            set: function (newValue) { this.__center.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "left", {
            get: function () { return this.__left.get(); },
            set: function (newValue) { this.__left.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "right", {
            get: function () { return this.__right.get(); },
            set: function (newValue) { this.__right.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "top", {
            get: function () { return this.__top.get(); },
            set: function (newValue) { this.__top.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "bottom", {
            get: function () { return this.__bottom.get(); },
            set: function (newValue) { this.__bottom.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "layoutMode", {
            get: function () { return this.__layoutMode.get(); },
            set: function (newValue) { this.__layoutMode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "widthMode", {
            get: function () { return this.__widthMode.get(); },
            set: function (newValue) { this.__widthMode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "width", {
            get: function () { return this.__width.get(); },
            set: function (newValue) { this.__width.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "alignment", {
            get: function () { return this.__alignment.get(); },
            set: function (newValue) { this.__alignment.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainer.prototype, "scrollBehavior", {
            get: function () { return this.__scrollBehavior.get(); },
            set: function (newValue) { this.__scrollBehavior.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        ScrollContainer.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, ScrollContainer.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, ScrollContainer, "footerWidget", false);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        ScrollContainer.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        ScrollContainer.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        ScrollContainer.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        ScrollContainer.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "leftWidget", false);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        ScrollContainer.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "rightWidget", false);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        ScrollContainer.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        ScrollContainer.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        ScrollContainer.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        ScrollContainer.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        ScrollContainer.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        ScrollContainer.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        ScrollContainer.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        ScrollContainer.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        ScrollContainer.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "firstWidget", false);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        ScrollContainer.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "secondWidget", false);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        ScrollContainer.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        ScrollContainer.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        ScrollContainer.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widget", false);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        ScrollContainer.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainer, "widgets", true);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ScrollContainer.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, ScrollContainer.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ScrollContainer, "parameterWidget", false);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ScrollContainer.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, ScrollContainer.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ScrollContainer, "reportWidget", false);
        };
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ScrollContainer.create = function (model) {
            return internal.instancehelpers.createElement(model, ScrollContainer);
        };
        ScrollContainer.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.alignment = AlignmentEnum.Center;
            this.center = ScrollContainerRegion.create(this.model);
            this.layoutMode = LayoutModeType.Headline;
            this.scrollBehavior = ScrollBehavior.PerRegion;
            this.width = 960;
            this.widthMode = SizeMode.Auto;
        };
        return ScrollContainer;
    }(Widget));
    ScrollContainer.typeName = "Pages$ScrollContainer";
    ScrollContainer.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "center": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.ScrollContainer = ScrollContainer;
    var ScrollContainerRegion = (function (_super) {
        __extends(ScrollContainerRegion, _super);
        function ScrollContainerRegion(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__widget = new internal.PartProperty(ScrollContainerRegion, _this, "widget", null, false);
            _this.__sizeMode = new internal.EnumProperty(ScrollContainerRegion, _this, "sizeMode", SizeMode.Auto, SizeMode);
            _this.__size = new internal.PrimitiveProperty(ScrollContainerRegion, _this, "size", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__class = new internal.PrimitiveProperty(ScrollContainerRegion, _this, "class", "", internal.PrimitiveTypeEnum.String);
            _this.__style = new internal.PrimitiveProperty(ScrollContainerRegion, _this, "style", "", internal.PrimitiveTypeEnum.String);
            _this.__toggleMode = new internal.EnumProperty(ScrollContainerRegion, _this, "toggleMode", ToggleMode.None, ToggleMode);
            if (arguments.length < 4) {
                throw new Error("new ScrollContainerRegion() cannot be invoked directly, please use 'model.pages.createScrollContainerRegion()'");
            }
            return _this;
        }
        Object.defineProperty(ScrollContainerRegion.prototype, "containerAsScrollContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainerRegion.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainerRegion.prototype, "sizeMode", {
            get: function () { return this.__sizeMode.get(); },
            set: function (newValue) { this.__sizeMode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainerRegion.prototype, "size", {
            get: function () { return this.__size.get(); },
            set: function (newValue) { this.__size.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainerRegion.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainerRegion.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollContainerRegion.prototype, "toggleMode", {
            /**
             * In version 6.10.0: introduced
             */
            get: function () { return this.__toggleMode.get(); },
            set: function (newValue) { this.__toggleMode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * The new ScrollContainerRegion will be automatically stored in the 'bottom' property
         * of the parent ScrollContainer element passed as argument.
         */
        ScrollContainerRegion.createInScrollContainerUnderBottom = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainerRegion, "bottom", false);
        };
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * The new ScrollContainerRegion will be automatically stored in the 'center' property
         * of the parent ScrollContainer element passed as argument.
         */
        ScrollContainerRegion.createInScrollContainerUnderCenter = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainerRegion, "center", false);
        };
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * The new ScrollContainerRegion will be automatically stored in the 'left' property
         * of the parent ScrollContainer element passed as argument.
         */
        ScrollContainerRegion.createInScrollContainerUnderLeft = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainerRegion, "left", false);
        };
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * The new ScrollContainerRegion will be automatically stored in the 'right' property
         * of the parent ScrollContainer element passed as argument.
         */
        ScrollContainerRegion.createInScrollContainerUnderRight = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainerRegion, "right", false);
        };
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * The new ScrollContainerRegion will be automatically stored in the 'top' property
         * of the parent ScrollContainer element passed as argument.
         */
        ScrollContainerRegion.createInScrollContainerUnderTop = function (container) {
            return internal.instancehelpers.createElement(container, ScrollContainerRegion, "top", false);
        };
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ScrollContainerRegion.create = function (model) {
            return internal.instancehelpers.createElement(model, ScrollContainerRegion);
        };
        ScrollContainerRegion.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.size = 200;
            this.sizeMode = SizeMode.Auto;
            if (this.__toggleMode.isAvailable) {
                this.toggleMode = ToggleMode.None;
            }
        };
        return ScrollContainerRegion;
    }(internal.Element));
    ScrollContainerRegion.typeName = "Pages$ScrollContainerRegion";
    ScrollContainerRegion.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "toggleMode": {
                "introduced": "6.10.0"
            }
        }
    }, internal.StructureType.Element);
    pages.ScrollContainerRegion = ScrollContainerRegion;
    /**
     * See: {@link https://docs.mendix.com/refguide7/search-bar relevant section in reference guide}
     */
    var SearchBar = (function (_super) {
        __extends(SearchBar, _super);
        function SearchBar(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__type = new internal.EnumProperty(SearchBar, _this, "type", SearchBarTypeEnum.FoldableClosed, SearchBarTypeEnum);
            _this.__waitForSearch = new internal.PrimitiveProperty(SearchBar, _this, "waitForSearch", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new SearchBar() cannot be invoked directly, please use 'model.pages.createSearchBar()'");
            }
            return _this;
        }
        Object.defineProperty(SearchBar.prototype, "containerAsGridBaseSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, GridBaseSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SearchBar.prototype, "containerAsGridDatabaseSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, GridDatabaseSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SearchBar.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SearchBar.prototype, "waitForSearch", {
            get: function () { return this.__waitForSearch.get(); },
            set: function (newValue) { this.__waitForSearch.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new SearchBar instance in the SDK and on the server.
         * The new SearchBar will be automatically stored in the 'searchBar' property
         * of the parent GridBaseSource element passed as argument.
         */
        SearchBar.createInGridBaseSourceUnderSearchBar = function (container) {
            return internal.instancehelpers.createElement(container, SearchBar, "searchBar", false);
        };
        /**
         * Creates and returns a new SearchBar instance in the SDK and on the server.
         * The new SearchBar will be automatically stored in the 'searchBar' property
         * of the parent GridDatabaseSource element passed as argument.
         */
        SearchBar.createInGridDatabaseSourceUnderSearchBar = function (container) {
            return internal.instancehelpers.createElement(container, SearchBar, "searchBar", false);
        };
        /**
         * Creates and returns a new SearchBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SearchBar.create = function (model) {
            return internal.instancehelpers.createElement(model, SearchBar);
        };
        SearchBar.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.type = SearchBarTypeEnum.FoldableClosed;
        };
        return SearchBar;
    }(ControlBar));
    SearchBar.typeName = "Pages$SearchBar";
    SearchBar.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.SearchBar = SearchBar;
    /**
     * See: {@link https://docs.mendix.com/refguide7/select-button relevant section in reference guide}
     */
    var SelectButton = (function (_super) {
        __extends(SelectButton, _super);
        function SelectButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new SelectButton() cannot be invoked directly, please use 'model.pages.createSelectButton()'");
            }
            return _this;
        }
        Object.defineProperty(SelectButton.prototype, "containerAsControlBar", {
            get: function () { return _super.prototype.getContainerAs.call(this, ControlBar); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new SelectButton instance in the SDK and on the server.
         * The new SelectButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        SelectButton.createIn = function (container) {
            return internal.instancehelpers.createElement(container, SelectButton, "items", true);
        };
        /**
         * Creates and returns a new SelectButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SelectButton.create = function (model) {
            return internal.instancehelpers.createElement(model, SelectButton);
        };
        SelectButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Select";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Selecteren";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        return SelectButton;
    }(GridControlBarButton));
    SelectButton.typeName = "Pages$SelectButton";
    SelectButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.SelectButton = SelectButton;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var SelectorSource = (function (_super) {
        __extends(SelectorSource, _super);
        function SelectorSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new SelectorSource() cannot be invoked directly, please use 'model.pages.createSelectorSource()'");
            }
            return _this;
        }
        Object.defineProperty(SelectorSource.prototype, "containerAsAssociationWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, AssociationWidget); },
            enumerable: true,
            configurable: true
        });
        SelectorSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return SelectorSource;
    }(internal.Element));
    SelectorSource.typeName = "Pages$SelectorSource";
    SelectorSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.SelectorSource = SelectorSource;
    /**
     * In version 6.1.0: introduced
     */
    var SelectorDatabaseSource = (function (_super) {
        __extends(SelectorDatabaseSource, _super);
        function SelectorDatabaseSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__databaseConstraints = new internal.PartListProperty(SelectorDatabaseSource, _this, "databaseConstraints", []);
            _this.__sortBar = new internal.PartProperty(SelectorDatabaseSource, _this, "sortBar", null, true);
            if (arguments.length < 4) {
                throw new Error("new SelectorDatabaseSource() cannot be invoked directly, please use 'model.pages.createSelectorDatabaseSource()'");
            }
            return _this;
        }
        Object.defineProperty(SelectorDatabaseSource.prototype, "containerAsAssociationWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, AssociationWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelectorDatabaseSource.prototype, "databaseConstraints", {
            get: function () { return this.__databaseConstraints.get(); },
            set: function (newValue) { this.__databaseConstraints.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelectorDatabaseSource.prototype, "sortBar", {
            /**
             * In version 6.2.0: introduced
             */
            get: function () { return this.__sortBar.get(); },
            set: function (newValue) { this.__sortBar.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new SelectorDatabaseSource instance in the SDK and on the server.
         * The new SelectorDatabaseSource will be automatically stored in the 'selectorSource' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        SelectorDatabaseSource.createIn = function (container) {
            internal.createInVersionCheck(container.model, SelectorDatabaseSource.typeName, ["6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, SelectorDatabaseSource, "selectorSource", false);
        };
        /**
         * Creates and returns a new SelectorDatabaseSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SelectorDatabaseSource.create = function (model) {
            return internal.instancehelpers.createElement(model, SelectorDatabaseSource);
        };
        SelectorDatabaseSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            if (this.__sortBar.isAvailable) {
                this.sortBar = GridSortBar.create(this.model);
            }
        };
        return SelectorDatabaseSource;
    }(SelectorSource));
    SelectorDatabaseSource.typeName = "Pages$SelectorDatabaseSource";
    SelectorDatabaseSource.versionInfo = new exports.StructureVersionInfo({
        "introduced": "6.1.0",
        "properties": {
            "sortBar": {
                "introduced": "6.2.0",
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.SelectorDatabaseSource = SelectorDatabaseSource;
    var SelectorMicroflowSource = (function (_super) {
        __extends(SelectorMicroflowSource, _super);
        function SelectorMicroflowSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__dataSourceMicroflowSettings = new internal.PartProperty(SelectorMicroflowSource, _this, "dataSourceMicroflowSettings", null, true);
            if (arguments.length < 4) {
                throw new Error("new SelectorMicroflowSource() cannot be invoked directly, please use 'model.pages.createSelectorMicroflowSource()'");
            }
            return _this;
        }
        Object.defineProperty(SelectorMicroflowSource.prototype, "containerAsAssociationWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, AssociationWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelectorMicroflowSource.prototype, "dataSourceMicroflowSettings", {
            get: function () { return this.__dataSourceMicroflowSettings.get(); },
            set: function (newValue) { this.__dataSourceMicroflowSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new SelectorMicroflowSource instance in the SDK and on the server.
         * The new SelectorMicroflowSource will be automatically stored in the 'selectorSource' property
         * of the parent AssociationWidget element passed as argument.
         */
        SelectorMicroflowSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, SelectorMicroflowSource, "selectorSource", false);
        };
        /**
         * Creates and returns a new SelectorMicroflowSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SelectorMicroflowSource.create = function (model) {
            return internal.instancehelpers.createElement(model, SelectorMicroflowSource);
        };
        SelectorMicroflowSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.dataSourceMicroflowSettings = MicroflowSettings.create(this.model);
        };
        return SelectorMicroflowSource;
    }(SelectorSource));
    SelectorMicroflowSource.typeName = "Pages$SelectorMicroflowSource";
    SelectorMicroflowSource.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "dataSourceMicroflowSettings": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.SelectorMicroflowSource = SelectorMicroflowSource;
    var SelectorXPathSource = (function (_super) {
        __extends(SelectorXPathSource, _super);
        function SelectorXPathSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__sortBar = new internal.PartProperty(SelectorXPathSource, _this, "sortBar", null, true);
            _this.__xPathConstraint = new internal.PrimitiveProperty(SelectorXPathSource, _this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
            _this.__constrainedBy = new internal.PrimitiveListProperty(SelectorXPathSource, _this, "constrainedBy", [], internal.PrimitiveTypeEnum.String);
            _this.__applyContext = new internal.PrimitiveProperty(SelectorXPathSource, _this, "applyContext", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__removeAllFromContext = new internal.PrimitiveProperty(SelectorXPathSource, _this, "removeAllFromContext", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__removeFromContextEntities = new internal.ByNameReferenceListProperty(SelectorXPathSource, _this, "removeFromContextEntities", [], "DomainModels$Entity");
            if (arguments.length < 4) {
                throw new Error("new SelectorXPathSource() cannot be invoked directly, please use 'model.pages.createSelectorXPathSource()'");
            }
            return _this;
        }
        Object.defineProperty(SelectorXPathSource.prototype, "containerAsAssociationWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, AssociationWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelectorXPathSource.prototype, "sortBar", {
            get: function () { return this.__sortBar.get(); },
            set: function (newValue) { this.__sortBar.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelectorXPathSource.prototype, "xPathConstraint", {
            /**
             * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
             */
            get: function () { return this.__xPathConstraint.get(); },
            set: function (newValue) { this.__xPathConstraint.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelectorXPathSource.prototype, "constrainedBy", {
            /**
             * The value of this property is conceptually of type paths.EntityPath.
             */
            get: function () { return this.__constrainedBy.get(); },
            set: function (newValue) { this.__constrainedBy.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelectorXPathSource.prototype, "applyContext", {
            get: function () { return this.__applyContext.get(); },
            set: function (newValue) { this.__applyContext.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelectorXPathSource.prototype, "removeAllFromContext", {
            get: function () { return this.__removeAllFromContext.get(); },
            set: function (newValue) { this.__removeAllFromContext.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelectorXPathSource.prototype, "removeFromContextEntities", {
            get: function () { return this.__removeFromContextEntities.get(); },
            set: function (newValue) { this.__removeFromContextEntities.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelectorXPathSource.prototype, "removeFromContextEntitiesQualifiedNames", {
            get: function () { return this.__removeFromContextEntities.qualifiedNames(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new SelectorXPathSource instance in the SDK and on the server.
         * The new SelectorXPathSource will be automatically stored in the 'selectorSource' property
         * of the parent AssociationWidget element passed as argument.
         */
        SelectorXPathSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, SelectorXPathSource, "selectorSource", false);
        };
        /**
         * Creates and returns a new SelectorXPathSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SelectorXPathSource.create = function (model) {
            return internal.instancehelpers.createElement(model, SelectorXPathSource);
        };
        SelectorXPathSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.sortBar = GridSortBar.create(this.model);
        };
        return SelectorXPathSource;
    }(SelectorSource));
    SelectorXPathSource.typeName = "Pages$SelectorXPathSource";
    SelectorXPathSource.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "sortBar": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.SelectorXPathSource = SelectorXPathSource;
    /**
     * See: {@link https://docs.mendix.com/refguide7/sidebar-toggle-button relevant section in reference guide}
     */
    var SidebarToggleButton = (function (_super) {
        __extends(SidebarToggleButton, _super);
        function SidebarToggleButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__region = new internal.EnumProperty(SidebarToggleButton, _this, "region", SidebarToggleRegion.Left, SidebarToggleRegion);
            _this.__mode = new internal.EnumProperty(SidebarToggleButton, _this, "mode", SidebarToggleMode.PushContentAside, SidebarToggleMode);
            _this.__initiallyOpen = new internal.PrimitiveProperty(SidebarToggleButton, _this, "initiallyOpen", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new SidebarToggleButton() cannot be invoked directly, please use 'model.pages.createSidebarToggleButton()'");
            }
            return _this;
        }
        Object.defineProperty(SidebarToggleButton.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "region", {
            /**
             * In version 6.10.0: deleted
             */
            get: function () { return this.__region.get(); },
            set: function (newValue) { this.__region.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "mode", {
            /**
             * In version 6.10.0: deleted
             */
            get: function () { return this.__mode.get(); },
            set: function (newValue) { this.__mode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SidebarToggleButton.prototype, "initiallyOpen", {
            /**
             * In version 6.10.0: deleted
             */
            get: function () { return this.__initiallyOpen.get(); },
            set: function (newValue) { this.__initiallyOpen.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        SidebarToggleButton.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, SidebarToggleButton.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "footerWidget", false);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        SidebarToggleButton.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        SidebarToggleButton.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        SidebarToggleButton.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        SidebarToggleButton.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "leftWidget", false);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        SidebarToggleButton.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "rightWidget", false);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        SidebarToggleButton.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        SidebarToggleButton.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        SidebarToggleButton.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        SidebarToggleButton.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        SidebarToggleButton.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        SidebarToggleButton.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        SidebarToggleButton.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        SidebarToggleButton.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        SidebarToggleButton.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "firstWidget", false);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        SidebarToggleButton.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "secondWidget", false);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        SidebarToggleButton.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        SidebarToggleButton.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        SidebarToggleButton.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widget", false);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        SidebarToggleButton.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "widgets", true);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        SidebarToggleButton.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, SidebarToggleButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "parameterWidget", false);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        SidebarToggleButton.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, SidebarToggleButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, SidebarToggleButton, "reportWidget", false);
        };
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SidebarToggleButton.create = function (model) {
            return internal.instancehelpers.createElement(model, SidebarToggleButton);
        };
        SidebarToggleButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Toggle";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Toggle";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
            if (this.__mode.isAvailable) {
                this.mode = SidebarToggleMode.PushContentAside;
            }
            if (this.__region.isAvailable) {
                this.region = SidebarToggleRegion.Left;
            }
        };
        return SidebarToggleButton;
    }(Button));
    SidebarToggleButton.typeName = "Pages$SidebarToggleButton";
    SidebarToggleButton.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "region": {
                "deleted": "6.10.0",
                "deletionMessage": null
            },
            "mode": {
                "deleted": "6.10.0",
                "deletionMessage": null
            },
            "initiallyOpen": {
                "deleted": "6.10.0",
                "deletionMessage": null
            }
        }
    }, internal.StructureType.Element);
    pages.SidebarToggleButton = SidebarToggleButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/simple-menu-bar relevant section in reference guide}
     */
    var SimpleMenuBar = (function (_super) {
        __extends(SimpleMenuBar, _super);
        function SimpleMenuBar(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__orientation = new internal.EnumProperty(SimpleMenuBar, _this, "orientation", SimpleMenuBarOrientation.Horizontal, SimpleMenuBarOrientation);
            if (arguments.length < 4) {
                throw new Error("new SimpleMenuBar() cannot be invoked directly, please use 'model.pages.createSimpleMenuBar()'");
            }
            return _this;
        }
        Object.defineProperty(SimpleMenuBar.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleMenuBar.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleMenuBar.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleMenuBar.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleMenuBar.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleMenuBar.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleMenuBar.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleMenuBar.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleMenuBar.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleMenuBar.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleMenuBar.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleMenuBar.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleMenuBar.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleMenuBar.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleMenuBar.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleMenuBar.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleMenuBar.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleMenuBar.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleMenuBar.prototype, "orientation", {
            get: function () { return this.__orientation.get(); },
            set: function (newValue) { this.__orientation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        SimpleMenuBar.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, SimpleMenuBar.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "footerWidget", false);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        SimpleMenuBar.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        SimpleMenuBar.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        SimpleMenuBar.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        SimpleMenuBar.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "leftWidget", false);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        SimpleMenuBar.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "rightWidget", false);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        SimpleMenuBar.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        SimpleMenuBar.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        SimpleMenuBar.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        SimpleMenuBar.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        SimpleMenuBar.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        SimpleMenuBar.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        SimpleMenuBar.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        SimpleMenuBar.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        SimpleMenuBar.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "firstWidget", false);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        SimpleMenuBar.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "secondWidget", false);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        SimpleMenuBar.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        SimpleMenuBar.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        SimpleMenuBar.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widget", false);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        SimpleMenuBar.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "widgets", true);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        SimpleMenuBar.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, SimpleMenuBar.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "parameterWidget", false);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        SimpleMenuBar.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, SimpleMenuBar.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, SimpleMenuBar, "reportWidget", false);
        };
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SimpleMenuBar.create = function (model) {
            return internal.instancehelpers.createElement(model, SimpleMenuBar);
        };
        SimpleMenuBar.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.orientation = SimpleMenuBarOrientation.Horizontal;
        };
        return SimpleMenuBar;
    }(MenuWidget));
    SimpleMenuBar.typeName = "Pages$SimpleMenuBar";
    SimpleMenuBar.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.SimpleMenuBar = SimpleMenuBar;
    /**
     * See: {@link https://docs.mendix.com/refguide7/snippet relevant section in reference guide}
     */
    var Snippet = (function (_super) {
        __extends(Snippet, _super);
        function Snippet(model, typeName, id, isPartial, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, container) || this;
            _this.__entity = new internal.ByNameReferenceProperty(Snippet, _this, "entity", null, "DomainModels$Entity");
            _this.__widget = new internal.PartProperty(Snippet, _this, "widget", null, false);
            _this._containmentName = "documents";
            return _this;
        }
        Object.defineProperty(Snippet.prototype, "containerAsFolderBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, projects_1.projects.FolderBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Snippet.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Snippet.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Snippet.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new Snippet unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        Snippet.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, Snippet);
        };
        Snippet.prototype._isByNameReferrable = function () { return true; };
        Snippet.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return Snippet;
    }(FormBase));
    Snippet.typeName = "Pages$Snippet";
    Snippet.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "entity": {
                "public": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.ModelUnit);
    pages.Snippet = Snippet;
    var SnippetCall = (function (_super) {
        __extends(SnippetCall, _super);
        function SnippetCall(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__snippet = new internal.ByNameReferenceProperty(SnippetCall, _this, "snippet", null, "Pages$Snippet");
            if (arguments.length < 4) {
                throw new Error("new SnippetCall() cannot be invoked directly, please use 'model.pages.createSnippetCall()'");
            }
            return _this;
        }
        Object.defineProperty(SnippetCall.prototype, "containerAsSnippetCallWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, SnippetCallWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnippetCall.prototype, "snippet", {
            get: function () { return this.__snippet.get(); },
            set: function (newValue) { this.__snippet.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnippetCall.prototype, "snippetQualifiedName", {
            get: function () { return this.__snippet.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new SnippetCall instance in the SDK and on the server.
         * The new SnippetCall will be automatically stored in the 'snippetCall' property
         * of the parent SnippetCallWidget element passed as argument.
         */
        SnippetCall.createIn = function (container) {
            return internal.instancehelpers.createElement(container, SnippetCall, "snippetCall", false);
        };
        /**
         * Creates and returns a new SnippetCall instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SnippetCall.create = function (model) {
            return internal.instancehelpers.createElement(model, SnippetCall);
        };
        SnippetCall.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return SnippetCall;
    }(internal.Element));
    SnippetCall.typeName = "Pages$SnippetCall";
    SnippetCall.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.SnippetCall = SnippetCall;
    /**
     * See: {@link https://docs.mendix.com/refguide7/snippet-call relevant section in reference guide}
     */
    var SnippetCallWidget = (function (_super) {
        __extends(SnippetCallWidget, _super);
        function SnippetCallWidget(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__snippetCall = new internal.PartProperty(SnippetCallWidget, _this, "snippetCall", null, true);
            if (arguments.length < 4) {
                throw new Error("new SnippetCallWidget() cannot be invoked directly, please use 'model.pages.createSnippetCallWidget()'");
            }
            return _this;
        }
        Object.defineProperty(SnippetCallWidget.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnippetCallWidget.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnippetCallWidget.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnippetCallWidget.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnippetCallWidget.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnippetCallWidget.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnippetCallWidget.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnippetCallWidget.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnippetCallWidget.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnippetCallWidget.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnippetCallWidget.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnippetCallWidget.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnippetCallWidget.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnippetCallWidget.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnippetCallWidget.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnippetCallWidget.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnippetCallWidget.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnippetCallWidget.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnippetCallWidget.prototype, "snippetCall", {
            get: function () { return this.__snippetCall.get(); },
            set: function (newValue) { this.__snippetCall.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        SnippetCallWidget.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, SnippetCallWidget.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "footerWidget", false);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        SnippetCallWidget.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        SnippetCallWidget.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        SnippetCallWidget.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        SnippetCallWidget.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "leftWidget", false);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        SnippetCallWidget.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "rightWidget", false);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        SnippetCallWidget.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        SnippetCallWidget.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        SnippetCallWidget.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        SnippetCallWidget.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        SnippetCallWidget.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        SnippetCallWidget.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        SnippetCallWidget.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        SnippetCallWidget.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        SnippetCallWidget.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "firstWidget", false);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        SnippetCallWidget.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "secondWidget", false);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        SnippetCallWidget.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        SnippetCallWidget.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        SnippetCallWidget.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widget", false);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        SnippetCallWidget.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "widgets", true);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        SnippetCallWidget.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, SnippetCallWidget.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "parameterWidget", false);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        SnippetCallWidget.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, SnippetCallWidget.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, SnippetCallWidget, "reportWidget", false);
        };
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SnippetCallWidget.create = function (model) {
            return internal.instancehelpers.createElement(model, SnippetCallWidget);
        };
        SnippetCallWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.snippetCall = SnippetCall.create(this.model);
        };
        return SnippetCallWidget;
    }(Widget));
    SnippetCallWidget.typeName = "Pages$SnippetCallWidget";
    SnippetCallWidget.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "snippetCall": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.SnippetCallWidget = SnippetCallWidget;
    /**
     * See: {@link https://docs.mendix.com/refguide7/image relevant section in reference guide}
     */
    var StaticImageViewer = (function (_super) {
        __extends(StaticImageViewer, _super);
        function StaticImageViewer(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__image = new internal.ByNameReferenceProperty(StaticImageViewer, _this, "image", null, "Images$Image");
            _this.__widthUnit = new internal.EnumProperty(StaticImageViewer, _this, "widthUnit", ImageSizeUnit.Auto, ImageSizeUnit);
            _this.__heightUnit = new internal.EnumProperty(StaticImageViewer, _this, "heightUnit", ImageSizeUnit.Auto, ImageSizeUnit);
            _this.__width = new internal.PrimitiveProperty(StaticImageViewer, _this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__height = new internal.PrimitiveProperty(StaticImageViewer, _this, "height", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__clickAction = new internal.PartProperty(StaticImageViewer, _this, "clickAction", null, true);
            _this.__responsive = new internal.PrimitiveProperty(StaticImageViewer, _this, "responsive", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new StaticImageViewer() cannot be invoked directly, please use 'model.pages.createStaticImageViewer()'");
            }
            return _this;
        }
        Object.defineProperty(StaticImageViewer.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "image", {
            get: function () { return this.__image.get(); },
            set: function (newValue) { this.__image.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "imageQualifiedName", {
            get: function () { return this.__image.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "widthUnit", {
            get: function () { return this.__widthUnit.get(); },
            set: function (newValue) { this.__widthUnit.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "heightUnit", {
            get: function () { return this.__heightUnit.get(); },
            set: function (newValue) { this.__heightUnit.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "width", {
            get: function () { return this.__width.get(); },
            set: function (newValue) { this.__width.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "height", {
            get: function () { return this.__height.get(); },
            set: function (newValue) { this.__height.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "clickAction", {
            get: function () { return this.__clickAction.get(); },
            set: function (newValue) { this.__clickAction.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticImageViewer.prototype, "responsive", {
            get: function () { return this.__responsive.get(); },
            set: function (newValue) { this.__responsive.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        StaticImageViewer.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, StaticImageViewer.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, StaticImageViewer, "footerWidget", false);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        StaticImageViewer.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        StaticImageViewer.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        StaticImageViewer.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        StaticImageViewer.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "leftWidget", false);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        StaticImageViewer.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "rightWidget", false);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        StaticImageViewer.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        StaticImageViewer.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        StaticImageViewer.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        StaticImageViewer.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        StaticImageViewer.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        StaticImageViewer.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        StaticImageViewer.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        StaticImageViewer.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        StaticImageViewer.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "firstWidget", false);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        StaticImageViewer.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "secondWidget", false);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        StaticImageViewer.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        StaticImageViewer.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        StaticImageViewer.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widget", false);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        StaticImageViewer.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, StaticImageViewer, "widgets", true);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        StaticImageViewer.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, StaticImageViewer.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, StaticImageViewer, "parameterWidget", false);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        StaticImageViewer.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, StaticImageViewer.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, StaticImageViewer, "reportWidget", false);
        };
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        StaticImageViewer.create = function (model) {
            return internal.instancehelpers.createElement(model, StaticImageViewer);
        };
        StaticImageViewer.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.clickAction = NoClientAction.create(this.model);
            this.heightUnit = ImageSizeUnit.Auto;
            this.responsive = true;
            this.widthUnit = ImageSizeUnit.Auto;
        };
        return StaticImageViewer;
    }(ConditionallyVisibleWidget));
    StaticImageViewer.typeName = "Pages$StaticImageViewer";
    StaticImageViewer.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "clickAction": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.StaticImageViewer = StaticImageViewer;
    var StaticOrDynamicString = (function (_super) {
        __extends(StaticOrDynamicString, _super);
        function StaticOrDynamicString(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__isDynamic = new internal.PrimitiveProperty(StaticOrDynamicString, _this, "isDynamic", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__value = new internal.PrimitiveProperty(StaticOrDynamicString, _this, "value", "", internal.PrimitiveTypeEnum.String);
            _this.__attribute = new internal.PrimitiveProperty(StaticOrDynamicString, _this, "attribute", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new StaticOrDynamicString() cannot be invoked directly, please use 'model.pages.createStaticOrDynamicString()'");
            }
            return _this;
        }
        Object.defineProperty(StaticOrDynamicString.prototype, "containerAsLinkButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, LinkButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticOrDynamicString.prototype, "isDynamic", {
            get: function () { return this.__isDynamic.get(); },
            set: function (newValue) { this.__isDynamic.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticOrDynamicString.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StaticOrDynamicString.prototype, "attribute", {
            /**
             * The value of this property is conceptually of type paths.AttributePath.
             */
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new StaticOrDynamicString instance in the SDK and on the server.
         * The new StaticOrDynamicString will be automatically stored in the 'address' property
         * of the parent LinkButton element passed as argument.
         */
        StaticOrDynamicString.createIn = function (container) {
            return internal.instancehelpers.createElement(container, StaticOrDynamicString, "address", false);
        };
        /**
         * Creates and returns a new StaticOrDynamicString instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        StaticOrDynamicString.create = function (model) {
            return internal.instancehelpers.createElement(model, StaticOrDynamicString);
        };
        StaticOrDynamicString.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return StaticOrDynamicString;
    }(internal.Element));
    StaticOrDynamicString.typeName = "Pages$StaticOrDynamicString";
    StaticOrDynamicString.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.StaticOrDynamicString = StaticOrDynamicString;
    var SyncButton = (function (_super) {
        __extends(SyncButton, _super);
        function SyncButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new SyncButton() cannot be invoked directly, please use 'model.pages.createSyncButton()'");
            }
            return _this;
        }
        Object.defineProperty(SyncButton.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SyncButton.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SyncButton.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SyncButton.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SyncButton.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SyncButton.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SyncButton.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SyncButton.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SyncButton.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SyncButton.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SyncButton.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SyncButton.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SyncButton.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SyncButton.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SyncButton.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SyncButton.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SyncButton.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SyncButton.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        SyncButton.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, SyncButton.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, SyncButton, "footerWidget", false);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        SyncButton.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        SyncButton.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        SyncButton.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        SyncButton.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, SyncButton, "leftWidget", false);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        SyncButton.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, SyncButton, "rightWidget", false);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        SyncButton.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        SyncButton.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        SyncButton.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        SyncButton.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        SyncButton.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        SyncButton.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        SyncButton.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        SyncButton.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        SyncButton.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, SyncButton, "firstWidget", false);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        SyncButton.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, SyncButton, "secondWidget", false);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        SyncButton.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        SyncButton.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        SyncButton.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, SyncButton, "widget", false);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        SyncButton.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, SyncButton, "widgets", true);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        SyncButton.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, SyncButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, SyncButton, "parameterWidget", false);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        SyncButton.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, SyncButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, SyncButton, "reportWidget", false);
        };
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SyncButton.create = function (model) {
            return internal.instancehelpers.createElement(model, SyncButton);
        };
        SyncButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (clientTemplate) {
                clientTemplate.template = (function (text) {
                    text.translations.replace([(function (translation) {
                            translation.languageCode = "en_US";
                            translation.text = "Synchronize";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model)), (function (translation) {
                            translation.languageCode = "nl_NL";
                            translation.text = "Synchroniseren";
                            return translation;
                        })(texts_1.texts.Translation.create(_this.model))]);
                    return text;
                })(texts_1.texts.Text.create(_this.model));
                return clientTemplate;
            })(ClientTemplate.create(this.model));
        };
        return SyncButton;
    }(Button));
    SyncButton.typeName = "Pages$SyncButton";
    SyncButton.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.SyncButton = SyncButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/tab-container relevant section in reference guide}
     */
    var TabContainer = (function (_super) {
        __extends(TabContainer, _super);
        function TabContainer(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__tabPages = new internal.PartListProperty(TabContainer, _this, "tabPages", []);
            _this.__defaultPage = new internal.ByIdReferenceProperty(TabContainer, _this, "defaultPage", null);
            if (arguments.length < 4) {
                throw new Error("new TabContainer() cannot be invoked directly, please use 'model.pages.createTabContainer()'");
            }
            return _this;
        }
        Object.defineProperty(TabContainer.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabContainer.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabContainer.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabContainer.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabContainer.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabContainer.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabContainer.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabContainer.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabContainer.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabContainer.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabContainer.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabContainer.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabContainer.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabContainer.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabContainer.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabContainer.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabContainer.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabContainer.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabContainer.prototype, "tabPages", {
            get: function () { return this.__tabPages.get(); },
            set: function (newValue) { this.__tabPages.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabContainer.prototype, "defaultPage", {
            get: function () { return this.__defaultPage.get(); },
            set: function (newValue) { this.__defaultPage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        TabContainer.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, TabContainer.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, TabContainer, "footerWidget", false);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        TabContainer.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        TabContainer.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        TabContainer.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        TabContainer.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, TabContainer, "leftWidget", false);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        TabContainer.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, TabContainer, "rightWidget", false);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        TabContainer.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        TabContainer.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        TabContainer.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        TabContainer.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        TabContainer.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        TabContainer.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        TabContainer.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        TabContainer.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        TabContainer.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, TabContainer, "firstWidget", false);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        TabContainer.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, TabContainer, "secondWidget", false);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        TabContainer.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        TabContainer.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        TabContainer.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widget", false);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        TabContainer.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, TabContainer, "widgets", true);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        TabContainer.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, TabContainer.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, TabContainer, "parameterWidget", false);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        TabContainer.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, TabContainer.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, TabContainer, "reportWidget", false);
        };
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TabContainer.create = function (model) {
            return internal.instancehelpers.createElement(model, TabContainer);
        };
        TabContainer.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return TabContainer;
    }(ConditionallyVisibleWidget));
    TabContainer.typeName = "Pages$TabContainer";
    TabContainer.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.TabContainer = TabContainer;
    /**
     * See: {@link https://docs.mendix.com/refguide7/tab-page relevant section in reference guide}
     */
    var TabPage = (function (_super) {
        __extends(TabPage, _super);
        function TabPage(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__name = new internal.PrimitiveProperty(TabPage, _this, "name", "", internal.PrimitiveTypeEnum.String);
            _this.__caption = new internal.PartProperty(TabPage, _this, "caption", null, true);
            _this.__refreshOnShow = new internal.PrimitiveProperty(TabPage, _this, "refreshOnShow", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__conditionalVisibilitySettings = new internal.PartProperty(TabPage, _this, "conditionalVisibilitySettings", null, false);
            _this.__widget = new internal.PartProperty(TabPage, _this, "widget", null, false);
            if (arguments.length < 4) {
                throw new Error("new TabPage() cannot be invoked directly, please use 'model.pages.createTabPage()'");
            }
            return _this;
        }
        Object.defineProperty(TabPage.prototype, "containerAsTabContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabPage.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabPage.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabPage.prototype, "refreshOnShow", {
            get: function () { return this.__refreshOnShow.get(); },
            set: function (newValue) { this.__refreshOnShow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabPage.prototype, "conditionalVisibilitySettings", {
            get: function () { return this.__conditionalVisibilitySettings.get(); },
            set: function (newValue) { this.__conditionalVisibilitySettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabPage.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new TabPage instance in the SDK and on the server.
         * The new TabPage will be automatically stored in the 'tabPages' property
         * of the parent TabContainer element passed as argument.
         */
        TabPage.createIn = function (container) {
            return internal.instancehelpers.createElement(container, TabPage, "tabPages", true);
        };
        /**
         * Creates and returns a new TabPage instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TabPage.create = function (model) {
            return internal.instancehelpers.createElement(model, TabPage);
        };
        TabPage.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "TabPage";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
        };
        return TabPage;
    }(internal.Element));
    TabPage.typeName = "Pages$TabPage";
    TabPage.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "caption": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.TabPage = TabPage;
    /**
     * See: {@link https://docs.mendix.com/refguide7/table relevant section in reference guide}
     */
    var Table = (function (_super) {
        __extends(Table, _super);
        function Table(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__cells = new internal.PartListProperty(Table, _this, "cells", []);
            _this.__columns = new internal.PartListProperty(Table, _this, "columns", []);
            _this.__widthUnit = new internal.EnumProperty(Table, _this, "widthUnit", UnitEnum.Weight, UnitEnum);
            _this.__rows = new internal.PartListProperty(Table, _this, "rows", []);
            if (arguments.length < 4) {
                throw new Error("new Table() cannot be invoked directly, please use 'model.pages.createTable()'");
            }
            return _this;
        }
        Object.defineProperty(Table.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "cells", {
            get: function () { return this.__cells.get(); },
            set: function (newValue) { this.__cells.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "columns", {
            get: function () { return this.__columns.get(); },
            set: function (newValue) { this.__columns.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "widthUnit", {
            get: function () { return this.__widthUnit.get(); },
            set: function (newValue) { this.__widthUnit.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "rows", {
            get: function () { return this.__rows.get(); },
            set: function (newValue) { this.__rows.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        Table.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, Table.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, Table, "footerWidget", false);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        Table.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        Table.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        Table.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        Table.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, Table, "leftWidget", false);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        Table.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, Table, "rightWidget", false);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        Table.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        Table.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        Table.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        Table.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        Table.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        Table.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        Table.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        Table.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        Table.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, Table, "firstWidget", false);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        Table.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, Table, "secondWidget", false);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        Table.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        Table.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        Table.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Table, "widget", false);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        Table.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, Table, "widgets", true);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        Table.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, Table.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, Table, "parameterWidget", false);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        Table.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, Table.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, Table, "reportWidget", false);
        };
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Table.create = function (model) {
            return internal.instancehelpers.createElement(model, Table);
        };
        Table.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.widthUnit = UnitEnum.Weight;
        };
        return Table;
    }(ConditionallyVisibleWidget));
    Table.typeName = "Pages$Table";
    Table.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.Table = Table;
    var TableCell = (function (_super) {
        __extends(TableCell, _super);
        function TableCell(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__class = new internal.PrimitiveProperty(TableCell, _this, "class", "", internal.PrimitiveTypeEnum.String);
            _this.__style = new internal.PrimitiveProperty(TableCell, _this, "style", "", internal.PrimitiveTypeEnum.String);
            _this.__isHeader = new internal.PrimitiveProperty(TableCell, _this, "isHeader", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__widget = new internal.PartProperty(TableCell, _this, "widget", null, false);
            _this.__leftColumnIndex = new internal.PrimitiveProperty(TableCell, _this, "leftColumnIndex", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__topRowIndex = new internal.PrimitiveProperty(TableCell, _this, "topRowIndex", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__width = new internal.PrimitiveProperty(TableCell, _this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__height = new internal.PrimitiveProperty(TableCell, _this, "height", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new TableCell() cannot be invoked directly, please use 'model.pages.createTableCell()'");
            }
            return _this;
        }
        Object.defineProperty(TableCell.prototype, "containerAsTable", {
            get: function () { return _super.prototype.getContainerAs.call(this, Table); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "isHeader", {
            get: function () { return this.__isHeader.get(); },
            set: function (newValue) { this.__isHeader.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "leftColumnIndex", {
            get: function () { return this.__leftColumnIndex.get(); },
            set: function (newValue) { this.__leftColumnIndex.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "topRowIndex", {
            get: function () { return this.__topRowIndex.get(); },
            set: function (newValue) { this.__topRowIndex.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "width", {
            get: function () { return this.__width.get(); },
            set: function (newValue) { this.__width.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "height", {
            get: function () { return this.__height.get(); },
            set: function (newValue) { this.__height.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new TableCell instance in the SDK and on the server.
         * The new TableCell will be automatically stored in the 'cells' property
         * of the parent Table element passed as argument.
         */
        TableCell.createIn = function (container) {
            return internal.instancehelpers.createElement(container, TableCell, "cells", true);
        };
        /**
         * Creates and returns a new TableCell instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TableCell.create = function (model) {
            return internal.instancehelpers.createElement(model, TableCell);
        };
        TableCell.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return TableCell;
    }(internal.Element));
    TableCell.typeName = "Pages$TableCell";
    TableCell.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.TableCell = TableCell;
    var TableColumn = (function (_super) {
        __extends(TableColumn, _super);
        function TableColumn(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__width = new internal.PrimitiveProperty(TableColumn, _this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new TableColumn() cannot be invoked directly, please use 'model.pages.createTableColumn()'");
            }
            return _this;
        }
        Object.defineProperty(TableColumn.prototype, "containerAsTable", {
            get: function () { return _super.prototype.getContainerAs.call(this, Table); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "width", {
            get: function () { return this.__width.get(); },
            set: function (newValue) { this.__width.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new TableColumn instance in the SDK and on the server.
         * The new TableColumn will be automatically stored in the 'columns' property
         * of the parent Table element passed as argument.
         */
        TableColumn.createIn = function (container) {
            return internal.instancehelpers.createElement(container, TableColumn, "columns", true);
        };
        /**
         * Creates and returns a new TableColumn instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TableColumn.create = function (model) {
            return internal.instancehelpers.createElement(model, TableColumn);
        };
        TableColumn.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return TableColumn;
    }(internal.Element));
    TableColumn.typeName = "Pages$TableColumn";
    TableColumn.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.TableColumn = TableColumn;
    var TableRow = (function (_super) {
        __extends(TableRow, _super);
        function TableRow(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__class = new internal.PrimitiveProperty(TableRow, _this, "class", "", internal.PrimitiveTypeEnum.String);
            _this.__style = new internal.PrimitiveProperty(TableRow, _this, "style", "", internal.PrimitiveTypeEnum.String);
            _this.__conditionalVisibilitySettings = new internal.PartProperty(TableRow, _this, "conditionalVisibilitySettings", null, false);
            if (arguments.length < 4) {
                throw new Error("new TableRow() cannot be invoked directly, please use 'model.pages.createTableRow()'");
            }
            return _this;
        }
        Object.defineProperty(TableRow.prototype, "containerAsTable", {
            get: function () { return _super.prototype.getContainerAs.call(this, Table); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "class", {
            get: function () { return this.__class.get(); },
            set: function (newValue) { this.__class.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "style", {
            get: function () { return this.__style.get(); },
            set: function (newValue) { this.__style.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "conditionalVisibilitySettings", {
            get: function () { return this.__conditionalVisibilitySettings.get(); },
            set: function (newValue) { this.__conditionalVisibilitySettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new TableRow instance in the SDK and on the server.
         * The new TableRow will be automatically stored in the 'rows' property
         * of the parent Table element passed as argument.
         */
        TableRow.createIn = function (container) {
            return internal.instancehelpers.createElement(container, TableRow, "rows", true);
        };
        /**
         * Creates and returns a new TableRow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TableRow.create = function (model) {
            return internal.instancehelpers.createElement(model, TableRow);
        };
        TableRow.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return TableRow;
    }(internal.Element));
    TableRow.typeName = "Pages$TableRow";
    TableRow.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.TableRow = TableRow;
    /**
     * See: {@link https://docs.mendix.com/refguide7/template-grid relevant section in reference guide}
     */
    var TemplateGrid = (function (_super) {
        __extends(TemplateGrid, _super);
        function TemplateGrid(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__contents = new internal.PartProperty(TemplateGrid, _this, "contents", null, true);
            _this.__numberOfRows = new internal.PrimitiveProperty(TemplateGrid, _this, "numberOfRows", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__numberOfColumns = new internal.PrimitiveProperty(TemplateGrid, _this, "numberOfColumns", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new TemplateGrid() cannot be invoked directly, please use 'model.pages.createTemplateGrid()'");
            }
            return _this;
        }
        Object.defineProperty(TemplateGrid.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "contents", {
            get: function () { return this.__contents.get(); },
            set: function (newValue) { this.__contents.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "numberOfRows", {
            get: function () { return this.__numberOfRows.get(); },
            set: function (newValue) { this.__numberOfRows.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGrid.prototype, "numberOfColumns", {
            get: function () { return this.__numberOfColumns.get(); },
            set: function (newValue) { this.__numberOfColumns.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        TemplateGrid.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, TemplateGrid.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, TemplateGrid, "footerWidget", false);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        TemplateGrid.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        TemplateGrid.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        TemplateGrid.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        TemplateGrid.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "leftWidget", false);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        TemplateGrid.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "rightWidget", false);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        TemplateGrid.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        TemplateGrid.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        TemplateGrid.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        TemplateGrid.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        TemplateGrid.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        TemplateGrid.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        TemplateGrid.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        TemplateGrid.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        TemplateGrid.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "firstWidget", false);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        TemplateGrid.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "secondWidget", false);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        TemplateGrid.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        TemplateGrid.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        TemplateGrid.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widget", false);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        TemplateGrid.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGrid, "widgets", true);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        TemplateGrid.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, TemplateGrid.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, TemplateGrid, "parameterWidget", false);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        TemplateGrid.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, TemplateGrid.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, TemplateGrid, "reportWidget", false);
        };
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TemplateGrid.create = function (model) {
            return internal.instancehelpers.createElement(model, TemplateGrid);
        };
        TemplateGrid.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.contents = TemplateGridContents.create(this.model);
            this.numberOfColumns = 2;
            this.numberOfRows = 3;
        };
        return TemplateGrid;
    }(Grid));
    TemplateGrid.typeName = "Pages$TemplateGrid";
    TemplateGrid.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "contents": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.TemplateGrid = TemplateGrid;
    var TemplateGridContents = (function (_super) {
        __extends(TemplateGridContents, _super);
        function TemplateGridContents(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__widget = new internal.PartProperty(TemplateGridContents, _this, "widget", null, false);
            if (arguments.length < 4) {
                throw new Error("new TemplateGridContents() cannot be invoked directly, please use 'model.pages.createTemplateGridContents()'");
            }
            return _this;
        }
        Object.defineProperty(TemplateGridContents.prototype, "containerAsTemplateGrid", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGrid); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateGridContents.prototype, "widget", {
            get: function () { return this.__widget.get(); },
            set: function (newValue) { this.__widget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
         * The new TemplateGridContents will be automatically stored in the 'contents' property
         * of the parent TemplateGrid element passed as argument.
         */
        TemplateGridContents.createIn = function (container) {
            return internal.instancehelpers.createElement(container, TemplateGridContents, "contents", false);
        };
        /**
         * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TemplateGridContents.create = function (model) {
            return internal.instancehelpers.createElement(model, TemplateGridContents);
        };
        TemplateGridContents.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return TemplateGridContents;
    }(internal.Element));
    TemplateGridContents.typeName = "Pages$TemplateGridContents";
    TemplateGridContents.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.TemplateGridContents = TemplateGridContents;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var TextWidget = (function (_super) {
        __extends(TextWidget, _super);
        function TextWidget(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__maxLengthCode = new internal.PrimitiveProperty(TextWidget, _this, "maxLengthCode", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new TextWidget() cannot be invoked directly, please use 'model.pages.createTextWidget()'");
            }
            return _this;
        }
        Object.defineProperty(TextWidget.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextWidget.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextWidget.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextWidget.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextWidget.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextWidget.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextWidget.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextWidget.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextWidget.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextWidget.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextWidget.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextWidget.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextWidget.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextWidget.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextWidget.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextWidget.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextWidget.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextWidget.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextWidget.prototype, "maxLengthCode", {
            get: function () { return this.__maxLengthCode.get(); },
            set: function (newValue) { this.__maxLengthCode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        TextWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.maxLengthCode = -1;
        };
        return TextWidget;
    }(AttributeWidgetWithPlaceholder));
    TextWidget.typeName = "Pages$TextWidget";
    TextWidget.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.TextWidget = TextWidget;
    /**
     * See: {@link https://docs.mendix.com/refguide7/text-area relevant section in reference guide}
     */
    var TextArea = (function (_super) {
        __extends(TextArea, _super);
        function TextArea(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__numberOfLines = new internal.PrimitiveProperty(TextArea, _this, "numberOfLines", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__counterMessage = new internal.PartProperty(TextArea, _this, "counterMessage", null, true);
            _this.__textTooLongMessage = new internal.PartProperty(TextArea, _this, "textTooLongMessage", null, true);
            if (arguments.length < 4) {
                throw new Error("new TextArea() cannot be invoked directly, please use 'model.pages.createTextArea()'");
            }
            return _this;
        }
        Object.defineProperty(TextArea.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "numberOfLines", {
            get: function () { return this.__numberOfLines.get(); },
            set: function (newValue) { this.__numberOfLines.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "counterMessage", {
            get: function () { return this.__counterMessage.get(); },
            set: function (newValue) { this.__counterMessage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "textTooLongMessage", {
            get: function () { return this.__textTooLongMessage.get(); },
            set: function (newValue) { this.__textTooLongMessage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        TextArea.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, TextArea.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, TextArea, "footerWidget", false);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        TextArea.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        TextArea.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        TextArea.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        TextArea.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextArea, "leftWidget", false);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        TextArea.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextArea, "rightWidget", false);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        TextArea.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        TextArea.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        TextArea.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        TextArea.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        TextArea.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        TextArea.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        TextArea.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        TextArea.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        TextArea.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextArea, "firstWidget", false);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        TextArea.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextArea, "secondWidget", false);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        TextArea.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        TextArea.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        TextArea.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextArea, "widget", false);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        TextArea.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, TextArea, "widgets", true);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        TextArea.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, TextArea.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, TextArea, "parameterWidget", false);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        TextArea.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, TextArea.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, TextArea, "reportWidget", false);
        };
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TextArea.create = function (model) {
            return internal.instancehelpers.createElement(model, TextArea);
        };
        TextArea.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.counterMessage = texts_1.texts.Text.create(this.model);
            this.numberOfLines = 5;
            this.textTooLongMessage = texts_1.texts.Text.create(this.model);
        };
        return TextArea;
    }(TextWidget));
    TextArea.typeName = "Pages$TextArea";
    TextArea.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "counterMessage": {
                "required": {
                    "currentValue": true
                }
            },
            "textTooLongMessage": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.TextArea = TextArea;
    /**
     * See: {@link https://docs.mendix.com/refguide7/text-box relevant section in reference guide}
     */
    var TextBox = (function (_super) {
        __extends(TextBox, _super);
        function TextBox(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__inputMask = new internal.PrimitiveProperty(TextBox, _this, "inputMask", "", internal.PrimitiveTypeEnum.String);
            _this.__formattingInfo = new internal.PartProperty(TextBox, _this, "formattingInfo", null, true);
            _this.__isPasswordBox = new internal.PrimitiveProperty(TextBox, _this, "isPasswordBox", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new TextBox() cannot be invoked directly, please use 'model.pages.createTextBox()'");
            }
            return _this;
        }
        Object.defineProperty(TextBox.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "inputMask", {
            get: function () { return this.__inputMask.get(); },
            set: function (newValue) { this.__inputMask.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "formattingInfo", {
            get: function () { return this.__formattingInfo.get(); },
            set: function (newValue) { this.__formattingInfo.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBox.prototype, "isPasswordBox", {
            get: function () { return this.__isPasswordBox.get(); },
            set: function (newValue) { this.__isPasswordBox.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        TextBox.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, TextBox.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, TextBox, "footerWidget", false);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        TextBox.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        TextBox.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        TextBox.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        TextBox.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextBox, "leftWidget", false);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        TextBox.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextBox, "rightWidget", false);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        TextBox.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        TextBox.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        TextBox.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        TextBox.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        TextBox.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        TextBox.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        TextBox.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        TextBox.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        TextBox.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextBox, "firstWidget", false);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        TextBox.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextBox, "secondWidget", false);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        TextBox.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        TextBox.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        TextBox.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, TextBox, "widget", false);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        TextBox.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, TextBox, "widgets", true);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        TextBox.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, TextBox.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, TextBox, "parameterWidget", false);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        TextBox.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, TextBox.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, TextBox, "reportWidget", false);
        };
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TextBox.create = function (model) {
            return internal.instancehelpers.createElement(model, TextBox);
        };
        TextBox.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.formattingInfo = FormattingInfo.create(this.model);
        };
        return TextBox;
    }(TextWidget));
    TextBox.typeName = "Pages$TextBox";
    TextBox.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "formattingInfo": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    pages.TextBox = TextBox;
    /**
     * See: {@link https://docs.mendix.com/refguide7/page-title relevant section in reference guide}
     */
    var Title = (function (_super) {
        __extends(Title, _super);
        function Title(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new Title() cannot be invoked directly, please use 'model.pages.createTitle()'");
            }
            return _this;
        }
        Object.defineProperty(Title.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Title.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Title.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Title.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Title.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Title.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Title.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Title.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Title.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Title.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Title.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Title.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Title.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Title.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Title.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Title.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Title.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Title.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        Title.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, Title.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, Title, "footerWidget", false);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        Title.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        Title.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        Title.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        Title.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, Title, "leftWidget", false);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        Title.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, Title, "rightWidget", false);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        Title.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        Title.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        Title.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        Title.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        Title.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        Title.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        Title.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        Title.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        Title.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, Title, "firstWidget", false);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        Title.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, Title, "secondWidget", false);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        Title.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        Title.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        Title.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, Title, "widget", false);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        Title.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, Title, "widgets", true);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        Title.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, Title.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, Title, "parameterWidget", false);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        Title.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, Title.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, Title, "reportWidget", false);
        };
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Title.create = function (model) {
            return internal.instancehelpers.createElement(model, Title);
        };
        Title.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return Title;
    }(ConditionallyVisibleWidget));
    Title.typeName = "Pages$Title";
    Title.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.Title = Title;
    var VerticalFlow = (function (_super) {
        __extends(VerticalFlow, _super);
        function VerticalFlow(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__widgets = new internal.PartListProperty(VerticalFlow, _this, "widgets", []);
            if (arguments.length < 4) {
                throw new Error("new VerticalFlow() cannot be invoked directly, please use 'model.pages.createVerticalFlow()'");
            }
            return _this;
        }
        Object.defineProperty(VerticalFlow.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalFlow.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalFlow.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalFlow.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalFlow.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalFlow.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalFlow.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalFlow.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalFlow.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalFlow.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalFlow.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalFlow.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalFlow.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalFlow.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalFlow.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalFlow.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalFlow.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalFlow.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalFlow.prototype, "widgets", {
            get: function () { return this.__widgets.get(); },
            set: function (newValue) { this.__widgets.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        VerticalFlow.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, VerticalFlow.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, VerticalFlow, "footerWidget", false);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        VerticalFlow.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        VerticalFlow.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        VerticalFlow.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        VerticalFlow.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "leftWidget", false);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        VerticalFlow.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "rightWidget", false);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        VerticalFlow.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        VerticalFlow.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        VerticalFlow.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        VerticalFlow.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        VerticalFlow.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        VerticalFlow.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        VerticalFlow.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        VerticalFlow.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        VerticalFlow.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "firstWidget", false);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        VerticalFlow.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "secondWidget", false);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        VerticalFlow.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        VerticalFlow.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        VerticalFlow.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widget", false);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        VerticalFlow.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, VerticalFlow, "widgets", true);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        VerticalFlow.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, VerticalFlow.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, VerticalFlow, "parameterWidget", false);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        VerticalFlow.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, VerticalFlow.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, VerticalFlow, "reportWidget", false);
        };
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        VerticalFlow.create = function (model) {
            return internal.instancehelpers.createElement(model, VerticalFlow);
        };
        VerticalFlow.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return VerticalFlow;
    }(Widget));
    VerticalFlow.typeName = "Pages$VerticalFlow";
    VerticalFlow.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.VerticalFlow = VerticalFlow;
    /**
     * See: {@link https://docs.mendix.com/refguide7/vertical-split-pane relevant section in reference guide}
     */
    var VerticalSplitPane = (function (_super) {
        __extends(VerticalSplitPane, _super);
        function VerticalSplitPane(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new VerticalSplitPane() cannot be invoked directly, please use 'model.pages.createVerticalSplitPane()'");
            }
            return _this;
        }
        Object.defineProperty(VerticalSplitPane.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalSplitPane.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalSplitPane.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalSplitPane.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalSplitPane.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalSplitPane.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalSplitPane.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalSplitPane.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalSplitPane.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalSplitPane.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalSplitPane.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalSplitPane.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalSplitPane.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalSplitPane.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalSplitPane.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalSplitPane.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalSplitPane.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VerticalSplitPane.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        VerticalSplitPane.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, VerticalSplitPane.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "footerWidget", false);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        VerticalSplitPane.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        VerticalSplitPane.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        VerticalSplitPane.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        VerticalSplitPane.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "leftWidget", false);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        VerticalSplitPane.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "rightWidget", false);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        VerticalSplitPane.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        VerticalSplitPane.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        VerticalSplitPane.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        VerticalSplitPane.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        VerticalSplitPane.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        VerticalSplitPane.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        VerticalSplitPane.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        VerticalSplitPane.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        VerticalSplitPane.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "firstWidget", false);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        VerticalSplitPane.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "secondWidget", false);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        VerticalSplitPane.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        VerticalSplitPane.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        VerticalSplitPane.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widget", false);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        VerticalSplitPane.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "widgets", true);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        VerticalSplitPane.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, VerticalSplitPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "parameterWidget", false);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        VerticalSplitPane.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, VerticalSplitPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, VerticalSplitPane, "reportWidget", false);
        };
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        VerticalSplitPane.create = function (model) {
            return internal.instancehelpers.createElement(model, VerticalSplitPane);
        };
        VerticalSplitPane.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return VerticalSplitPane;
    }(SplitPane));
    VerticalSplitPane.typeName = "Pages$VerticalSplitPane";
    VerticalSplitPane.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    pages.VerticalSplitPane = VerticalSplitPane;
})(pages = exports.pages || (exports.pages = {}));
var documenttemplates_1 = require("./documenttemplates");
var menus_1 = require("./menus");
var microflows_1 = require("./microflows");
var navigation_1 = require("./navigation");
var reports_1 = require("./reports");
var texts_1 = require("./texts");
