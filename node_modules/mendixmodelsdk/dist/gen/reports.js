/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var pages_1 = require("./pages");
var reports;
(function (reports) {
    var AggregateFunctionEnum = (function (_super) {
        __extends(AggregateFunctionEnum, _super);
        function AggregateFunctionEnum() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "reports.AggregateFunctionEnum";
            return _this;
        }
        return AggregateFunctionEnum;
    }(internal.IEnum));
    AggregateFunctionEnum.Sum = new AggregateFunctionEnum("Sum", {});
    AggregateFunctionEnum.Average = new AggregateFunctionEnum("Average", {});
    AggregateFunctionEnum.Count = new AggregateFunctionEnum("Count", {});
    AggregateFunctionEnum.Minimum = new AggregateFunctionEnum("Minimum", {});
    AggregateFunctionEnum.Maximum = new AggregateFunctionEnum("Maximum", {});
    reports.AggregateFunctionEnum = AggregateFunctionEnum;
    var AspectRatio = (function (_super) {
        __extends(AspectRatio, _super);
        function AspectRatio() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "reports.AspectRatio";
            return _this;
        }
        return AspectRatio;
    }(internal.IEnum));
    AspectRatio.SixteenToNine = new AspectRatio("SixteenToNine", {});
    AspectRatio.ThreeToTwo = new AspectRatio("ThreeToTwo", {});
    AspectRatio.FourToThree = new AspectRatio("FourToThree", {});
    AspectRatio.OneToOne = new AspectRatio("OneToOne", {});
    AspectRatio.ThreeToFour = new AspectRatio("ThreeToFour", {});
    AspectRatio.TwoToThree = new AspectRatio("TwoToThree", {});
    AspectRatio.NineToSixteen = new AspectRatio("NineToSixteen", {});
    reports.AspectRatio = AspectRatio;
    var ChartType = (function (_super) {
        __extends(ChartType, _super);
        function ChartType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "reports.ChartType";
            return _this;
        }
        return ChartType;
    }(internal.IEnum));
    ChartType.VerticalBars = new ChartType("VerticalBars", {});
    ChartType.VerticalBars3D = new ChartType("VerticalBars3D", {});
    ChartType.HorizontalBars = new ChartType("HorizontalBars", {});
    ChartType.Lines = new ChartType("Lines", {});
    ChartType.Area = new ChartType("Area", {});
    reports.ChartType = ChartType;
    var ColumnFormat = (function (_super) {
        __extends(ColumnFormat, _super);
        function ColumnFormat() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "reports.ColumnFormat";
            return _this;
        }
        return ColumnFormat;
    }(internal.IEnum));
    ColumnFormat.Default = new ColumnFormat("Default", {});
    ColumnFormat.MonthName = new ColumnFormat("MonthName", {});
    ColumnFormat.WeekdayName = new ColumnFormat("WeekdayName", {});
    reports.ColumnFormat = ColumnFormat;
    var DateRangeFieldEnum = (function (_super) {
        __extends(DateRangeFieldEnum, _super);
        function DateRangeFieldEnum() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "reports.DateRangeFieldEnum";
            return _this;
        }
        return DateRangeFieldEnum;
    }(internal.IEnum));
    DateRangeFieldEnum.Year = new DateRangeFieldEnum("Year", {});
    DateRangeFieldEnum.Month = new DateRangeFieldEnum("Month", {});
    DateRangeFieldEnum.Week = new DateRangeFieldEnum("Week", {});
    DateRangeFieldEnum.Period = new DateRangeFieldEnum("Period", {});
    DateRangeFieldEnum.Quarter = new DateRangeFieldEnum("Quarter", {});
    reports.DateRangeFieldEnum = DateRangeFieldEnum;
    /**
     * See: {@link https://docs.mendix.com/refguide7/report-widgets relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ReportWidget = (function (_super) {
        __extends(ReportWidget, _super);
        function ReportWidget(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__dataSet = new internal.ByNameReferenceProperty(ReportWidget, _this, "dataSet", null, "DataSets$DataSet");
            _this.__generateOnLoad = new internal.PrimitiveProperty(ReportWidget, _this, "generateOnLoad", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new ReportWidget() cannot be invoked directly, please use 'model.reports.createReportWidget()'");
            }
            return _this;
        }
        Object.defineProperty(ReportWidget.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportWidget.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportWidget.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportWidget.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportWidget.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportWidget.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportWidget.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportWidget.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportWidget.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportWidget.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportWidget.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportWidget.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportWidget.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportWidget.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportWidget.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportWidget.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportWidget.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportWidget.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportWidget.prototype, "dataSet", {
            get: function () { return this.__dataSet.get(); },
            set: function (newValue) { this.__dataSet.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportWidget.prototype, "dataSetQualifiedName", {
            get: function () { return this.__dataSet.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportWidget.prototype, "generateOnLoad", {
            /**
             * In version 6.10.0: introduced
             */
            get: function () { return this.__generateOnLoad.get(); },
            set: function (newValue) { this.__generateOnLoad.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ReportWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            if (this.__generateOnLoad.isAvailable) {
                this.generateOnLoad = true;
            }
        };
        return ReportWidget;
    }(pages_1.pages.Widget));
    ReportWidget.typeName = "Reports$ReportWidget";
    ReportWidget.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "generateOnLoad": {
                "introduced": "6.10.0"
            }
        },
        "public": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    reports.ReportWidget = ReportWidget;
    /**
     * See: {@link https://docs.mendix.com/refguide7/report-grid relevant section in reference guide}
     */
    var BasicReport = (function (_super) {
        __extends(BasicReport, _super);
        function BasicReport(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__columns = new internal.PartListProperty(BasicReport, _this, "columns", []);
            _this.__aggregates = new internal.PartListProperty(BasicReport, _this, "aggregates", []);
            _this.__showExportButton = new internal.PrimitiveProperty(BasicReport, _this, "showExportButton", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__zoomInfo = new internal.PartProperty(BasicReport, _this, "zoomInfo", null, true);
            _this.__isPagingEnabled = new internal.PrimitiveProperty(BasicReport, _this, "isPagingEnabled", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__pageSize = new internal.PrimitiveProperty(BasicReport, _this, "pageSize", 0, internal.PrimitiveTypeEnum.Integer);
            if (arguments.length < 4) {
                throw new Error("new BasicReport() cannot be invoked directly, please use 'model.reports.createBasicReport()'");
            }
            return _this;
        }
        Object.defineProperty(BasicReport.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "columns", {
            get: function () { return this.__columns.get(); },
            set: function (newValue) { this.__columns.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "aggregates", {
            get: function () { return this.__aggregates.get(); },
            set: function (newValue) { this.__aggregates.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "showExportButton", {
            get: function () { return this.__showExportButton.get(); },
            set: function (newValue) { this.__showExportButton.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "zoomInfo", {
            get: function () { return this.__zoomInfo.get(); },
            set: function (newValue) { this.__zoomInfo.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "isPagingEnabled", {
            get: function () { return this.__isPagingEnabled.get(); },
            set: function (newValue) { this.__isPagingEnabled.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReport.prototype, "pageSize", {
            get: function () { return this.__pageSize.get(); },
            set: function (newValue) { this.__pageSize.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'footerWidget' property
         * of the parent pages.DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        BasicReport.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, BasicReport.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, BasicReport, "footerWidget", false);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'widget' property
         * of the parent pages.DataView element passed as argument.
         */
        BasicReport.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'widget' property
         * of the parent pages.DivContainer element passed as argument.
         */
        BasicReport.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'widget' property
         * of the parent pages.GroupBox element passed as argument.
         */
        BasicReport.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'leftWidget' property
         * of the parent pages.Header element passed as argument.
         */
        BasicReport.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, BasicReport, "leftWidget", false);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'rightWidget' property
         * of the parent pages.Header element passed as argument.
         */
        BasicReport.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, BasicReport, "rightWidget", false);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'widget' property
         * of the parent pages.Layout element passed as argument.
         */
        BasicReport.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'widget' property
         * of the parent pages.LayoutCallArgument element passed as argument.
         */
        BasicReport.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'widget' property
         * of the parent pages.LayoutGridColumn element passed as argument.
         */
        BasicReport.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'widget' property
         * of the parent pages.ListView element passed as argument.
         */
        BasicReport.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'widget' property
         * of the parent pages.ListViewTemplate element passed as argument.
         */
        BasicReport.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'widget' property
         * of the parent pages.NavigationListItem element passed as argument.
         */
        BasicReport.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'widget' property
         * of the parent pages.ScrollContainerRegion element passed as argument.
         */
        BasicReport.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'widget' property
         * of the parent pages.Snippet element passed as argument.
         */
        BasicReport.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'firstWidget' property
         * of the parent pages.SplitPane element passed as argument.
         */
        BasicReport.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, BasicReport, "firstWidget", false);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'secondWidget' property
         * of the parent pages.SplitPane element passed as argument.
         */
        BasicReport.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, BasicReport, "secondWidget", false);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'widget' property
         * of the parent pages.TabPage element passed as argument.
         */
        BasicReport.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'widget' property
         * of the parent pages.TableCell element passed as argument.
         */
        BasicReport.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'widget' property
         * of the parent pages.TemplateGridContents element passed as argument.
         */
        BasicReport.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, BasicReport, "widget", false);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'widgets' property
         * of the parent pages.VerticalFlow element passed as argument.
         */
        BasicReport.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, BasicReport, "widgets", true);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'parameterWidget' property
         * of the parent ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        BasicReport.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, BasicReport.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, BasicReport, "parameterWidget", false);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * The new BasicReport will be automatically stored in the 'reportWidget' property
         * of the parent ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        BasicReport.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, BasicReport.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, BasicReport, "reportWidget", false);
        };
        /**
         * Creates and returns a new BasicReport instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BasicReport.create = function (model) {
            return internal.instancehelpers.createElement(model, BasicReport);
        };
        BasicReport.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.columns.replace([(function (basicReportColumn) {
                    basicReportColumn.caption = (function (text) {
                        text.translations.replace([(function (translation) {
                                translation.languageCode = "en_US";
                                translation.text = "Column 1";
                                return translation;
                            })(texts_1.texts.Translation.create(_this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(_this.model));
                    return basicReportColumn;
                })(BasicReportColumn.create(this.model)), (function (basicReportColumn) {
                    basicReportColumn.caption = (function (text) {
                        text.translations.replace([(function (translation) {
                                translation.languageCode = "en_US";
                                translation.text = "Column 2";
                                return translation;
                            })(texts_1.texts.Translation.create(_this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(_this.model));
                    return basicReportColumn;
                })(BasicReportColumn.create(this.model)), (function (basicReportColumn) {
                    basicReportColumn.caption = (function (text) {
                        text.translations.replace([(function (translation) {
                                translation.languageCode = "en_US";
                                translation.text = "Column 3";
                                return translation;
                            })(texts_1.texts.Translation.create(_this.model))]);
                        return text;
                    })(texts_1.texts.Text.create(_this.model));
                    return basicReportColumn;
                })(BasicReportColumn.create(this.model))]);
            this.pageSize = 20;
            this.zoomInfo = ReportZoomInfo.create(this.model);
        };
        return BasicReport;
    }(ReportWidget));
    BasicReport.typeName = "Reports$BasicReport";
    BasicReport.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "zoomInfo": {
                "required": {
                    "currentValue": true
                }
            }
        },
        "public": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    reports.BasicReport = BasicReport;
    var BasicReportAggregate = (function (_super) {
        __extends(BasicReportAggregate, _super);
        function BasicReportAggregate(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__caption = new internal.PartProperty(BasicReportAggregate, _this, "caption", null, true);
            _this.__aggregateFunction = new internal.EnumProperty(BasicReportAggregate, _this, "aggregateFunction", AggregateFunctionEnum.Sum, AggregateFunctionEnum);
            _this.__applicablePerColumn = new internal.PrimitiveListProperty(BasicReportAggregate, _this, "applicablePerColumn", [], internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new BasicReportAggregate() cannot be invoked directly, please use 'model.reports.createBasicReportAggregate()'");
            }
            return _this;
        }
        Object.defineProperty(BasicReportAggregate.prototype, "containerAsBasicReport", {
            get: function () { return _super.prototype.getContainerAs.call(this, BasicReport); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReportAggregate.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReportAggregate.prototype, "aggregateFunction", {
            get: function () { return this.__aggregateFunction.get(); },
            set: function (newValue) { this.__aggregateFunction.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReportAggregate.prototype, "applicablePerColumn", {
            get: function () { return this.__applicablePerColumn.get(); },
            set: function (newValue) { this.__applicablePerColumn.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new BasicReportAggregate instance in the SDK and on the server.
         * The new BasicReportAggregate will be automatically stored in the 'aggregates' property
         * of the parent BasicReport element passed as argument.
         */
        BasicReportAggregate.createIn = function (container) {
            return internal.instancehelpers.createElement(container, BasicReportAggregate, "aggregates", true);
        };
        /**
         * Creates and returns a new BasicReportAggregate instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BasicReportAggregate.create = function (model) {
            return internal.instancehelpers.createElement(model, BasicReportAggregate);
        };
        BasicReportAggregate.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.aggregateFunction = AggregateFunctionEnum.Sum;
            this.caption = texts_1.texts.Text.create(this.model);
        };
        return BasicReportAggregate;
    }(internal.Element));
    BasicReportAggregate.typeName = "Reports$BasicReportAggregate";
    BasicReportAggregate.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "caption": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    reports.BasicReportAggregate = BasicReportAggregate;
    var BasicReportColumn = (function (_super) {
        __extends(BasicReportColumn, _super);
        function BasicReportColumn(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__caption = new internal.PartProperty(BasicReportColumn, _this, "caption", null, true);
            _this.__dataSetColumnName = new internal.PrimitiveProperty(BasicReportColumn, _this, "dataSetColumnName", "", internal.PrimitiveTypeEnum.String);
            _this.__width = new internal.PrimitiveProperty(BasicReportColumn, _this, "width", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__alignment = new internal.EnumProperty(BasicReportColumn, _this, "alignment", pages_1.pages.AlignmentEnum.Left, pages_1.pages.AlignmentEnum);
            _this.__format = new internal.EnumProperty(BasicReportColumn, _this, "format", ColumnFormat.Default, ColumnFormat);
            if (arguments.length < 4) {
                throw new Error("new BasicReportColumn() cannot be invoked directly, please use 'model.reports.createBasicReportColumn()'");
            }
            return _this;
        }
        Object.defineProperty(BasicReportColumn.prototype, "containerAsBasicReport", {
            get: function () { return _super.prototype.getContainerAs.call(this, BasicReport); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReportColumn.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReportColumn.prototype, "dataSetColumnName", {
            get: function () { return this.__dataSetColumnName.get(); },
            set: function (newValue) { this.__dataSetColumnName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReportColumn.prototype, "width", {
            get: function () { return this.__width.get(); },
            set: function (newValue) { this.__width.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReportColumn.prototype, "alignment", {
            get: function () { return this.__alignment.get(); },
            set: function (newValue) { this.__alignment.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicReportColumn.prototype, "format", {
            get: function () { return this.__format.get(); },
            set: function (newValue) { this.__format.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new BasicReportColumn instance in the SDK and on the server.
         * The new BasicReportColumn will be automatically stored in the 'columns' property
         * of the parent BasicReport element passed as argument.
         */
        BasicReportColumn.createIn = function (container) {
            return internal.instancehelpers.createElement(container, BasicReportColumn, "columns", true);
        };
        /**
         * Creates and returns a new BasicReportColumn instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BasicReportColumn.create = function (model) {
            return internal.instancehelpers.createElement(model, BasicReportColumn);
        };
        BasicReportColumn.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.alignment = pages_1.pages.AlignmentEnum.Left;
            this.caption = texts_1.texts.Text.create(this.model);
            this.format = ColumnFormat.Default;
            this.width = 1;
        };
        return BasicReportColumn;
    }(internal.Element));
    BasicReportColumn.typeName = "Reports$BasicReportColumn";
    BasicReportColumn.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "caption": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    reports.BasicReportColumn = BasicReportColumn;
    /**
     * See: {@link https://docs.mendix.com/refguide7/report-button relevant section in reference guide}
     */
    var ReportButton = (function (_super) {
        __extends(ReportButton, _super);
        function ReportButton(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__caption = new internal.PartProperty(ReportButton, _this, "caption", null, true);
            if (arguments.length < 4) {
                throw new Error("new ReportButton() cannot be invoked directly, please use 'model.reports.createReportButton()'");
            }
            return _this;
        }
        Object.defineProperty(ReportButton.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportButton.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportButton.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportButton.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportButton.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportButton.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportButton.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportButton.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportButton.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportButton.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportButton.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportButton.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportButton.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportButton.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportButton.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportButton.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportButton.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportButton.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportButton.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'footerWidget' property
         * of the parent pages.DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        ReportButton.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportButton.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, ReportButton, "footerWidget", false);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'widget' property
         * of the parent pages.DataView element passed as argument.
         */
        ReportButton.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'widget' property
         * of the parent pages.DivContainer element passed as argument.
         */
        ReportButton.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'widget' property
         * of the parent pages.GroupBox element passed as argument.
         */
        ReportButton.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'leftWidget' property
         * of the parent pages.Header element passed as argument.
         */
        ReportButton.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportButton, "leftWidget", false);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'rightWidget' property
         * of the parent pages.Header element passed as argument.
         */
        ReportButton.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportButton, "rightWidget", false);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'widget' property
         * of the parent pages.Layout element passed as argument.
         */
        ReportButton.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'widget' property
         * of the parent pages.LayoutCallArgument element passed as argument.
         */
        ReportButton.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'widget' property
         * of the parent pages.LayoutGridColumn element passed as argument.
         */
        ReportButton.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'widget' property
         * of the parent pages.ListView element passed as argument.
         */
        ReportButton.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'widget' property
         * of the parent pages.ListViewTemplate element passed as argument.
         */
        ReportButton.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'widget' property
         * of the parent pages.NavigationListItem element passed as argument.
         */
        ReportButton.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'widget' property
         * of the parent pages.ScrollContainerRegion element passed as argument.
         */
        ReportButton.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'widget' property
         * of the parent pages.Snippet element passed as argument.
         */
        ReportButton.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'firstWidget' property
         * of the parent pages.SplitPane element passed as argument.
         */
        ReportButton.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportButton, "firstWidget", false);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'secondWidget' property
         * of the parent pages.SplitPane element passed as argument.
         */
        ReportButton.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportButton, "secondWidget", false);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'widget' property
         * of the parent pages.TabPage element passed as argument.
         */
        ReportButton.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'widget' property
         * of the parent pages.TableCell element passed as argument.
         */
        ReportButton.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'widget' property
         * of the parent pages.TemplateGridContents element passed as argument.
         */
        ReportButton.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportButton, "widget", false);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'widgets' property
         * of the parent pages.VerticalFlow element passed as argument.
         */
        ReportButton.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, ReportButton, "widgets", true);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'parameterWidget' property
         * of the parent ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportButton.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportButton, "parameterWidget", false);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * The new ReportButton will be automatically stored in the 'reportWidget' property
         * of the parent ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportButton.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportButton.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportButton, "reportWidget", false);
        };
        /**
         * Creates and returns a new ReportButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReportButton.create = function (model) {
            return internal.instancehelpers.createElement(model, ReportButton);
        };
        ReportButton.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Generate report";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
        };
        return ReportButton;
    }(pages_1.pages.Widget));
    ReportButton.typeName = "Reports$ReportButton";
    ReportButton.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "caption": {
                "required": {
                    "currentValue": true
                }
            }
        },
        "public": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    reports.ReportButton = ReportButton;
    /**
     * See: {@link https://docs.mendix.com/refguide7/report-chart relevant section in reference guide}
     */
    var ReportChart = (function (_super) {
        __extends(ReportChart, _super);
        function ReportChart(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__type = new internal.EnumProperty(ReportChart, _this, "type", ChartType.VerticalBars, ChartType);
            _this.__seriess = new internal.PartListProperty(ReportChart, _this, "seriess", []);
            _this.__xAxisCaption = new internal.PartProperty(ReportChart, _this, "xAxisCaption", null, true);
            _this.__yAxisCaption = new internal.PartProperty(ReportChart, _this, "yAxisCaption", null, true);
            _this.__xAxisColumn = new internal.PrimitiveProperty(ReportChart, _this, "xAxisColumn", "", internal.PrimitiveTypeEnum.String);
            _this.__xAxisFormat = new internal.EnumProperty(ReportChart, _this, "xAxisFormat", ColumnFormat.Default, ColumnFormat);
            _this.__yAxisPrecision = new internal.PrimitiveProperty(ReportChart, _this, "yAxisPrecision", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__yAxisUseMinMax = new internal.PrimitiveProperty(ReportChart, _this, "yAxisUseMinMax", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__yAxisMinimum = new internal.PrimitiveProperty(ReportChart, _this, "yAxisMinimum", 0, internal.PrimitiveTypeEnum.Double);
            _this.__yAxisMaximum = new internal.PrimitiveProperty(ReportChart, _this, "yAxisMaximum", 0, internal.PrimitiveTypeEnum.Double);
            _this.__aspectRatio = new internal.EnumProperty(ReportChart, _this, "aspectRatio", AspectRatio.FourToThree, AspectRatio);
            if (arguments.length < 4) {
                throw new Error("new ReportChart() cannot be invoked directly, please use 'model.reports.createReportChart()'");
            }
            return _this;
        }
        Object.defineProperty(ReportChart.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "seriess", {
            get: function () { return this.__seriess.get(); },
            set: function (newValue) { this.__seriess.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "xAxisCaption", {
            get: function () { return this.__xAxisCaption.get(); },
            set: function (newValue) { this.__xAxisCaption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "yAxisCaption", {
            get: function () { return this.__yAxisCaption.get(); },
            set: function (newValue) { this.__yAxisCaption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "xAxisColumn", {
            get: function () { return this.__xAxisColumn.get(); },
            set: function (newValue) { this.__xAxisColumn.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "xAxisFormat", {
            get: function () { return this.__xAxisFormat.get(); },
            set: function (newValue) { this.__xAxisFormat.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "yAxisPrecision", {
            get: function () { return this.__yAxisPrecision.get(); },
            set: function (newValue) { this.__yAxisPrecision.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "yAxisUseMinMax", {
            get: function () { return this.__yAxisUseMinMax.get(); },
            set: function (newValue) { this.__yAxisUseMinMax.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "yAxisMinimum", {
            get: function () { return this.__yAxisMinimum.get(); },
            set: function (newValue) { this.__yAxisMinimum.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "yAxisMaximum", {
            get: function () { return this.__yAxisMaximum.get(); },
            set: function (newValue) { this.__yAxisMaximum.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChart.prototype, "aspectRatio", {
            get: function () { return this.__aspectRatio.get(); },
            set: function (newValue) { this.__aspectRatio.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'footerWidget' property
         * of the parent pages.DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        ReportChart.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportChart.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, ReportChart, "footerWidget", false);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'widget' property
         * of the parent pages.DataView element passed as argument.
         */
        ReportChart.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'widget' property
         * of the parent pages.DivContainer element passed as argument.
         */
        ReportChart.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'widget' property
         * of the parent pages.GroupBox element passed as argument.
         */
        ReportChart.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'leftWidget' property
         * of the parent pages.Header element passed as argument.
         */
        ReportChart.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportChart, "leftWidget", false);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'rightWidget' property
         * of the parent pages.Header element passed as argument.
         */
        ReportChart.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportChart, "rightWidget", false);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'widget' property
         * of the parent pages.Layout element passed as argument.
         */
        ReportChart.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'widget' property
         * of the parent pages.LayoutCallArgument element passed as argument.
         */
        ReportChart.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'widget' property
         * of the parent pages.LayoutGridColumn element passed as argument.
         */
        ReportChart.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'widget' property
         * of the parent pages.ListView element passed as argument.
         */
        ReportChart.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'widget' property
         * of the parent pages.ListViewTemplate element passed as argument.
         */
        ReportChart.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'widget' property
         * of the parent pages.NavigationListItem element passed as argument.
         */
        ReportChart.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'widget' property
         * of the parent pages.ScrollContainerRegion element passed as argument.
         */
        ReportChart.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'widget' property
         * of the parent pages.Snippet element passed as argument.
         */
        ReportChart.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'firstWidget' property
         * of the parent pages.SplitPane element passed as argument.
         */
        ReportChart.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportChart, "firstWidget", false);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'secondWidget' property
         * of the parent pages.SplitPane element passed as argument.
         */
        ReportChart.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportChart, "secondWidget", false);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'widget' property
         * of the parent pages.TabPage element passed as argument.
         */
        ReportChart.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'widget' property
         * of the parent pages.TableCell element passed as argument.
         */
        ReportChart.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'widget' property
         * of the parent pages.TemplateGridContents element passed as argument.
         */
        ReportChart.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportChart, "widget", false);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'widgets' property
         * of the parent pages.VerticalFlow element passed as argument.
         */
        ReportChart.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, ReportChart, "widgets", true);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'parameterWidget' property
         * of the parent ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportChart.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportChart.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportChart, "parameterWidget", false);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * The new ReportChart will be automatically stored in the 'reportWidget' property
         * of the parent ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportChart.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportChart.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportChart, "reportWidget", false);
        };
        /**
         * Creates and returns a new ReportChart instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReportChart.create = function (model) {
            return internal.instancehelpers.createElement(model, ReportChart);
        };
        ReportChart.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.aspectRatio = AspectRatio.FourToThree;
            this.type = ChartType.VerticalBars;
            this.xAxisCaption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "X-axis caption";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.xAxisFormat = ColumnFormat.Default;
            this.yAxisCaption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "Y-axis caption";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.yAxisPrecision = 2;
        };
        return ReportChart;
    }(ReportWidget));
    ReportChart.typeName = "Reports$ReportChart";
    ReportChart.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "xAxisCaption": {
                "required": {
                    "currentValue": true
                }
            },
            "yAxisCaption": {
                "required": {
                    "currentValue": true
                }
            }
        },
        "public": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    reports.ReportChart = ReportChart;
    var ReportChartSeries = (function (_super) {
        __extends(ReportChartSeries, _super);
        function ReportChartSeries(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__caption = new internal.PartProperty(ReportChartSeries, _this, "caption", null, true);
            _this.__dataSetColumn = new internal.PrimitiveProperty(ReportChartSeries, _this, "dataSetColumn", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ReportChartSeries() cannot be invoked directly, please use 'model.reports.createReportChartSeries()'");
            }
            return _this;
        }
        Object.defineProperty(ReportChartSeries.prototype, "containerAsReportChart", {
            get: function () { return _super.prototype.getContainerAs.call(this, ReportChart); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChartSeries.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportChartSeries.prototype, "dataSetColumn", {
            get: function () { return this.__dataSetColumn.get(); },
            set: function (newValue) { this.__dataSetColumn.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ReportChartSeries instance in the SDK and on the server.
         * The new ReportChartSeries will be automatically stored in the 'seriess' property
         * of the parent ReportChart element passed as argument.
         */
        ReportChartSeries.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ReportChartSeries, "seriess", true);
        };
        /**
         * Creates and returns a new ReportChartSeries instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReportChartSeries.create = function (model) {
            return internal.instancehelpers.createElement(model, ReportChartSeries);
        };
        ReportChartSeries.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = texts_1.texts.Text.create(this.model);
        };
        return ReportChartSeries;
    }(internal.Element));
    ReportChartSeries.typeName = "Reports$ReportChartSeries";
    ReportChartSeries.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "caption": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    reports.ReportChartSeries = ReportChartSeries;
    /**
     * See: {@link https://docs.mendix.com/refguide7/date-range-field relevant section in reference guide}
     */
    var ReportDateRangeField = (function (_super) {
        __extends(ReportDateRangeField, _super);
        function ReportDateRangeField(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__caption = new internal.PartProperty(ReportDateRangeField, _this, "caption", null, true);
            _this.__type = new internal.EnumProperty(ReportDateRangeField, _this, "type", DateRangeFieldEnum.Year, DateRangeFieldEnum);
            if (arguments.length < 4) {
                throw new Error("new ReportDateRangeField() cannot be invoked directly, please use 'model.reports.createReportDateRangeField()'");
            }
            return _this;
        }
        Object.defineProperty(ReportDateRangeField.prototype, "containerAsReportDateRangeSelector", {
            get: function () { return _super.prototype.getContainerAs.call(this, ReportDateRangeSelector); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeField.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeField.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ReportDateRangeField instance in the SDK and on the server.
         * The new ReportDateRangeField will be automatically stored in the 'fields' property
         * of the parent ReportDateRangeSelector element passed as argument.
         */
        ReportDateRangeField.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ReportDateRangeField, "fields", true);
        };
        /**
         * Creates and returns a new ReportDateRangeField instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReportDateRangeField.create = function (model) {
            return internal.instancehelpers.createElement(model, ReportDateRangeField);
        };
        ReportDateRangeField.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.caption = texts_1.texts.Text.create(this.model);
            this.type = DateRangeFieldEnum.Year;
        };
        return ReportDateRangeField;
    }(internal.Element));
    ReportDateRangeField.typeName = "Reports$ReportDateRangeField";
    ReportDateRangeField.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "caption": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    reports.ReportDateRangeField = ReportDateRangeField;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ReportParameter = (function (_super) {
        __extends(ReportParameter, _super);
        function ReportParameter(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__parameter = new internal.ByNameReferenceProperty(ReportParameter, _this, "parameter", null, "DataSets$DataSetParameter");
            _this.__parameterName = new internal.PrimitiveProperty(ReportParameter, _this, "parameterName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ReportParameter() cannot be invoked directly, please use 'model.reports.createReportParameter()'");
            }
            return _this;
        }
        Object.defineProperty(ReportParameter.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportParameter.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportParameter.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportParameter.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportParameter.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportParameter.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportParameter.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportParameter.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportParameter.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportParameter.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportParameter.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportParameter.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportParameter.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportParameter.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportParameter.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportParameter.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportParameter.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportParameter.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportParameter.prototype, "parameter", {
            /**
             * In version 6.10.0: introduced
             */
            get: function () { return this.__parameter.get(); },
            set: function (newValue) { this.__parameter.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportParameter.prototype, "parameterQualifiedName", {
            get: function () { return this.__parameter.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportParameter.prototype, "parameterName", {
            /**
             * In version 6.10.0: deleted
             */
            get: function () { return this.__parameterName.get(); },
            set: function (newValue) { this.__parameterName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ReportParameter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ReportParameter;
    }(pages_1.pages.Widget));
    ReportParameter.typeName = "Reports$ReportParameter";
    ReportParameter.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "parameter": {
                "introduced": "6.10.0"
            },
            "parameterName": {
                "deleted": "6.10.0",
                "deletionMessage": null
            }
        },
        "public": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    reports.ReportParameter = ReportParameter;
    /**
     * See: {@link https://docs.mendix.com/refguide7/report-date-parameter relevant section in reference guide}
     */
    var ReportDateRangeSelector = (function (_super) {
        __extends(ReportDateRangeSelector, _super);
        function ReportDateRangeSelector(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__fields = new internal.PartListProperty(ReportDateRangeSelector, _this, "fields", []);
            _this.__minYear = new internal.PrimitiveProperty(ReportDateRangeSelector, _this, "minYear", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__maxYear = new internal.PrimitiveProperty(ReportDateRangeSelector, _this, "maxYear", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__fieldsPerRow = new internal.PrimitiveProperty(ReportDateRangeSelector, _this, "fieldsPerRow", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__showFromToRange = new internal.PrimitiveProperty(ReportDateRangeSelector, _this, "showFromToRange", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__fromCaption = new internal.PartProperty(ReportDateRangeSelector, _this, "fromCaption", null, true);
            _this.__toCaption = new internal.PartProperty(ReportDateRangeSelector, _this, "toCaption", null, true);
            if (arguments.length < 4) {
                throw new Error("new ReportDateRangeSelector() cannot be invoked directly, please use 'model.reports.createReportDateRangeSelector()'");
            }
            return _this;
        }
        Object.defineProperty(ReportDateRangeSelector.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "fields", {
            get: function () { return this.__fields.get(); },
            set: function (newValue) { this.__fields.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "minYear", {
            get: function () { return this.__minYear.get(); },
            set: function (newValue) { this.__minYear.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "maxYear", {
            get: function () { return this.__maxYear.get(); },
            set: function (newValue) { this.__maxYear.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "fieldsPerRow", {
            get: function () { return this.__fieldsPerRow.get(); },
            set: function (newValue) { this.__fieldsPerRow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "showFromToRange", {
            get: function () { return this.__showFromToRange.get(); },
            set: function (newValue) { this.__showFromToRange.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "fromCaption", {
            get: function () { return this.__fromCaption.get(); },
            set: function (newValue) { this.__fromCaption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDateRangeSelector.prototype, "toCaption", {
            get: function () { return this.__toCaption.get(); },
            set: function (newValue) { this.__toCaption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'footerWidget' property
         * of the parent pages.DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        ReportDateRangeSelector.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportDateRangeSelector.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "footerWidget", false);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
         * of the parent pages.DataView element passed as argument.
         */
        ReportDateRangeSelector.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
         * of the parent pages.DivContainer element passed as argument.
         */
        ReportDateRangeSelector.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
         * of the parent pages.GroupBox element passed as argument.
         */
        ReportDateRangeSelector.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'leftWidget' property
         * of the parent pages.Header element passed as argument.
         */
        ReportDateRangeSelector.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "leftWidget", false);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'rightWidget' property
         * of the parent pages.Header element passed as argument.
         */
        ReportDateRangeSelector.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "rightWidget", false);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
         * of the parent pages.Layout element passed as argument.
         */
        ReportDateRangeSelector.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
         * of the parent pages.LayoutCallArgument element passed as argument.
         */
        ReportDateRangeSelector.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
         * of the parent pages.LayoutGridColumn element passed as argument.
         */
        ReportDateRangeSelector.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
         * of the parent pages.ListView element passed as argument.
         */
        ReportDateRangeSelector.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
         * of the parent pages.ListViewTemplate element passed as argument.
         */
        ReportDateRangeSelector.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
         * of the parent pages.NavigationListItem element passed as argument.
         */
        ReportDateRangeSelector.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
         * of the parent pages.ScrollContainerRegion element passed as argument.
         */
        ReportDateRangeSelector.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
         * of the parent pages.Snippet element passed as argument.
         */
        ReportDateRangeSelector.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'firstWidget' property
         * of the parent pages.SplitPane element passed as argument.
         */
        ReportDateRangeSelector.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "firstWidget", false);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'secondWidget' property
         * of the parent pages.SplitPane element passed as argument.
         */
        ReportDateRangeSelector.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "secondWidget", false);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
         * of the parent pages.TabPage element passed as argument.
         */
        ReportDateRangeSelector.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
         * of the parent pages.TableCell element passed as argument.
         */
        ReportDateRangeSelector.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'widget' property
         * of the parent pages.TemplateGridContents element passed as argument.
         */
        ReportDateRangeSelector.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widget", false);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'widgets' property
         * of the parent pages.VerticalFlow element passed as argument.
         */
        ReportDateRangeSelector.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "widgets", true);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'parameterWidget' property
         * of the parent ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportDateRangeSelector.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportDateRangeSelector.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "parameterWidget", false);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * The new ReportDateRangeSelector will be automatically stored in the 'reportWidget' property
         * of the parent ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportDateRangeSelector.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportDateRangeSelector.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportDateRangeSelector, "reportWidget", false);
        };
        /**
         * Creates and returns a new ReportDateRangeSelector instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReportDateRangeSelector.create = function (model) {
            return internal.instancehelpers.createElement(model, ReportDateRangeSelector);
        };
        ReportDateRangeSelector.prototype._initializeDefaultProperties = function () {
            var _this = this;
            _super.prototype._initializeDefaultProperties.call(this);
            this.fieldsPerRow = 3;
            this.fromCaption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "From";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
            this.maxYear = 2015;
            this.minYear = 2011;
            this.showFromToRange = true;
            this.toCaption = (function (text) {
                text.translations.replace([(function (translation) {
                        translation.languageCode = "en_US";
                        translation.text = "To";
                        return translation;
                    })(texts_1.texts.Translation.create(_this.model))]);
                return text;
            })(texts_1.texts.Text.create(this.model));
        };
        return ReportDateRangeSelector;
    }(ReportParameter));
    ReportDateRangeSelector.typeName = "Reports$ReportDateRangeSelector";
    ReportDateRangeSelector.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "fromCaption": {
                "required": {
                    "currentValue": true
                }
            },
            "toCaption": {
                "required": {
                    "currentValue": true
                }
            }
        },
        "public": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    reports.ReportDateRangeSelector = ReportDateRangeSelector;
    /**
     * See: {@link https://docs.mendix.com/refguide7/report-parameter relevant section in reference guide}
     */
    var ReportDropDown = (function (_super) {
        __extends(ReportDropDown, _super);
        function ReportDropDown(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__attribute = new internal.ByNameReferenceProperty(ReportDropDown, _this, "attribute", null, "DomainModels$Attribute");
            if (arguments.length < 4) {
                throw new Error("new ReportDropDown() cannot be invoked directly, please use 'model.reports.createReportDropDown()'");
            }
            return _this;
        }
        Object.defineProperty(ReportDropDown.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDropDown.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDropDown.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDropDown.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDropDown.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDropDown.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDropDown.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDropDown.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDropDown.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDropDown.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDropDown.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDropDown.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDropDown.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDropDown.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDropDown.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDropDown.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDropDown.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDropDown.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDropDown.prototype, "attribute", {
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportDropDown.prototype, "attributeQualifiedName", {
            get: function () { return this.__attribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'footerWidget' property
         * of the parent pages.DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        ReportDropDown.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportDropDown.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, ReportDropDown, "footerWidget", false);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'widget' property
         * of the parent pages.DataView element passed as argument.
         */
        ReportDropDown.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'widget' property
         * of the parent pages.DivContainer element passed as argument.
         */
        ReportDropDown.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'widget' property
         * of the parent pages.GroupBox element passed as argument.
         */
        ReportDropDown.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'leftWidget' property
         * of the parent pages.Header element passed as argument.
         */
        ReportDropDown.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDropDown, "leftWidget", false);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'rightWidget' property
         * of the parent pages.Header element passed as argument.
         */
        ReportDropDown.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDropDown, "rightWidget", false);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'widget' property
         * of the parent pages.Layout element passed as argument.
         */
        ReportDropDown.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'widget' property
         * of the parent pages.LayoutCallArgument element passed as argument.
         */
        ReportDropDown.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'widget' property
         * of the parent pages.LayoutGridColumn element passed as argument.
         */
        ReportDropDown.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'widget' property
         * of the parent pages.ListView element passed as argument.
         */
        ReportDropDown.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'widget' property
         * of the parent pages.ListViewTemplate element passed as argument.
         */
        ReportDropDown.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'widget' property
         * of the parent pages.NavigationListItem element passed as argument.
         */
        ReportDropDown.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'widget' property
         * of the parent pages.ScrollContainerRegion element passed as argument.
         */
        ReportDropDown.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'widget' property
         * of the parent pages.Snippet element passed as argument.
         */
        ReportDropDown.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'firstWidget' property
         * of the parent pages.SplitPane element passed as argument.
         */
        ReportDropDown.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDropDown, "firstWidget", false);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'secondWidget' property
         * of the parent pages.SplitPane element passed as argument.
         */
        ReportDropDown.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDropDown, "secondWidget", false);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'widget' property
         * of the parent pages.TabPage element passed as argument.
         */
        ReportDropDown.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'widget' property
         * of the parent pages.TableCell element passed as argument.
         */
        ReportDropDown.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'widget' property
         * of the parent pages.TemplateGridContents element passed as argument.
         */
        ReportDropDown.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, ReportDropDown, "widget", false);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'widgets' property
         * of the parent pages.VerticalFlow element passed as argument.
         */
        ReportDropDown.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, ReportDropDown, "widgets", true);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'parameterWidget' property
         * of the parent ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportDropDown.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportDropDown.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportDropDown, "parameterWidget", false);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * The new ReportDropDown will be automatically stored in the 'reportWidget' property
         * of the parent ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportDropDown.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportDropDown.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportDropDown, "reportWidget", false);
        };
        /**
         * Creates and returns a new ReportDropDown instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReportDropDown.create = function (model) {
            return internal.instancehelpers.createElement(model, ReportDropDown);
        };
        ReportDropDown.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ReportDropDown;
    }(ReportParameter));
    ReportDropDown.typeName = "Reports$ReportDropDown";
    ReportDropDown.versionInfo = new exports.StructureVersionInfo({
        "public": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    reports.ReportDropDown = ReportDropDown;
    /**
     * See: {@link https://docs.mendix.com/refguide7/report-pane relevant section in reference guide}
     *
     * In version 6.10.0: deleted
     */
    var ReportPane = (function (_super) {
        __extends(ReportPane, _super);
        function ReportPane(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__parameterWidget = new internal.PartProperty(ReportPane, _this, "parameterWidget", null, false);
            _this.__reportWidget = new internal.PartProperty(ReportPane, _this, "reportWidget", null, false);
            _this.__generateOnLoad = new internal.PrimitiveProperty(ReportPane, _this, "generateOnLoad", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new ReportPane() cannot be invoked directly, please use 'model.reports.createReportPane()'");
            }
            return _this;
        }
        Object.defineProperty(ReportPane.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "parameterWidget", {
            get: function () { return this.__parameterWidget.get(); },
            set: function (newValue) { this.__parameterWidget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "reportWidget", {
            get: function () { return this.__reportWidget.get(); },
            set: function (newValue) { this.__reportWidget.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportPane.prototype, "generateOnLoad", {
            get: function () { return this.__generateOnLoad.get(); },
            set: function (newValue) { this.__generateOnLoad.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'footerWidget' property
         * of the parent pages.DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "footerWidget", false);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'widget' property
         * of the parent pages.DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInDataViewUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'widget' property
         * of the parent pages.DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInDivContainerUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'widget' property
         * of the parent pages.GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInGroupBoxUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'leftWidget' property
         * of the parent pages.Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInHeaderUnderLeftWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "leftWidget", false);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'rightWidget' property
         * of the parent pages.Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInHeaderUnderRightWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "rightWidget", false);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'widget' property
         * of the parent pages.Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInLayoutUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'widget' property
         * of the parent pages.LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInLayoutCallArgumentUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'widget' property
         * of the parent pages.LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInLayoutGridColumnUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'widget' property
         * of the parent pages.ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInListViewUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'widget' property
         * of the parent pages.ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInListViewTemplateUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'widget' property
         * of the parent pages.NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInNavigationListItemUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'widget' property
         * of the parent pages.ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInScrollContainerRegionUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'widget' property
         * of the parent pages.Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInSnippetUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'firstWidget' property
         * of the parent pages.SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInSplitPaneUnderFirstWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "firstWidget", false);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'secondWidget' property
         * of the parent pages.SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInSplitPaneUnderSecondWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "secondWidget", false);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'widget' property
         * of the parent pages.TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInTabPageUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'widget' property
         * of the parent pages.TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInTableCellUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'widget' property
         * of the parent pages.TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInTemplateGridContentsUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "widget", false);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'widgets' property
         * of the parent pages.VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInVerticalFlowUnderWidgets = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "widgets", true);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'parameterWidget' property
         * of the parent ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "parameterWidget", false);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * The new ReportPane will be automatically stored in the 'reportWidget' property
         * of the parent ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        ReportPane.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, ReportPane.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, ReportPane, "reportWidget", false);
        };
        /**
         * Creates and returns a new ReportPane instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReportPane.create = function (model) {
            return internal.instancehelpers.createElement(model, ReportPane);
        };
        ReportPane.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ReportPane;
    }(pages_1.pages.Widget));
    ReportPane.typeName = "Reports$ReportPane";
    ReportPane.versionInfo = new exports.StructureVersionInfo({
        "deleted": "6.10.0",
        "deletionMessage": null
    }, internal.StructureType.Element);
    reports.ReportPane = ReportPane;
    var ReportZoomInfo = (function (_super) {
        __extends(ReportZoomInfo, _super);
        function ReportZoomInfo(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__targetPage = new internal.ByNameReferenceProperty(ReportZoomInfo, _this, "targetPage", null, "Pages$Page");
            _this.__mappings = new internal.PartListProperty(ReportZoomInfo, _this, "mappings", []);
            if (arguments.length < 4) {
                throw new Error("new ReportZoomInfo() cannot be invoked directly, please use 'model.reports.createReportZoomInfo()'");
            }
            return _this;
        }
        Object.defineProperty(ReportZoomInfo.prototype, "containerAsBasicReport", {
            get: function () { return _super.prototype.getContainerAs.call(this, BasicReport); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportZoomInfo.prototype, "targetPage", {
            get: function () { return this.__targetPage.get(); },
            set: function (newValue) { this.__targetPage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportZoomInfo.prototype, "targetPageQualifiedName", {
            get: function () { return this.__targetPage.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportZoomInfo.prototype, "mappings", {
            get: function () { return this.__mappings.get(); },
            set: function (newValue) { this.__mappings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ReportZoomInfo instance in the SDK and on the server.
         * The new ReportZoomInfo will be automatically stored in the 'zoomInfo' property
         * of the parent BasicReport element passed as argument.
         */
        ReportZoomInfo.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ReportZoomInfo, "zoomInfo", false);
        };
        /**
         * Creates and returns a new ReportZoomInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReportZoomInfo.create = function (model) {
            return internal.instancehelpers.createElement(model, ReportZoomInfo);
        };
        ReportZoomInfo.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ReportZoomInfo;
    }(internal.Element));
    ReportZoomInfo.typeName = "Reports$ReportZoomInfo";
    ReportZoomInfo.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    reports.ReportZoomInfo = ReportZoomInfo;
    var ReportZoomMapping = (function (_super) {
        __extends(ReportZoomMapping, _super);
        function ReportZoomMapping(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__targetParameterName = new internal.PrimitiveProperty(ReportZoomMapping, _this, "targetParameterName", "", internal.PrimitiveTypeEnum.String);
            _this.__sourceReportColumnName = new internal.PrimitiveProperty(ReportZoomMapping, _this, "sourceReportColumnName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ReportZoomMapping() cannot be invoked directly, please use 'model.reports.createReportZoomMapping()'");
            }
            return _this;
        }
        Object.defineProperty(ReportZoomMapping.prototype, "containerAsReportZoomInfo", {
            get: function () { return _super.prototype.getContainerAs.call(this, ReportZoomInfo); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportZoomMapping.prototype, "targetParameterName", {
            get: function () { return this.__targetParameterName.get(); },
            set: function (newValue) { this.__targetParameterName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ReportZoomMapping.prototype, "sourceReportColumnName", {
            get: function () { return this.__sourceReportColumnName.get(); },
            set: function (newValue) { this.__sourceReportColumnName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ReportZoomMapping instance in the SDK and on the server.
         * The new ReportZoomMapping will be automatically stored in the 'mappings' property
         * of the parent ReportZoomInfo element passed as argument.
         */
        ReportZoomMapping.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ReportZoomMapping, "mappings", true);
        };
        /**
         * Creates and returns a new ReportZoomMapping instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ReportZoomMapping.create = function (model) {
            return internal.instancehelpers.createElement(model, ReportZoomMapping);
        };
        ReportZoomMapping.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ReportZoomMapping;
    }(internal.Element));
    ReportZoomMapping.typeName = "Reports$ReportZoomMapping";
    ReportZoomMapping.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    reports.ReportZoomMapping = ReportZoomMapping;
})(reports = exports.reports || (exports.reports = {}));
var texts_1 = require("./texts");
