import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;
import { projects } from "./projects";
export declare namespace javaactions {
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `JavaActions`.
     */
    /**
     * In version 6.7.0: introduced
     */
    interface IParameterType extends internal.IElement {
        model: IModel;
        containerAsJavaActionParameter: IJavaActionParameter;
        load(): ParameterType;
        load(callback: (element: ParameterType) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.

     *
     * In version 6.7.0: introduced
     */
    abstract class ParameterType extends internal.Element implements IParameterType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsJavaActionParameter: JavaActionParameter;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    /**
     * In version 6.7.0: introduced
     */
    interface IBasicParameterType extends IParameterType {
        model: IModel;
        containerAsJavaActionParameter: IJavaActionParameter;
        /**
         * This property is required and cannot be set to null.
         */
        type: IType;
        load(): BasicParameterType;
        load(callback: (element: BasicParameterType) => void, forceRefresh?: boolean): any;
    }
    /**
     * In version 6.7.0: introduced
     */
    class BasicParameterType extends ParameterType implements IBasicParameterType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsJavaActionParameter: JavaActionParameter;

        type: Type;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new BasicParameterType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): BasicParameterType;

    }
    /**
     * In version 6.6.0: introduced
     */
    interface IType extends internal.IElement {
        model: IModel;
        containerAsBasicParameterType: IBasicParameterType;
        containerAsJavaAction: IJavaAction;
        containerAsJavaActionParameter: IJavaActionParameter;
        containerAsListType: IListType;
        load(): Type;
        load(callback: (element: Type) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.

     *
     * In version 6.6.0: introduced
     */
    abstract class Type extends internal.Element implements IType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsBasicParameterType: BasicParameterType;
        readonly containerAsJavaAction: JavaAction;
        readonly containerAsJavaActionParameter: JavaActionParameter;
        readonly containerAsListType: ListType;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    /**
     * In version 6.6.0: introduced
     */
    interface IPrimitiveType extends IType {
        model: IModel;
        containerAsBasicParameterType: IBasicParameterType;
        containerAsJavaAction: IJavaAction;
        containerAsJavaActionParameter: IJavaActionParameter;
        load(): PrimitiveType;
        load(callback: (element: PrimitiveType) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.

     *
     * In version 6.6.0: introduced
     */
    abstract class PrimitiveType extends Type implements IPrimitiveType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsBasicParameterType: BasicParameterType;
        readonly containerAsJavaAction: JavaAction;
        readonly containerAsJavaActionParameter: JavaActionParameter;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    /**
     * In version 6.6.0: introduced
     */
    interface IBooleanType extends IPrimitiveType {
        model: IModel;
        containerAsBasicParameterType: IBasicParameterType;
        containerAsJavaAction: IJavaAction;
        containerAsJavaActionParameter: IJavaActionParameter;
        load(): BooleanType;
        load(callback: (element: BooleanType) => void, forceRefresh?: boolean): any;
    }
    /**
     * In version 6.6.0: introduced
     */
    class BooleanType extends PrimitiveType implements IBooleanType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsBasicParameterType: BasicParameterType;
        readonly containerAsJavaAction: JavaAction;
        readonly containerAsJavaActionParameter: JavaActionParameter;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * The new BooleanType will be automatically stored in the 'type' property
         * of the parent BasicParameterType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInBasicParameterTypeUnderType(container: BasicParameterType): BooleanType;
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * The new BooleanType will be automatically stored in the 'javaReturnType' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInJavaActionUnderJavaReturnType(container: JavaAction): BooleanType;
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * The new BooleanType will be automatically stored in the 'javaType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0
         */
        static createInJavaActionParameterUnderJavaType(container: JavaActionParameter): BooleanType;
        /**
         * Creates and returns a new BooleanType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): BooleanType;

    }
    /**
     * In version 6.6.0: introduced
     */
    interface IEntityType extends IType {
        model: IModel;
        containerAsBasicParameterType: IBasicParameterType;
        containerAsJavaAction: IJavaAction;
        containerAsJavaActionParameter: IJavaActionParameter;
        containerAsListType: IListType;
        load(): EntityType;
        load(callback: (element: EntityType) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.

     *
     * In version 6.6.0: introduced
     */
    abstract class EntityType extends Type implements IEntityType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsBasicParameterType: BasicParameterType;
        readonly containerAsJavaAction: JavaAction;
        readonly containerAsJavaActionParameter: JavaActionParameter;
        readonly containerAsListType: ListType;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    /**
     * In version 6.6.0: introduced
     */
    interface IConcreteEntityType extends IEntityType {
        model: IModel;
        containerAsBasicParameterType: IBasicParameterType;
        containerAsJavaAction: IJavaAction;
        containerAsJavaActionParameter: IJavaActionParameter;
        containerAsListType: IListType;
        /**
         * This property is required and cannot be set to null.
         */
        entity: domainmodels.IEntity;
        entityQualifiedName: string;
        load(): ConcreteEntityType;
        load(callback: (element: ConcreteEntityType) => void, forceRefresh?: boolean): any;
    }
    /**
     * In version 6.6.0: introduced
     */
    class ConcreteEntityType extends EntityType implements IConcreteEntityType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsBasicParameterType: BasicParameterType;
        readonly containerAsJavaAction: JavaAction;
        readonly containerAsJavaActionParameter: JavaActionParameter;
        readonly containerAsListType: ListType;

        entity: domainmodels.IEntity;
        readonly entityQualifiedName: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ConcreteEntityType instance in the SDK and on the server.
         * The new ConcreteEntityType will be automatically stored in the 'type' property
         * of the parent BasicParameterType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInBasicParameterTypeUnderType(container: BasicParameterType): ConcreteEntityType;
        /**
         * Creates and returns a new ConcreteEntityType instance in the SDK and on the server.
         * The new ConcreteEntityType will be automatically stored in the 'javaReturnType' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInJavaActionUnderJavaReturnType(container: JavaAction): ConcreteEntityType;
        /**
         * Creates and returns a new ConcreteEntityType instance in the SDK and on the server.
         * The new ConcreteEntityType will be automatically stored in the 'javaType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0
         */
        static createInJavaActionParameterUnderJavaType(container: JavaActionParameter): ConcreteEntityType;
        /**
         * Creates and returns a new ConcreteEntityType instance in the SDK and on the server.
         * The new ConcreteEntityType will be automatically stored in the 'parameter' property
         * of the parent ListType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInListTypeUnderParameter(container: ListType): ConcreteEntityType;
        /**
         * Creates and returns a new ConcreteEntityType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ConcreteEntityType;

    }
    /**
     * In version 6.6.0: introduced
     */
    interface IDateTimeType extends IPrimitiveType {
        model: IModel;
        containerAsBasicParameterType: IBasicParameterType;
        containerAsJavaAction: IJavaAction;
        containerAsJavaActionParameter: IJavaActionParameter;
        load(): DateTimeType;
        load(callback: (element: DateTimeType) => void, forceRefresh?: boolean): any;
    }
    /**
     * In version 6.6.0: introduced
     */
    class DateTimeType extends PrimitiveType implements IDateTimeType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsBasicParameterType: BasicParameterType;
        readonly containerAsJavaAction: JavaAction;
        readonly containerAsJavaActionParameter: JavaActionParameter;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * The new DateTimeType will be automatically stored in the 'type' property
         * of the parent BasicParameterType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInBasicParameterTypeUnderType(container: BasicParameterType): DateTimeType;
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * The new DateTimeType will be automatically stored in the 'javaReturnType' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInJavaActionUnderJavaReturnType(container: JavaAction): DateTimeType;
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * The new DateTimeType will be automatically stored in the 'javaType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0
         */
        static createInJavaActionParameterUnderJavaType(container: JavaActionParameter): DateTimeType;
        /**
         * Creates and returns a new DateTimeType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DateTimeType;

    }
    /**
     * In version 6.6.0: introduced
     */
    interface IDecimalType extends IPrimitiveType {
        model: IModel;
        containerAsBasicParameterType: IBasicParameterType;
        containerAsJavaAction: IJavaAction;
        containerAsJavaActionParameter: IJavaActionParameter;
        load(): DecimalType;
        load(callback: (element: DecimalType) => void, forceRefresh?: boolean): any;
    }
    /**
     * In version 6.6.0: introduced
     */
    class DecimalType extends PrimitiveType implements IDecimalType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsBasicParameterType: BasicParameterType;
        readonly containerAsJavaAction: JavaAction;
        readonly containerAsJavaActionParameter: JavaActionParameter;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * The new DecimalType will be automatically stored in the 'type' property
         * of the parent BasicParameterType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInBasicParameterTypeUnderType(container: BasicParameterType): DecimalType;
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * The new DecimalType will be automatically stored in the 'javaReturnType' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInJavaActionUnderJavaReturnType(container: JavaAction): DecimalType;
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * The new DecimalType will be automatically stored in the 'javaType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0
         */
        static createInJavaActionParameterUnderJavaType(container: JavaActionParameter): DecimalType;
        /**
         * Creates and returns a new DecimalType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DecimalType;

    }
    /**
     * In version 6.7.0: introduced
     */
    interface IEntityTypeParameterType extends IParameterType {
        model: IModel;
        containerAsJavaActionParameter: IJavaActionParameter;
        typeParameter: ITypeParameter;
        load(): EntityTypeParameterType;
        load(callback: (element: EntityTypeParameterType) => void, forceRefresh?: boolean): any;
    }
    /**
     * In version 6.7.0: introduced
     */
    class EntityTypeParameterType extends ParameterType implements IEntityTypeParameterType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsJavaActionParameter: JavaActionParameter;

        typeParameter: TypeParameter;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new EntityTypeParameterType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): EntityTypeParameterType;

    }
    /**
     * In version 6.6.0: introduced
     */
    interface IEnumerationType extends IType {
        model: IModel;
        containerAsBasicParameterType: IBasicParameterType;
        containerAsJavaAction: IJavaAction;
        containerAsJavaActionParameter: IJavaActionParameter;
        /**
         * This property is required and cannot be set to null.
         */
        enumeration: enumerations.IEnumeration;
        enumerationQualifiedName: string;
        load(): EnumerationType;
        load(callback: (element: EnumerationType) => void, forceRefresh?: boolean): any;
    }
    /**
     * In version 6.6.0: introduced
     */
    class EnumerationType extends Type implements IEnumerationType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsBasicParameterType: BasicParameterType;
        readonly containerAsJavaAction: JavaAction;
        readonly containerAsJavaActionParameter: JavaActionParameter;

        enumeration: enumerations.IEnumeration;
        readonly enumerationQualifiedName: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * The new EnumerationType will be automatically stored in the 'type' property
         * of the parent BasicParameterType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInBasicParameterTypeUnderType(container: BasicParameterType): EnumerationType;
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * The new EnumerationType will be automatically stored in the 'javaReturnType' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInJavaActionUnderJavaReturnType(container: JavaAction): EnumerationType;
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * The new EnumerationType will be automatically stored in the 'javaType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0
         */
        static createInJavaActionParameterUnderJavaType(container: JavaActionParameter): EnumerationType;
        /**
         * Creates and returns a new EnumerationType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): EnumerationType;

    }
    /**
     * In version 6.6.0: introduced
     */
    interface IFloatType extends IPrimitiveType {
        model: IModel;
        containerAsBasicParameterType: IBasicParameterType;
        containerAsJavaAction: IJavaAction;
        containerAsJavaActionParameter: IJavaActionParameter;
        load(): FloatType;
        load(callback: (element: FloatType) => void, forceRefresh?: boolean): any;
    }
    /**
     * In version 6.6.0: introduced
     */
    class FloatType extends PrimitiveType implements IFloatType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsBasicParameterType: BasicParameterType;
        readonly containerAsJavaAction: JavaAction;
        readonly containerAsJavaActionParameter: JavaActionParameter;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * The new FloatType will be automatically stored in the 'type' property
         * of the parent BasicParameterType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInBasicParameterTypeUnderType(container: BasicParameterType): FloatType;
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * The new FloatType will be automatically stored in the 'javaReturnType' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInJavaActionUnderJavaReturnType(container: JavaAction): FloatType;
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * The new FloatType will be automatically stored in the 'javaType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0
         */
        static createInJavaActionParameterUnderJavaType(container: JavaActionParameter): FloatType;
        /**
         * Creates and returns a new FloatType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): FloatType;

    }
    /**
     * In version 6.6.0: introduced
     */
    interface IIntegerType extends IPrimitiveType {
        model: IModel;
        containerAsBasicParameterType: IBasicParameterType;
        containerAsJavaAction: IJavaAction;
        containerAsJavaActionParameter: IJavaActionParameter;
        load(): IntegerType;
        load(callback: (element: IntegerType) => void, forceRefresh?: boolean): any;
    }
    /**
     * In version 6.6.0: introduced
     */
    class IntegerType extends PrimitiveType implements IIntegerType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsBasicParameterType: BasicParameterType;
        readonly containerAsJavaAction: JavaAction;
        readonly containerAsJavaActionParameter: JavaActionParameter;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * The new IntegerType will be automatically stored in the 'type' property
         * of the parent BasicParameterType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInBasicParameterTypeUnderType(container: BasicParameterType): IntegerType;
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * The new IntegerType will be automatically stored in the 'javaReturnType' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInJavaActionUnderJavaReturnType(container: JavaAction): IntegerType;
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * The new IntegerType will be automatically stored in the 'javaType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0
         */
        static createInJavaActionParameterUnderJavaType(container: JavaActionParameter): IntegerType;
        /**
         * Creates and returns a new IntegerType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): IntegerType;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/java-actions relevant section in reference guide}
     */
    interface IJavaAction extends projects.IDocument {
        model: IModel;
        containerAsFolderBase: projects.IFolderBase;
        /**
         * In version 6.6.0: introduced
         */
        typeParameters: internal.IList<ITypeParameter>;
        parameters: internal.IList<IJavaActionParameter>;
        /**
         * The value of this property is conceptually of type dataTypes.DataType.
         *
         * In version 6.6.0: deleted
         */
        returnType: string;
        /**
         * This property is required and cannot be set to null.
         *
         * In version 6.6.0: introduced
         */
        javaReturnType: IType;
        /**
         * In version 6.6.0: introduced
         */
        microflowActionInfo: IMicroflowActionInfo;
        load(): JavaAction;
        load(callback: (element: JavaAction) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/java-actions relevant section in reference guide}
     */
    class JavaAction extends projects.Document implements IJavaAction {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsFolderBase: projects.FolderBase;

        /**
         * In version 6.6.0: introduced
         */
        typeParameters: internal.IList<TypeParameter>;

        parameters: internal.IList<JavaActionParameter>;

        /**
         * The value of this property is conceptually of type dataTypes.DataType.
         *
         * In version 6.6.0: deleted
         */
        returnType: string;

        /**
         * In version 6.6.0: introduced
         */
        javaReturnType: Type;

        /**
         * In version 6.6.0: introduced
         */
        microflowActionInfo: MicroflowActionInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new JavaAction unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): JavaAction;


    }
    interface IJavaActionParameter extends internal.IElement {
        model: IModel;
        containerAsJavaAction: IJavaAction;
        name: string;
        /**
         * The value of this property is conceptually of type dataTypes.DataType.
         *
         * In version 6.6.0: deleted
         */
        type: string;
        /**
         * This property is required and cannot be set to null.
         *
         * In version 6.7.0: deleted
         * In version 6.6.0: introduced
         */
        javaType: IType;
        /**
         * This property is required and cannot be set to null.
         *
         * In version 6.7.0: introduced
         */
        parameterType: IParameterType;
        /**
         * In version 6.10.0: introduced
         */
        description: string;
        load(): JavaActionParameter;
        load(callback: (element: JavaActionParameter) => void, forceRefresh?: boolean): any;
    }
    class JavaActionParameter extends internal.Element implements IJavaActionParameter {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsJavaAction: JavaAction;

        name: string;

        /**
         * The value of this property is conceptually of type dataTypes.DataType.
         *
         * In version 6.6.0: deleted
         */
        type: string;

        /**
         * In version 6.7.0: deleted
         * In version 6.6.0: introduced
         */
        javaType: Type;

        /**
         * In version 6.7.0: introduced
         */
        parameterType: ParameterType;

        /**
         * In version 6.10.0: introduced
         */
        description: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new JavaActionParameter instance in the SDK and on the server.
         * The new JavaActionParameter will be automatically stored in the 'parameters' property
         * of the parent JavaAction element passed as argument.
         */
        static createIn(container: JavaAction): JavaActionParameter;
        /**
         * Creates and returns a new JavaActionParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): JavaActionParameter;


    }
    /**
     * In version 6.6.0: introduced
     */
    interface IListType extends IType {
        model: IModel;
        containerAsBasicParameterType: IBasicParameterType;
        containerAsJavaAction: IJavaAction;
        containerAsJavaActionParameter: IJavaActionParameter;
        /**
         * This property is required and cannot be set to null.
         */
        parameter: IEntityType;
        load(): ListType;
        load(callback: (element: ListType) => void, forceRefresh?: boolean): any;
    }
    /**
     * In version 6.6.0: introduced
     */
    class ListType extends Type implements IListType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsBasicParameterType: BasicParameterType;
        readonly containerAsJavaAction: JavaAction;
        readonly containerAsJavaActionParameter: JavaActionParameter;

        parameter: EntityType;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * The new ListType will be automatically stored in the 'type' property
         * of the parent BasicParameterType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInBasicParameterTypeUnderType(container: BasicParameterType): ListType;
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * The new ListType will be automatically stored in the 'javaReturnType' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInJavaActionUnderJavaReturnType(container: JavaAction): ListType;
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * The new ListType will be automatically stored in the 'javaType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0
         */
        static createInJavaActionParameterUnderJavaType(container: JavaActionParameter): ListType;
        /**
         * Creates and returns a new ListType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ListType;

    }
    /**
     * In version 6.10.0: removed experimental
     * In version 6.6.0: introduced
     */
    interface IMicroflowActionInfo extends internal.IElement {
        model: IModel;
        containerAsJavaAction: IJavaAction;
        caption: string;
        category: string;
        icon: images.IImage;
        iconQualifiedName: string;
        load(): MicroflowActionInfo;
        load(callback: (element: MicroflowActionInfo) => void, forceRefresh?: boolean): any;
    }
    /**
     * In version 6.10.0: removed experimental
     * In version 6.6.0: introduced
     */
    class MicroflowActionInfo extends internal.Element implements IMicroflowActionInfo {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsJavaAction: JavaAction;

        caption: string;

        category: string;

        icon: images.IImage;
        readonly iconQualifiedName: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MicroflowActionInfo instance in the SDK and on the server.
         * The new MicroflowActionInfo will be automatically stored in the 'microflowActionInfo' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createIn(container: JavaAction): MicroflowActionInfo;
        /**
         * Creates and returns a new MicroflowActionInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MicroflowActionInfo;

    }
    /**
     * In version 6.9.0: introduced
     */
    interface IMicroflowParameterType extends IParameterType {
        model: IModel;
        containerAsJavaActionParameter: IJavaActionParameter;
        load(): MicroflowParameterType;
        load(callback: (element: MicroflowParameterType) => void, forceRefresh?: boolean): any;
    }
    /**
     * In version 6.9.0: introduced
     */
    class MicroflowParameterType extends ParameterType implements IMicroflowParameterType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsJavaActionParameter: JavaActionParameter;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MicroflowParameterType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MicroflowParameterType;

    }
    /**
     * In version 6.6.0: introduced
     */
    interface IParameterizedEntityType extends IEntityType {
        model: IModel;
        containerAsBasicParameterType: IBasicParameterType;
        containerAsJavaAction: IJavaAction;
        containerAsJavaActionParameter: IJavaActionParameter;
        containerAsListType: IListType;
        /**
         * This property is required and cannot be set to null.
         */
        typeParameter: ITypeParameter;
        load(): ParameterizedEntityType;
        load(callback: (element: ParameterizedEntityType) => void, forceRefresh?: boolean): any;
    }
    /**
     * In version 6.6.0: introduced
     */
    class ParameterizedEntityType extends EntityType implements IParameterizedEntityType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsBasicParameterType: BasicParameterType;
        readonly containerAsJavaAction: JavaAction;
        readonly containerAsJavaActionParameter: JavaActionParameter;
        readonly containerAsListType: ListType;

        typeParameter: TypeParameter;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ParameterizedEntityType instance in the SDK and on the server.
         * The new ParameterizedEntityType will be automatically stored in the 'type' property
         * of the parent BasicParameterType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInBasicParameterTypeUnderType(container: BasicParameterType): ParameterizedEntityType;
        /**
         * Creates and returns a new ParameterizedEntityType instance in the SDK and on the server.
         * The new ParameterizedEntityType will be automatically stored in the 'javaReturnType' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInJavaActionUnderJavaReturnType(container: JavaAction): ParameterizedEntityType;
        /**
         * Creates and returns a new ParameterizedEntityType instance in the SDK and on the server.
         * The new ParameterizedEntityType will be automatically stored in the 'javaType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0
         */
        static createInJavaActionParameterUnderJavaType(container: JavaActionParameter): ParameterizedEntityType;
        /**
         * Creates and returns a new ParameterizedEntityType instance in the SDK and on the server.
         * The new ParameterizedEntityType will be automatically stored in the 'parameter' property
         * of the parent ListType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInListTypeUnderParameter(container: ListType): ParameterizedEntityType;
        /**
         * Creates and returns a new ParameterizedEntityType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ParameterizedEntityType;

    }
    /**
     * In version 6.6.0: introduced
     */
    interface IStringType extends IPrimitiveType {
        model: IModel;
        containerAsBasicParameterType: IBasicParameterType;
        containerAsJavaAction: IJavaAction;
        containerAsJavaActionParameter: IJavaActionParameter;
        load(): StringType;
        load(callback: (element: StringType) => void, forceRefresh?: boolean): any;
    }
    /**
     * In version 6.6.0: introduced
     */
    class StringType extends PrimitiveType implements IStringType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsBasicParameterType: BasicParameterType;
        readonly containerAsJavaAction: JavaAction;
        readonly containerAsJavaActionParameter: JavaActionParameter;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * The new StringType will be automatically stored in the 'type' property
         * of the parent BasicParameterType element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInBasicParameterTypeUnderType(container: BasicParameterType): StringType;
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * The new StringType will be automatically stored in the 'javaReturnType' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInJavaActionUnderJavaReturnType(container: JavaAction): StringType;
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * The new StringType will be automatically stored in the 'javaType' property
         * of the parent JavaActionParameter element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0
         */
        static createInJavaActionParameterUnderJavaType(container: JavaActionParameter): StringType;
        /**
         * Creates and returns a new StringType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): StringType;

    }
    /**
     * In version 6.6.0: introduced
     */
    interface ITypeParameter extends internal.IElement {
        model: IModel;
        containerAsJavaAction: IJavaAction;
        name: string;
        load(): TypeParameter;
        load(callback: (element: TypeParameter) => void, forceRefresh?: boolean): any;
    }
    /**
     * In version 6.6.0: introduced
     */
    class TypeParameter extends internal.Element implements ITypeParameter {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsJavaAction: JavaAction;

        name: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TypeParameter instance in the SDK and on the server.
         * The new TypeParameter will be automatically stored in the 'typeParameters' property
         * of the parent JavaAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createIn(container: JavaAction): TypeParameter;
        /**
         * Creates and returns a new TypeParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TypeParameter;

    }
}
import { domainmodels } from "./domainmodels";
import { enumerations } from "./enumerations";
import { images } from "./images";
import { IModel } from "./base-model";
