import { ITyped } from '../sdk/checks/base-types';
export declare namespace expressionsTypes {
    interface MxAbstractFollow extends MxBuiltInCall {
        path: MxExpression;
    }
    interface MxBinaryExpression extends MxExpression {
        left: MxExpression;
        operator: MxOperator;
        right: MxExpression;
    }
    interface MxBooleanLiteralExpression extends MxPrimitiveLiteralExpression {
        value: boolean;
    }
    interface MxBuiltInCall extends MxFeatureCall {
        variable: MxBuiltInVariableDeclaration;
    }
    interface MxBuiltInVariableDeclaration extends MxNamed {
    }
    interface MxColorLiteralExpression extends MxPrimitiveLiteralExpression {
        blue: number;
        green: number;
        red: number;
    }
    interface MxDoubleLiteralExpression extends MxPrimitiveLiteralExpression {
        value: number;
    }
    interface MxExpression extends ITyped {
        appliedFeature: MxFeatureCallWrapper;
    }
    interface MxFeatureCall extends ITyped {
    }
    interface MxFeatureCallWrapper extends MxExpression {
        featureCall: MxFeatureCall;
    }
    interface MxFollowExcluding extends MxAbstractFollow {
    }
    interface MxFollowIncluding extends MxAbstractFollow {
    }
    interface MxIntegerLiteralExpression extends MxPrimitiveLiteralExpression {
        value: number;
    }
    interface MxIteratorCall extends MxFeatureCall {
        body: MxExpression;
        type: MxIteratorType;
        variable: MxIteratorVariableDeclaration;
    }
    interface MxIteratorVariableDeclaration extends MxNamed {
    }
    interface MxListLiteralExpression extends MxLiteralExpression {
        items: MxExpression[];
    }
    interface MxLiteralExpression extends MxExpression {
    }
    interface MxMethodCall extends MxFeatureCall {
        arguments: MxExpression[];
        referredMethod: string;
    }
    interface MxNamed extends ITyped {
        name: string;
    }
    interface MxPrefixExpression extends MxExpression {
        expression: MxExpression;
    }
    interface MxPreviousExpression extends MxExpression {
        variable: MxVariableRefExpression;
    }
    interface MxPrimitiveLiteralExpression extends MxSingleLiteralExpression {
    }
    interface MxPropertyAssignment extends ITyped {
        property: string;
        value: MxExpression;
    }
    interface MxPropertyCall extends MxFeatureCall {
        referredProperty: string;
    }
    interface MxQualifiedEnumLiteralExpression extends MxSingleLiteralExpression {
        enumeration: string;
        literal: string;
    }
    interface MxSingleLiteralExpression extends MxLiteralExpression {
    }
    interface MxSizeLiteralExpression extends MxPrimitiveLiteralExpression {
        height: number;
        width: number;
    }
    interface MxStringLiteralExpression extends MxPrimitiveLiteralExpression {
        value: string;
    }
    interface MxStructureLiteralExpression extends MxSingleLiteralExpression {
        assignments: MxPropertyAssignment[];
        structure: string;
    }
    interface MxSwitch extends MxBuiltInCall {
        cases: MxSwitchCase[];
    }
    interface MxSwitchCase extends ITyped {
        condition: MxExpression;
        expectedType: MxTypeStructureLiteralExpression;
        value: MxExpression;
    }
    interface MxThisExpression extends MxExpression {
    }
    interface MxTypeLiteralExpression extends MxSingleLiteralExpression {
    }
    interface MxTypeStructureLiteralExpression extends MxTypeLiteralExpression {
        referredStructure: string;
    }
    interface MxUndefinedExpression extends MxExpression {
    }
    interface MxVariableRefExpression extends MxExpression {
        referredVariable: string;
    }
    type MxCheckSeverity = "NONE" | "WARNING" | "ERROR" | "DEPRECATION" | "TODO";
    type MxIteratorType = "NONE" | "MAP" | "FILTER" | "EVERY" | "SOME" | "FIND_FIRST";
    type MxOperator = "NONE" | "EQUALS" | "UNEQUALS" | "GREATER" | "LESS" | "GREATER_OR_EQUALS" | "LESS_OR_EQUALS" | "AND" | "OR";
    type MxPrimitiveTypeEnum = "Integer" | "String" | "Boolean" | "Double" | "DateTime" | "Guid" | "Point" | "Size" | "Color" | "Blob";
}
