import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;
import { projects } from "./projects";
export declare namespace datasets {
    class DateTimeIntervalLength extends internal.IEnum {
        static Day: DateTimeIntervalLength;
        static Week: DateTimeIntervalLength;
        static Period: DateTimeIntervalLength;
        static Month: DateTimeIntervalLength;
        static Quarter: DateTimeIntervalLength;
        static Year: DateTimeIntervalLength;
        protected qualifiedTsTypeName: string;
    }
    class DateTimeIntervalModifier extends internal.IEnum {
        static Last: DateTimeIntervalModifier;
        static This: DateTimeIntervalModifier;
        static Next: DateTimeIntervalModifier;
        static Past: DateTimeIntervalModifier;
        static Future: DateTimeIntervalModifier;
        static Always: DateTimeIntervalModifier;
        protected qualifiedTsTypeName: string;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `DataSets`.
     */
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-sets relevant section in reference guide}
     */
    interface IDataSet extends projects.IDocument {
        model: IModel;
        containerAsFolderBase: projects.IFolderBase;
        parameters: internal.IList<IDataSetParameter>;
        load(): DataSet;
        load(callback: (element: DataSet) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-sets relevant section in reference guide}
     */
    class DataSet extends projects.Document implements IDataSet {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsFolderBase: projects.FolderBase;

        source: DataSetSource;

        parameters: internal.IList<DataSetParameter>;

        dataSetAccess: DataSetAccess;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new DataSet unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): DataSet;


    }
    interface IDataSetAccess extends internal.IElement {
        model: IModel;
        containerAsDataSet: IDataSet;
        load(): DataSetAccess;
        load(callback: (element: DataSetAccess) => void, forceRefresh?: boolean): any;
    }
    class DataSetAccess extends internal.Element implements IDataSetAccess {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataSet: DataSet;

        moduleRoleAccessList: internal.IList<DataSetModuleRoleAccess>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataSetAccess instance in the SDK and on the server.
         * The new DataSetAccess will be automatically stored in the 'dataSetAccess' property
         * of the parent DataSet element passed as argument.
         */
        static createIn(container: DataSet): DataSetAccess;
        /**
         * Creates and returns a new DataSetAccess instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataSetAccess;

    }
    interface IDataSetColumn extends internal.IElement {
        model: IModel;
        containerAsJavaDataSetSource: IJavaDataSetSource;
        load(): DataSetColumn;
        load(callback: (element: DataSetColumn) => void, forceRefresh?: boolean): any;
    }
    class DataSetColumn extends internal.Element implements IDataSetColumn {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsJavaDataSetSource: JavaDataSetSource;

        name: string;

        /**
         * The value of this property is conceptually of type dataTypes.DataType.
         */
        type: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataSetColumn instance in the SDK and on the server.
         * The new DataSetColumn will be automatically stored in the 'columns' property
         * of the parent JavaDataSetSource element passed as argument.
         */
        static createIn(container: JavaDataSetSource): DataSetColumn;
        /**
         * Creates and returns a new DataSetColumn instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataSetColumn;

    }
    interface IDataSetConstraintAccess extends internal.IElement {
        model: IModel;
        containerAsDataSetParameterAccess: IDataSetParameterAccess;
        load(): DataSetConstraintAccess;
        load(callback: (element: DataSetConstraintAccess) => void, forceRefresh?: boolean): any;
    }
    class DataSetConstraintAccess extends internal.Element implements IDataSetConstraintAccess {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataSetParameterAccess: DataSetParameterAccess;

        constraintText: string;

        enabled: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataSetConstraintAccess instance in the SDK and on the server.
         * The new DataSetConstraintAccess will be automatically stored in the 'constraintAccessList' property
         * of the parent DataSetParameterAccess element passed as argument.
         */
        static createIn(container: DataSetParameterAccess): DataSetConstraintAccess;
        /**
         * Creates and returns a new DataSetConstraintAccess instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataSetConstraintAccess;

    }
    interface IDataSetParameterConstraint extends internal.IElement {
        model: IModel;
        containerAsDataSetParameter: IDataSetParameter;
        load(): DataSetParameterConstraint;
        load(callback: (element: DataSetParameterConstraint) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class DataSetParameterConstraint extends internal.Element implements IDataSetParameterConstraint {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataSetParameter: DataSetParameter;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IDataSetDateTimeConstraint extends IDataSetParameterConstraint {
        model: IModel;
        containerAsDataSetParameter: IDataSetParameter;
        load(): DataSetDateTimeConstraint;
        load(callback: (element: DataSetDateTimeConstraint) => void, forceRefresh?: boolean): any;
    }
    class DataSetDateTimeConstraint extends DataSetParameterConstraint implements IDataSetDateTimeConstraint {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataSetParameter: DataSetParameter;

        modifier: DateTimeIntervalModifier;

        length: DateTimeIntervalLength;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataSetDateTimeConstraint instance in the SDK and on the server.
         * The new DataSetDateTimeConstraint will be automatically stored in the 'constraints' property
         * of the parent DataSetParameter element passed as argument.
         */
        static createIn(container: DataSetParameter): DataSetDateTimeConstraint;
        /**
         * Creates and returns a new DataSetDateTimeConstraint instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataSetDateTimeConstraint;

    }
    interface IDataSetModuleRoleAccess extends internal.IElement {
        model: IModel;
        containerAsDataSetAccess: IDataSetAccess;
        load(): DataSetModuleRoleAccess;
        load(callback: (element: DataSetModuleRoleAccess) => void, forceRefresh?: boolean): any;
    }
    class DataSetModuleRoleAccess extends internal.Element implements IDataSetModuleRoleAccess {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataSetAccess: DataSetAccess;

        parameterAccessList: internal.IList<DataSetParameterAccess>;

        moduleRole: security.IModuleRole;
        readonly moduleRoleQualifiedName: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataSetModuleRoleAccess instance in the SDK and on the server.
         * The new DataSetModuleRoleAccess will be automatically stored in the 'moduleRoleAccessList' property
         * of the parent DataSetAccess element passed as argument.
         */
        static createIn(container: DataSetAccess): DataSetModuleRoleAccess;
        /**
         * Creates and returns a new DataSetModuleRoleAccess instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataSetModuleRoleAccess;

    }
    interface IDataSetNumericConstraint extends IDataSetParameterConstraint {
        model: IModel;
        containerAsDataSetParameter: IDataSetParameter;
        load(): DataSetNumericConstraint;
        load(callback: (element: DataSetNumericConstraint) => void, forceRefresh?: boolean): any;
    }
    class DataSetNumericConstraint extends DataSetParameterConstraint implements IDataSetNumericConstraint {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataSetParameter: DataSetParameter;

        begin: string;

        applyBegin: boolean;

        end: string;

        applyEnd: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataSetNumericConstraint instance in the SDK and on the server.
         * The new DataSetNumericConstraint will be automatically stored in the 'constraints' property
         * of the parent DataSetParameter element passed as argument.
         */
        static createIn(container: DataSetParameter): DataSetNumericConstraint;
        /**
         * Creates and returns a new DataSetNumericConstraint instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataSetNumericConstraint;

    }
    interface IDataSetObjectConstraint extends IDataSetParameterConstraint {
        model: IModel;
        containerAsDataSetParameter: IDataSetParameter;
        load(): DataSetObjectConstraint;
        load(callback: (element: DataSetObjectConstraint) => void, forceRefresh?: boolean): any;
    }
    class DataSetObjectConstraint extends DataSetParameterConstraint implements IDataSetObjectConstraint {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataSetParameter: DataSetParameter;

        name: string;

        /**
         * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
         */
        constraint: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataSetObjectConstraint instance in the SDK and on the server.
         * The new DataSetObjectConstraint will be automatically stored in the 'constraints' property
         * of the parent DataSetParameter element passed as argument.
         */
        static createIn(container: DataSetParameter): DataSetObjectConstraint;
        /**
         * Creates and returns a new DataSetObjectConstraint instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataSetObjectConstraint;

    }
    interface IDataSetParameter extends internal.IElement {
        model: IModel;
        containerAsDataSet: IDataSet;
        name: string;
        load(): DataSetParameter;
        load(callback: (element: DataSetParameter) => void, forceRefresh?: boolean): any;
    }
    class DataSetParameter extends internal.Element implements IDataSetParameter {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataSet: DataSet;

        name: string;

        /**
         * The value of this property is conceptually of type dataTypes.DataType.
         */
        type: string;

        constraints: internal.IList<DataSetParameterConstraint>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataSetParameter instance in the SDK and on the server.
         * The new DataSetParameter will be automatically stored in the 'parameters' property
         * of the parent DataSet element passed as argument.
         */
        static createIn(container: DataSet): DataSetParameter;
        /**
         * Creates and returns a new DataSetParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataSetParameter;


    }
    interface IDataSetParameterAccess extends internal.IElement {
        model: IModel;
        containerAsDataSetModuleRoleAccess: IDataSetModuleRoleAccess;
        load(): DataSetParameterAccess;
        load(callback: (element: DataSetParameterAccess) => void, forceRefresh?: boolean): any;
    }
    class DataSetParameterAccess extends internal.Element implements IDataSetParameterAccess {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataSetModuleRoleAccess: DataSetModuleRoleAccess;

        parameterName: string;

        constraintAccessList: internal.IList<DataSetConstraintAccess>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataSetParameterAccess instance in the SDK and on the server.
         * The new DataSetParameterAccess will be automatically stored in the 'parameterAccessList' property
         * of the parent DataSetModuleRoleAccess element passed as argument.
         */
        static createIn(container: DataSetModuleRoleAccess): DataSetParameterAccess;
        /**
         * Creates and returns a new DataSetParameterAccess instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataSetParameterAccess;

    }
    interface IDataSetSource extends internal.IElement {
        model: IModel;
        containerAsDataSet: IDataSet;
        load(): DataSetSource;
        load(callback: (element: DataSetSource) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class DataSetSource extends internal.Element implements IDataSetSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataSet: DataSet;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IJavaDataSetSource extends IDataSetSource {
        model: IModel;
        containerAsDataSet: IDataSet;
        load(): JavaDataSetSource;
        load(callback: (element: JavaDataSetSource) => void, forceRefresh?: boolean): any;
    }
    class JavaDataSetSource extends DataSetSource implements IJavaDataSetSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataSet: DataSet;

        columns: internal.IList<DataSetColumn>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new JavaDataSetSource instance in the SDK and on the server.
         * The new JavaDataSetSource will be automatically stored in the 'source' property
         * of the parent DataSet element passed as argument.
         */
        static createIn(container: DataSet): JavaDataSetSource;
        /**
         * Creates and returns a new JavaDataSetSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): JavaDataSetSource;

    }
    interface IOqlDataSetSource extends IDataSetSource {
        model: IModel;
        containerAsDataSet: IDataSet;
        load(): OqlDataSetSource;
        load(callback: (element: OqlDataSetSource) => void, forceRefresh?: boolean): any;
    }
    class OqlDataSetSource extends DataSetSource implements IOqlDataSetSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataSet: DataSet;

        /**
         * The value of this property is conceptually of type oql.OqlQuery.
         */
        query: string;

        ignoreErrorsInQuery: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new OqlDataSetSource instance in the SDK and on the server.
         * The new OqlDataSetSource will be automatically stored in the 'source' property
         * of the parent DataSet element passed as argument.
         */
        static createIn(container: DataSet): OqlDataSetSource;
        /**
         * Creates and returns a new OqlDataSetSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): OqlDataSetSource;

    }
}
import { security } from "./security";
import { IModel } from "./base-model";
