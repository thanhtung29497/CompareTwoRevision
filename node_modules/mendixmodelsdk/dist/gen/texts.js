/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require("./projects");
var texts;
(function (texts) {
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `Texts`.
     */
    var SystemText = (function (_super) {
        __extends(SystemText, _super);
        function SystemText(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__text = new internal.PartProperty(SystemText, _this, "text", null, true);
            _this.__key = new internal.PrimitiveProperty(SystemText, _this, "key", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new SystemText() cannot be invoked directly, please use 'model.texts.createSystemText()'");
            }
            return _this;
        }
        Object.defineProperty(SystemText.prototype, "containerAsSystemTextCollection", {
            get: function () { return _super.prototype.getContainerAs.call(this, SystemTextCollection); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SystemText.prototype, "text", {
            get: function () { return this.__text.get(); },
            set: function (newValue) { this.__text.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SystemText.prototype, "key", {
            get: function () { return this.__key.get(); },
            set: function (newValue) { this.__key.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new SystemText instance in the SDK and on the server.
         * The new SystemText will be automatically stored in the 'systemTexts' property
         * of the parent SystemTextCollection element passed as argument.
         */
        SystemText.createIn = function (container) {
            return internal.instancehelpers.createElement(container, SystemText, "systemTexts", true);
        };
        /**
         * Creates and returns a new SystemText instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SystemText.create = function (model) {
            return internal.instancehelpers.createElement(model, SystemText);
        };
        SystemText.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.text = Text.create(this.model);
        };
        return SystemText;
    }(internal.Element));
    SystemText.typeName = "Texts$SystemText";
    SystemText.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "text": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    texts.SystemText = SystemText;
    /**
     * See: {@link https://docs.mendix.com/refguide7/system-texts relevant section in reference guide}
     */
    var SystemTextCollection = (function (_super) {
        __extends(SystemTextCollection, _super);
        function SystemTextCollection(model, typeName, id, isPartial, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, container) || this;
            _this.__systemTexts = new internal.PartListProperty(SystemTextCollection, _this, "systemTexts", []);
            _this._containmentName = "projectDocuments";
            return _this;
        }
        Object.defineProperty(SystemTextCollection.prototype, "containerAsProject", {
            get: function () { return _super.prototype.getContainerAs.call(this, projects_1.projects.Project); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SystemTextCollection.prototype, "systemTexts", {
            get: function () { return this.__systemTexts.get(); },
            set: function (newValue) { this.__systemTexts.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new SystemTextCollection unit in the SDK and on the server.
         * Expects one argument, the projects.IProject in which this unit is contained.
         */
        SystemTextCollection.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, SystemTextCollection);
        };
        SystemTextCollection.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return SystemTextCollection;
    }(projects_1.projects.ProjectDocument));
    SystemTextCollection.typeName = "Texts$SystemTextCollection";
    SystemTextCollection.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
    texts.SystemTextCollection = SystemTextCollection;
    /**
     * See: {@link https://docs.mendix.com/refguide7/translatable-texts relevant section in reference guide}
     */
    var Text = (function (_super) {
        __extends(Text, _super);
        function Text(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__translations = new internal.PartListProperty(Text, _this, "translations", []);
            if (arguments.length < 4) {
                throw new Error("new Text() cannot be invoked directly, please use 'model.texts.createText()'");
            }
            return _this;
        }
        Object.defineProperty(Text.prototype, "containerAsWidgetValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, customwidgets_1.customwidgets.WidgetValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsDataGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.DataGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsStaticLabel", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.StaticLabel); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsTitle", {
            get: function () { return _super.prototype.getContainerAs.call(this, documenttemplates_1.documenttemplates.Title); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsAssociationDeleteBehavior", {
            get: function () { return _super.prototype.getContainerAs.call(this, domainmodels_1.domainmodels.AssociationDeleteBehavior); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsValidationRule", {
            get: function () { return _super.prototype.getContainerAs.call(this, domainmodels_1.domainmodels.ValidationRule); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsEnumerationValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, enumerations_1.enumerations.EnumerationValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsMenuItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, menus_1.menus.MenuItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsMicroflow", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.Microflow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsTextTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, microflows_1.microflows.TextTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsAttributeWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.AttributeWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsAttributeWidgetWithPlaceholder", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.AttributeWidgetWithPlaceholder); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Button); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsClientTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ClientTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsConfirmationInfo", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ConfirmationInfo); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsControlBarButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ControlBarButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsDropDownButtonItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DropDownButtonItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.GridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsInputWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.InputWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsLabel", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Label); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsMicroflowSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.MicroflowSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Page); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsPageSettings", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.PageSettings); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsReferenceSelector", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ReferenceSelector); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsSearchField", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.SearchField); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsTextArea", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TextArea); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsBasicReportAggregate", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.BasicReportAggregate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsBasicReportColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.BasicReportColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsReportButton", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportButton); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsReportChart", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportChart); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsReportChartSeries", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportChartSeries); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsReportDateRangeField", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportDateRangeField); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsReportDateRangeSelector", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportDateRangeSelector); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "containerAsSystemText", {
            get: function () { return _super.prototype.getContainerAs.call(this, SystemText); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "translations", {
            get: function () { return this.__translations.get(); },
            set: function (newValue) { this.__translations.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'translatableValue' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         */
        Text.createInWidgetValueUnderTranslatableValue = function (container) {
            return internal.instancehelpers.createElement(container, Text, "translatableValue", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent documenttemplates.DataGridColumn element passed as argument.
         */
        Text.createInDataGridColumnUnderCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "caption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent documenttemplates.StaticLabel element passed as argument.
         */
        Text.createInStaticLabelUnderCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "caption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent documenttemplates.Title element passed as argument.
         */
        Text.createInTitleUnderCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "caption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'childErrorMessage' property
         * of the parent domainmodels.AssociationDeleteBehavior element passed as argument.
         */
        Text.createInAssociationDeleteBehaviorUnderChildErrorMessage = function (container) {
            return internal.instancehelpers.createElement(container, Text, "childErrorMessage", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'parentErrorMessage' property
         * of the parent domainmodels.AssociationDeleteBehavior element passed as argument.
         */
        Text.createInAssociationDeleteBehaviorUnderParentErrorMessage = function (container) {
            return internal.instancehelpers.createElement(container, Text, "parentErrorMessage", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'errorMessage' property
         * of the parent domainmodels.ValidationRule element passed as argument.
         */
        Text.createInValidationRuleUnderErrorMessage = function (container) {
            return internal.instancehelpers.createElement(container, Text, "errorMessage", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent enumerations.EnumerationValue element passed as argument.
         */
        Text.createInEnumerationValueUnderCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "caption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent menus.MenuItem element passed as argument.
         */
        Text.createInMenuItemUnderCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "caption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'concurrencyErrorMessage' property
         * of the parent microflows.Microflow element passed as argument.
         */
        Text.createInMicroflowUnderConcurrencyErrorMessage = function (container) {
            return internal.instancehelpers.createElement(container, Text, "concurrencyErrorMessage", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'text' property
         * of the parent microflows.TextTemplate element passed as argument.
         */
        Text.createInTextTemplateUnderText = function (container) {
            return internal.instancehelpers.createElement(container, Text, "text", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'requiredMessage' property
         * of the parent pages.AttributeWidget element passed as argument.
         */
        Text.createInAttributeWidgetUnderRequiredMessage = function (container) {
            return internal.instancehelpers.createElement(container, Text, "requiredMessage", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'placeholder' property
         * of the parent pages.AttributeWidgetWithPlaceholder element passed as argument.
         */
        Text.createInAttributeWidgetWithPlaceholderUnderPlaceholder = function (container) {
            return internal.instancehelpers.createElement(container, Text, "placeholder", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'tooltip' property
         * of the parent pages.Button element passed as argument.
         */
        Text.createInButtonUnderTooltip = function (container) {
            return internal.instancehelpers.createElement(container, Text, "tooltip", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'template' property
         * of the parent pages.ClientTemplate element passed as argument.
         */
        Text.createInClientTemplateUnderTemplate = function (container) {
            return internal.instancehelpers.createElement(container, Text, "template", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'cancelButtonCaption' property
         * of the parent pages.ConfirmationInfo element passed as argument.
         */
        Text.createInConfirmationInfoUnderCancelButtonCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "cancelButtonCaption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'proceedButtonCaption' property
         * of the parent pages.ConfirmationInfo element passed as argument.
         */
        Text.createInConfirmationInfoUnderProceedButtonCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "proceedButtonCaption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'question' property
         * of the parent pages.ConfirmationInfo element passed as argument.
         */
        Text.createInConfirmationInfoUnderQuestion = function (container) {
            return internal.instancehelpers.createElement(container, Text, "question", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'tooltip' property
         * of the parent pages.ControlBarButton element passed as argument.
         */
        Text.createInControlBarButtonUnderTooltip = function (container) {
            return internal.instancehelpers.createElement(container, Text, "tooltip", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'noEntityMessage' property
         * of the parent pages.DataView element passed as argument.
         */
        Text.createInDataViewUnderNoEntityMessage = function (container) {
            return internal.instancehelpers.createElement(container, Text, "noEntityMessage", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent pages.DropDownButtonItem element passed as argument.
         */
        Text.createInDropDownButtonItemUnderCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "caption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'aggregateCaption' property
         * of the parent pages.GridColumn element passed as argument.
         */
        Text.createInGridColumnUnderAggregateCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "aggregateCaption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent pages.GridColumn element passed as argument.
         */
        Text.createInGridColumnUnderCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "caption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'label' property
         * of the parent pages.InputWidget element passed as argument.
         */
        Text.createInInputWidgetUnderLabel = function (container) {
            return internal.instancehelpers.createElement(container, Text, "label", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent pages.Label element passed as argument.
         */
        Text.createInLabelUnderCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "caption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'progressMessage' property
         * of the parent pages.MicroflowSettings element passed as argument.
         */
        Text.createInMicroflowSettingsUnderProgressMessage = function (container) {
            return internal.instancehelpers.createElement(container, Text, "progressMessage", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'title' property
         * of the parent pages.Page element passed as argument.
         */
        Text.createInPageUnderTitle = function (container) {
            return internal.instancehelpers.createElement(container, Text, "title", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'formTitle' property
         * of the parent pages.PageSettings element passed as argument.
         */
        Text.createInPageSettingsUnderFormTitle = function (container) {
            return internal.instancehelpers.createElement(container, Text, "formTitle", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'requiredMessage' property
         * of the parent pages.ReferenceSelector element passed as argument.
         */
        Text.createInReferenceSelectorUnderRequiredMessage = function (container) {
            return internal.instancehelpers.createElement(container, Text, "requiredMessage", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent pages.SearchField element passed as argument.
         */
        Text.createInSearchFieldUnderCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "caption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent pages.TabPage element passed as argument.
         */
        Text.createInTabPageUnderCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "caption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'counterMessage' property
         * of the parent pages.TextArea element passed as argument.
         */
        Text.createInTextAreaUnderCounterMessage = function (container) {
            return internal.instancehelpers.createElement(container, Text, "counterMessage", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'textTooLongMessage' property
         * of the parent pages.TextArea element passed as argument.
         */
        Text.createInTextAreaUnderTextTooLongMessage = function (container) {
            return internal.instancehelpers.createElement(container, Text, "textTooLongMessage", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent reports.BasicReportAggregate element passed as argument.
         */
        Text.createInBasicReportAggregateUnderCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "caption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent reports.BasicReportColumn element passed as argument.
         */
        Text.createInBasicReportColumnUnderCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "caption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent reports.ReportButton element passed as argument.
         */
        Text.createInReportButtonUnderCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "caption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'xAxisCaption' property
         * of the parent reports.ReportChart element passed as argument.
         */
        Text.createInReportChartUnderXAxisCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "xAxisCaption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'yAxisCaption' property
         * of the parent reports.ReportChart element passed as argument.
         */
        Text.createInReportChartUnderYAxisCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "yAxisCaption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent reports.ReportChartSeries element passed as argument.
         */
        Text.createInReportChartSeriesUnderCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "caption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent reports.ReportDateRangeField element passed as argument.
         */
        Text.createInReportDateRangeFieldUnderCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "caption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'fromCaption' property
         * of the parent reports.ReportDateRangeSelector element passed as argument.
         */
        Text.createInReportDateRangeSelectorUnderFromCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "fromCaption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'toCaption' property
         * of the parent reports.ReportDateRangeSelector element passed as argument.
         */
        Text.createInReportDateRangeSelectorUnderToCaption = function (container) {
            return internal.instancehelpers.createElement(container, Text, "toCaption", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'text' property
         * of the parent SystemText element passed as argument.
         */
        Text.createInSystemTextUnderText = function (container) {
            return internal.instancehelpers.createElement(container, Text, "text", false);
        };
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Text.create = function (model) {
            return internal.instancehelpers.createElement(model, Text);
        };
        Text.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.translations.replace([(function (translation) {
                    translation.languageCode = "en_US";
                    translation.text = "";
                    return translation;
                })(Translation.create(this.model))]);
        };
        return Text;
    }(internal.Element));
    Text.typeName = "Texts$Text";
    Text.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    texts.Text = Text;
    var Translation = (function (_super) {
        __extends(Translation, _super);
        function Translation(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__languageCode = new internal.PrimitiveProperty(Translation, _this, "languageCode", "", internal.PrimitiveTypeEnum.String);
            _this.__text = new internal.PrimitiveProperty(Translation, _this, "text", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new Translation() cannot be invoked directly, please use 'model.texts.createTranslation()'");
            }
            return _this;
        }
        Object.defineProperty(Translation.prototype, "containerAsText", {
            get: function () { return _super.prototype.getContainerAs.call(this, Text); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Translation.prototype, "languageCode", {
            get: function () { return this.__languageCode.get(); },
            set: function (newValue) { this.__languageCode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Translation.prototype, "text", {
            get: function () { return this.__text.get(); },
            set: function (newValue) { this.__text.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Translation instance in the SDK and on the server.
         * The new Translation will be automatically stored in the 'translations' property
         * of the parent Text element passed as argument.
         */
        Translation.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Translation, "translations", true);
        };
        /**
         * Creates and returns a new Translation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Translation.create = function (model) {
            return internal.instancehelpers.createElement(model, Translation);
        };
        Translation.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return Translation;
    }(internal.Element));
    Translation.typeName = "Texts$Translation";
    Translation.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    texts.Translation = Translation;
})(texts = exports.texts || (exports.texts = {}));
var customwidgets_1 = require("./customwidgets");
var documenttemplates_1 = require("./documenttemplates");
var domainmodels_1 = require("./domainmodels");
var enumerations_1 = require("./enumerations");
var menus_1 = require("./menus");
var microflows_1 = require("./microflows");
var pages_1 = require("./pages");
var reports_1 = require("./reports");
