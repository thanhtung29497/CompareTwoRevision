import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;
import { projects } from "./projects";
import { webservices } from "./webservices";
export declare namespace rest {
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `Rest`.
     */
    /**
     * See: {@link https://docs.mendix.com/refguide7/published-odata-services relevant section in reference guide}
     */
    interface IPublishedRestServiceBase extends projects.IDocument {
        model: IModel;
        containerAsFolderBase: projects.IFolderBase;
        load(): PublishedRestServiceBase;
        load(callback: (element: PublishedRestServiceBase) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/published-odata-services relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class PublishedRestServiceBase extends projects.Document implements IPublishedRestServiceBase {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsFolderBase: projects.FolderBase;

        resources: internal.IList<PublishedRestResource>;

        namespace: string;

        path: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);

    }
    interface IPublishedODataService extends IPublishedRestServiceBase {
        model: IModel;
        containerAsFolderBase: projects.IFolderBase;
        load(): PublishedODataService;
        load(callback: (element: PublishedODataService) => void, forceRefresh?: boolean): any;
    }
    class PublishedODataService extends PublishedRestServiceBase implements IPublishedODataService {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsFolderBase: projects.FolderBase;

        allowedModuleRoles: internal.IList<security.IModuleRole>;
        readonly allowedModuleRolesQualifiedNames: string[];
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new PublishedODataService unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): PublishedODataService;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/published-odata-resource relevant section in reference guide}
     */
    interface IPublishedRestResource extends webservices.IPublishedResource {
        model: IModel;
        containerAsPublishedRestServiceBase: IPublishedRestServiceBase;
        load(): PublishedRestResource;
        load(callback: (element: PublishedRestResource) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/published-odata-resource relevant section in reference guide}
     */
    class PublishedRestResource extends webservices.PublishedResource implements IPublishedRestResource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsPublishedRestServiceBase: PublishedRestServiceBase;

        path: string;

        usePaging: boolean;

        pageSize: number;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new PublishedRestResource instance in the SDK and on the server.
         * The new PublishedRestResource will be automatically stored in the 'resources' property
         * of the parent PublishedRestServiceBase element passed as argument.
         */
        static createIn(container: PublishedRestServiceBase): PublishedRestResource;
        /**
         * Creates and returns a new PublishedRestResource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): PublishedRestResource;

    }
    interface IPublishedRestService extends IPublishedRestServiceBase {
        model: IModel;
        containerAsFolderBase: projects.IFolderBase;
        load(): PublishedRestService;
        load(callback: (element: PublishedRestService) => void, forceRefresh?: boolean): any;
    }
    class PublishedRestService extends PublishedRestServiceBase implements IPublishedRestService {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsFolderBase: projects.FolderBase;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new PublishedRestService unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): PublishedRestService;

    }
}
import { security } from "./security";
import { IModel } from "./base-model";
