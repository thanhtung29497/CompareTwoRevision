/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require("./projects");
var scheduledevents;
(function (scheduledevents) {
    var IntervalType = (function (_super) {
        __extends(IntervalType, _super);
        function IntervalType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "scheduledevents.IntervalType";
            return _this;
        }
        return IntervalType;
    }(internal.IEnum));
    IntervalType.Second = new IntervalType("Second", {});
    IntervalType.Minute = new IntervalType("Minute", {});
    IntervalType.Hour = new IntervalType("Hour", {});
    IntervalType.Day = new IntervalType("Day", {});
    IntervalType.Week = new IntervalType("Week", {});
    IntervalType.Month = new IntervalType("Month", {});
    IntervalType.Year = new IntervalType("Year", {});
    scheduledevents.IntervalType = IntervalType;
    var TimeZoneEnum = (function (_super) {
        __extends(TimeZoneEnum, _super);
        function TimeZoneEnum() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "scheduledevents.TimeZoneEnum";
            return _this;
        }
        return TimeZoneEnum;
    }(internal.IEnum));
    TimeZoneEnum.UTC = new TimeZoneEnum("UTC", {});
    TimeZoneEnum.Server = new TimeZoneEnum("Server", {});
    scheduledevents.TimeZoneEnum = TimeZoneEnum;
    /**
     * See: {@link https://docs.mendix.com/refguide7/scheduled-events relevant section in reference guide}
     */
    var ScheduledEvent = (function (_super) {
        __extends(ScheduledEvent, _super);
        function ScheduledEvent(model, typeName, id, isPartial, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, container) || this;
            _this.__startDateTime = new internal.PrimitiveProperty(ScheduledEvent, _this, "startDateTime", null, internal.PrimitiveTypeEnum.DateTime);
            _this.__timeZone = new internal.EnumProperty(ScheduledEvent, _this, "timeZone", TimeZoneEnum.UTC, TimeZoneEnum);
            _this.__interval = new internal.PrimitiveProperty(ScheduledEvent, _this, "interval", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__intervalType = new internal.EnumProperty(ScheduledEvent, _this, "intervalType", IntervalType.Minute, IntervalType);
            _this.__microflow = new internal.ByNameReferenceProperty(ScheduledEvent, _this, "microflow", null, "Microflows$Microflow");
            _this.__enabled = new internal.PrimitiveProperty(ScheduledEvent, _this, "enabled", false, internal.PrimitiveTypeEnum.Boolean);
            _this._containmentName = "documents";
            return _this;
        }
        Object.defineProperty(ScheduledEvent.prototype, "containerAsFolderBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, projects_1.projects.FolderBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScheduledEvent.prototype, "startDateTime", {
            get: function () { return this.__startDateTime.get(); },
            set: function (newValue) { this.__startDateTime.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScheduledEvent.prototype, "timeZone", {
            get: function () { return this.__timeZone.get(); },
            set: function (newValue) { this.__timeZone.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScheduledEvent.prototype, "interval", {
            get: function () { return this.__interval.get(); },
            set: function (newValue) { this.__interval.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScheduledEvent.prototype, "intervalType", {
            get: function () { return this.__intervalType.get(); },
            set: function (newValue) { this.__intervalType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScheduledEvent.prototype, "microflow", {
            get: function () { return this.__microflow.get(); },
            set: function (newValue) { this.__microflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScheduledEvent.prototype, "microflowQualifiedName", {
            get: function () { return this.__microflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScheduledEvent.prototype, "enabled", {
            get: function () { return this.__enabled.get(); },
            set: function (newValue) { this.__enabled.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new ScheduledEvent unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        ScheduledEvent.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, ScheduledEvent);
        };
        ScheduledEvent.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.intervalType = IntervalType.Minute;
            this.startDateTime = "" + Date.now();
            this.timeZone = TimeZoneEnum.UTC;
        };
        return ScheduledEvent;
    }(projects_1.projects.Document));
    ScheduledEvent.typeName = "ScheduledEvents$ScheduledEvent";
    ScheduledEvent.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
    scheduledevents.ScheduledEvent = ScheduledEvent;
})(scheduledevents = exports.scheduledevents || (exports.scheduledevents = {}));
