/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var pages_1 = require("./pages");
var pluginwidgets;
(function (pluginwidgets) {
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `PluginWidgets`.
     */
    /**
     * In version 7.0.1: introduced
     */
    var PluginWidget = (function (_super) {
        __extends(PluginWidget, _super);
        function PluginWidget(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__pluginWidgetName = new internal.PrimitiveProperty(PluginWidget, _this, "pluginWidgetName", "", internal.PrimitiveTypeEnum.String);
            _this.__pluginWidgetVersion = new internal.PrimitiveProperty(PluginWidget, _this, "pluginWidgetVersion", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new PluginWidget() cannot be invoked directly, please use 'model.pluginwidgets.createPluginWidget()'");
            }
            return _this;
        }
        Object.defineProperty(PluginWidget.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "pluginWidgetName", {
            get: function () { return this.__pluginWidgetName.get(); },
            set: function (newValue) { this.__pluginWidgetName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PluginWidget.prototype, "pluginWidgetVersion", {
            get: function () { return this.__pluginWidgetVersion.get(); },
            set: function (newValue) { this.__pluginWidgetVersion.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'footerWidget' property
         * of the parent pages.DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1
         */
        PluginWidget.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.typeName, ["7.0.1"]);
            return internal.instancehelpers.createElement(container, PluginWidget, "footerWidget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1
         */
        PluginWidget.createInDataViewUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.typeName, ["7.0.1"]);
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.DivContainer element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1
         */
        PluginWidget.createInDivContainerUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.typeName, ["7.0.1"]);
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.GroupBox element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1
         */
        PluginWidget.createInGroupBoxUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.typeName, ["7.0.1"]);
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'leftWidget' property
         * of the parent pages.Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1
         */
        PluginWidget.createInHeaderUnderLeftWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.typeName, ["7.0.1"]);
            return internal.instancehelpers.createElement(container, PluginWidget, "leftWidget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'rightWidget' property
         * of the parent pages.Header element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1
         */
        PluginWidget.createInHeaderUnderRightWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.typeName, ["7.0.1"]);
            return internal.instancehelpers.createElement(container, PluginWidget, "rightWidget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.Layout element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1
         */
        PluginWidget.createInLayoutUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.typeName, ["7.0.1"]);
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.LayoutCallArgument element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1
         */
        PluginWidget.createInLayoutCallArgumentUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.typeName, ["7.0.1"]);
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.LayoutGridColumn element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1
         */
        PluginWidget.createInLayoutGridColumnUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.typeName, ["7.0.1"]);
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.ListView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1
         */
        PluginWidget.createInListViewUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.typeName, ["7.0.1"]);
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.ListViewTemplate element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1
         */
        PluginWidget.createInListViewTemplateUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.typeName, ["7.0.1"]);
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.NavigationListItem element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1
         */
        PluginWidget.createInNavigationListItemUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.typeName, ["7.0.1"]);
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.ScrollContainerRegion element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1
         */
        PluginWidget.createInScrollContainerRegionUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.typeName, ["7.0.1"]);
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.Snippet element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1
         */
        PluginWidget.createInSnippetUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.typeName, ["7.0.1"]);
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'firstWidget' property
         * of the parent pages.SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1
         */
        PluginWidget.createInSplitPaneUnderFirstWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.typeName, ["7.0.1"]);
            return internal.instancehelpers.createElement(container, PluginWidget, "firstWidget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'secondWidget' property
         * of the parent pages.SplitPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1
         */
        PluginWidget.createInSplitPaneUnderSecondWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.typeName, ["7.0.1"]);
            return internal.instancehelpers.createElement(container, PluginWidget, "secondWidget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.TabPage element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1
         */
        PluginWidget.createInTabPageUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.typeName, ["7.0.1"]);
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.TableCell element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1
         */
        PluginWidget.createInTableCellUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.typeName, ["7.0.1"]);
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widget' property
         * of the parent pages.TemplateGridContents element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1
         */
        PluginWidget.createInTemplateGridContentsUnderWidget = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.typeName, ["7.0.1"]);
            return internal.instancehelpers.createElement(container, PluginWidget, "widget", false);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * The new PluginWidget will be automatically stored in the 'widgets' property
         * of the parent pages.VerticalFlow element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  7.0.1
         */
        PluginWidget.createInVerticalFlowUnderWidgets = function (container) {
            internal.createInVersionCheck(container.model, PluginWidget.typeName, ["7.0.1"]);
            return internal.instancehelpers.createElement(container, PluginWidget, "widgets", true);
        };
        /**
         * Creates and returns a new PluginWidget instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        PluginWidget.create = function (model) {
            return internal.instancehelpers.createElement(model, PluginWidget);
        };
        PluginWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return PluginWidget;
    }(pages_1.pages.Widget));
    PluginWidget.typeName = "PluginWidgets$PluginWidget";
    PluginWidget.versionInfo = new exports.StructureVersionInfo({
        "introduced": "7.0.1",
        "experimental": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    pluginwidgets.PluginWidget = PluginWidget;
})(pluginwidgets = exports.pluginwidgets || (exports.pluginwidgets = {}));
