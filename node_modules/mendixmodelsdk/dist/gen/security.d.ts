import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;
import { projects } from "./projects";
export declare namespace security {
    class SecurityLevel extends internal.IEnum {
        static CheckNothing: SecurityLevel;
        static CheckFormsAndMicroflows: SecurityLevel;
        static CheckEverything: SecurityLevel;
        protected qualifiedTsTypeName: string;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `Security`.
     */
    interface IAccessRuleContainerBase extends internal.IElement {
        model: IModel;
        containerAsProjectSecurity: IProjectSecurity;
        load(): AccessRuleContainerBase;
        load(callback: (element: AccessRuleContainerBase) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class AccessRuleContainerBase extends internal.Element implements IAccessRuleContainerBase {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsProjectSecurity: ProjectSecurity;

        accessRules: internal.IList<domainmodels.AccessRule>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/demo-users relevant section in reference guide}
     */
    interface IDemoUser extends internal.IElement {
        model: IModel;
        containerAsProjectSecurity: IProjectSecurity;
        load(): DemoUser;
        load(callback: (element: DemoUser) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/demo-users relevant section in reference guide}
     */
    class DemoUser extends internal.Element implements IDemoUser {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsProjectSecurity: ProjectSecurity;

        userName: string;

        password: string;

        entity: domainmodels.IEntity;
        readonly entityQualifiedName: string;

        userRoles: internal.IList<IUserRole>;
        readonly userRolesQualifiedNames: string[];
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DemoUser instance in the SDK and on the server.
         * The new DemoUser will be automatically stored in the 'demoUsers' property
         * of the parent ProjectSecurity element passed as argument.
         */
        static createIn(container: ProjectSecurity): DemoUser;
        /**
         * Creates and returns a new DemoUser instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DemoUser;

    }
    interface IFileDocumentAccessRuleContainer extends IAccessRuleContainerBase {
        model: IModel;
        containerAsProjectSecurity: IProjectSecurity;
        load(): FileDocumentAccessRuleContainer;
        load(callback: (element: FileDocumentAccessRuleContainer) => void, forceRefresh?: boolean): any;
    }
    class FileDocumentAccessRuleContainer extends AccessRuleContainerBase implements IFileDocumentAccessRuleContainer {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsProjectSecurity: ProjectSecurity;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new FileDocumentAccessRuleContainer instance in the SDK and on the server.
         * The new FileDocumentAccessRuleContainer will be automatically stored in the 'fileDocumentAccess' property
         * of the parent ProjectSecurity element passed as argument.
         */
        static createIn(container: ProjectSecurity): FileDocumentAccessRuleContainer;
        /**
         * Creates and returns a new FileDocumentAccessRuleContainer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): FileDocumentAccessRuleContainer;

    }
    interface IImageAccessRuleContainer extends IAccessRuleContainerBase {
        model: IModel;
        containerAsProjectSecurity: IProjectSecurity;
        load(): ImageAccessRuleContainer;
        load(callback: (element: ImageAccessRuleContainer) => void, forceRefresh?: boolean): any;
    }
    class ImageAccessRuleContainer extends AccessRuleContainerBase implements IImageAccessRuleContainer {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsProjectSecurity: ProjectSecurity;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ImageAccessRuleContainer instance in the SDK and on the server.
         * The new ImageAccessRuleContainer will be automatically stored in the 'imageAccess' property
         * of the parent ProjectSecurity element passed as argument.
         */
        static createIn(container: ProjectSecurity): ImageAccessRuleContainer;
        /**
         * Creates and returns a new ImageAccessRuleContainer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ImageAccessRuleContainer;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/module-role relevant section in reference guide}
     */
    interface IModuleRole extends internal.IElement {
        model: IModel;
        containerAsModuleSecurity: IModuleSecurity;
        name: string;
        load(): ModuleRole;
        load(callback: (element: ModuleRole) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/module-role relevant section in reference guide}
     */
    class ModuleRole extends internal.Element implements IModuleRole {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsModuleSecurity: ModuleSecurity;

        name: string;

        description: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ModuleRole instance in the SDK and on the server.
         * The new ModuleRole will be automatically stored in the 'moduleRoles' property
         * of the parent ModuleSecurity element passed as argument.
         */
        static createIn(container: ModuleSecurity): ModuleRole;
        /**
         * Creates and returns a new ModuleRole instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ModuleRole;


    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/module-security relevant section in reference guide}
     */
    interface IModuleSecurity extends internal.IModelUnit {
        model: IModel;
        containerAsModule: projects.IModule;
        moduleRoles: internal.IList<IModuleRole>;
        load(): ModuleSecurity;
        load(callback: (element: ModuleSecurity) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/module-security relevant section in reference guide}
     */
    class ModuleSecurity extends internal.ModelUnit implements IModuleSecurity {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsModule: projects.Module;

        moduleRoles: internal.IList<ModuleRole>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IModule);
        /**
         * Creates a new ModuleSecurity unit in the SDK and on the server.
         * Expects one argument, the projects.IModule in which this unit is contained.
         */
        static createIn(container: projects.IModule): ModuleSecurity;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/password-policy relevant section in reference guide}
     */
    interface IPasswordPolicySettings extends internal.IElement {
        model: IModel;
        containerAsProjectSecurity: IProjectSecurity;
        load(): PasswordPolicySettings;
        load(callback: (element: PasswordPolicySettings) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/password-policy relevant section in reference guide}
     */
    class PasswordPolicySettings extends internal.Element implements IPasswordPolicySettings {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsProjectSecurity: ProjectSecurity;

        minimumLength: number;

        requireMixedCase: boolean;

        requireSymbol: boolean;

        requireDigit: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new PasswordPolicySettings instance in the SDK and on the server.
         * The new PasswordPolicySettings will be automatically stored in the 'passwordPolicySettings' property
         * of the parent ProjectSecurity element passed as argument.
         */
        static createIn(container: ProjectSecurity): PasswordPolicySettings;
        /**
         * Creates and returns a new PasswordPolicySettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): PasswordPolicySettings;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/project-security relevant section in reference guide}
     */
    interface IProjectSecurity extends projects.IProjectDocument {
        model: IModel;
        containerAsProject: projects.IProject;
        userRoles: internal.IList<IUserRole>;
        load(): ProjectSecurity;
        load(callback: (element: ProjectSecurity) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/project-security relevant section in reference guide}
     */
    class ProjectSecurity extends projects.ProjectDocument implements IProjectSecurity {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsProject: projects.Project;

        securityLevel: SecurityLevel;

        checkSecurity: boolean;

        userRoles: internal.IList<UserRole>;

        adminUserName: string;

        adminPassword: string;

        adminUserRoleName: string;

        enableDemoUsers: boolean;

        demoUsers: internal.IList<DemoUser>;

        enableGuestAccess: boolean;

        guestUserRoleName: string;

        signInMicroflow: microflows.IMicroflow;
        readonly signInMicroflowQualifiedName: string;

        passwordPolicySettings: PasswordPolicySettings;

        /**
         * In version 6.0.0: deprecated
         */
        fileDocumentAccess: FileDocumentAccessRuleContainer;

        /**
         * In version 6.0.0: deprecated
         */
        imageAccess: ImageAccessRuleContainer;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IProject);
        /**
         * Creates a new ProjectSecurity unit in the SDK and on the server.
         * Expects one argument, the projects.IProject in which this unit is contained.
         */
        static createIn(container: projects.IProject): ProjectSecurity;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/user-role relevant section in reference guide}
     */
    interface IUserRole extends internal.IElement {
        model: IModel;
        containerAsProjectSecurity: IProjectSecurity;
        name: string;
        load(): UserRole;
        load(callback: (element: UserRole) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/user-role relevant section in reference guide}
     */
    class UserRole extends internal.Element implements IUserRole {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsProjectSecurity: ProjectSecurity;

        guid: string;

        name: string;

        description: string;

        moduleRoles: internal.IList<IModuleRole>;
        readonly moduleRolesQualifiedNames: string[];

        manageAllRoles: boolean;

        manageableRoles: internal.IList<IUserRole>;
        readonly manageableRolesQualifiedNames: string[];

        manageUsersWithoutRoles: boolean;

        checkSecurity: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new UserRole instance in the SDK and on the server.
         * The new UserRole will be automatically stored in the 'userRoles' property
         * of the parent ProjectSecurity element passed as argument.
         */
        static createIn(container: ProjectSecurity): UserRole;
        /**
         * Creates and returns a new UserRole instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): UserRole;


    }
}
import { domainmodels } from "./domainmodels";
import { microflows } from "./microflows";
import { IModel } from "./base-model";
