import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;
import { pages } from "./pages";
export declare namespace customwidgets {
    class CustomWidgetAttributeType extends internal.IEnum {
        static AutoNumber: CustomWidgetAttributeType;
        static Binary: CustomWidgetAttributeType;
        static Boolean: CustomWidgetAttributeType;
        static Currency: CustomWidgetAttributeType;
        static DateTime: CustomWidgetAttributeType;
        static Enum: CustomWidgetAttributeType;
        static Float: CustomWidgetAttributeType;
        static HashString: CustomWidgetAttributeType;
        static Integer: CustomWidgetAttributeType;
        static Long: CustomWidgetAttributeType;
        static String: CustomWidgetAttributeType;
        static Decimal: CustomWidgetAttributeType;
        protected qualifiedTsTypeName: string;
    }
    class IsPath extends internal.IEnum {
        static No: IsPath;
        static Optional: IsPath;
        static Yes: IsPath;
        protected qualifiedTsTypeName: string;
    }
    class PathType extends internal.IEnum {
        static None: PathType;
        static Reference: PathType;
        static ReferenceSet: PathType;
        protected qualifiedTsTypeName: string;
    }
    class WidgetReturnTypeEnum extends internal.IEnum {
        static Void: WidgetReturnTypeEnum;
        static Boolean: WidgetReturnTypeEnum;
        static Integer: WidgetReturnTypeEnum;
        static Float: WidgetReturnTypeEnum;
        static DateTime: WidgetReturnTypeEnum;
        static String: WidgetReturnTypeEnum;
        static Object: WidgetReturnTypeEnum;
        static Decimal: WidgetReturnTypeEnum;
        protected qualifiedTsTypeName: string;
    }
    class WidgetValueTypeEnum extends internal.IEnum {
        static Attribute: WidgetValueTypeEnum;
        static Boolean: WidgetValueTypeEnum;
        static Entity: WidgetValueTypeEnum;
        static EntityConstraint: WidgetValueTypeEnum;
        static Enumeration: WidgetValueTypeEnum;
        static Form: WidgetValueTypeEnum;
        static Image: WidgetValueTypeEnum;
        static Integer: WidgetValueTypeEnum;
        static Microflow: WidgetValueTypeEnum;
        static Object: WidgetValueTypeEnum;
        static String: WidgetValueTypeEnum;
        static TranslatableString: WidgetValueTypeEnum;
        protected qualifiedTsTypeName: string;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `CustomWidgets`.
     */
    interface ICustomWidget extends pages.IWidget {
        model: IModel;
        containerAsDataView: pages.IDataView;
        containerAsDivContainer: pages.IDivContainer;
        containerAsGroupBox: pages.IGroupBox;
        containerAsHeader: pages.IHeader;
        containerAsLayout: pages.ILayout;
        containerAsLayoutCallArgument: pages.ILayoutCallArgument;
        containerAsLayoutGridColumn: pages.ILayoutGridColumn;
        containerAsListView: pages.IListView;
        containerAsListViewTemplate: pages.IListViewTemplate;
        containerAsNavigationListItem: pages.INavigationListItem;
        containerAsScrollContainerRegion: pages.IScrollContainerRegion;
        containerAsSnippet: pages.ISnippet;
        containerAsSplitPane: pages.ISplitPane;
        containerAsTabPage: pages.ITabPage;
        containerAsTableCell: pages.ITableCell;
        containerAsTemplateGridContents: pages.ITemplateGridContents;
        containerAsVerticalFlow: pages.IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): CustomWidget;
        load(callback: (element: CustomWidget) => void, forceRefresh?: boolean): any;
    }
    class CustomWidget extends pages.Widget implements ICustomWidget {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: pages.DataView;
        readonly containerAsDivContainer: pages.DivContainer;
        readonly containerAsGroupBox: pages.GroupBox;
        readonly containerAsHeader: pages.Header;
        readonly containerAsLayout: pages.Layout;
        readonly containerAsLayoutCallArgument: pages.LayoutCallArgument;
        readonly containerAsLayoutGridColumn: pages.LayoutGridColumn;
        readonly containerAsListView: pages.ListView;
        readonly containerAsListViewTemplate: pages.ListViewTemplate;
        readonly containerAsNavigationListItem: pages.NavigationListItem;
        readonly containerAsScrollContainerRegion: pages.ScrollContainerRegion;
        readonly containerAsSnippet: pages.Snippet;
        readonly containerAsSplitPane: pages.SplitPane;
        readonly containerAsTabPage: pages.TabPage;
        readonly containerAsTableCell: pages.TableCell;
        readonly containerAsTemplateGridContents: pages.TemplateGridContents;
        readonly containerAsVerticalFlow: pages.VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        type: CustomWidgetType;

        object: WidgetObject;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'footerWidget' property
         * of the parent pages.DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: pages.DataView): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: pages.DataView): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: pages.DivContainer): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: pages.GroupBox): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'leftWidget' property
         * of the parent pages.Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: pages.Header): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'rightWidget' property
         * of the parent pages.Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: pages.Header): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: pages.Layout): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: pages.LayoutCallArgument): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: pages.LayoutGridColumn): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: pages.ListView): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: pages.ListViewTemplate): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: pages.NavigationListItem): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: pages.ScrollContainerRegion): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: pages.Snippet): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'firstWidget' property
         * of the parent pages.SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: pages.SplitPane): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'secondWidget' property
         * of the parent pages.SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: pages.SplitPane): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: pages.TabPage): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: pages.TableCell): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: pages.TemplateGridContents): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widgets' property
         * of the parent pages.VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: pages.VerticalFlow): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): CustomWidget;
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): CustomWidget;

    }
    interface ICustomWidgetType extends internal.IElement {
        model: IModel;
        containerAsCustomWidget: ICustomWidget;
        load(): CustomWidgetType;
        load(callback: (element: CustomWidgetType) => void, forceRefresh?: boolean): any;
    }
    class CustomWidgetType extends internal.Element implements ICustomWidgetType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsCustomWidget: CustomWidget;

        widgetId: string;

        needsEntityContext: boolean;

        name: string;

        description: string;

        phoneGapEnabled: boolean;

        offlineCapable: boolean;

        /**
         * In version 7.0.0: introduced
         */
        experimentalApi: boolean;

        objectType: WidgetObjectType;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new CustomWidgetType instance in the SDK and on the server.
         * The new CustomWidgetType will be automatically stored in the 'type' property
         * of the parent CustomWidget element passed as argument.
         */
        static createIn(container: CustomWidget): CustomWidgetType;
        /**
         * Creates and returns a new CustomWidgetType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): CustomWidgetType;

    }
    interface IWidgetEnumerationValue extends internal.IElement {
        model: IModel;
        containerAsWidgetValueType: IWidgetValueType;
        load(): WidgetEnumerationValue;
        load(callback: (element: WidgetEnumerationValue) => void, forceRefresh?: boolean): any;
    }
    class WidgetEnumerationValue extends internal.Element implements IWidgetEnumerationValue {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsWidgetValueType: WidgetValueType;

        key: string;

        caption: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new WidgetEnumerationValue instance in the SDK and on the server.
         * The new WidgetEnumerationValue will be automatically stored in the 'enumerationValues' property
         * of the parent WidgetValueType element passed as argument.
         */
        static createIn(container: WidgetValueType): WidgetEnumerationValue;
        /**
         * Creates and returns a new WidgetEnumerationValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): WidgetEnumerationValue;

    }
    interface IWidgetObject extends internal.IElement {
        model: IModel;
        containerAsCustomWidget: ICustomWidget;
        containerAsWidgetValue: IWidgetValue;
        load(): WidgetObject;
        load(callback: (element: WidgetObject) => void, forceRefresh?: boolean): any;
    }
    class WidgetObject extends internal.Element implements IWidgetObject {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsCustomWidget: CustomWidget;
        readonly containerAsWidgetValue: WidgetValue;

        type: WidgetObjectType;

        properties: internal.IList<WidgetProperty>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new WidgetObject instance in the SDK and on the server.
         * The new WidgetObject will be automatically stored in the 'object' property
         * of the parent CustomWidget element passed as argument.
         */
        static createInCustomWidgetUnderObject(container: CustomWidget): WidgetObject;
        /**
         * Creates and returns a new WidgetObject instance in the SDK and on the server.
         * The new WidgetObject will be automatically stored in the 'objects' property
         * of the parent WidgetValue element passed as argument.
         */
        static createInWidgetValueUnderObjects(container: WidgetValue): WidgetObject;
        /**
         * Creates and returns a new WidgetObject instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): WidgetObject;

    }
    interface IWidgetObjectType extends internal.IElement {
        model: IModel;
        containerAsCustomWidgetType: ICustomWidgetType;
        containerAsWidgetValueType: IWidgetValueType;
        load(): WidgetObjectType;
        load(callback: (element: WidgetObjectType) => void, forceRefresh?: boolean): any;
    }
    class WidgetObjectType extends internal.Element implements IWidgetObjectType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsCustomWidgetType: CustomWidgetType;
        readonly containerAsWidgetValueType: WidgetValueType;

        propertyTypes: internal.IList<WidgetPropertyType>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new WidgetObjectType instance in the SDK and on the server.
         * The new WidgetObjectType will be automatically stored in the 'objectType' property
         * of the parent CustomWidgetType element passed as argument.
         */
        static createInCustomWidgetTypeUnderObjectType(container: CustomWidgetType): WidgetObjectType;
        /**
         * Creates and returns a new WidgetObjectType instance in the SDK and on the server.
         * The new WidgetObjectType will be automatically stored in the 'objectType' property
         * of the parent WidgetValueType element passed as argument.
         */
        static createInWidgetValueTypeUnderObjectType(container: WidgetValueType): WidgetObjectType;
        /**
         * Creates and returns a new WidgetObjectType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): WidgetObjectType;

    }
    interface IWidgetProperty extends internal.IElement {
        model: IModel;
        containerAsWidgetObject: IWidgetObject;
        load(): WidgetProperty;
        load(callback: (element: WidgetProperty) => void, forceRefresh?: boolean): any;
    }
    class WidgetProperty extends internal.Element implements IWidgetProperty {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsWidgetObject: WidgetObject;

        type: WidgetPropertyType;

        value: WidgetValue;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new WidgetProperty instance in the SDK and on the server.
         * The new WidgetProperty will be automatically stored in the 'properties' property
         * of the parent WidgetObject element passed as argument.
         */
        static createIn(container: WidgetObject): WidgetProperty;
        /**
         * Creates and returns a new WidgetProperty instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): WidgetProperty;

    }
    interface IWidgetPropertyType extends internal.IElement {
        model: IModel;
        containerAsWidgetObjectType: IWidgetObjectType;
        load(): WidgetPropertyType;
        load(callback: (element: WidgetPropertyType) => void, forceRefresh?: boolean): any;
    }
    class WidgetPropertyType extends internal.Element implements IWidgetPropertyType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsWidgetObjectType: WidgetObjectType;

        key: string;

        category: string;

        caption: string;

        description: string;

        isDefault: boolean;

        valueType: WidgetValueType;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new WidgetPropertyType instance in the SDK and on the server.
         * The new WidgetPropertyType will be automatically stored in the 'propertyTypes' property
         * of the parent WidgetObjectType element passed as argument.
         */
        static createIn(container: WidgetObjectType): WidgetPropertyType;
        /**
         * Creates and returns a new WidgetPropertyType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): WidgetPropertyType;

    }
    interface IWidgetReturnType extends internal.IElement {
        model: IModel;
        containerAsWidgetValueType: IWidgetValueType;
        load(): WidgetReturnType;
        load(callback: (element: WidgetReturnType) => void, forceRefresh?: boolean): any;
    }
    class WidgetReturnType extends internal.Element implements IWidgetReturnType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsWidgetValueType: WidgetValueType;

        type: WidgetReturnTypeEnum;

        isList: boolean;

        entityProperty: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new WidgetReturnType instance in the SDK and on the server.
         * The new WidgetReturnType will be automatically stored in the 'returnType' property
         * of the parent WidgetValueType element passed as argument.
         */
        static createIn(container: WidgetValueType): WidgetReturnType;
        /**
         * Creates and returns a new WidgetReturnType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): WidgetReturnType;

    }
    interface IWidgetTranslation extends internal.IElement {
        model: IModel;
        containerAsWidgetValueType: IWidgetValueType;
        load(): WidgetTranslation;
        load(callback: (element: WidgetTranslation) => void, forceRefresh?: boolean): any;
    }
    class WidgetTranslation extends internal.Element implements IWidgetTranslation {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsWidgetValueType: WidgetValueType;

        languageCode: string;

        text: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new WidgetTranslation instance in the SDK and on the server.
         * The new WidgetTranslation will be automatically stored in the 'translations' property
         * of the parent WidgetValueType element passed as argument.
         */
        static createIn(container: WidgetValueType): WidgetTranslation;
        /**
         * Creates and returns a new WidgetTranslation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): WidgetTranslation;

    }
    interface IWidgetValue extends internal.IElement {
        model: IModel;
        containerAsWidgetProperty: IWidgetProperty;
        load(): WidgetValue;
        load(callback: (element: WidgetValue) => void, forceRefresh?: boolean): any;
    }
    class WidgetValue extends internal.Element implements IWidgetValue {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsWidgetProperty: WidgetProperty;

        type: WidgetValueType;

        primitiveValue: string;

        /**
         * The value of this property is conceptually of type paths.EntityPath.
         */
        entityPath: string;

        /**
         * The value of this property is conceptually of type paths.AttributePath.
         */
        attributePath: string;

        page: pages.IPage;
        readonly pageQualifiedName: string;

        microflow: microflows.IMicroflow;
        readonly microflowQualifiedName: string;

        image: images.IImage;
        readonly imageQualifiedName: string;

        translatableValue: texts.Text;

        /**
         * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
         */
        xPathConstraint: string;

        objects: internal.IList<WidgetObject>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new WidgetValue instance in the SDK and on the server.
         * The new WidgetValue will be automatically stored in the 'value' property
         * of the parent WidgetProperty element passed as argument.
         */
        static createIn(container: WidgetProperty): WidgetValue;
        /**
         * Creates and returns a new WidgetValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): WidgetValue;

    }
    interface IWidgetValueType extends internal.IElement {
        model: IModel;
        containerAsWidgetPropertyType: IWidgetPropertyType;
        load(): WidgetValueType;
        load(callback: (element: WidgetValueType) => void, forceRefresh?: boolean): any;
    }
    class WidgetValueType extends internal.Element implements IWidgetValueType {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsWidgetPropertyType: WidgetPropertyType;

        type: WidgetValueTypeEnum;

        isList: boolean;

        entityProperty: string;

        allowNonPersistableEntities: boolean;

        isPath: IsPath;

        pathType: PathType;

        parameterIsList: boolean;

        multiline: boolean;

        defaultValue: string;

        required: boolean;

        attributeTypes: internal.IList<CustomWidgetAttributeType>;

        enumerationValues: internal.IList<WidgetEnumerationValue>;

        objectType: WidgetObjectType;

        returnType: WidgetReturnType;

        translations: internal.IList<WidgetTranslation>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new WidgetValueType instance in the SDK and on the server.
         * The new WidgetValueType will be automatically stored in the 'valueType' property
         * of the parent WidgetPropertyType element passed as argument.
         */
        static createIn(container: WidgetPropertyType): WidgetValueType;
        /**
         * Creates and returns a new WidgetValueType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): WidgetValueType;

    }
}
import { images } from "./images";
import { microflows } from "./microflows";
import { reports } from "./reports";
import { texts } from "./texts";
import { IModel } from "./base-model";
