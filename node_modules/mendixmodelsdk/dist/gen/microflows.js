/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var projects_1 = require("./projects");
var microflows;
(function (microflows) {
    var ActionActivityColor = (function (_super) {
        __extends(ActionActivityColor, _super);
        function ActionActivityColor() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "microflows.ActionActivityColor";
            return _this;
        }
        return ActionActivityColor;
    }(internal.IEnum));
    ActionActivityColor.Default = new ActionActivityColor("Default", {});
    ActionActivityColor.Red = new ActionActivityColor("Red", {});
    ActionActivityColor.Orange = new ActionActivityColor("Orange", {});
    ActionActivityColor.Yellow = new ActionActivityColor("Yellow", {});
    ActionActivityColor.Green = new ActionActivityColor("Green", {});
    ActionActivityColor.Blue = new ActionActivityColor("Blue", {});
    ActionActivityColor.Purple = new ActionActivityColor("Purple", {});
    ActionActivityColor.Gray = new ActionActivityColor("Gray", {});
    microflows.ActionActivityColor = ActionActivityColor;
    var AggregateFunctionEnum = (function (_super) {
        __extends(AggregateFunctionEnum, _super);
        function AggregateFunctionEnum() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "microflows.AggregateFunctionEnum";
            return _this;
        }
        return AggregateFunctionEnum;
    }(internal.IEnum));
    AggregateFunctionEnum.Sum = new AggregateFunctionEnum("Sum", {});
    AggregateFunctionEnum.Average = new AggregateFunctionEnum("Average", {});
    AggregateFunctionEnum.Count = new AggregateFunctionEnum("Count", {});
    AggregateFunctionEnum.Minimum = new AggregateFunctionEnum("Minimum", {});
    AggregateFunctionEnum.Maximum = new AggregateFunctionEnum("Maximum", {});
    microflows.AggregateFunctionEnum = AggregateFunctionEnum;
    var ChangeActionItemType = (function (_super) {
        __extends(ChangeActionItemType, _super);
        function ChangeActionItemType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "microflows.ChangeActionItemType";
            return _this;
        }
        return ChangeActionItemType;
    }(internal.IEnum));
    ChangeActionItemType.Set = new ChangeActionItemType("Set", {});
    ChangeActionItemType.Add = new ChangeActionItemType("Add", {});
    ChangeActionItemType.Remove = new ChangeActionItemType("Remove", {});
    microflows.ChangeActionItemType = ChangeActionItemType;
    var ChangeListActionType = (function (_super) {
        __extends(ChangeListActionType, _super);
        function ChangeListActionType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "microflows.ChangeListActionType";
            return _this;
        }
        return ChangeListActionType;
    }(internal.IEnum));
    ChangeListActionType.Set = new ChangeListActionType("Set", {});
    ChangeListActionType.Add = new ChangeListActionType("Add", {});
    ChangeListActionType.Remove = new ChangeListActionType("Remove", {});
    ChangeListActionType.Clear = new ChangeListActionType("Clear", {});
    microflows.ChangeListActionType = ChangeListActionType;
    var CommitEnum = (function (_super) {
        __extends(CommitEnum, _super);
        function CommitEnum() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "microflows.CommitEnum";
            return _this;
        }
        return CommitEnum;
    }(internal.IEnum));
    CommitEnum.Yes = new CommitEnum("Yes", {});
    CommitEnum.YesWithoutEvents = new CommitEnum("YesWithoutEvents", {});
    CommitEnum.No = new CommitEnum("No", {});
    microflows.CommitEnum = CommitEnum;
    var ErrorHandlingType = (function (_super) {
        __extends(ErrorHandlingType, _super);
        function ErrorHandlingType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "microflows.ErrorHandlingType";
            return _this;
        }
        return ErrorHandlingType;
    }(internal.IEnum));
    ErrorHandlingType.Rollback = new ErrorHandlingType("Rollback", {});
    ErrorHandlingType.Custom = new ErrorHandlingType("Custom", {});
    ErrorHandlingType.CustomWithoutRollBack = new ErrorHandlingType("CustomWithoutRollBack", {});
    ErrorHandlingType.Continue = new ErrorHandlingType("Continue", {});
    microflows.ErrorHandlingType = ErrorHandlingType;
    var HttpMethod = (function (_super) {
        __extends(HttpMethod, _super);
        function HttpMethod() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "microflows.HttpMethod";
            return _this;
        }
        return HttpMethod;
    }(internal.IEnum));
    HttpMethod.Post = new HttpMethod("Post", {});
    HttpMethod.Get = new HttpMethod("Get", {});
    HttpMethod.Put = new HttpMethod("Put", {});
    HttpMethod.Patch = new HttpMethod("Patch", {});
    HttpMethod.Delete = new HttpMethod("Delete", {});
    microflows.HttpMethod = HttpMethod;
    var LanguageSettingType = (function (_super) {
        __extends(LanguageSettingType, _super);
        function LanguageSettingType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "microflows.LanguageSettingType";
            return _this;
        }
        return LanguageSettingType;
    }(internal.IEnum));
    LanguageSettingType.CurrentUser = new LanguageSettingType("CurrentUser", {});
    LanguageSettingType.ProjectDefault = new LanguageSettingType("ProjectDefault", {});
    LanguageSettingType.Variable = new LanguageSettingType("Variable", {});
    microflows.LanguageSettingType = LanguageSettingType;
    var LogLevel = (function (_super) {
        __extends(LogLevel, _super);
        function LogLevel() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "microflows.LogLevel";
            return _this;
        }
        return LogLevel;
    }(internal.IEnum));
    LogLevel.Trace = new LogLevel("Trace", {});
    LogLevel.Debug = new LogLevel("Debug", {});
    LogLevel.Info = new LogLevel("Info", {});
    LogLevel.Warning = new LogLevel("Warning", {});
    LogLevel.Error = new LogLevel("Error", {});
    LogLevel.Critical = new LogLevel("Critical", {});
    microflows.LogLevel = LogLevel;
    var NullValueOption = (function (_super) {
        __extends(NullValueOption, _super);
        function NullValueOption() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "microflows.NullValueOption";
            return _this;
        }
        return NullValueOption;
    }(internal.IEnum));
    NullValueOption.SendAsNil = new NullValueOption("SendAsNil", {});
    NullValueOption.LeaveOutElement = new NullValueOption("LeaveOutElement", {});
    microflows.NullValueOption = NullValueOption;
    var RequestHandlingType = (function (_super) {
        __extends(RequestHandlingType, _super);
        function RequestHandlingType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "microflows.RequestHandlingType";
            return _this;
        }
        return RequestHandlingType;
    }(internal.IEnum));
    RequestHandlingType.Mapping = new RequestHandlingType("Mapping", {});
    RequestHandlingType.Simple = new RequestHandlingType("Simple", {});
    RequestHandlingType.Advanced = new RequestHandlingType("Advanced", {});
    RequestHandlingType.Binary = new RequestHandlingType("Binary", {});
    RequestHandlingType.Custom = new RequestHandlingType("Custom", {});
    microflows.RequestHandlingType = RequestHandlingType;
    var ResultHandlingType = (function (_super) {
        __extends(ResultHandlingType, _super);
        function ResultHandlingType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "microflows.ResultHandlingType";
            return _this;
        }
        return ResultHandlingType;
    }(internal.IEnum));
    ResultHandlingType.Mapping = new ResultHandlingType("Mapping", {});
    ResultHandlingType.String = new ResultHandlingType("String", {});
    ResultHandlingType.FileDocument = new ResultHandlingType("FileDocument", {});
    ResultHandlingType.None = new ResultHandlingType("None", {});
    microflows.ResultHandlingType = ResultHandlingType;
    var ShowMessageType = (function (_super) {
        __extends(ShowMessageType, _super);
        function ShowMessageType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "microflows.ShowMessageType";
            return _this;
        }
        return ShowMessageType;
    }(internal.IEnum));
    ShowMessageType.Information = new ShowMessageType("Information", {});
    ShowMessageType.Warning = new ShowMessageType("Warning", {});
    ShowMessageType.Error = new ShowMessageType("Error", {});
    microflows.ShowMessageType = ShowMessageType;
    var SortOrderEnum = (function (_super) {
        __extends(SortOrderEnum, _super);
        function SortOrderEnum() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "microflows.SortOrderEnum";
            return _this;
        }
        return SortOrderEnum;
    }(internal.IEnum));
    SortOrderEnum.Ascending = new SortOrderEnum("Ascending", {});
    SortOrderEnum.Descending = new SortOrderEnum("Descending", {});
    microflows.SortOrderEnum = SortOrderEnum;
    var TargetDocumentType = (function (_super) {
        __extends(TargetDocumentType, _super);
        function TargetDocumentType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "microflows.TargetDocumentType";
            return _this;
        }
        return TargetDocumentType;
    }(internal.IEnum));
    TargetDocumentType.HTML = new TargetDocumentType("HTML", {});
    TargetDocumentType.PDF = new TargetDocumentType("PDF", {});
    TargetDocumentType.DOCX = new TargetDocumentType("DOCX", {});
    TargetDocumentType.DOC = new TargetDocumentType("DOC", {});
    TargetDocumentType.RTF = new TargetDocumentType("RTF", {});
    TargetDocumentType.ODT = new TargetDocumentType("ODT", {});
    microflows.TargetDocumentType = TargetDocumentType;
    /**
     * TODO: Abstract
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var MicroflowObject = (function (_super) {
        __extends(MicroflowObject, _super);
        function MicroflowObject(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__relativeMiddlePoint = new internal.PrimitiveProperty(MicroflowObject, _this, "relativeMiddlePoint", { x: 0, y: 0 }, internal.PrimitiveTypeEnum.Point);
            _this.__size = new internal.PrimitiveProperty(MicroflowObject, _this, "size", { width: 0, height: 0 }, internal.PrimitiveTypeEnum.Size);
            if (arguments.length < 4) {
                throw new Error("new MicroflowObject() cannot be invoked directly, please use 'model.microflows.createMicroflowObject()'");
            }
            return _this;
        }
        Object.defineProperty(MicroflowObject.prototype, "containerAsMicroflowObjectCollection", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowObjectCollection); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowObject.prototype, "relativeMiddlePoint", {
            get: function () { return this.__relativeMiddlePoint.get(); },
            set: function (newValue) { this.__relativeMiddlePoint.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowObject.prototype, "size", {
            get: function () { return this.__size.get(); },
            set: function (newValue) { this.__size.set(newValue); },
            enumerable: true,
            configurable: true
        });
        MicroflowObject.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return MicroflowObject;
    }(internal.Element));
    MicroflowObject.typeName = "Microflows$MicroflowObject";
    MicroflowObject.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.MicroflowObject = MicroflowObject;
    /**
     * TODO: abstract element
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var Activity = (function (_super) {
        __extends(Activity, _super);
        function Activity(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new Activity() cannot be invoked directly, please use 'model.microflows.createActivity()'");
            }
            return _this;
        }
        Object.defineProperty(Activity.prototype, "containerAsMicroflowObjectCollection", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowObjectCollection); },
            enumerable: true,
            configurable: true
        });
        Activity.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return Activity;
    }(MicroflowObject));
    Activity.typeName = "Microflows$Activity";
    Activity.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.Activity = Activity;
    /**
     * See: {@link https://docs.mendix.com/refguide7/activities relevant section in reference guide}
     */
    var ActionActivity = (function (_super) {
        __extends(ActionActivity, _super);
        function ActionActivity(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__action = new internal.PartProperty(ActionActivity, _this, "action", null, false);
            _this.__caption = new internal.PrimitiveProperty(ActionActivity, _this, "caption", "", internal.PrimitiveTypeEnum.String);
            _this.__autoGenerateCaption = new internal.PrimitiveProperty(ActionActivity, _this, "autoGenerateCaption", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__backgroundColor = new internal.EnumProperty(ActionActivity, _this, "backgroundColor", ActionActivityColor.Default, ActionActivityColor);
            _this.__documentation = new internal.PrimitiveProperty(ActionActivity, _this, "documentation", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ActionActivity() cannot be invoked directly, please use 'model.microflows.createActionActivity()'");
            }
            return _this;
        }
        Object.defineProperty(ActionActivity.prototype, "containerAsMicroflowObjectCollection", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowObjectCollection); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionActivity.prototype, "action", {
            get: function () { return this.__action.get(); },
            set: function (newValue) { this.__action.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionActivity.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionActivity.prototype, "autoGenerateCaption", {
            get: function () { return this.__autoGenerateCaption.get(); },
            set: function (newValue) { this.__autoGenerateCaption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionActivity.prototype, "backgroundColor", {
            get: function () { return this.__backgroundColor.get(); },
            set: function (newValue) { this.__backgroundColor.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionActivity.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ActionActivity instance in the SDK and on the server.
         * The new ActionActivity will be automatically stored in the 'objects' property
         * of the parent MicroflowObjectCollection element passed as argument.
         */
        ActionActivity.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ActionActivity, "objects", true);
        };
        /**
         * Creates and returns a new ActionActivity instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ActionActivity.create = function (model) {
            return internal.instancehelpers.createElement(model, ActionActivity);
        };
        ActionActivity.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.autoGenerateCaption = true;
            this.backgroundColor = ActionActivityColor.Default;
            this.caption = "Activity";
            this.size = { width: 120, height: 60 };
        };
        return ActionActivity;
    }(Activity));
    ActionActivity.typeName = "Microflows$ActionActivity";
    ActionActivity.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.ActionActivity = ActionActivity;
    /**
     * TODO
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var RequestHandling = (function (_super) {
        __extends(RequestHandling, _super);
        function RequestHandling(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new RequestHandling() cannot be invoked directly, please use 'model.microflows.createRequestHandling()'");
            }
            return _this;
        }
        Object.defineProperty(RequestHandling.prototype, "containerAsRestCallAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, RestCallAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RequestHandling.prototype, "containerAsWebServiceCallAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, WebServiceCallAction); },
            enumerable: true,
            configurable: true
        });
        RequestHandling.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return RequestHandling;
    }(internal.Element));
    RequestHandling.typeName = "Microflows$RequestHandling";
    RequestHandling.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.RequestHandling = RequestHandling;
    /**
     * TODO
     */
    var AdvancedRequestHandling = (function (_super) {
        __extends(AdvancedRequestHandling, _super);
        function AdvancedRequestHandling(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__parameterMappings = new internal.PartListProperty(AdvancedRequestHandling, _this, "parameterMappings", []);
            _this.__nullValueOption = new internal.EnumProperty(AdvancedRequestHandling, _this, "nullValueOption", NullValueOption.LeaveOutElement, NullValueOption);
            if (arguments.length < 4) {
                throw new Error("new AdvancedRequestHandling() cannot be invoked directly, please use 'model.microflows.createAdvancedRequestHandling()'");
            }
            return _this;
        }
        Object.defineProperty(AdvancedRequestHandling.prototype, "containerAsRestCallAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, RestCallAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AdvancedRequestHandling.prototype, "containerAsWebServiceCallAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, WebServiceCallAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AdvancedRequestHandling.prototype, "parameterMappings", {
            get: function () { return this.__parameterMappings.get(); },
            set: function (newValue) { this.__parameterMappings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AdvancedRequestHandling.prototype, "nullValueOption", {
            /**
             * In version 6.7.0: introduced
             */
            get: function () { return this.__nullValueOption.get(); },
            set: function (newValue) { this.__nullValueOption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new AdvancedRequestHandling instance in the SDK and on the server.
         * The new AdvancedRequestHandling will be automatically stored in the 'requestHandling' property
         * of the parent RestCallAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        AdvancedRequestHandling.createInRestCallActionUnderRequestHandling = function (container) {
            internal.createInVersionCheck(container.model, AdvancedRequestHandling.typeName, ["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, AdvancedRequestHandling, "requestHandling", false);
        };
        /**
         * Creates and returns a new AdvancedRequestHandling instance in the SDK and on the server.
         * The new AdvancedRequestHandling will be automatically stored in the 'requestBodyHandling' property
         * of the parent WebServiceCallAction element passed as argument.
         */
        AdvancedRequestHandling.createInWebServiceCallActionUnderRequestBodyHandling = function (container) {
            return internal.instancehelpers.createElement(container, AdvancedRequestHandling, "requestBodyHandling", false);
        };
        /**
         * Creates and returns a new AdvancedRequestHandling instance in the SDK and on the server.
         * The new AdvancedRequestHandling will be automatically stored in the 'requestHeaderHandling' property
         * of the parent WebServiceCallAction element passed as argument.
         */
        AdvancedRequestHandling.createInWebServiceCallActionUnderRequestHeaderHandling = function (container) {
            return internal.instancehelpers.createElement(container, AdvancedRequestHandling, "requestHeaderHandling", false);
        };
        /**
         * Creates and returns a new AdvancedRequestHandling instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AdvancedRequestHandling.create = function (model) {
            return internal.instancehelpers.createElement(model, AdvancedRequestHandling);
        };
        AdvancedRequestHandling.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            if (this.__nullValueOption.isAvailable) {
                this.nullValueOption = NullValueOption.LeaveOutElement;
            }
        };
        return AdvancedRequestHandling;
    }(RequestHandling));
    AdvancedRequestHandling.typeName = "Microflows$AdvancedRequestHandling";
    AdvancedRequestHandling.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "nullValueOption": {
                "introduced": "6.7.0"
            }
        }
    }, internal.StructureType.Element);
    microflows.AdvancedRequestHandling = AdvancedRequestHandling;
    /**
     * TODO
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var MicroflowAction = (function (_super) {
        __extends(MicroflowAction, _super);
        function MicroflowAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__errorHandlingType = new internal.EnumProperty(MicroflowAction, _this, "errorHandlingType", ErrorHandlingType.Rollback, ErrorHandlingType);
            if (arguments.length < 4) {
                throw new Error("new MicroflowAction() cannot be invoked directly, please use 'model.microflows.createMicroflowAction()'");
            }
            return _this;
        }
        Object.defineProperty(MicroflowAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowAction.prototype, "errorHandlingType", {
            get: function () { return this.__errorHandlingType.get(); },
            set: function (newValue) { this.__errorHandlingType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        MicroflowAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.errorHandlingType = ErrorHandlingType.Rollback;
        };
        return MicroflowAction;
    }(internal.Element));
    MicroflowAction.typeName = "Microflows$MicroflowAction";
    MicroflowAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.MicroflowAction = MicroflowAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/aggregate-list relevant section in reference guide}
     */
    var AggregateListAction = (function (_super) {
        __extends(AggregateListAction, _super);
        function AggregateListAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__inputListVariableName = new internal.PrimitiveProperty(AggregateListAction, _this, "inputListVariableName", "", internal.PrimitiveTypeEnum.String);
            _this.__attribute = new internal.ByNameReferenceProperty(AggregateListAction, _this, "attribute", null, "DomainModels$Attribute");
            _this.__aggregateFunction = new internal.EnumProperty(AggregateListAction, _this, "aggregateFunction", AggregateFunctionEnum.Sum, AggregateFunctionEnum);
            _this.__outputVariableName = new internal.PrimitiveProperty(AggregateListAction, _this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new AggregateListAction() cannot be invoked directly, please use 'model.microflows.createAggregateListAction()'");
            }
            return _this;
        }
        Object.defineProperty(AggregateListAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AggregateListAction.prototype, "inputListVariableName", {
            get: function () { return this.__inputListVariableName.get(); },
            set: function (newValue) { this.__inputListVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AggregateListAction.prototype, "attribute", {
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AggregateListAction.prototype, "attributeQualifiedName", {
            get: function () { return this.__attribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AggregateListAction.prototype, "aggregateFunction", {
            get: function () { return this.__aggregateFunction.get(); },
            set: function (newValue) { this.__aggregateFunction.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AggregateListAction.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new AggregateListAction instance in the SDK and on the server.
         * The new AggregateListAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        AggregateListAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, AggregateListAction, "action", false);
        };
        /**
         * Creates and returns a new AggregateListAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AggregateListAction.create = function (model) {
            return internal.instancehelpers.createElement(model, AggregateListAction);
        };
        AggregateListAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.aggregateFunction = AggregateFunctionEnum.Sum;
        };
        return AggregateListAction;
    }(MicroflowAction));
    AggregateListAction.typeName = "Microflows$AggregateListAction";
    AggregateListAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.AggregateListAction = AggregateListAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/annotation relevant section in reference guide}
     */
    var Annotation = (function (_super) {
        __extends(Annotation, _super);
        function Annotation(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__caption = new internal.PrimitiveProperty(Annotation, _this, "caption", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new Annotation() cannot be invoked directly, please use 'model.microflows.createAnnotation()'");
            }
            return _this;
        }
        Object.defineProperty(Annotation.prototype, "containerAsMicroflowObjectCollection", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowObjectCollection); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Annotation.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Annotation instance in the SDK and on the server.
         * The new Annotation will be automatically stored in the 'objects' property
         * of the parent MicroflowObjectCollection element passed as argument.
         */
        Annotation.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Annotation, "objects", true);
        };
        /**
         * Creates and returns a new Annotation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Annotation.create = function (model) {
            return internal.instancehelpers.createElement(model, Annotation);
        };
        Annotation.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.size = { width: 100, height: 40 };
        };
        return Annotation;
    }(MicroflowObject));
    Annotation.typeName = "Microflows$Annotation";
    Annotation.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.Annotation = Annotation;
    /**
     * TODO abstract
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var Flow = (function (_super) {
        __extends(Flow, _super);
        function Flow(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__origin = new internal.ByIdReferenceProperty(Flow, _this, "origin", null);
            _this.__destination = new internal.ByIdReferenceProperty(Flow, _this, "destination", null);
            _this.__originConnectionIndex = new internal.PrimitiveProperty(Flow, _this, "originConnectionIndex", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__destinationConnectionIndex = new internal.PrimitiveProperty(Flow, _this, "destinationConnectionIndex", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__originBezierVector = new internal.PrimitiveProperty(Flow, _this, "originBezierVector", { width: 0, height: 0 }, internal.PrimitiveTypeEnum.Size);
            _this.__destinationBezierVector = new internal.PrimitiveProperty(Flow, _this, "destinationBezierVector", { width: 0, height: 0 }, internal.PrimitiveTypeEnum.Size);
            if (arguments.length < 4) {
                throw new Error("new Flow() cannot be invoked directly, please use 'model.microflows.createFlow()'");
            }
            return _this;
        }
        Object.defineProperty(Flow.prototype, "containerAsMicroflowBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Flow.prototype, "origin", {
            get: function () { return this.__origin.get(); },
            set: function (newValue) { this.__origin.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Flow.prototype, "destination", {
            get: function () { return this.__destination.get(); },
            set: function (newValue) { this.__destination.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Flow.prototype, "originConnectionIndex", {
            get: function () { return this.__originConnectionIndex.get(); },
            set: function (newValue) { this.__originConnectionIndex.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Flow.prototype, "destinationConnectionIndex", {
            get: function () { return this.__destinationConnectionIndex.get(); },
            set: function (newValue) { this.__destinationConnectionIndex.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Flow.prototype, "originBezierVector", {
            get: function () { return this.__originBezierVector.get(); },
            set: function (newValue) { this.__originBezierVector.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Flow.prototype, "destinationBezierVector", {
            get: function () { return this.__destinationBezierVector.get(); },
            set: function (newValue) { this.__destinationBezierVector.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Flow.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return Flow;
    }(internal.Element));
    Flow.typeName = "Microflows$Flow";
    Flow.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "origin": {
                "required": {
                    "currentValue": true
                }
            },
            "destination": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.Flow = Flow;
    /**
     * See: {@link https://docs.mendix.com/refguide7/annotation-flow relevant section in reference guide}
     */
    var AnnotationFlow = (function (_super) {
        __extends(AnnotationFlow, _super);
        function AnnotationFlow(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new AnnotationFlow() cannot be invoked directly, please use 'model.microflows.createAnnotationFlow()'");
            }
            return _this;
        }
        Object.defineProperty(AnnotationFlow.prototype, "containerAsMicroflowBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowBase); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new AnnotationFlow instance in the SDK and on the server.
         * The new AnnotationFlow will be automatically stored in the 'flows' property
         * of the parent MicroflowBase element passed as argument.
         */
        AnnotationFlow.createIn = function (container) {
            return internal.instancehelpers.createElement(container, AnnotationFlow, "flows", true);
        };
        /**
         * Creates and returns a new AnnotationFlow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AnnotationFlow.create = function (model) {
            return internal.instancehelpers.createElement(model, AnnotationFlow);
        };
        AnnotationFlow.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return AnnotationFlow;
    }(Flow));
    AnnotationFlow.typeName = "Microflows$AnnotationFlow";
    AnnotationFlow.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.AnnotationFlow = AnnotationFlow;
    /**
     * TODO: Missing in ref guide ?
     */
    var AppServiceCallAction = (function (_super) {
        __extends(AppServiceCallAction, _super);
        function AppServiceCallAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__appServiceAction = new internal.ByNameReferenceProperty(AppServiceCallAction, _this, "appServiceAction", null, "AppServices$AppServiceAction");
            _this.__parameterMappings = new internal.PartListProperty(AppServiceCallAction, _this, "parameterMappings", []);
            _this.__useVariable = new internal.PrimitiveProperty(AppServiceCallAction, _this, "useVariable", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__outputVariableName = new internal.PrimitiveProperty(AppServiceCallAction, _this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new AppServiceCallAction() cannot be invoked directly, please use 'model.microflows.createAppServiceCallAction()'");
            }
            return _this;
        }
        Object.defineProperty(AppServiceCallAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceCallAction.prototype, "appServiceAction", {
            get: function () { return this.__appServiceAction.get(); },
            set: function (newValue) { this.__appServiceAction.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceCallAction.prototype, "appServiceActionQualifiedName", {
            get: function () { return this.__appServiceAction.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceCallAction.prototype, "parameterMappings", {
            get: function () { return this.__parameterMappings.get(); },
            set: function (newValue) { this.__parameterMappings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceCallAction.prototype, "useVariable", {
            get: function () { return this.__useVariable.get(); },
            set: function (newValue) { this.__useVariable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceCallAction.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new AppServiceCallAction instance in the SDK and on the server.
         * The new AppServiceCallAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        AppServiceCallAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, AppServiceCallAction, "action", false);
        };
        /**
         * Creates and returns a new AppServiceCallAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AppServiceCallAction.create = function (model) {
            return internal.instancehelpers.createElement(model, AppServiceCallAction);
        };
        AppServiceCallAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.useVariable = true;
        };
        return AppServiceCallAction;
    }(MicroflowAction));
    AppServiceCallAction.typeName = "Microflows$AppServiceCallAction";
    AppServiceCallAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.AppServiceCallAction = AppServiceCallAction;
    /**
     * TODO: Missing in ref guide ?
     */
    var AppServiceCallParameterMapping = (function (_super) {
        __extends(AppServiceCallParameterMapping, _super);
        function AppServiceCallParameterMapping(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__parameter = new internal.ByNameReferenceProperty(AppServiceCallParameterMapping, _this, "parameter", null, "AppServices$AppServiceActionParameter");
            _this.__argument = new internal.PrimitiveProperty(AppServiceCallParameterMapping, _this, "argument", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new AppServiceCallParameterMapping() cannot be invoked directly, please use 'model.microflows.createAppServiceCallParameterMapping()'");
            }
            return _this;
        }
        Object.defineProperty(AppServiceCallParameterMapping.prototype, "containerAsAppServiceCallAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, AppServiceCallAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceCallParameterMapping.prototype, "parameter", {
            get: function () { return this.__parameter.get(); },
            set: function (newValue) { this.__parameter.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceCallParameterMapping.prototype, "parameterQualifiedName", {
            get: function () { return this.__parameter.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppServiceCallParameterMapping.prototype, "argument", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__argument.get(); },
            set: function (newValue) { this.__argument.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new AppServiceCallParameterMapping instance in the SDK and on the server.
         * The new AppServiceCallParameterMapping will be automatically stored in the 'parameterMappings' property
         * of the parent AppServiceCallAction element passed as argument.
         */
        AppServiceCallParameterMapping.createIn = function (container) {
            return internal.instancehelpers.createElement(container, AppServiceCallParameterMapping, "parameterMappings", true);
        };
        /**
         * Creates and returns a new AppServiceCallParameterMapping instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AppServiceCallParameterMapping.create = function (model) {
            return internal.instancehelpers.createElement(model, AppServiceCallParameterMapping);
        };
        AppServiceCallParameterMapping.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return AppServiceCallParameterMapping;
    }(internal.Element));
    AppServiceCallParameterMapping.typeName = "Microflows$AppServiceCallParameterMapping";
    AppServiceCallParameterMapping.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.AppServiceCallParameterMapping = AppServiceCallParameterMapping;
    /**
     * TODO
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var RetrieveSource = (function (_super) {
        __extends(RetrieveSource, _super);
        function RetrieveSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new RetrieveSource() cannot be invoked directly, please use 'model.microflows.createRetrieveSource()'");
            }
            return _this;
        }
        Object.defineProperty(RetrieveSource.prototype, "containerAsRetrieveAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, RetrieveAction); },
            enumerable: true,
            configurable: true
        });
        RetrieveSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return RetrieveSource;
    }(internal.Element));
    RetrieveSource.typeName = "Microflows$RetrieveSource";
    RetrieveSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.RetrieveSource = RetrieveSource;
    /**
     * TODO
     */
    var AssociationRetrieveSource = (function (_super) {
        __extends(AssociationRetrieveSource, _super);
        function AssociationRetrieveSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__startVariableName = new internal.PrimitiveProperty(AssociationRetrieveSource, _this, "startVariableName", "", internal.PrimitiveTypeEnum.String);
            _this.__association = new internal.ByNameReferenceProperty(AssociationRetrieveSource, _this, "association", null, "DomainModels$AssociationBase");
            if (arguments.length < 4) {
                throw new Error("new AssociationRetrieveSource() cannot be invoked directly, please use 'model.microflows.createAssociationRetrieveSource()'");
            }
            return _this;
        }
        Object.defineProperty(AssociationRetrieveSource.prototype, "containerAsRetrieveAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, RetrieveAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationRetrieveSource.prototype, "startVariableName", {
            get: function () { return this.__startVariableName.get(); },
            set: function (newValue) { this.__startVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationRetrieveSource.prototype, "association", {
            get: function () { return this.__association.get(); },
            set: function (newValue) { this.__association.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AssociationRetrieveSource.prototype, "associationQualifiedName", {
            get: function () { return this.__association.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new AssociationRetrieveSource instance in the SDK and on the server.
         * The new AssociationRetrieveSource will be automatically stored in the 'retrieveSource' property
         * of the parent RetrieveAction element passed as argument.
         */
        AssociationRetrieveSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, AssociationRetrieveSource, "retrieveSource", false);
        };
        /**
         * Creates and returns a new AssociationRetrieveSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        AssociationRetrieveSource.create = function (model) {
            return internal.instancehelpers.createElement(model, AssociationRetrieveSource);
        };
        AssociationRetrieveSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return AssociationRetrieveSource;
    }(RetrieveSource));
    AssociationRetrieveSource.typeName = "Microflows$AssociationRetrieveSource";
    AssociationRetrieveSource.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.AssociationRetrieveSource = AssociationRetrieveSource;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.

     *
     * In version 6.7.0: introduced
     */
    var JavaActionParameterValue = (function (_super) {
        __extends(JavaActionParameterValue, _super);
        function JavaActionParameterValue(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new JavaActionParameterValue() cannot be invoked directly, please use 'model.microflows.createJavaActionParameterValue()'");
            }
            return _this;
        }
        Object.defineProperty(JavaActionParameterValue.prototype, "containerAsJavaActionParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameterMapping); },
            enumerable: true,
            configurable: true
        });
        JavaActionParameterValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return JavaActionParameterValue;
    }(internal.Element));
    JavaActionParameterValue.typeName = "Microflows$JavaActionParameterValue";
    JavaActionParameterValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "6.7.0"
    }, internal.StructureType.Element);
    microflows.JavaActionParameterValue = JavaActionParameterValue;
    /**
     * In version 6.7.0: introduced
     */
    var BasicJavaActionParameterValue = (function (_super) {
        __extends(BasicJavaActionParameterValue, _super);
        function BasicJavaActionParameterValue(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__argument = new internal.PrimitiveProperty(BasicJavaActionParameterValue, _this, "argument", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new BasicJavaActionParameterValue() cannot be invoked directly, please use 'model.microflows.createBasicJavaActionParameterValue()'");
            }
            return _this;
        }
        Object.defineProperty(BasicJavaActionParameterValue.prototype, "containerAsJavaActionParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicJavaActionParameterValue.prototype, "argument", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__argument.get(); },
            set: function (newValue) { this.__argument.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new BasicJavaActionParameterValue instance in the SDK and on the server.
         * The new BasicJavaActionParameterValue will be automatically stored in the 'value' property
         * of the parent JavaActionParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        BasicJavaActionParameterValue.createIn = function (container) {
            internal.createInVersionCheck(container.model, BasicJavaActionParameterValue.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, BasicJavaActionParameterValue, "value", false);
        };
        /**
         * Creates and returns a new BasicJavaActionParameterValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BasicJavaActionParameterValue.create = function (model) {
            return internal.instancehelpers.createElement(model, BasicJavaActionParameterValue);
        };
        BasicJavaActionParameterValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return BasicJavaActionParameterValue;
    }(JavaActionParameterValue));
    BasicJavaActionParameterValue.typeName = "Microflows$BasicJavaActionParameterValue";
    BasicJavaActionParameterValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "6.7.0"
    }, internal.StructureType.Element);
    microflows.BasicJavaActionParameterValue = BasicJavaActionParameterValue;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ListOperation = (function (_super) {
        __extends(ListOperation, _super);
        function ListOperation(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__listVariableName = new internal.PrimitiveProperty(ListOperation, _this, "listVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ListOperation() cannot be invoked directly, please use 'model.microflows.createListOperation()'");
            }
            return _this;
        }
        Object.defineProperty(ListOperation.prototype, "containerAsListOperationAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListOperationAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListOperation.prototype, "listVariableName", {
            get: function () { return this.__listVariableName.get(); },
            set: function (newValue) { this.__listVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ListOperation.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ListOperation;
    }(internal.Element));
    ListOperation.typeName = "Microflows$ListOperation";
    ListOperation.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.ListOperation = ListOperation;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var BinaryListOperation = (function (_super) {
        __extends(BinaryListOperation, _super);
        function BinaryListOperation(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__secondListOrObjectVariableName = new internal.PrimitiveProperty(BinaryListOperation, _this, "secondListOrObjectVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new BinaryListOperation() cannot be invoked directly, please use 'model.microflows.createBinaryListOperation()'");
            }
            return _this;
        }
        Object.defineProperty(BinaryListOperation.prototype, "containerAsListOperationAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListOperationAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryListOperation.prototype, "secondListOrObjectVariableName", {
            get: function () { return this.__secondListOrObjectVariableName.get(); },
            set: function (newValue) { this.__secondListOrObjectVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        BinaryListOperation.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return BinaryListOperation;
    }(ListOperation));
    BinaryListOperation.typeName = "Microflows$BinaryListOperation";
    BinaryListOperation.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.BinaryListOperation = BinaryListOperation;
    /**
     * In version 6.9.0: introduced
     */
    var BinaryRequestHandling = (function (_super) {
        __extends(BinaryRequestHandling, _super);
        function BinaryRequestHandling(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__expression = new internal.PrimitiveProperty(BinaryRequestHandling, _this, "expression", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new BinaryRequestHandling() cannot be invoked directly, please use 'model.microflows.createBinaryRequestHandling()'");
            }
            return _this;
        }
        Object.defineProperty(BinaryRequestHandling.prototype, "containerAsRestCallAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, RestCallAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryRequestHandling.prototype, "containerAsWebServiceCallAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, WebServiceCallAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryRequestHandling.prototype, "expression", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__expression.get(); },
            set: function (newValue) { this.__expression.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new BinaryRequestHandling instance in the SDK and on the server.
         * The new BinaryRequestHandling will be automatically stored in the 'requestHandling' property
         * of the parent RestCallAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        BinaryRequestHandling.createInRestCallActionUnderRequestHandling = function (container) {
            internal.createInVersionCheck(container.model, BinaryRequestHandling.typeName, ["6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, BinaryRequestHandling, "requestHandling", false);
        };
        /**
         * Creates and returns a new BinaryRequestHandling instance in the SDK and on the server.
         * The new BinaryRequestHandling will be automatically stored in the 'requestBodyHandling' property
         * of the parent WebServiceCallAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        BinaryRequestHandling.createInWebServiceCallActionUnderRequestBodyHandling = function (container) {
            internal.createInVersionCheck(container.model, BinaryRequestHandling.typeName, ["6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, BinaryRequestHandling, "requestBodyHandling", false);
        };
        /**
         * Creates and returns a new BinaryRequestHandling instance in the SDK and on the server.
         * The new BinaryRequestHandling will be automatically stored in the 'requestHeaderHandling' property
         * of the parent WebServiceCallAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        BinaryRequestHandling.createInWebServiceCallActionUnderRequestHeaderHandling = function (container) {
            internal.createInVersionCheck(container.model, BinaryRequestHandling.typeName, ["6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, BinaryRequestHandling, "requestHeaderHandling", false);
        };
        /**
         * Creates and returns a new BinaryRequestHandling instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BinaryRequestHandling.create = function (model) {
            return internal.instancehelpers.createElement(model, BinaryRequestHandling);
        };
        BinaryRequestHandling.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return BinaryRequestHandling;
    }(RequestHandling));
    BinaryRequestHandling.typeName = "Microflows$BinaryRequestHandling";
    BinaryRequestHandling.versionInfo = new exports.StructureVersionInfo({
        "introduced": "6.9.0"
    }, internal.StructureType.Element);
    microflows.BinaryRequestHandling = BinaryRequestHandling;
    /**
     * See: {@link https://docs.mendix.com/refguide7/break-event relevant section in reference guide}
     */
    var BreakEvent = (function (_super) {
        __extends(BreakEvent, _super);
        function BreakEvent(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new BreakEvent() cannot be invoked directly, please use 'model.microflows.createBreakEvent()'");
            }
            return _this;
        }
        Object.defineProperty(BreakEvent.prototype, "containerAsMicroflowObjectCollection", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowObjectCollection); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new BreakEvent instance in the SDK and on the server.
         * The new BreakEvent will be automatically stored in the 'objects' property
         * of the parent MicroflowObjectCollection element passed as argument.
         */
        BreakEvent.createIn = function (container) {
            return internal.instancehelpers.createElement(container, BreakEvent, "objects", true);
        };
        /**
         * Creates and returns a new BreakEvent instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        BreakEvent.create = function (model) {
            return internal.instancehelpers.createElement(model, BreakEvent);
        };
        BreakEvent.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.size = { width: 20, height: 20 };
        };
        return BreakEvent;
    }(MicroflowObject));
    BreakEvent.typeName = "Microflows$BreakEvent";
    BreakEvent.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.BreakEvent = BreakEvent;
    /**
     * TODO
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var CaseValue = (function (_super) {
        __extends(CaseValue, _super);
        function CaseValue(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new CaseValue() cannot be invoked directly, please use 'model.microflows.createCaseValue()'");
            }
            return _this;
        }
        Object.defineProperty(CaseValue.prototype, "containerAsSequenceFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, SequenceFlow); },
            enumerable: true,
            configurable: true
        });
        CaseValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return CaseValue;
    }(internal.Element));
    CaseValue.typeName = "Microflows$CaseValue";
    CaseValue.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.CaseValue = CaseValue;
    /**
     * See: {@link https://docs.mendix.com/refguide7/cast-object relevant section in reference guide}
     */
    var CastAction = (function (_super) {
        __extends(CastAction, _super);
        function CastAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__outputVariableName = new internal.PrimitiveProperty(CastAction, _this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new CastAction() cannot be invoked directly, please use 'model.microflows.createCastAction()'");
            }
            return _this;
        }
        Object.defineProperty(CastAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CastAction.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new CastAction instance in the SDK and on the server.
         * The new CastAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        CastAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, CastAction, "action", false);
        };
        /**
         * Creates and returns a new CastAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CastAction.create = function (model) {
            return internal.instancehelpers.createElement(model, CastAction);
        };
        CastAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return CastAction;
    }(MicroflowAction));
    CastAction.typeName = "Microflows$CastAction";
    CastAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.CastAction = CastAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/change-list relevant section in reference guide}
     */
    var ChangeListAction = (function (_super) {
        __extends(ChangeListAction, _super);
        function ChangeListAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__changeVariableName = new internal.PrimitiveProperty(ChangeListAction, _this, "changeVariableName", "", internal.PrimitiveTypeEnum.String);
            _this.__value = new internal.PrimitiveProperty(ChangeListAction, _this, "value", "", internal.PrimitiveTypeEnum.String);
            _this.__type = new internal.EnumProperty(ChangeListAction, _this, "type", ChangeListActionType.Add, ChangeListActionType);
            if (arguments.length < 4) {
                throw new Error("new ChangeListAction() cannot be invoked directly, please use 'model.microflows.createChangeListAction()'");
            }
            return _this;
        }
        Object.defineProperty(ChangeListAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChangeListAction.prototype, "changeVariableName", {
            get: function () { return this.__changeVariableName.get(); },
            set: function (newValue) { this.__changeVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChangeListAction.prototype, "value", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChangeListAction.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ChangeListAction instance in the SDK and on the server.
         * The new ChangeListAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        ChangeListAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ChangeListAction, "action", false);
        };
        /**
         * Creates and returns a new ChangeListAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ChangeListAction.create = function (model) {
            return internal.instancehelpers.createElement(model, ChangeListAction);
        };
        ChangeListAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.type = ChangeListActionType.Add;
        };
        return ChangeListAction;
    }(MicroflowAction));
    ChangeListAction.typeName = "Microflows$ChangeListAction";
    ChangeListAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.ChangeListAction = ChangeListAction;
    /**
     * TODO
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var ChangeMembersAction = (function (_super) {
        __extends(ChangeMembersAction, _super);
        function ChangeMembersAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__items = new internal.PartListProperty(ChangeMembersAction, _this, "items", []);
            _this.__refreshInClient = new internal.PrimitiveProperty(ChangeMembersAction, _this, "refreshInClient", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__commit = new internal.EnumProperty(ChangeMembersAction, _this, "commit", CommitEnum.No, CommitEnum);
            if (arguments.length < 4) {
                throw new Error("new ChangeMembersAction() cannot be invoked directly, please use 'model.microflows.createChangeMembersAction()'");
            }
            return _this;
        }
        Object.defineProperty(ChangeMembersAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChangeMembersAction.prototype, "items", {
            get: function () { return this.__items.get(); },
            set: function (newValue) { this.__items.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChangeMembersAction.prototype, "refreshInClient", {
            get: function () { return this.__refreshInClient.get(); },
            set: function (newValue) { this.__refreshInClient.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChangeMembersAction.prototype, "commit", {
            get: function () { return this.__commit.get(); },
            set: function (newValue) { this.__commit.set(newValue); },
            enumerable: true,
            configurable: true
        });
        ChangeMembersAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.commit = CommitEnum.No;
        };
        return ChangeMembersAction;
    }(MicroflowAction));
    ChangeMembersAction.typeName = "Microflows$ChangeMembersAction";
    ChangeMembersAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.ChangeMembersAction = ChangeMembersAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/change-object relevant section in reference guide}
     */
    var ChangeObjectAction = (function (_super) {
        __extends(ChangeObjectAction, _super);
        function ChangeObjectAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__changeVariableName = new internal.PrimitiveProperty(ChangeObjectAction, _this, "changeVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ChangeObjectAction() cannot be invoked directly, please use 'model.microflows.createChangeObjectAction()'");
            }
            return _this;
        }
        Object.defineProperty(ChangeObjectAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChangeObjectAction.prototype, "changeVariableName", {
            get: function () { return this.__changeVariableName.get(); },
            set: function (newValue) { this.__changeVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ChangeObjectAction instance in the SDK and on the server.
         * The new ChangeObjectAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        ChangeObjectAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ChangeObjectAction, "action", false);
        };
        /**
         * Creates and returns a new ChangeObjectAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ChangeObjectAction.create = function (model) {
            return internal.instancehelpers.createElement(model, ChangeObjectAction);
        };
        ChangeObjectAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ChangeObjectAction;
    }(ChangeMembersAction));
    ChangeObjectAction.typeName = "Microflows$ChangeObjectAction";
    ChangeObjectAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.ChangeObjectAction = ChangeObjectAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/change-variable relevant section in reference guide}
     */
    var ChangeVariableAction = (function (_super) {
        __extends(ChangeVariableAction, _super);
        function ChangeVariableAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__changeVariableName = new internal.PrimitiveProperty(ChangeVariableAction, _this, "changeVariableName", "", internal.PrimitiveTypeEnum.String);
            _this.__value = new internal.PrimitiveProperty(ChangeVariableAction, _this, "value", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ChangeVariableAction() cannot be invoked directly, please use 'model.microflows.createChangeVariableAction()'");
            }
            return _this;
        }
        Object.defineProperty(ChangeVariableAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChangeVariableAction.prototype, "changeVariableName", {
            get: function () { return this.__changeVariableName.get(); },
            set: function (newValue) { this.__changeVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChangeVariableAction.prototype, "value", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ChangeVariableAction instance in the SDK and on the server.
         * The new ChangeVariableAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        ChangeVariableAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ChangeVariableAction, "action", false);
        };
        /**
         * Creates and returns a new ChangeVariableAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ChangeVariableAction.create = function (model) {
            return internal.instancehelpers.createElement(model, ChangeVariableAction);
        };
        ChangeVariableAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ChangeVariableAction;
    }(MicroflowAction));
    ChangeVariableAction.typeName = "Microflows$ChangeVariableAction";
    ChangeVariableAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.ChangeVariableAction = ChangeVariableAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/close-form relevant section in reference guide}
     */
    var CloseFormAction = (function (_super) {
        __extends(CloseFormAction, _super);
        function CloseFormAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new CloseFormAction() cannot be invoked directly, please use 'model.microflows.createCloseFormAction()'");
            }
            return _this;
        }
        Object.defineProperty(CloseFormAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new CloseFormAction instance in the SDK and on the server.
         * The new CloseFormAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        CloseFormAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, CloseFormAction, "action", false);
        };
        /**
         * Creates and returns a new CloseFormAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CloseFormAction.create = function (model) {
            return internal.instancehelpers.createElement(model, CloseFormAction);
        };
        CloseFormAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return CloseFormAction;
    }(MicroflowAction));
    CloseFormAction.typeName = "Microflows$CloseFormAction";
    CloseFormAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.CloseFormAction = CloseFormAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/committing-objects relevant section in reference guide}
     */
    var CommitAction = (function (_super) {
        __extends(CommitAction, _super);
        function CommitAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__withEvents = new internal.PrimitiveProperty(CommitAction, _this, "withEvents", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__commitVariableName = new internal.PrimitiveProperty(CommitAction, _this, "commitVariableName", "", internal.PrimitiveTypeEnum.String);
            _this.__refreshInClient = new internal.PrimitiveProperty(CommitAction, _this, "refreshInClient", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new CommitAction() cannot be invoked directly, please use 'model.microflows.createCommitAction()'");
            }
            return _this;
        }
        Object.defineProperty(CommitAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitAction.prototype, "withEvents", {
            get: function () { return this.__withEvents.get(); },
            set: function (newValue) { this.__withEvents.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitAction.prototype, "commitVariableName", {
            get: function () { return this.__commitVariableName.get(); },
            set: function (newValue) { this.__commitVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CommitAction.prototype, "refreshInClient", {
            get: function () { return this.__refreshInClient.get(); },
            set: function (newValue) { this.__refreshInClient.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new CommitAction instance in the SDK and on the server.
         * The new CommitAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        CommitAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, CommitAction, "action", false);
        };
        /**
         * Creates and returns a new CommitAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CommitAction.create = function (model) {
            return internal.instancehelpers.createElement(model, CommitAction);
        };
        CommitAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.withEvents = true;
        };
        return CommitAction;
    }(MicroflowAction));
    CommitAction.typeName = "Microflows$CommitAction";
    CommitAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.CommitAction = CommitAction;
    /**
     * TODO: also described in ImporrtXmlAction and CallWebServiceAction
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var Range = (function (_super) {
        __extends(Range, _super);
        function Range(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new Range() cannot be invoked directly, please use 'model.microflows.createRange()'");
            }
            return _this;
        }
        Object.defineProperty(Range.prototype, "containerAsDatabaseRetrieveSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, DatabaseRetrieveSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "containerAsImportMappingCall", {
            get: function () { return _super.prototype.getContainerAs.call(this, ImportMappingCall); },
            enumerable: true,
            configurable: true
        });
        Range.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return Range;
    }(internal.Element));
    Range.typeName = "Microflows$Range";
    Range.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.Range = Range;
    /**
     * TODO: also described in ImporrtXmlAction and CallWebServiceAction
     */
    var ConstantRange = (function (_super) {
        __extends(ConstantRange, _super);
        function ConstantRange(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__singleObject = new internal.PrimitiveProperty(ConstantRange, _this, "singleObject", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new ConstantRange() cannot be invoked directly, please use 'model.microflows.createConstantRange()'");
            }
            return _this;
        }
        Object.defineProperty(ConstantRange.prototype, "containerAsDatabaseRetrieveSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, DatabaseRetrieveSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRange.prototype, "containerAsImportMappingCall", {
            get: function () { return _super.prototype.getContainerAs.call(this, ImportMappingCall); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantRange.prototype, "singleObject", {
            get: function () { return this.__singleObject.get(); },
            set: function (newValue) { this.__singleObject.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ConstantRange instance in the SDK and on the server.
         * The new ConstantRange will be automatically stored in the 'range' property
         * of the parent DatabaseRetrieveSource element passed as argument.
         */
        ConstantRange.createInDatabaseRetrieveSourceUnderRange = function (container) {
            return internal.instancehelpers.createElement(container, ConstantRange, "range", false);
        };
        /**
         * Creates and returns a new ConstantRange instance in the SDK and on the server.
         * The new ConstantRange will be automatically stored in the 'range' property
         * of the parent ImportMappingCall element passed as argument.
         */
        ConstantRange.createInImportMappingCallUnderRange = function (container) {
            return internal.instancehelpers.createElement(container, ConstantRange, "range", false);
        };
        /**
         * Creates and returns a new ConstantRange instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ConstantRange.create = function (model) {
            return internal.instancehelpers.createElement(model, ConstantRange);
        };
        ConstantRange.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ConstantRange;
    }(Range));
    ConstantRange.typeName = "Microflows$ConstantRange";
    ConstantRange.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.ConstantRange = ConstantRange;
    var Contains = (function (_super) {
        __extends(Contains, _super);
        function Contains(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new Contains() cannot be invoked directly, please use 'model.microflows.createContains()'");
            }
            return _this;
        }
        Object.defineProperty(Contains.prototype, "containerAsListOperationAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListOperationAction); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Contains instance in the SDK and on the server.
         * The new Contains will be automatically stored in the 'operation' property
         * of the parent ListOperationAction element passed as argument.
         */
        Contains.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Contains, "operation", false);
        };
        /**
         * Creates and returns a new Contains instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Contains.create = function (model) {
            return internal.instancehelpers.createElement(model, Contains);
        };
        Contains.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return Contains;
    }(BinaryListOperation));
    Contains.typeName = "Microflows$Contains";
    Contains.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.Contains = Contains;
    /**
     * See: {@link https://docs.mendix.com/refguide7/continue-event relevant section in reference guide}
     */
    var ContinueEvent = (function (_super) {
        __extends(ContinueEvent, _super);
        function ContinueEvent(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new ContinueEvent() cannot be invoked directly, please use 'model.microflows.createContinueEvent()'");
            }
            return _this;
        }
        Object.defineProperty(ContinueEvent.prototype, "containerAsMicroflowObjectCollection", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowObjectCollection); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ContinueEvent instance in the SDK and on the server.
         * The new ContinueEvent will be automatically stored in the 'objects' property
         * of the parent MicroflowObjectCollection element passed as argument.
         */
        ContinueEvent.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ContinueEvent, "objects", true);
        };
        /**
         * Creates and returns a new ContinueEvent instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ContinueEvent.create = function (model) {
            return internal.instancehelpers.createElement(model, ContinueEvent);
        };
        ContinueEvent.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.size = { width: 20, height: 20 };
        };
        return ContinueEvent;
    }(MicroflowObject));
    ContinueEvent.typeName = "Microflows$ContinueEvent";
    ContinueEvent.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.ContinueEvent = ContinueEvent;
    /**
     * See: {@link https://docs.mendix.com/refguide7/create-list relevant section in reference guide}
     */
    var CreateListAction = (function (_super) {
        __extends(CreateListAction, _super);
        function CreateListAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__entity = new internal.ByNameReferenceProperty(CreateListAction, _this, "entity", null, "DomainModels$Entity");
            _this.__outputVariableName = new internal.PrimitiveProperty(CreateListAction, _this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new CreateListAction() cannot be invoked directly, please use 'model.microflows.createCreateListAction()'");
            }
            return _this;
        }
        Object.defineProperty(CreateListAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CreateListAction.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CreateListAction.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CreateListAction.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new CreateListAction instance in the SDK and on the server.
         * The new CreateListAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        CreateListAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, CreateListAction, "action", false);
        };
        /**
         * Creates and returns a new CreateListAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CreateListAction.create = function (model) {
            return internal.instancehelpers.createElement(model, CreateListAction);
        };
        CreateListAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return CreateListAction;
    }(MicroflowAction));
    CreateListAction.typeName = "Microflows$CreateListAction";
    CreateListAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.CreateListAction = CreateListAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/create-object relevant section in reference guide}
     */
    var CreateObjectAction = (function (_super) {
        __extends(CreateObjectAction, _super);
        function CreateObjectAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__entity = new internal.ByNameReferenceProperty(CreateObjectAction, _this, "entity", null, "DomainModels$Entity");
            _this.__outputVariableName = new internal.PrimitiveProperty(CreateObjectAction, _this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new CreateObjectAction() cannot be invoked directly, please use 'model.microflows.createCreateObjectAction()'");
            }
            return _this;
        }
        Object.defineProperty(CreateObjectAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CreateObjectAction.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CreateObjectAction.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CreateObjectAction.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new CreateObjectAction instance in the SDK and on the server.
         * The new CreateObjectAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        CreateObjectAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, CreateObjectAction, "action", false);
        };
        /**
         * Creates and returns a new CreateObjectAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CreateObjectAction.create = function (model) {
            return internal.instancehelpers.createElement(model, CreateObjectAction);
        };
        CreateObjectAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return CreateObjectAction;
    }(ChangeMembersAction));
    CreateObjectAction.typeName = "Microflows$CreateObjectAction";
    CreateObjectAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.CreateObjectAction = CreateObjectAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/create-variable relevant section in reference guide}
     */
    var CreateVariableAction = (function (_super) {
        __extends(CreateVariableAction, _super);
        function CreateVariableAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__variableName = new internal.PrimitiveProperty(CreateVariableAction, _this, "variableName", "", internal.PrimitiveTypeEnum.String);
            _this.__variableDataType = new internal.PrimitiveProperty(CreateVariableAction, _this, "variableDataType", "", internal.PrimitiveTypeEnum.String);
            _this.__initialValue = new internal.PrimitiveProperty(CreateVariableAction, _this, "initialValue", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new CreateVariableAction() cannot be invoked directly, please use 'model.microflows.createCreateVariableAction()'");
            }
            return _this;
        }
        Object.defineProperty(CreateVariableAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CreateVariableAction.prototype, "variableName", {
            get: function () { return this.__variableName.get(); },
            set: function (newValue) { this.__variableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CreateVariableAction.prototype, "variableDataType", {
            /**
             * The value of this property is conceptually of type dataTypes.DataType.
             */
            get: function () { return this.__variableDataType.get(); },
            set: function (newValue) { this.__variableDataType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CreateVariableAction.prototype, "initialValue", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__initialValue.get(); },
            set: function (newValue) { this.__initialValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new CreateVariableAction instance in the SDK and on the server.
         * The new CreateVariableAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        CreateVariableAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, CreateVariableAction, "action", false);
        };
        /**
         * Creates and returns a new CreateVariableAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CreateVariableAction.create = function (model) {
            return internal.instancehelpers.createElement(model, CreateVariableAction);
        };
        CreateVariableAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.variableDataType = "Boolean";
        };
        return CreateVariableAction;
    }(MicroflowAction));
    CreateVariableAction.typeName = "Microflows$CreateVariableAction";
    CreateVariableAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.CreateVariableAction = CreateVariableAction;
    /**
     * TODO: also described in ImporrtXmlAction and CallWebServiceAction
     */
    var CustomRange = (function (_super) {
        __extends(CustomRange, _super);
        function CustomRange(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__limitExpression = new internal.PrimitiveProperty(CustomRange, _this, "limitExpression", "", internal.PrimitiveTypeEnum.String);
            _this.__offsetExpression = new internal.PrimitiveProperty(CustomRange, _this, "offsetExpression", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new CustomRange() cannot be invoked directly, please use 'model.microflows.createCustomRange()'");
            }
            return _this;
        }
        Object.defineProperty(CustomRange.prototype, "containerAsDatabaseRetrieveSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, DatabaseRetrieveSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomRange.prototype, "containerAsImportMappingCall", {
            get: function () { return _super.prototype.getContainerAs.call(this, ImportMappingCall); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomRange.prototype, "limitExpression", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__limitExpression.get(); },
            set: function (newValue) { this.__limitExpression.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomRange.prototype, "offsetExpression", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__offsetExpression.get(); },
            set: function (newValue) { this.__offsetExpression.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new CustomRange instance in the SDK and on the server.
         * The new CustomRange will be automatically stored in the 'range' property
         * of the parent DatabaseRetrieveSource element passed as argument.
         */
        CustomRange.createInDatabaseRetrieveSourceUnderRange = function (container) {
            return internal.instancehelpers.createElement(container, CustomRange, "range", false);
        };
        /**
         * Creates and returns a new CustomRange instance in the SDK and on the server.
         * The new CustomRange will be automatically stored in the 'range' property
         * of the parent ImportMappingCall element passed as argument.
         */
        CustomRange.createInImportMappingCallUnderRange = function (container) {
            return internal.instancehelpers.createElement(container, CustomRange, "range", false);
        };
        /**
         * Creates and returns a new CustomRange instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CustomRange.create = function (model) {
            return internal.instancehelpers.createElement(model, CustomRange);
        };
        CustomRange.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return CustomRange;
    }(Range));
    CustomRange.typeName = "Microflows$CustomRange";
    CustomRange.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.CustomRange = CustomRange;
    /**
     * TODO
     */
    var CustomRequestHandling = (function (_super) {
        __extends(CustomRequestHandling, _super);
        function CustomRequestHandling(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__template = new internal.PartProperty(CustomRequestHandling, _this, "template", null, true);
            if (arguments.length < 4) {
                throw new Error("new CustomRequestHandling() cannot be invoked directly, please use 'model.microflows.createCustomRequestHandling()'");
            }
            return _this;
        }
        Object.defineProperty(CustomRequestHandling.prototype, "containerAsRestCallAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, RestCallAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomRequestHandling.prototype, "containerAsWebServiceCallAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, WebServiceCallAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomRequestHandling.prototype, "template", {
            get: function () { return this.__template.get(); },
            set: function (newValue) { this.__template.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new CustomRequestHandling instance in the SDK and on the server.
         * The new CustomRequestHandling will be automatically stored in the 'requestHandling' property
         * of the parent RestCallAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        CustomRequestHandling.createInRestCallActionUnderRequestHandling = function (container) {
            internal.createInVersionCheck(container.model, CustomRequestHandling.typeName, ["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, CustomRequestHandling, "requestHandling", false);
        };
        /**
         * Creates and returns a new CustomRequestHandling instance in the SDK and on the server.
         * The new CustomRequestHandling will be automatically stored in the 'requestBodyHandling' property
         * of the parent WebServiceCallAction element passed as argument.
         */
        CustomRequestHandling.createInWebServiceCallActionUnderRequestBodyHandling = function (container) {
            return internal.instancehelpers.createElement(container, CustomRequestHandling, "requestBodyHandling", false);
        };
        /**
         * Creates and returns a new CustomRequestHandling instance in the SDK and on the server.
         * The new CustomRequestHandling will be automatically stored in the 'requestHeaderHandling' property
         * of the parent WebServiceCallAction element passed as argument.
         */
        CustomRequestHandling.createInWebServiceCallActionUnderRequestHeaderHandling = function (container) {
            return internal.instancehelpers.createElement(container, CustomRequestHandling, "requestHeaderHandling", false);
        };
        /**
         * Creates and returns a new CustomRequestHandling instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CustomRequestHandling.create = function (model) {
            return internal.instancehelpers.createElement(model, CustomRequestHandling);
        };
        CustomRequestHandling.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.template = StringTemplate.create(this.model);
        };
        return CustomRequestHandling;
    }(RequestHandling));
    CustomRequestHandling.typeName = "Microflows$CustomRequestHandling";
    CustomRequestHandling.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "template": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.CustomRequestHandling = CustomRequestHandling;
    /**
     * TODO
     */
    var DatabaseRetrieveSource = (function (_super) {
        __extends(DatabaseRetrieveSource, _super);
        function DatabaseRetrieveSource(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__entity = new internal.ByNameReferenceProperty(DatabaseRetrieveSource, _this, "entity", null, "DomainModels$Entity");
            _this.__range = new internal.PartProperty(DatabaseRetrieveSource, _this, "range", null, true);
            _this.__xPathConstraint = new internal.PrimitiveProperty(DatabaseRetrieveSource, _this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
            _this.__sortItemList = new internal.PartProperty(DatabaseRetrieveSource, _this, "sortItemList", null, true);
            if (arguments.length < 4) {
                throw new Error("new DatabaseRetrieveSource() cannot be invoked directly, please use 'model.microflows.createDatabaseRetrieveSource()'");
            }
            return _this;
        }
        Object.defineProperty(DatabaseRetrieveSource.prototype, "containerAsRetrieveAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, RetrieveAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatabaseRetrieveSource.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatabaseRetrieveSource.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatabaseRetrieveSource.prototype, "range", {
            get: function () { return this.__range.get(); },
            set: function (newValue) { this.__range.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatabaseRetrieveSource.prototype, "xPathConstraint", {
            /**
             * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
             */
            get: function () { return this.__xPathConstraint.get(); },
            set: function (newValue) { this.__xPathConstraint.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatabaseRetrieveSource.prototype, "sortItemList", {
            get: function () { return this.__sortItemList.get(); },
            set: function (newValue) { this.__sortItemList.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DatabaseRetrieveSource instance in the SDK and on the server.
         * The new DatabaseRetrieveSource will be automatically stored in the 'retrieveSource' property
         * of the parent RetrieveAction element passed as argument.
         */
        DatabaseRetrieveSource.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DatabaseRetrieveSource, "retrieveSource", false);
        };
        /**
         * Creates and returns a new DatabaseRetrieveSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DatabaseRetrieveSource.create = function (model) {
            return internal.instancehelpers.createElement(model, DatabaseRetrieveSource);
        };
        DatabaseRetrieveSource.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.range = ConstantRange.create(this.model);
            this.sortItemList = SortItemList.create(this.model);
        };
        return DatabaseRetrieveSource;
    }(RetrieveSource));
    DatabaseRetrieveSource.typeName = "Microflows$DatabaseRetrieveSource";
    DatabaseRetrieveSource.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "range": {
                "required": {
                    "currentValue": true
                }
            },
            "sortItemList": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.DatabaseRetrieveSource = DatabaseRetrieveSource;
    /**
     * See: {@link https://docs.mendix.com/refguide7/deleting-objects relevant section in reference guide}
     */
    var DeleteAction = (function (_super) {
        __extends(DeleteAction, _super);
        function DeleteAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__deleteVariableName = new internal.PrimitiveProperty(DeleteAction, _this, "deleteVariableName", "", internal.PrimitiveTypeEnum.String);
            _this.__refreshInClient = new internal.PrimitiveProperty(DeleteAction, _this, "refreshInClient", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new DeleteAction() cannot be invoked directly, please use 'model.microflows.createDeleteAction()'");
            }
            return _this;
        }
        Object.defineProperty(DeleteAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeleteAction.prototype, "deleteVariableName", {
            get: function () { return this.__deleteVariableName.get(); },
            set: function (newValue) { this.__deleteVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeleteAction.prototype, "refreshInClient", {
            get: function () { return this.__refreshInClient.get(); },
            set: function (newValue) { this.__refreshInClient.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DeleteAction instance in the SDK and on the server.
         * The new DeleteAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        DeleteAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DeleteAction, "action", false);
        };
        /**
         * Creates and returns a new DeleteAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DeleteAction.create = function (model) {
            return internal.instancehelpers.createElement(model, DeleteAction);
        };
        DeleteAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return DeleteAction;
    }(MicroflowAction));
    DeleteAction.typeName = "Microflows$DeleteAction";
    DeleteAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.DeleteAction = DeleteAction;
    var DocumentTemplateParameterMapping = (function (_super) {
        __extends(DocumentTemplateParameterMapping, _super);
        function DocumentTemplateParameterMapping(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__widgetName = new internal.PrimitiveProperty(DocumentTemplateParameterMapping, _this, "widgetName", "", internal.PrimitiveTypeEnum.String);
            _this.__argument = new internal.PrimitiveProperty(DocumentTemplateParameterMapping, _this, "argument", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new DocumentTemplateParameterMapping() cannot be invoked directly, please use 'model.microflows.createDocumentTemplateParameterMapping()'");
            }
            return _this;
        }
        Object.defineProperty(DocumentTemplateParameterMapping.prototype, "containerAsGenerateDocumentAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, GenerateDocumentAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentTemplateParameterMapping.prototype, "widgetName", {
            get: function () { return this.__widgetName.get(); },
            set: function (newValue) { this.__widgetName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentTemplateParameterMapping.prototype, "argument", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__argument.get(); },
            set: function (newValue) { this.__argument.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DocumentTemplateParameterMapping instance in the SDK and on the server.
         * The new DocumentTemplateParameterMapping will be automatically stored in the 'parameterMappings' property
         * of the parent GenerateDocumentAction element passed as argument.
         */
        DocumentTemplateParameterMapping.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DocumentTemplateParameterMapping, "parameterMappings", true);
        };
        /**
         * Creates and returns a new DocumentTemplateParameterMapping instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DocumentTemplateParameterMapping.create = function (model) {
            return internal.instancehelpers.createElement(model, DocumentTemplateParameterMapping);
        };
        DocumentTemplateParameterMapping.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return DocumentTemplateParameterMapping;
    }(internal.Element));
    DocumentTemplateParameterMapping.typeName = "Microflows$DocumentTemplateParameterMapping";
    DocumentTemplateParameterMapping.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.DocumentTemplateParameterMapping = DocumentTemplateParameterMapping;
    /**
     * See: {@link https://docs.mendix.com/refguide7/download-file relevant section in reference guide}
     */
    var DownloadFileAction = (function (_super) {
        __extends(DownloadFileAction, _super);
        function DownloadFileAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__fileDocumentVariableName = new internal.PrimitiveProperty(DownloadFileAction, _this, "fileDocumentVariableName", "", internal.PrimitiveTypeEnum.String);
            _this.__showFileInBrowser = new internal.PrimitiveProperty(DownloadFileAction, _this, "showFileInBrowser", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new DownloadFileAction() cannot be invoked directly, please use 'model.microflows.createDownloadFileAction()'");
            }
            return _this;
        }
        Object.defineProperty(DownloadFileAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DownloadFileAction.prototype, "fileDocumentVariableName", {
            get: function () { return this.__fileDocumentVariableName.get(); },
            set: function (newValue) { this.__fileDocumentVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DownloadFileAction.prototype, "showFileInBrowser", {
            get: function () { return this.__showFileInBrowser.get(); },
            set: function (newValue) { this.__showFileInBrowser.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new DownloadFileAction instance in the SDK and on the server.
         * The new DownloadFileAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        DownloadFileAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, DownloadFileAction, "action", false);
        };
        /**
         * Creates and returns a new DownloadFileAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        DownloadFileAction.create = function (model) {
            return internal.instancehelpers.createElement(model, DownloadFileAction);
        };
        DownloadFileAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return DownloadFileAction;
    }(MicroflowAction));
    DownloadFileAction.typeName = "Microflows$DownloadFileAction";
    DownloadFileAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.DownloadFileAction = DownloadFileAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/end-event relevant section in reference guide}
     */
    var EndEvent = (function (_super) {
        __extends(EndEvent, _super);
        function EndEvent(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__returnValue = new internal.PrimitiveProperty(EndEvent, _this, "returnValue", "", internal.PrimitiveTypeEnum.String);
            _this.__documentation = new internal.PrimitiveProperty(EndEvent, _this, "documentation", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new EndEvent() cannot be invoked directly, please use 'model.microflows.createEndEvent()'");
            }
            return _this;
        }
        Object.defineProperty(EndEvent.prototype, "containerAsMicroflowObjectCollection", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowObjectCollection); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EndEvent.prototype, "returnValue", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__returnValue.get(); },
            set: function (newValue) { this.__returnValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EndEvent.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new EndEvent instance in the SDK and on the server.
         * The new EndEvent will be automatically stored in the 'objects' property
         * of the parent MicroflowObjectCollection element passed as argument.
         */
        EndEvent.createIn = function (container) {
            return internal.instancehelpers.createElement(container, EndEvent, "objects", true);
        };
        /**
         * Creates and returns a new EndEvent instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        EndEvent.create = function (model) {
            return internal.instancehelpers.createElement(model, EndEvent);
        };
        EndEvent.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.size = { width: 20, height: 20 };
        };
        return EndEvent;
    }(MicroflowObject));
    EndEvent.typeName = "Microflows$EndEvent";
    EndEvent.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.EndEvent = EndEvent;
    /**
     * In version 6.8.0: introduced
     */
    var EntityTypeJavaActionParameterValue = (function (_super) {
        __extends(EntityTypeJavaActionParameterValue, _super);
        function EntityTypeJavaActionParameterValue(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__entity = new internal.ByNameReferenceProperty(EntityTypeJavaActionParameterValue, _this, "entity", null, "DomainModels$Entity");
            if (arguments.length < 4) {
                throw new Error("new EntityTypeJavaActionParameterValue() cannot be invoked directly, please use 'model.microflows.createEntityTypeJavaActionParameterValue()'");
            }
            return _this;
        }
        Object.defineProperty(EntityTypeJavaActionParameterValue.prototype, "containerAsJavaActionParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityTypeJavaActionParameterValue.prototype, "entity", {
            get: function () { return this.__entity.get(); },
            set: function (newValue) { this.__entity.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityTypeJavaActionParameterValue.prototype, "entityQualifiedName", {
            get: function () { return this.__entity.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new EntityTypeJavaActionParameterValue instance in the SDK and on the server.
         * The new EntityTypeJavaActionParameterValue will be automatically stored in the 'value' property
         * of the parent JavaActionParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        EntityTypeJavaActionParameterValue.createIn = function (container) {
            internal.createInVersionCheck(container.model, EntityTypeJavaActionParameterValue.typeName, ["6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, EntityTypeJavaActionParameterValue, "value", false);
        };
        /**
         * Creates and returns a new EntityTypeJavaActionParameterValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        EntityTypeJavaActionParameterValue.create = function (model) {
            return internal.instancehelpers.createElement(model, EntityTypeJavaActionParameterValue);
        };
        EntityTypeJavaActionParameterValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return EntityTypeJavaActionParameterValue;
    }(JavaActionParameterValue));
    EntityTypeJavaActionParameterValue.typeName = "Microflows$EntityTypeJavaActionParameterValue";
    EntityTypeJavaActionParameterValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "6.8.0"
    }, internal.StructureType.Element);
    microflows.EntityTypeJavaActionParameterValue = EntityTypeJavaActionParameterValue;
    /**
     * TODO
     */
    var EnumerationCase = (function (_super) {
        __extends(EnumerationCase, _super);
        function EnumerationCase(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__value = new internal.PrimitiveProperty(EnumerationCase, _this, "value", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new EnumerationCase() cannot be invoked directly, please use 'model.microflows.createEnumerationCase()'");
            }
            return _this;
        }
        Object.defineProperty(EnumerationCase.prototype, "containerAsSequenceFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, SequenceFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnumerationCase.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new EnumerationCase instance in the SDK and on the server.
         * The new EnumerationCase will be automatically stored in the 'caseValue' property
         * of the parent SequenceFlow element passed as argument.
         */
        EnumerationCase.createIn = function (container) {
            return internal.instancehelpers.createElement(container, EnumerationCase, "caseValue", false);
        };
        /**
         * Creates and returns a new EnumerationCase instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        EnumerationCase.create = function (model) {
            return internal.instancehelpers.createElement(model, EnumerationCase);
        };
        EnumerationCase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return EnumerationCase;
    }(CaseValue));
    EnumerationCase.typeName = "Microflows$EnumerationCase";
    EnumerationCase.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.EnumerationCase = EnumerationCase;
    /**
     * See: {@link https://docs.mendix.com/refguide7/error-event relevant section in reference guide}
     */
    var ErrorEvent = (function (_super) {
        __extends(ErrorEvent, _super);
        function ErrorEvent(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new ErrorEvent() cannot be invoked directly, please use 'model.microflows.createErrorEvent()'");
            }
            return _this;
        }
        Object.defineProperty(ErrorEvent.prototype, "containerAsMicroflowObjectCollection", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowObjectCollection); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ErrorEvent instance in the SDK and on the server.
         * The new ErrorEvent will be automatically stored in the 'objects' property
         * of the parent MicroflowObjectCollection element passed as argument.
         */
        ErrorEvent.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ErrorEvent, "objects", true);
        };
        /**
         * Creates and returns a new ErrorEvent instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ErrorEvent.create = function (model) {
            return internal.instancehelpers.createElement(model, ErrorEvent);
        };
        ErrorEvent.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.size = { width: 20, height: 20 };
        };
        return ErrorEvent;
    }(MicroflowObject));
    ErrorEvent.typeName = "Microflows$ErrorEvent";
    ErrorEvent.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.ErrorEvent = ErrorEvent;
    /**
     * See: {@link https://docs.mendix.com/refguide7/merge relevant section in reference guide}
     */
    var ExclusiveMerge = (function (_super) {
        __extends(ExclusiveMerge, _super);
        function ExclusiveMerge(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new ExclusiveMerge() cannot be invoked directly, please use 'model.microflows.createExclusiveMerge()'");
            }
            return _this;
        }
        Object.defineProperty(ExclusiveMerge.prototype, "containerAsMicroflowObjectCollection", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowObjectCollection); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ExclusiveMerge instance in the SDK and on the server.
         * The new ExclusiveMerge will be automatically stored in the 'objects' property
         * of the parent MicroflowObjectCollection element passed as argument.
         */
        ExclusiveMerge.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ExclusiveMerge, "objects", true);
        };
        /**
         * Creates and returns a new ExclusiveMerge instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ExclusiveMerge.create = function (model) {
            return internal.instancehelpers.createElement(model, ExclusiveMerge);
        };
        ExclusiveMerge.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.size = { width: 60, height: 40 };
        };
        return ExclusiveMerge;
    }(MicroflowObject));
    ExclusiveMerge.typeName = "Microflows$ExclusiveMerge";
    ExclusiveMerge.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.ExclusiveMerge = ExclusiveMerge;
    /**
     * See: {@link https://docs.mendix.com/refguide7/exclusive-split relevant section in reference guide}
     */
    var ExclusiveSplit = (function (_super) {
        __extends(ExclusiveSplit, _super);
        function ExclusiveSplit(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__splitCondition = new internal.PartProperty(ExclusiveSplit, _this, "splitCondition", null, true);
            _this.__caption = new internal.PrimitiveProperty(ExclusiveSplit, _this, "caption", "", internal.PrimitiveTypeEnum.String);
            _this.__errorHandlingType = new internal.EnumProperty(ExclusiveSplit, _this, "errorHandlingType", ErrorHandlingType.Rollback, ErrorHandlingType);
            _this.__documentation = new internal.PrimitiveProperty(ExclusiveSplit, _this, "documentation", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ExclusiveSplit() cannot be invoked directly, please use 'model.microflows.createExclusiveSplit()'");
            }
            return _this;
        }
        Object.defineProperty(ExclusiveSplit.prototype, "containerAsMicroflowObjectCollection", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowObjectCollection); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExclusiveSplit.prototype, "splitCondition", {
            get: function () { return this.__splitCondition.get(); },
            set: function (newValue) { this.__splitCondition.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExclusiveSplit.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExclusiveSplit.prototype, "errorHandlingType", {
            get: function () { return this.__errorHandlingType.get(); },
            set: function (newValue) { this.__errorHandlingType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExclusiveSplit.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ExclusiveSplit instance in the SDK and on the server.
         * The new ExclusiveSplit will be automatically stored in the 'objects' property
         * of the parent MicroflowObjectCollection element passed as argument.
         */
        ExclusiveSplit.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ExclusiveSplit, "objects", true);
        };
        /**
         * Creates and returns a new ExclusiveSplit instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ExclusiveSplit.create = function (model) {
            return internal.instancehelpers.createElement(model, ExclusiveSplit);
        };
        ExclusiveSplit.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.errorHandlingType = ErrorHandlingType.Rollback;
            this.size = { width: 60, height: 40 };
            this.splitCondition = ExpressionSplitCondition.create(this.model);
        };
        return ExclusiveSplit;
    }(MicroflowObject));
    ExclusiveSplit.typeName = "Microflows$ExclusiveSplit";
    ExclusiveSplit.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "splitCondition": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.ExclusiveSplit = ExclusiveSplit;
    /**
     * See: {@link https://docs.mendix.com/refguide7/export-mapping-action relevant section in reference guide}
     */
    var ExportXmlAction = (function (_super) {
        __extends(ExportXmlAction, _super);
        function ExportXmlAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__mapping = new internal.ByNameReferenceProperty(ExportXmlAction, _this, "mapping", null, "ExportMappings$ExportMapping");
            _this.__mappingArgumentVariableName = new internal.PrimitiveProperty(ExportXmlAction, _this, "mappingArgumentVariableName", "", internal.PrimitiveTypeEnum.String);
            _this.__outputMethod = new internal.PartProperty(ExportXmlAction, _this, "outputMethod", null, true);
            _this.__isValidationRequired = new internal.PrimitiveProperty(ExportXmlAction, _this, "isValidationRequired", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new ExportXmlAction() cannot be invoked directly, please use 'model.microflows.createExportXmlAction()'");
            }
            return _this;
        }
        Object.defineProperty(ExportXmlAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExportXmlAction.prototype, "mapping", {
            get: function () { return this.__mapping.get(); },
            set: function (newValue) { this.__mapping.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExportXmlAction.prototype, "mappingQualifiedName", {
            get: function () { return this.__mapping.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExportXmlAction.prototype, "mappingArgumentVariableName", {
            get: function () { return this.__mappingArgumentVariableName.get(); },
            set: function (newValue) { this.__mappingArgumentVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExportXmlAction.prototype, "outputMethod", {
            get: function () { return this.__outputMethod.get(); },
            set: function (newValue) { this.__outputMethod.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExportXmlAction.prototype, "isValidationRequired", {
            get: function () { return this.__isValidationRequired.get(); },
            set: function (newValue) { this.__isValidationRequired.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ExportXmlAction instance in the SDK and on the server.
         * The new ExportXmlAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        ExportXmlAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ExportXmlAction, "action", false);
        };
        /**
         * Creates and returns a new ExportXmlAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ExportXmlAction.create = function (model) {
            return internal.instancehelpers.createElement(model, ExportXmlAction);
        };
        ExportXmlAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.outputMethod = FileDocumentExport.create(this.model);
        };
        return ExportXmlAction;
    }(MicroflowAction));
    ExportXmlAction.typeName = "Microflows$ExportXmlAction";
    ExportXmlAction.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "outputMethod": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.ExportXmlAction = ExportXmlAction;
    /**
     * TODO : Abstract
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var SplitCondition = (function (_super) {
        __extends(SplitCondition, _super);
        function SplitCondition(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new SplitCondition() cannot be invoked directly, please use 'model.microflows.createSplitCondition()'");
            }
            return _this;
        }
        Object.defineProperty(SplitCondition.prototype, "containerAsExclusiveSplit", {
            get: function () { return _super.prototype.getContainerAs.call(this, ExclusiveSplit); },
            enumerable: true,
            configurable: true
        });
        SplitCondition.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return SplitCondition;
    }(internal.Element));
    SplitCondition.typeName = "Microflows$SplitCondition";
    SplitCondition.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.SplitCondition = SplitCondition;
    var ExpressionSplitCondition = (function (_super) {
        __extends(ExpressionSplitCondition, _super);
        function ExpressionSplitCondition(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__expression = new internal.PrimitiveProperty(ExpressionSplitCondition, _this, "expression", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ExpressionSplitCondition() cannot be invoked directly, please use 'model.microflows.createExpressionSplitCondition()'");
            }
            return _this;
        }
        Object.defineProperty(ExpressionSplitCondition.prototype, "containerAsExclusiveSplit", {
            get: function () { return _super.prototype.getContainerAs.call(this, ExclusiveSplit); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExpressionSplitCondition.prototype, "expression", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__expression.get(); },
            set: function (newValue) { this.__expression.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ExpressionSplitCondition instance in the SDK and on the server.
         * The new ExpressionSplitCondition will be automatically stored in the 'splitCondition' property
         * of the parent ExclusiveSplit element passed as argument.
         */
        ExpressionSplitCondition.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ExpressionSplitCondition, "splitCondition", false);
        };
        /**
         * Creates and returns a new ExpressionSplitCondition instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ExpressionSplitCondition.create = function (model) {
            return internal.instancehelpers.createElement(model, ExpressionSplitCondition);
        };
        ExpressionSplitCondition.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ExpressionSplitCondition;
    }(SplitCondition));
    ExpressionSplitCondition.typeName = "Microflows$ExpressionSplitCondition";
    ExpressionSplitCondition.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.ExpressionSplitCondition = ExpressionSplitCondition;
    /**
     * TODO
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var OutputMethod = (function (_super) {
        __extends(OutputMethod, _super);
        function OutputMethod(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new OutputMethod() cannot be invoked directly, please use 'model.microflows.createOutputMethod()'");
            }
            return _this;
        }
        Object.defineProperty(OutputMethod.prototype, "containerAsExportXmlAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ExportXmlAction); },
            enumerable: true,
            configurable: true
        });
        OutputMethod.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return OutputMethod;
    }(internal.Element));
    OutputMethod.typeName = "Microflows$OutputMethod";
    OutputMethod.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.OutputMethod = OutputMethod;
    /**
     * TODO
     */
    var FileDocumentExport = (function (_super) {
        __extends(FileDocumentExport, _super);
        function FileDocumentExport(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__targetDocumentVariableName = new internal.PrimitiveProperty(FileDocumentExport, _this, "targetDocumentVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new FileDocumentExport() cannot be invoked directly, please use 'model.microflows.createFileDocumentExport()'");
            }
            return _this;
        }
        Object.defineProperty(FileDocumentExport.prototype, "containerAsExportXmlAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ExportXmlAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileDocumentExport.prototype, "targetDocumentVariableName", {
            get: function () { return this.__targetDocumentVariableName.get(); },
            set: function (newValue) { this.__targetDocumentVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new FileDocumentExport instance in the SDK and on the server.
         * The new FileDocumentExport will be automatically stored in the 'outputMethod' property
         * of the parent ExportXmlAction element passed as argument.
         */
        FileDocumentExport.createIn = function (container) {
            return internal.instancehelpers.createElement(container, FileDocumentExport, "outputMethod", false);
        };
        /**
         * Creates and returns a new FileDocumentExport instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        FileDocumentExport.create = function (model) {
            return internal.instancehelpers.createElement(model, FileDocumentExport);
        };
        FileDocumentExport.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return FileDocumentExport;
    }(OutputMethod));
    FileDocumentExport.typeName = "Microflows$FileDocumentExport";
    FileDocumentExport.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.FileDocumentExport = FileDocumentExport;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var InspectAttribute = (function (_super) {
        __extends(InspectAttribute, _super);
        function InspectAttribute(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__expression = new internal.PrimitiveProperty(InspectAttribute, _this, "expression", "", internal.PrimitiveTypeEnum.String);
            _this.__attribute = new internal.ByNameReferenceProperty(InspectAttribute, _this, "attribute", null, "DomainModels$Attribute");
            _this.__association = new internal.ByNameReferenceProperty(InspectAttribute, _this, "association", null, "DomainModels$AssociationBase");
            if (arguments.length < 4) {
                throw new Error("new InspectAttribute() cannot be invoked directly, please use 'model.microflows.createInspectAttribute()'");
            }
            return _this;
        }
        Object.defineProperty(InspectAttribute.prototype, "containerAsListOperationAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListOperationAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InspectAttribute.prototype, "expression", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__expression.get(); },
            set: function (newValue) { this.__expression.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InspectAttribute.prototype, "attribute", {
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InspectAttribute.prototype, "attributeQualifiedName", {
            get: function () { return this.__attribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InspectAttribute.prototype, "association", {
            /**
             * In version 7.0.0: introduced
             */
            get: function () { return this.__association.get(); },
            set: function (newValue) { this.__association.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InspectAttribute.prototype, "associationQualifiedName", {
            get: function () { return this.__association.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        InspectAttribute.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return InspectAttribute;
    }(ListOperation));
    InspectAttribute.typeName = "Microflows$InspectAttribute";
    InspectAttribute.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "association": {
                "introduced": "7.0.0"
            }
        }
    }, internal.StructureType.Element);
    microflows.InspectAttribute = InspectAttribute;
    var Filter = (function (_super) {
        __extends(Filter, _super);
        function Filter(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new Filter() cannot be invoked directly, please use 'model.microflows.createFilter()'");
            }
            return _this;
        }
        Object.defineProperty(Filter.prototype, "containerAsListOperationAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListOperationAction); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Filter instance in the SDK and on the server.
         * The new Filter will be automatically stored in the 'operation' property
         * of the parent ListOperationAction element passed as argument.
         */
        Filter.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Filter, "operation", false);
        };
        /**
         * Creates and returns a new Filter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Filter.create = function (model) {
            return internal.instancehelpers.createElement(model, Filter);
        };
        Filter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return Filter;
    }(InspectAttribute));
    Filter.typeName = "Microflows$Filter";
    Filter.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.Filter = Filter;
    var Find = (function (_super) {
        __extends(Find, _super);
        function Find(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new Find() cannot be invoked directly, please use 'model.microflows.createFind()'");
            }
            return _this;
        }
        Object.defineProperty(Find.prototype, "containerAsListOperationAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListOperationAction); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Find instance in the SDK and on the server.
         * The new Find will be automatically stored in the 'operation' property
         * of the parent ListOperationAction element passed as argument.
         */
        Find.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Find, "operation", false);
        };
        /**
         * Creates and returns a new Find instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Find.create = function (model) {
            return internal.instancehelpers.createElement(model, Find);
        };
        Find.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return Find;
    }(InspectAttribute));
    Find.typeName = "Microflows$Find";
    Find.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.Find = Find;
    /**
     * See: {@link https://docs.mendix.com/refguide7/generate-document relevant section in reference guide}
     */
    var GenerateDocumentAction = (function (_super) {
        __extends(GenerateDocumentAction, _super);
        function GenerateDocumentAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__parameterMappings = new internal.PartListProperty(GenerateDocumentAction, _this, "parameterMappings", []);
            _this.__fileVariableName = new internal.PrimitiveProperty(GenerateDocumentAction, _this, "fileVariableName", "", internal.PrimitiveTypeEnum.String);
            _this.__languageVariableName = new internal.PrimitiveProperty(GenerateDocumentAction, _this, "languageVariableName", "", internal.PrimitiveTypeEnum.String);
            _this.__documentType = new internal.EnumProperty(GenerateDocumentAction, _this, "documentType", TargetDocumentType.HTML, TargetDocumentType);
            _this.__languageSetting = new internal.EnumProperty(GenerateDocumentAction, _this, "languageSetting", LanguageSettingType.CurrentUser, LanguageSettingType);
            _this.__documentTemplate = new internal.ByNameReferenceProperty(GenerateDocumentAction, _this, "documentTemplate", null, "DocumentTemplates$DocumentTemplate");
            _this.__overrideTopMargin = new internal.PrimitiveProperty(GenerateDocumentAction, _this, "overrideTopMargin", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__overrideBottomMargin = new internal.PrimitiveProperty(GenerateDocumentAction, _this, "overrideBottomMargin", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__overrideLeftMargin = new internal.PrimitiveProperty(GenerateDocumentAction, _this, "overrideLeftMargin", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__overrideRightMargin = new internal.PrimitiveProperty(GenerateDocumentAction, _this, "overrideRightMargin", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__marginLeftInInch = new internal.PrimitiveProperty(GenerateDocumentAction, _this, "marginLeftInInch", "", internal.PrimitiveTypeEnum.String);
            _this.__marginRightInInch = new internal.PrimitiveProperty(GenerateDocumentAction, _this, "marginRightInInch", "", internal.PrimitiveTypeEnum.String);
            _this.__marginTopInInch = new internal.PrimitiveProperty(GenerateDocumentAction, _this, "marginTopInInch", "", internal.PrimitiveTypeEnum.String);
            _this.__marginBottomInInch = new internal.PrimitiveProperty(GenerateDocumentAction, _this, "marginBottomInInch", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new GenerateDocumentAction() cannot be invoked directly, please use 'model.microflows.createGenerateDocumentAction()'");
            }
            return _this;
        }
        Object.defineProperty(GenerateDocumentAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "parameterMappings", {
            get: function () { return this.__parameterMappings.get(); },
            set: function (newValue) { this.__parameterMappings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "fileVariableName", {
            get: function () { return this.__fileVariableName.get(); },
            set: function (newValue) { this.__fileVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "languageVariableName", {
            get: function () { return this.__languageVariableName.get(); },
            set: function (newValue) { this.__languageVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "documentType", {
            get: function () { return this.__documentType.get(); },
            set: function (newValue) { this.__documentType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "languageSetting", {
            get: function () { return this.__languageSetting.get(); },
            set: function (newValue) { this.__languageSetting.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "documentTemplate", {
            get: function () { return this.__documentTemplate.get(); },
            set: function (newValue) { this.__documentTemplate.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "documentTemplateQualifiedName", {
            get: function () { return this.__documentTemplate.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "overrideTopMargin", {
            get: function () { return this.__overrideTopMargin.get(); },
            set: function (newValue) { this.__overrideTopMargin.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "overrideBottomMargin", {
            get: function () { return this.__overrideBottomMargin.get(); },
            set: function (newValue) { this.__overrideBottomMargin.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "overrideLeftMargin", {
            get: function () { return this.__overrideLeftMargin.get(); },
            set: function (newValue) { this.__overrideLeftMargin.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "overrideRightMargin", {
            get: function () { return this.__overrideRightMargin.get(); },
            set: function (newValue) { this.__overrideRightMargin.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "marginLeftInInch", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__marginLeftInInch.get(); },
            set: function (newValue) { this.__marginLeftInInch.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "marginRightInInch", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__marginRightInInch.get(); },
            set: function (newValue) { this.__marginRightInInch.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "marginTopInInch", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__marginTopInInch.get(); },
            set: function (newValue) { this.__marginTopInInch.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenerateDocumentAction.prototype, "marginBottomInInch", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__marginBottomInInch.get(); },
            set: function (newValue) { this.__marginBottomInInch.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new GenerateDocumentAction instance in the SDK and on the server.
         * The new GenerateDocumentAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        GenerateDocumentAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, GenerateDocumentAction, "action", false);
        };
        /**
         * Creates and returns a new GenerateDocumentAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        GenerateDocumentAction.create = function (model) {
            return internal.instancehelpers.createElement(model, GenerateDocumentAction);
        };
        GenerateDocumentAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.documentType = TargetDocumentType.HTML;
            this.languageSetting = LanguageSettingType.CurrentUser;
            this.marginBottomInInch = "0";
            this.marginLeftInInch = "0";
            this.marginRightInInch = "0";
            this.marginTopInInch = "0";
        };
        return GenerateDocumentAction;
    }(MicroflowAction));
    GenerateDocumentAction.typeName = "Microflows$GenerateDocumentAction";
    GenerateDocumentAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.GenerateDocumentAction = GenerateDocumentAction;
    var Head = (function (_super) {
        __extends(Head, _super);
        function Head(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new Head() cannot be invoked directly, please use 'model.microflows.createHead()'");
            }
            return _this;
        }
        Object.defineProperty(Head.prototype, "containerAsListOperationAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListOperationAction); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Head instance in the SDK and on the server.
         * The new Head will be automatically stored in the 'operation' property
         * of the parent ListOperationAction element passed as argument.
         */
        Head.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Head, "operation", false);
        };
        /**
         * Creates and returns a new Head instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Head.create = function (model) {
            return internal.instancehelpers.createElement(model, Head);
        };
        Head.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return Head;
    }(ListOperation));
    Head.typeName = "Microflows$Head";
    Head.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.Head = Head;
    var HttpConfiguration = (function (_super) {
        __extends(HttpConfiguration, _super);
        function HttpConfiguration(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__overrideLocation = new internal.PrimitiveProperty(HttpConfiguration, _this, "overrideLocation", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__customLocation = new internal.PrimitiveProperty(HttpConfiguration, _this, "customLocation", "", internal.PrimitiveTypeEnum.String);
            _this.__customLocationTemplate = new internal.PartProperty(HttpConfiguration, _this, "customLocationTemplate", null, false);
            _this.__useAuthentication = new internal.PrimitiveProperty(HttpConfiguration, _this, "useAuthentication", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__httpAuthenticationUserName = new internal.PrimitiveProperty(HttpConfiguration, _this, "httpAuthenticationUserName", "", internal.PrimitiveTypeEnum.String);
            _this.__authenticationPassword = new internal.PrimitiveProperty(HttpConfiguration, _this, "authenticationPassword", "", internal.PrimitiveTypeEnum.String);
            _this.__headerEntries = new internal.PartListProperty(HttpConfiguration, _this, "headerEntries", []);
            _this.__httpMethod = new internal.EnumProperty(HttpConfiguration, _this, "httpMethod", HttpMethod.Post, HttpMethod);
            if (arguments.length < 4) {
                throw new Error("new HttpConfiguration() cannot be invoked directly, please use 'model.microflows.createHttpConfiguration()'");
            }
            return _this;
        }
        Object.defineProperty(HttpConfiguration.prototype, "containerAsRestCallAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, RestCallAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpConfiguration.prototype, "containerAsWebServiceCallAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, WebServiceCallAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpConfiguration.prototype, "overrideLocation", {
            get: function () { return this.__overrideLocation.get(); },
            set: function (newValue) { this.__overrideLocation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpConfiguration.prototype, "customLocation", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__customLocation.get(); },
            set: function (newValue) { this.__customLocation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpConfiguration.prototype, "customLocationTemplate", {
            /**
             * In version 6.6.0: introduced
             */
            get: function () { return this.__customLocationTemplate.get(); },
            set: function (newValue) { this.__customLocationTemplate.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpConfiguration.prototype, "useAuthentication", {
            get: function () { return this.__useAuthentication.get(); },
            set: function (newValue) { this.__useAuthentication.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpConfiguration.prototype, "httpAuthenticationUserName", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__httpAuthenticationUserName.get(); },
            set: function (newValue) { this.__httpAuthenticationUserName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpConfiguration.prototype, "authenticationPassword", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__authenticationPassword.get(); },
            set: function (newValue) { this.__authenticationPassword.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpConfiguration.prototype, "headerEntries", {
            get: function () { return this.__headerEntries.get(); },
            set: function (newValue) { this.__headerEntries.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpConfiguration.prototype, "httpMethod", {
            /**
             * In version 6.6.0: introduced
             */
            get: function () { return this.__httpMethod.get(); },
            set: function (newValue) { this.__httpMethod.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new HttpConfiguration instance in the SDK and on the server.
         * The new HttpConfiguration will be automatically stored in the 'httpConfiguration' property
         * of the parent WebServiceCallAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0
         */
        HttpConfiguration.createIn = function (container) {
            internal.createInVersionCheck(container.model, HttpConfiguration.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0"]);
            return internal.instancehelpers.createElement(container, HttpConfiguration, "httpConfiguration", false);
        };
        /**
         * Creates and returns a new HttpConfiguration instance in the SDK and on the server.
         * The new HttpConfiguration will be automatically stored in the 'httpConfiguration' property
         * of the parent RestCallAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        HttpConfiguration.createInRestCallActionUnderHttpConfiguration = function (container) {
            internal.createInVersionCheck(container.model, HttpConfiguration.typeName, ["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, HttpConfiguration, "httpConfiguration", false);
        };
        /**
         * Creates and returns a new HttpConfiguration instance in the SDK and on the server.
         * The new HttpConfiguration will be automatically stored in the 'httpConfiguration' property
         * of the parent WebServiceCallAction element passed as argument.
         */
        HttpConfiguration.createInWebServiceCallActionUnderHttpConfiguration = function (container) {
            return internal.instancehelpers.createElement(container, HttpConfiguration, "httpConfiguration", false);
        };
        /**
         * Creates and returns a new HttpConfiguration instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        HttpConfiguration.create = function (model) {
            return internal.instancehelpers.createElement(model, HttpConfiguration);
        };
        HttpConfiguration.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            if (this.__httpMethod.isAvailable) {
                this.httpMethod = HttpMethod.Post;
            }
        };
        return HttpConfiguration;
    }(internal.Element));
    HttpConfiguration.typeName = "Microflows$HttpConfiguration";
    HttpConfiguration.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "customLocationTemplate": {
                "introduced": "6.6.0"
            },
            "httpMethod": {
                "introduced": "6.6.0"
            }
        }
    }, internal.StructureType.Element);
    microflows.HttpConfiguration = HttpConfiguration;
    /**
     * TODO
     */
    var HttpHeaderEntry = (function (_super) {
        __extends(HttpHeaderEntry, _super);
        function HttpHeaderEntry(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__key = new internal.PrimitiveProperty(HttpHeaderEntry, _this, "key", "", internal.PrimitiveTypeEnum.String);
            _this.__value = new internal.PrimitiveProperty(HttpHeaderEntry, _this, "value", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new HttpHeaderEntry() cannot be invoked directly, please use 'model.microflows.createHttpHeaderEntry()'");
            }
            return _this;
        }
        Object.defineProperty(HttpHeaderEntry.prototype, "containerAsHttpConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, HttpConfiguration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpHeaderEntry.prototype, "key", {
            get: function () { return this.__key.get(); },
            set: function (newValue) { this.__key.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpHeaderEntry.prototype, "value", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new HttpHeaderEntry instance in the SDK and on the server.
         * The new HttpHeaderEntry will be automatically stored in the 'headerEntries' property
         * of the parent HttpConfiguration element passed as argument.
         */
        HttpHeaderEntry.createIn = function (container) {
            return internal.instancehelpers.createElement(container, HttpHeaderEntry, "headerEntries", true);
        };
        /**
         * Creates and returns a new HttpHeaderEntry instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        HttpHeaderEntry.create = function (model) {
            return internal.instancehelpers.createElement(model, HttpHeaderEntry);
        };
        HttpHeaderEntry.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return HttpHeaderEntry;
    }(internal.Element));
    HttpHeaderEntry.typeName = "Microflows$HttpHeaderEntry";
    HttpHeaderEntry.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.HttpHeaderEntry = HttpHeaderEntry;
    /**
     * TODO
     */
    var ImportMappingCall = (function (_super) {
        __extends(ImportMappingCall, _super);
        function ImportMappingCall(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__mapping = new internal.ByNameReferenceProperty(ImportMappingCall, _this, "mapping", null, "ImportMappings$ImportMapping");
            _this.__mappingArgumentVariableName = new internal.PrimitiveProperty(ImportMappingCall, _this, "mappingArgumentVariableName", "", internal.PrimitiveTypeEnum.String);
            _this.__range = new internal.PartProperty(ImportMappingCall, _this, "range", null, true);
            if (arguments.length < 4) {
                throw new Error("new ImportMappingCall() cannot be invoked directly, please use 'model.microflows.createImportMappingCall()'");
            }
            return _this;
        }
        Object.defineProperty(ImportMappingCall.prototype, "containerAsResultHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, ResultHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImportMappingCall.prototype, "mapping", {
            get: function () { return this.__mapping.get(); },
            set: function (newValue) { this.__mapping.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImportMappingCall.prototype, "mappingQualifiedName", {
            get: function () { return this.__mapping.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImportMappingCall.prototype, "mappingArgumentVariableName", {
            get: function () { return this.__mappingArgumentVariableName.get(); },
            set: function (newValue) { this.__mappingArgumentVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImportMappingCall.prototype, "range", {
            get: function () { return this.__range.get(); },
            set: function (newValue) { this.__range.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ImportMappingCall instance in the SDK and on the server.
         * The new ImportMappingCall will be automatically stored in the 'importMappingCall' property
         * of the parent ResultHandling element passed as argument.
         */
        ImportMappingCall.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ImportMappingCall, "importMappingCall", false);
        };
        /**
         * Creates and returns a new ImportMappingCall instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ImportMappingCall.create = function (model) {
            return internal.instancehelpers.createElement(model, ImportMappingCall);
        };
        ImportMappingCall.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.range = ConstantRange.create(this.model);
        };
        return ImportMappingCall;
    }(internal.Element));
    ImportMappingCall.typeName = "Microflows$ImportMappingCall";
    ImportMappingCall.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "range": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.ImportMappingCall = ImportMappingCall;
    /**
     * See: {@link https://docs.mendix.com/refguide7/import-mapping-action relevant section in reference guide}
     */
    var ImportXmlAction = (function (_super) {
        __extends(ImportXmlAction, _super);
        function ImportXmlAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__xmlDocumentVariableName = new internal.PrimitiveProperty(ImportXmlAction, _this, "xmlDocumentVariableName", "", internal.PrimitiveTypeEnum.String);
            _this.__resultHandling = new internal.PartProperty(ImportXmlAction, _this, "resultHandling", null, true);
            _this.__isValidationRequired = new internal.PrimitiveProperty(ImportXmlAction, _this, "isValidationRequired", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new ImportXmlAction() cannot be invoked directly, please use 'model.microflows.createImportXmlAction()'");
            }
            return _this;
        }
        Object.defineProperty(ImportXmlAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImportXmlAction.prototype, "xmlDocumentVariableName", {
            get: function () { return this.__xmlDocumentVariableName.get(); },
            set: function (newValue) { this.__xmlDocumentVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImportXmlAction.prototype, "resultHandling", {
            get: function () { return this.__resultHandling.get(); },
            set: function (newValue) { this.__resultHandling.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImportXmlAction.prototype, "isValidationRequired", {
            get: function () { return this.__isValidationRequired.get(); },
            set: function (newValue) { this.__isValidationRequired.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ImportXmlAction instance in the SDK and on the server.
         * The new ImportXmlAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        ImportXmlAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ImportXmlAction, "action", false);
        };
        /**
         * Creates and returns a new ImportXmlAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ImportXmlAction.create = function (model) {
            return internal.instancehelpers.createElement(model, ImportXmlAction);
        };
        ImportXmlAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.resultHandling = ResultHandling.create(this.model);
        };
        return ImportXmlAction;
    }(MicroflowAction));
    ImportXmlAction.typeName = "Microflows$ImportXmlAction";
    ImportXmlAction.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "resultHandling": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.ImportXmlAction = ImportXmlAction;
    /**
     * TODO
     */
    var InheritanceCase = (function (_super) {
        __extends(InheritanceCase, _super);
        function InheritanceCase(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__value = new internal.ByNameReferenceProperty(InheritanceCase, _this, "value", null, "DomainModels$Entity");
            if (arguments.length < 4) {
                throw new Error("new InheritanceCase() cannot be invoked directly, please use 'model.microflows.createInheritanceCase()'");
            }
            return _this;
        }
        Object.defineProperty(InheritanceCase.prototype, "containerAsSequenceFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, SequenceFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InheritanceCase.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InheritanceCase.prototype, "valueQualifiedName", {
            get: function () { return this.__value.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new InheritanceCase instance in the SDK and on the server.
         * The new InheritanceCase will be automatically stored in the 'caseValue' property
         * of the parent SequenceFlow element passed as argument.
         */
        InheritanceCase.createIn = function (container) {
            return internal.instancehelpers.createElement(container, InheritanceCase, "caseValue", false);
        };
        /**
         * Creates and returns a new InheritanceCase instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        InheritanceCase.create = function (model) {
            return internal.instancehelpers.createElement(model, InheritanceCase);
        };
        InheritanceCase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return InheritanceCase;
    }(CaseValue));
    InheritanceCase.typeName = "Microflows$InheritanceCase";
    InheritanceCase.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.InheritanceCase = InheritanceCase;
    /**
     * See: {@link https://docs.mendix.com/refguide7/inheritance-split relevant section in reference guide}
     */
    var InheritanceSplit = (function (_super) {
        __extends(InheritanceSplit, _super);
        function InheritanceSplit(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__splitVariableName = new internal.PrimitiveProperty(InheritanceSplit, _this, "splitVariableName", "", internal.PrimitiveTypeEnum.String);
            _this.__caption = new internal.PrimitiveProperty(InheritanceSplit, _this, "caption", "", internal.PrimitiveTypeEnum.String);
            _this.__documentation = new internal.PrimitiveProperty(InheritanceSplit, _this, "documentation", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new InheritanceSplit() cannot be invoked directly, please use 'model.microflows.createInheritanceSplit()'");
            }
            return _this;
        }
        Object.defineProperty(InheritanceSplit.prototype, "containerAsMicroflowObjectCollection", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowObjectCollection); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InheritanceSplit.prototype, "splitVariableName", {
            get: function () { return this.__splitVariableName.get(); },
            set: function (newValue) { this.__splitVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InheritanceSplit.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InheritanceSplit.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new InheritanceSplit instance in the SDK and on the server.
         * The new InheritanceSplit will be automatically stored in the 'objects' property
         * of the parent MicroflowObjectCollection element passed as argument.
         */
        InheritanceSplit.createIn = function (container) {
            return internal.instancehelpers.createElement(container, InheritanceSplit, "objects", true);
        };
        /**
         * Creates and returns a new InheritanceSplit instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        InheritanceSplit.create = function (model) {
            return internal.instancehelpers.createElement(model, InheritanceSplit);
        };
        InheritanceSplit.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.size = { width: 60, height: 40 };
        };
        return InheritanceSplit;
    }(MicroflowObject));
    InheritanceSplit.typeName = "Microflows$InheritanceSplit";
    InheritanceSplit.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.InheritanceSplit = InheritanceSplit;
    var Intersect = (function (_super) {
        __extends(Intersect, _super);
        function Intersect(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new Intersect() cannot be invoked directly, please use 'model.microflows.createIntersect()'");
            }
            return _this;
        }
        Object.defineProperty(Intersect.prototype, "containerAsListOperationAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListOperationAction); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Intersect instance in the SDK and on the server.
         * The new Intersect will be automatically stored in the 'operation' property
         * of the parent ListOperationAction element passed as argument.
         */
        Intersect.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Intersect, "operation", false);
        };
        /**
         * Creates and returns a new Intersect instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Intersect.create = function (model) {
            return internal.instancehelpers.createElement(model, Intersect);
        };
        Intersect.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return Intersect;
    }(BinaryListOperation));
    Intersect.typeName = "Microflows$Intersect";
    Intersect.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.Intersect = Intersect;
    /**
     * See: {@link https://docs.mendix.com/refguide7/java-action-call relevant section in reference guide}
     */
    var JavaActionCallAction = (function (_super) {
        __extends(JavaActionCallAction, _super);
        function JavaActionCallAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__javaAction = new internal.ByNameReferenceProperty(JavaActionCallAction, _this, "javaAction", null, "JavaActions$JavaAction");
            _this.__parameterMappings = new internal.PartListProperty(JavaActionCallAction, _this, "parameterMappings", []);
            _this.__outputVariableName = new internal.PrimitiveProperty(JavaActionCallAction, _this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new JavaActionCallAction() cannot be invoked directly, please use 'model.microflows.createJavaActionCallAction()'");
            }
            return _this;
        }
        Object.defineProperty(JavaActionCallAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaActionCallAction.prototype, "javaAction", {
            get: function () { return this.__javaAction.get(); },
            set: function (newValue) { this.__javaAction.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaActionCallAction.prototype, "javaActionQualifiedName", {
            get: function () { return this.__javaAction.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaActionCallAction.prototype, "parameterMappings", {
            get: function () { return this.__parameterMappings.get(); },
            set: function (newValue) { this.__parameterMappings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaActionCallAction.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new JavaActionCallAction instance in the SDK and on the server.
         * The new JavaActionCallAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        JavaActionCallAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, JavaActionCallAction, "action", false);
        };
        /**
         * Creates and returns a new JavaActionCallAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        JavaActionCallAction.create = function (model) {
            return internal.instancehelpers.createElement(model, JavaActionCallAction);
        };
        JavaActionCallAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return JavaActionCallAction;
    }(MicroflowAction));
    JavaActionCallAction.typeName = "Microflows$JavaActionCallAction";
    JavaActionCallAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.JavaActionCallAction = JavaActionCallAction;
    var JavaActionParameterMapping = (function (_super) {
        __extends(JavaActionParameterMapping, _super);
        function JavaActionParameterMapping(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__parameter = new internal.ByNameReferenceProperty(JavaActionParameterMapping, _this, "parameter", null, "JavaActions$JavaActionParameter");
            _this.__argument = new internal.PrimitiveProperty(JavaActionParameterMapping, _this, "argument", "", internal.PrimitiveTypeEnum.String);
            _this.__value = new internal.PartProperty(JavaActionParameterMapping, _this, "value", null, true);
            if (arguments.length < 4) {
                throw new Error("new JavaActionParameterMapping() cannot be invoked directly, please use 'model.microflows.createJavaActionParameterMapping()'");
            }
            return _this;
        }
        Object.defineProperty(JavaActionParameterMapping.prototype, "containerAsJavaActionCallAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionCallAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaActionParameterMapping.prototype, "parameter", {
            get: function () { return this.__parameter.get(); },
            set: function (newValue) { this.__parameter.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaActionParameterMapping.prototype, "parameterQualifiedName", {
            get: function () { return this.__parameter.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaActionParameterMapping.prototype, "argument", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             *
             * In version 6.7.0: deleted
             */
            get: function () { return this.__argument.get(); },
            set: function (newValue) { this.__argument.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JavaActionParameterMapping.prototype, "value", {
            /**
             * In version 6.7.0: introduced
             */
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new JavaActionParameterMapping instance in the SDK and on the server.
         * The new JavaActionParameterMapping will be automatically stored in the 'parameterMappings' property
         * of the parent JavaActionCallAction element passed as argument.
         */
        JavaActionParameterMapping.createIn = function (container) {
            return internal.instancehelpers.createElement(container, JavaActionParameterMapping, "parameterMappings", true);
        };
        /**
         * Creates and returns a new JavaActionParameterMapping instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        JavaActionParameterMapping.create = function (model) {
            return internal.instancehelpers.createElement(model, JavaActionParameterMapping);
        };
        JavaActionParameterMapping.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            if (this.__value.isAvailable) {
                this.value = BasicJavaActionParameterValue.create(this.model);
            }
        };
        return JavaActionParameterMapping;
    }(internal.Element));
    JavaActionParameterMapping.typeName = "Microflows$JavaActionParameterMapping";
    JavaActionParameterMapping.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "parameter": {
                "required": {
                    "currentValue": true
                }
            },
            "argument": {
                "deleted": "6.7.0",
                "deletionMessage": null
            },
            "value": {
                "introduced": "6.7.0",
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.JavaActionParameterMapping = JavaActionParameterMapping;
    var ListEquals = (function (_super) {
        __extends(ListEquals, _super);
        function ListEquals(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new ListEquals() cannot be invoked directly, please use 'model.microflows.createListEquals()'");
            }
            return _this;
        }
        Object.defineProperty(ListEquals.prototype, "containerAsListOperationAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListOperationAction); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ListEquals instance in the SDK and on the server.
         * The new ListEquals will be automatically stored in the 'operation' property
         * of the parent ListOperationAction element passed as argument.
         */
        ListEquals.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ListEquals, "operation", false);
        };
        /**
         * Creates and returns a new ListEquals instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ListEquals.create = function (model) {
            return internal.instancehelpers.createElement(model, ListEquals);
        };
        ListEquals.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ListEquals;
    }(BinaryListOperation));
    ListEquals.typeName = "Microflows$ListEquals";
    ListEquals.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.ListEquals = ListEquals;
    /**
     * See: {@link https://docs.mendix.com/refguide7/list-operation relevant section in reference guide}
     */
    var ListOperationAction = (function (_super) {
        __extends(ListOperationAction, _super);
        function ListOperationAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__operation = new internal.PartProperty(ListOperationAction, _this, "operation", null, false);
            _this.__outputVariableName = new internal.PrimitiveProperty(ListOperationAction, _this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ListOperationAction() cannot be invoked directly, please use 'model.microflows.createListOperationAction()'");
            }
            return _this;
        }
        Object.defineProperty(ListOperationAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListOperationAction.prototype, "operation", {
            get: function () { return this.__operation.get(); },
            set: function (newValue) { this.__operation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListOperationAction.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ListOperationAction instance in the SDK and on the server.
         * The new ListOperationAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        ListOperationAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ListOperationAction, "action", false);
        };
        /**
         * Creates and returns a new ListOperationAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ListOperationAction.create = function (model) {
            return internal.instancehelpers.createElement(model, ListOperationAction);
        };
        ListOperationAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ListOperationAction;
    }(MicroflowAction));
    ListOperationAction.typeName = "Microflows$ListOperationAction";
    ListOperationAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.ListOperationAction = ListOperationAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/log-message relevant section in reference guide}
     */
    var LogMessageAction = (function (_super) {
        __extends(LogMessageAction, _super);
        function LogMessageAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__level = new internal.EnumProperty(LogMessageAction, _this, "level", LogLevel.Info, LogLevel);
            _this.__node = new internal.PrimitiveProperty(LogMessageAction, _this, "node", "", internal.PrimitiveTypeEnum.String);
            _this.__messageTemplate = new internal.PartProperty(LogMessageAction, _this, "messageTemplate", null, true);
            _this.__includeLatestStackTrace = new internal.PrimitiveProperty(LogMessageAction, _this, "includeLatestStackTrace", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new LogMessageAction() cannot be invoked directly, please use 'model.microflows.createLogMessageAction()'");
            }
            return _this;
        }
        Object.defineProperty(LogMessageAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogMessageAction.prototype, "level", {
            get: function () { return this.__level.get(); },
            set: function (newValue) { this.__level.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogMessageAction.prototype, "node", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__node.get(); },
            set: function (newValue) { this.__node.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogMessageAction.prototype, "messageTemplate", {
            get: function () { return this.__messageTemplate.get(); },
            set: function (newValue) { this.__messageTemplate.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LogMessageAction.prototype, "includeLatestStackTrace", {
            get: function () { return this.__includeLatestStackTrace.get(); },
            set: function (newValue) { this.__includeLatestStackTrace.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new LogMessageAction instance in the SDK and on the server.
         * The new LogMessageAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        LogMessageAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, LogMessageAction, "action", false);
        };
        /**
         * Creates and returns a new LogMessageAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LogMessageAction.create = function (model) {
            return internal.instancehelpers.createElement(model, LogMessageAction);
        };
        LogMessageAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.level = LogLevel.Info;
            this.messageTemplate = StringTemplate.create(this.model);
        };
        return LogMessageAction;
    }(MicroflowAction));
    LogMessageAction.typeName = "Microflows$LogMessageAction";
    LogMessageAction.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "messageTemplate": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.LogMessageAction = LogMessageAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/loop relevant section in reference guide}
     */
    var LoopedActivity = (function (_super) {
        __extends(LoopedActivity, _super);
        function LoopedActivity(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__objectCollection = new internal.PartProperty(LoopedActivity, _this, "objectCollection", null, true);
            _this.__iteratedListVariableName = new internal.PrimitiveProperty(LoopedActivity, _this, "iteratedListVariableName", "", internal.PrimitiveTypeEnum.String);
            _this.__loopVariableName = new internal.PrimitiveProperty(LoopedActivity, _this, "loopVariableName", "", internal.PrimitiveTypeEnum.String);
            _this.__errorHandlingType = new internal.EnumProperty(LoopedActivity, _this, "errorHandlingType", ErrorHandlingType.Rollback, ErrorHandlingType);
            _this.__documentation = new internal.PrimitiveProperty(LoopedActivity, _this, "documentation", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new LoopedActivity() cannot be invoked directly, please use 'model.microflows.createLoopedActivity()'");
            }
            return _this;
        }
        Object.defineProperty(LoopedActivity.prototype, "containerAsMicroflowObjectCollection", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowObjectCollection); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LoopedActivity.prototype, "objectCollection", {
            get: function () { return this.__objectCollection.get(); },
            set: function (newValue) { this.__objectCollection.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LoopedActivity.prototype, "iteratedListVariableName", {
            get: function () { return this.__iteratedListVariableName.get(); },
            set: function (newValue) { this.__iteratedListVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LoopedActivity.prototype, "loopVariableName", {
            get: function () { return this.__loopVariableName.get(); },
            set: function (newValue) { this.__loopVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LoopedActivity.prototype, "errorHandlingType", {
            get: function () { return this.__errorHandlingType.get(); },
            set: function (newValue) { this.__errorHandlingType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LoopedActivity.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new LoopedActivity instance in the SDK and on the server.
         * The new LoopedActivity will be automatically stored in the 'objects' property
         * of the parent MicroflowObjectCollection element passed as argument.
         */
        LoopedActivity.createIn = function (container) {
            return internal.instancehelpers.createElement(container, LoopedActivity, "objects", true);
        };
        /**
         * Creates and returns a new LoopedActivity instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        LoopedActivity.create = function (model) {
            return internal.instancehelpers.createElement(model, LoopedActivity);
        };
        LoopedActivity.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.errorHandlingType = ErrorHandlingType.Rollback;
            this.objectCollection = MicroflowObjectCollection.create(this.model);
        };
        return LoopedActivity;
    }(Activity));
    LoopedActivity.typeName = "Microflows$LoopedActivity";
    LoopedActivity.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "objectCollection": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.LoopedActivity = LoopedActivity;
    /**
     * TODO
     */
    var MappingRequestHandling = (function (_super) {
        __extends(MappingRequestHandling, _super);
        function MappingRequestHandling(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__mapping = new internal.ByNameReferenceProperty(MappingRequestHandling, _this, "mapping", null, "ExportMappings$ExportMapping");
            _this.__mappingArgumentVariableName = new internal.PrimitiveProperty(MappingRequestHandling, _this, "mappingArgumentVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new MappingRequestHandling() cannot be invoked directly, please use 'model.microflows.createMappingRequestHandling()'");
            }
            return _this;
        }
        Object.defineProperty(MappingRequestHandling.prototype, "containerAsRestCallAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, RestCallAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingRequestHandling.prototype, "containerAsWebServiceCallAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, WebServiceCallAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingRequestHandling.prototype, "mapping", {
            get: function () { return this.__mapping.get(); },
            set: function (newValue) { this.__mapping.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingRequestHandling.prototype, "mappingQualifiedName", {
            get: function () { return this.__mapping.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MappingRequestHandling.prototype, "mappingArgumentVariableName", {
            get: function () { return this.__mappingArgumentVariableName.get(); },
            set: function (newValue) { this.__mappingArgumentVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new MappingRequestHandling instance in the SDK and on the server.
         * The new MappingRequestHandling will be automatically stored in the 'requestHandling' property
         * of the parent RestCallAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        MappingRequestHandling.createInRestCallActionUnderRequestHandling = function (container) {
            internal.createInVersionCheck(container.model, MappingRequestHandling.typeName, ["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, MappingRequestHandling, "requestHandling", false);
        };
        /**
         * Creates and returns a new MappingRequestHandling instance in the SDK and on the server.
         * The new MappingRequestHandling will be automatically stored in the 'requestBodyHandling' property
         * of the parent WebServiceCallAction element passed as argument.
         */
        MappingRequestHandling.createInWebServiceCallActionUnderRequestBodyHandling = function (container) {
            return internal.instancehelpers.createElement(container, MappingRequestHandling, "requestBodyHandling", false);
        };
        /**
         * Creates and returns a new MappingRequestHandling instance in the SDK and on the server.
         * The new MappingRequestHandling will be automatically stored in the 'requestHeaderHandling' property
         * of the parent WebServiceCallAction element passed as argument.
         */
        MappingRequestHandling.createInWebServiceCallActionUnderRequestHeaderHandling = function (container) {
            return internal.instancehelpers.createElement(container, MappingRequestHandling, "requestHeaderHandling", false);
        };
        /**
         * Creates and returns a new MappingRequestHandling instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MappingRequestHandling.create = function (model) {
            return internal.instancehelpers.createElement(model, MappingRequestHandling);
        };
        MappingRequestHandling.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return MappingRequestHandling;
    }(RequestHandling));
    MappingRequestHandling.typeName = "Microflows$MappingRequestHandling";
    MappingRequestHandling.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.MappingRequestHandling = MappingRequestHandling;
    /**
     * TODO
     */
    var MemberChange = (function (_super) {
        __extends(MemberChange, _super);
        function MemberChange(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__attribute = new internal.ByNameReferenceProperty(MemberChange, _this, "attribute", null, "DomainModels$Attribute");
            _this.__association = new internal.ByNameReferenceProperty(MemberChange, _this, "association", null, "DomainModels$AssociationBase");
            _this.__type = new internal.EnumProperty(MemberChange, _this, "type", ChangeActionItemType.Set, ChangeActionItemType);
            _this.__value = new internal.PrimitiveProperty(MemberChange, _this, "value", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new MemberChange() cannot be invoked directly, please use 'model.microflows.createMemberChange()'");
            }
            return _this;
        }
        Object.defineProperty(MemberChange.prototype, "containerAsChangeMembersAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ChangeMembersAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberChange.prototype, "attribute", {
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberChange.prototype, "attributeQualifiedName", {
            get: function () { return this.__attribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberChange.prototype, "association", {
            get: function () { return this.__association.get(); },
            set: function (newValue) { this.__association.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberChange.prototype, "associationQualifiedName", {
            get: function () { return this.__association.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberChange.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MemberChange.prototype, "value", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new MemberChange instance in the SDK and on the server.
         * The new MemberChange will be automatically stored in the 'items' property
         * of the parent ChangeMembersAction element passed as argument.
         */
        MemberChange.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MemberChange, "items", true);
        };
        /**
         * Creates and returns a new MemberChange instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MemberChange.create = function (model) {
            return internal.instancehelpers.createElement(model, MemberChange);
        };
        MemberChange.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.type = ChangeActionItemType.Set;
        };
        return MemberChange;
    }(internal.Element));
    MemberChange.typeName = "Microflows$MemberChange";
    MemberChange.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.MemberChange = MemberChange;
    /**
     * TODO: Abstract
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var MicroflowBase = (function (_super) {
        __extends(MicroflowBase, _super);
        function MicroflowBase(model, typeName, id, isPartial, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, container) || this;
            _this.__objectCollection = new internal.PartProperty(MicroflowBase, _this, "objectCollection", null, true);
            _this.__flows = new internal.PartListProperty(MicroflowBase, _this, "flows", []);
            _this.__returnType = new internal.PrimitiveProperty(MicroflowBase, _this, "returnType", "", internal.PrimitiveTypeEnum.String);
            _this.__applyEntityAccess = new internal.PrimitiveProperty(MicroflowBase, _this, "applyEntityAccess", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__markAsUsed = new internal.PrimitiveProperty(MicroflowBase, _this, "markAsUsed", false, internal.PrimitiveTypeEnum.Boolean);
            return _this;
        }
        Object.defineProperty(MicroflowBase.prototype, "containerAsFolderBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, projects_1.projects.FolderBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowBase.prototype, "objectCollection", {
            get: function () { return this.__objectCollection.get(); },
            set: function (newValue) { this.__objectCollection.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowBase.prototype, "flows", {
            get: function () { return this.__flows.get(); },
            set: function (newValue) { this.__flows.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowBase.prototype, "returnType", {
            /**
             * The value of this property is conceptually of type dataTypes.DataType.
             */
            get: function () { return this.__returnType.get(); },
            set: function (newValue) { this.__returnType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowBase.prototype, "applyEntityAccess", {
            get: function () { return this.__applyEntityAccess.get(); },
            set: function (newValue) { this.__applyEntityAccess.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowBase.prototype, "markAsUsed", {
            get: function () { return this.__markAsUsed.get(); },
            set: function (newValue) { this.__markAsUsed.set(newValue); },
            enumerable: true,
            configurable: true
        });
        MicroflowBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.objectCollection = MicroflowObjectCollection.create(this.model);
        };
        return MicroflowBase;
    }(projects_1.projects.Document));
    MicroflowBase.typeName = "Microflows$MicroflowBase";
    MicroflowBase.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "objectCollection": {
                "required": {
                    "currentValue": true
                }
            },
            "returnType": {
                "public": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.ModelUnit);
    microflows.MicroflowBase = MicroflowBase;
    /**
     * See: {@link https://docs.mendix.com/refguide7/microflows relevant section in reference guide}
     */
    var Microflow = (function (_super) {
        __extends(Microflow, _super);
        function Microflow(model, typeName, id, isPartial, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, container) || this;
            _this.__allowedModuleRoles = new internal.ByNameReferenceListProperty(Microflow, _this, "allowedModuleRoles", [], "Security$ModuleRole");
            _this.__allowConcurrentExecution = new internal.PrimitiveProperty(Microflow, _this, "allowConcurrentExecution", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__concurrencyErrorMessage = new internal.PartProperty(Microflow, _this, "concurrencyErrorMessage", null, true);
            _this.__concurrencyErrorMicroflow = new internal.ByNameReferenceProperty(Microflow, _this, "concurrencyErrorMicroflow", null, "Microflows$Microflow");
            _this._containmentName = "documents";
            return _this;
        }
        Object.defineProperty(Microflow.prototype, "containerAsFolderBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, projects_1.projects.FolderBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Microflow.prototype, "allowedModuleRoles", {
            get: function () { return this.__allowedModuleRoles.get(); },
            set: function (newValue) { this.__allowedModuleRoles.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Microflow.prototype, "allowedModuleRolesQualifiedNames", {
            get: function () { return this.__allowedModuleRoles.qualifiedNames(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Microflow.prototype, "allowConcurrentExecution", {
            get: function () { return this.__allowConcurrentExecution.get(); },
            set: function (newValue) { this.__allowConcurrentExecution.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Microflow.prototype, "concurrencyErrorMessage", {
            get: function () { return this.__concurrencyErrorMessage.get(); },
            set: function (newValue) { this.__concurrencyErrorMessage.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Microflow.prototype, "concurrencyErrorMicroflow", {
            get: function () { return this.__concurrencyErrorMicroflow.get(); },
            set: function (newValue) { this.__concurrencyErrorMicroflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Microflow.prototype, "concurrencyErrorMicroflowQualifiedName", {
            get: function () { return this.__concurrencyErrorMicroflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new Microflow unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        Microflow.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, Microflow);
        };
        Microflow.prototype._isByNameReferrable = function () { return true; };
        Microflow.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.allowConcurrentExecution = true;
            this.concurrencyErrorMessage = texts_1.texts.Text.create(this.model);
            this.returnType = "Void";
        };
        return Microflow;
    }(MicroflowBase));
    Microflow.typeName = "Microflows$Microflow";
    Microflow.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "concurrencyErrorMessage": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.ModelUnit);
    microflows.Microflow = Microflow;
    var MicroflowCall = (function (_super) {
        __extends(MicroflowCall, _super);
        function MicroflowCall(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__microflow = new internal.ByNameReferenceProperty(MicroflowCall, _this, "microflow", null, "Microflows$Microflow");
            _this.__parameterMappings = new internal.PartListProperty(MicroflowCall, _this, "parameterMappings", []);
            if (arguments.length < 4) {
                throw new Error("new MicroflowCall() cannot be invoked directly, please use 'model.microflows.createMicroflowCall()'");
            }
            return _this;
        }
        Object.defineProperty(MicroflowCall.prototype, "containerAsMicroflowCallAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowCallAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowCall.prototype, "microflow", {
            get: function () { return this.__microflow.get(); },
            set: function (newValue) { this.__microflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowCall.prototype, "microflowQualifiedName", {
            get: function () { return this.__microflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowCall.prototype, "parameterMappings", {
            get: function () { return this.__parameterMappings.get(); },
            set: function (newValue) { this.__parameterMappings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new MicroflowCall instance in the SDK and on the server.
         * The new MicroflowCall will be automatically stored in the 'microflowCall' property
         * of the parent MicroflowCallAction element passed as argument.
         */
        MicroflowCall.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowCall, "microflowCall", false);
        };
        /**
         * Creates and returns a new MicroflowCall instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MicroflowCall.create = function (model) {
            return internal.instancehelpers.createElement(model, MicroflowCall);
        };
        MicroflowCall.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return MicroflowCall;
    }(internal.Element));
    MicroflowCall.typeName = "Microflows$MicroflowCall";
    MicroflowCall.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.MicroflowCall = MicroflowCall;
    /**
     * See: {@link https://docs.mendix.com/refguide7/microflow-call relevant section in reference guide}
     */
    var MicroflowCallAction = (function (_super) {
        __extends(MicroflowCallAction, _super);
        function MicroflowCallAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__microflowCall = new internal.PartProperty(MicroflowCallAction, _this, "microflowCall", null, true);
            _this.__useReturnVariable = new internal.PrimitiveProperty(MicroflowCallAction, _this, "useReturnVariable", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__outputVariableName = new internal.PrimitiveProperty(MicroflowCallAction, _this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new MicroflowCallAction() cannot be invoked directly, please use 'model.microflows.createMicroflowCallAction()'");
            }
            return _this;
        }
        Object.defineProperty(MicroflowCallAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowCallAction.prototype, "microflowCall", {
            /**
             * In version 6.0.0: removed optional
             */
            get: function () { return this.__microflowCall.get(); },
            set: function (newValue) { this.__microflowCall.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowCallAction.prototype, "useReturnVariable", {
            get: function () { return this.__useReturnVariable.get(); },
            set: function (newValue) { this.__useReturnVariable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowCallAction.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new MicroflowCallAction instance in the SDK and on the server.
         * The new MicroflowCallAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        MicroflowCallAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowCallAction, "action", false);
        };
        /**
         * Creates and returns a new MicroflowCallAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MicroflowCallAction.create = function (model) {
            return internal.instancehelpers.createElement(model, MicroflowCallAction);
        };
        MicroflowCallAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.microflowCall = MicroflowCall.create(this.model);
            this.useReturnVariable = true;
        };
        return MicroflowCallAction;
    }(MicroflowAction));
    MicroflowCallAction.typeName = "Microflows$MicroflowCallAction";
    MicroflowCallAction.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "microflowCall": {
                "required": {
                    "currentValue": true,
                    "changedIn": [
                        "6.0.0"
                    ]
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.MicroflowCallAction = MicroflowCallAction;
    var MicroflowCallParameterMapping = (function (_super) {
        __extends(MicroflowCallParameterMapping, _super);
        function MicroflowCallParameterMapping(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__parameter = new internal.ByNameReferenceProperty(MicroflowCallParameterMapping, _this, "parameter", null, "Microflows$MicroflowParameter");
            _this.__argument = new internal.PrimitiveProperty(MicroflowCallParameterMapping, _this, "argument", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new MicroflowCallParameterMapping() cannot be invoked directly, please use 'model.microflows.createMicroflowCallParameterMapping()'");
            }
            return _this;
        }
        Object.defineProperty(MicroflowCallParameterMapping.prototype, "containerAsMicroflowCall", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowCall); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowCallParameterMapping.prototype, "parameter", {
            get: function () { return this.__parameter.get(); },
            set: function (newValue) { this.__parameter.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowCallParameterMapping.prototype, "parameterQualifiedName", {
            get: function () { return this.__parameter.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowCallParameterMapping.prototype, "argument", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__argument.get(); },
            set: function (newValue) { this.__argument.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new MicroflowCallParameterMapping instance in the SDK and on the server.
         * The new MicroflowCallParameterMapping will be automatically stored in the 'parameterMappings' property
         * of the parent MicroflowCall element passed as argument.
         */
        MicroflowCallParameterMapping.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowCallParameterMapping, "parameterMappings", true);
        };
        /**
         * Creates and returns a new MicroflowCallParameterMapping instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MicroflowCallParameterMapping.create = function (model) {
            return internal.instancehelpers.createElement(model, MicroflowCallParameterMapping);
        };
        MicroflowCallParameterMapping.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return MicroflowCallParameterMapping;
    }(internal.Element));
    MicroflowCallParameterMapping.typeName = "Microflows$MicroflowCallParameterMapping";
    MicroflowCallParameterMapping.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "parameter": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.MicroflowCallParameterMapping = MicroflowCallParameterMapping;
    /**
     * In version 6.9.0: introduced
     */
    var MicroflowJavaActionParameterValue = (function (_super) {
        __extends(MicroflowJavaActionParameterValue, _super);
        function MicroflowJavaActionParameterValue(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__microflow = new internal.ByNameReferenceProperty(MicroflowJavaActionParameterValue, _this, "microflow", null, "Microflows$Microflow");
            if (arguments.length < 4) {
                throw new Error("new MicroflowJavaActionParameterValue() cannot be invoked directly, please use 'model.microflows.createMicroflowJavaActionParameterValue()'");
            }
            return _this;
        }
        Object.defineProperty(MicroflowJavaActionParameterValue.prototype, "containerAsJavaActionParameterMapping", {
            get: function () { return _super.prototype.getContainerAs.call(this, JavaActionParameterMapping); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowJavaActionParameterValue.prototype, "microflow", {
            get: function () { return this.__microflow.get(); },
            set: function (newValue) { this.__microflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowJavaActionParameterValue.prototype, "microflowQualifiedName", {
            get: function () { return this.__microflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new MicroflowJavaActionParameterValue instance in the SDK and on the server.
         * The new MicroflowJavaActionParameterValue will be automatically stored in the 'value' property
         * of the parent JavaActionParameterMapping element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        MicroflowJavaActionParameterValue.createIn = function (container) {
            internal.createInVersionCheck(container.model, MicroflowJavaActionParameterValue.typeName, ["6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, MicroflowJavaActionParameterValue, "value", false);
        };
        /**
         * Creates and returns a new MicroflowJavaActionParameterValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MicroflowJavaActionParameterValue.create = function (model) {
            return internal.instancehelpers.createElement(model, MicroflowJavaActionParameterValue);
        };
        MicroflowJavaActionParameterValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return MicroflowJavaActionParameterValue;
    }(JavaActionParameterValue));
    MicroflowJavaActionParameterValue.typeName = "Microflows$MicroflowJavaActionParameterValue";
    MicroflowJavaActionParameterValue.versionInfo = new exports.StructureVersionInfo({
        "introduced": "6.9.0"
    }, internal.StructureType.Element);
    microflows.MicroflowJavaActionParameterValue = MicroflowJavaActionParameterValue;
    /**
     * TODO: artificial object
     */
    var MicroflowObjectCollection = (function (_super) {
        __extends(MicroflowObjectCollection, _super);
        function MicroflowObjectCollection(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__objects = new internal.PartListProperty(MicroflowObjectCollection, _this, "objects", []);
            if (arguments.length < 4) {
                throw new Error("new MicroflowObjectCollection() cannot be invoked directly, please use 'model.microflows.createMicroflowObjectCollection()'");
            }
            return _this;
        }
        Object.defineProperty(MicroflowObjectCollection.prototype, "containerAsLoopedActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, LoopedActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowObjectCollection.prototype, "containerAsMicroflowBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowObjectCollection.prototype, "objects", {
            get: function () { return this.__objects.get(); },
            set: function (newValue) { this.__objects.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new MicroflowObjectCollection instance in the SDK and on the server.
         * The new MicroflowObjectCollection will be automatically stored in the 'objectCollection' property
         * of the parent LoopedActivity element passed as argument.
         */
        MicroflowObjectCollection.createInLoopedActivityUnderObjectCollection = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowObjectCollection, "objectCollection", false);
        };
        /**
         * Creates and returns a new MicroflowObjectCollection instance in the SDK and on the server.
         * The new MicroflowObjectCollection will be automatically stored in the 'objectCollection' property
         * of the parent MicroflowBase element passed as argument.
         */
        MicroflowObjectCollection.createInMicroflowBaseUnderObjectCollection = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowObjectCollection, "objectCollection", false);
        };
        /**
         * Creates and returns a new MicroflowObjectCollection instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MicroflowObjectCollection.create = function (model) {
            return internal.instancehelpers.createElement(model, MicroflowObjectCollection);
        };
        MicroflowObjectCollection.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return MicroflowObjectCollection;
    }(internal.Element));
    MicroflowObjectCollection.typeName = "Microflows$MicroflowObjectCollection";
    MicroflowObjectCollection.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.MicroflowObjectCollection = MicroflowObjectCollection;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var MicroflowParameterBase = (function (_super) {
        __extends(MicroflowParameterBase, _super);
        function MicroflowParameterBase(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__name = new internal.PrimitiveProperty(MicroflowParameterBase, _this, "name", "", internal.PrimitiveTypeEnum.String);
            _this.__type = new internal.PrimitiveProperty(MicroflowParameterBase, _this, "type", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new MicroflowParameterBase() cannot be invoked directly, please use 'model.microflows.createMicroflowParameterBase()'");
            }
            return _this;
        }
        Object.defineProperty(MicroflowParameterBase.prototype, "containerAsMicroflow", {
            get: function () { return _super.prototype.getContainerAs.call(this, Microflow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowParameterBase.prototype, "containerAsRule", {
            get: function () { return _super.prototype.getContainerAs.call(this, Rule); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowParameterBase.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowParameterBase.prototype, "type", {
            /**
             * The value of this property is conceptually of type dataTypes.DataType.
             */
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        MicroflowParameterBase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.type = "Unknown";
        };
        return MicroflowParameterBase;
    }(internal.Element));
    MicroflowParameterBase.typeName = "Microflows$MicroflowParameterBase";
    MicroflowParameterBase.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "name": {
                "public": {
                    "currentValue": true
                }
            },
            "type": {
                "public": {
                    "currentValue": true
                }
            }
        },
        "public": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    microflows.MicroflowParameterBase = MicroflowParameterBase;
    /**
     * See: {@link https://docs.mendix.com/refguide7/parameter relevant section in reference guide}
     */
    var MicroflowParameter = (function (_super) {
        __extends(MicroflowParameter, _super);
        function MicroflowParameter(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new MicroflowParameter() cannot be invoked directly, please use 'model.microflows.createMicroflowParameter()'");
            }
            return _this;
        }
        Object.defineProperty(MicroflowParameter.prototype, "containerAsMicroflow", {
            get: function () { return _super.prototype.getContainerAs.call(this, Microflow); },
            enumerable: true,
            configurable: true
        });
        MicroflowParameter.prototype._isByNameReferrable = function () { return true; };
        MicroflowParameter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return MicroflowParameter;
    }(MicroflowParameterBase));
    MicroflowParameter.typeName = "Microflows$MicroflowParameter";
    MicroflowParameter.versionInfo = new exports.StructureVersionInfo({
        "public": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    microflows.MicroflowParameter = MicroflowParameter;
    var MicroflowParameterObject = (function (_super) {
        __extends(MicroflowParameterObject, _super);
        function MicroflowParameterObject(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__name = new internal.PrimitiveProperty(MicroflowParameterObject, _this, "name", "", internal.PrimitiveTypeEnum.String);
            _this.__type = new internal.PrimitiveProperty(MicroflowParameterObject, _this, "type", "", internal.PrimitiveTypeEnum.String);
            _this.__documentation = new internal.PrimitiveProperty(MicroflowParameterObject, _this, "documentation", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new MicroflowParameterObject() cannot be invoked directly, please use 'model.microflows.createMicroflowParameterObject()'");
            }
            return _this;
        }
        Object.defineProperty(MicroflowParameterObject.prototype, "containerAsMicroflowObjectCollection", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowObjectCollection); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowParameterObject.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowParameterObject.prototype, "type", {
            /**
             * The value of this property is conceptually of type dataTypes.DataType.
             */
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MicroflowParameterObject.prototype, "documentation", {
            get: function () { return this.__documentation.get(); },
            set: function (newValue) { this.__documentation.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new MicroflowParameterObject instance in the SDK and on the server.
         * The new MicroflowParameterObject will be automatically stored in the 'objects' property
         * of the parent MicroflowObjectCollection element passed as argument.
         */
        MicroflowParameterObject.createIn = function (container) {
            return internal.instancehelpers.createElement(container, MicroflowParameterObject, "objects", true);
        };
        /**
         * Creates and returns a new MicroflowParameterObject instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        MicroflowParameterObject.create = function (model) {
            return internal.instancehelpers.createElement(model, MicroflowParameterObject);
        };
        MicroflowParameterObject.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.size = { width: 30, height: 30 };
            this.type = "Unknown";
        };
        return MicroflowParameterObject;
    }(MicroflowObject));
    MicroflowParameterObject.typeName = "Microflows$MicroflowParameterObject";
    MicroflowParameterObject.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.MicroflowParameterObject = MicroflowParameterObject;
    /**
     * TODO
     */
    var NoCase = (function (_super) {
        __extends(NoCase, _super);
        function NoCase(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new NoCase() cannot be invoked directly, please use 'model.microflows.createNoCase()'");
            }
            return _this;
        }
        Object.defineProperty(NoCase.prototype, "containerAsSequenceFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, SequenceFlow); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new NoCase instance in the SDK and on the server.
         * The new NoCase will be automatically stored in the 'caseValue' property
         * of the parent SequenceFlow element passed as argument.
         */
        NoCase.createIn = function (container) {
            return internal.instancehelpers.createElement(container, NoCase, "caseValue", false);
        };
        /**
         * Creates and returns a new NoCase instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        NoCase.create = function (model) {
            return internal.instancehelpers.createElement(model, NoCase);
        };
        NoCase.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return NoCase;
    }(CaseValue));
    NoCase.typeName = "Microflows$NoCase";
    NoCase.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.NoCase = NoCase;
    /**
     * See: {@link https://docs.mendix.com/refguide7/call-rest-action relevant section in reference guide}
     *
     * In version 6.6.0: introduced
     */
    var RestCallAction = (function (_super) {
        __extends(RestCallAction, _super);
        function RestCallAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__httpConfiguration = new internal.PartProperty(RestCallAction, _this, "httpConfiguration", null, true);
            _this.__requestHandling = new internal.PartProperty(RestCallAction, _this, "requestHandling", null, true);
            _this.__requestHandlingType = new internal.EnumProperty(RestCallAction, _this, "requestHandlingType", RequestHandlingType.Custom, RequestHandlingType);
            _this.__resultHandling = new internal.PartProperty(RestCallAction, _this, "resultHandling", null, true);
            _this.__resultHandlingType = new internal.EnumProperty(RestCallAction, _this, "resultHandlingType", ResultHandlingType.None, ResultHandlingType);
            if (arguments.length < 4) {
                throw new Error("new RestCallAction() cannot be invoked directly, please use 'model.microflows.createRestCallAction()'");
            }
            return _this;
        }
        Object.defineProperty(RestCallAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RestCallAction.prototype, "httpConfiguration", {
            get: function () { return this.__httpConfiguration.get(); },
            set: function (newValue) { this.__httpConfiguration.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RestCallAction.prototype, "requestHandling", {
            get: function () { return this.__requestHandling.get(); },
            set: function (newValue) { this.__requestHandling.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RestCallAction.prototype, "requestHandlingType", {
            /**
             * In version 6.9.0: introduced
             */
            get: function () { return this.__requestHandlingType.get(); },
            set: function (newValue) { this.__requestHandlingType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RestCallAction.prototype, "resultHandling", {
            get: function () { return this.__resultHandling.get(); },
            set: function (newValue) { this.__resultHandling.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RestCallAction.prototype, "resultHandlingType", {
            /**
             * In version 6.9.0: introduced
             */
            get: function () { return this.__resultHandlingType.get(); },
            set: function (newValue) { this.__resultHandlingType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new RestCallAction instance in the SDK and on the server.
         * The new RestCallAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        RestCallAction.createIn = function (container) {
            internal.createInVersionCheck(container.model, RestCallAction.typeName, ["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, RestCallAction, "action", false);
        };
        /**
         * Creates and returns a new RestCallAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RestCallAction.create = function (model) {
            return internal.instancehelpers.createElement(model, RestCallAction);
        };
        RestCallAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.httpConfiguration = HttpConfiguration.create(this.model);
            this.requestHandling = CustomRequestHandling.create(this.model);
            if (this.__requestHandlingType.isAvailable) {
                this.requestHandlingType = RequestHandlingType.Custom;
            }
            this.resultHandling = ResultHandling.create(this.model);
            if (this.__resultHandlingType.isAvailable) {
                this.resultHandlingType = ResultHandlingType.None;
            }
        };
        return RestCallAction;
    }(MicroflowAction));
    RestCallAction.typeName = "Microflows$RestCallAction";
    RestCallAction.versionInfo = new exports.StructureVersionInfo({
        "introduced": "6.6.0",
        "properties": {
            "httpConfiguration": {
                "required": {
                    "currentValue": true
                }
            },
            "requestHandling": {
                "required": {
                    "currentValue": true
                }
            },
            "requestHandlingType": {
                "introduced": "6.9.0"
            },
            "resultHandling": {
                "required": {
                    "currentValue": true
                }
            },
            "resultHandlingType": {
                "introduced": "6.9.0"
            }
        }
    }, internal.StructureType.Element);
    microflows.RestCallAction = RestCallAction;
    /**
     * TODO
     */
    var ResultHandling = (function (_super) {
        __extends(ResultHandling, _super);
        function ResultHandling(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__importMappingCall = new internal.PartProperty(ResultHandling, _this, "importMappingCall", null, false);
            _this.__storeInVariable = new internal.PrimitiveProperty(ResultHandling, _this, "storeInVariable", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__outputVariableName = new internal.PrimitiveProperty(ResultHandling, _this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            _this.__variableDataType = new internal.PrimitiveProperty(ResultHandling, _this, "variableDataType", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ResultHandling() cannot be invoked directly, please use 'model.microflows.createResultHandling()'");
            }
            return _this;
        }
        Object.defineProperty(ResultHandling.prototype, "containerAsImportXmlAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ImportXmlAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ResultHandling.prototype, "containerAsRestCallAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, RestCallAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ResultHandling.prototype, "containerAsWebServiceCallAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, WebServiceCallAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ResultHandling.prototype, "importMappingCall", {
            get: function () { return this.__importMappingCall.get(); },
            set: function (newValue) { this.__importMappingCall.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ResultHandling.prototype, "storeInVariable", {
            get: function () { return this.__storeInVariable.get(); },
            set: function (newValue) { this.__storeInVariable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ResultHandling.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ResultHandling.prototype, "variableDataType", {
            /**
             * The value of this property is conceptually of type dataTypes.DataType.
             *
             * In version 6.10.0: introduced
             */
            get: function () { return this.__variableDataType.get(); },
            set: function (newValue) { this.__variableDataType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ResultHandling instance in the SDK and on the server.
         * The new ResultHandling will be automatically stored in the 'resultHandling' property
         * of the parent ImportXmlAction element passed as argument.
         */
        ResultHandling.createInImportXmlActionUnderResultHandling = function (container) {
            return internal.instancehelpers.createElement(container, ResultHandling, "resultHandling", false);
        };
        /**
         * Creates and returns a new ResultHandling instance in the SDK and on the server.
         * The new ResultHandling will be automatically stored in the 'resultHandling' property
         * of the parent RestCallAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        ResultHandling.createInRestCallActionUnderResultHandling = function (container) {
            internal.createInVersionCheck(container.model, ResultHandling.typeName, ["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, ResultHandling, "resultHandling", false);
        };
        /**
         * Creates and returns a new ResultHandling instance in the SDK and on the server.
         * The new ResultHandling will be automatically stored in the 'resultHandling' property
         * of the parent WebServiceCallAction element passed as argument.
         */
        ResultHandling.createInWebServiceCallActionUnderResultHandling = function (container) {
            return internal.instancehelpers.createElement(container, ResultHandling, "resultHandling", false);
        };
        /**
         * Creates and returns a new ResultHandling instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ResultHandling.create = function (model) {
            return internal.instancehelpers.createElement(model, ResultHandling);
        };
        ResultHandling.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            if (this.__variableDataType.isAvailable) {
                this.variableDataType = "DataType.Void";
            }
        };
        return ResultHandling;
    }(internal.Element));
    ResultHandling.typeName = "Microflows$ResultHandling";
    ResultHandling.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "variableDataType": {
                "introduced": "6.10.0",
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.ResultHandling = ResultHandling;
    /**
     * See: {@link https://docs.mendix.com/refguide7/retrieve relevant section in reference guide}
     */
    var RetrieveAction = (function (_super) {
        __extends(RetrieveAction, _super);
        function RetrieveAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__retrieveSource = new internal.PartProperty(RetrieveAction, _this, "retrieveSource", null, true);
            _this.__outputVariableName = new internal.PrimitiveProperty(RetrieveAction, _this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new RetrieveAction() cannot be invoked directly, please use 'model.microflows.createRetrieveAction()'");
            }
            return _this;
        }
        Object.defineProperty(RetrieveAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RetrieveAction.prototype, "retrieveSource", {
            get: function () { return this.__retrieveSource.get(); },
            set: function (newValue) { this.__retrieveSource.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RetrieveAction.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new RetrieveAction instance in the SDK and on the server.
         * The new RetrieveAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        RetrieveAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, RetrieveAction, "action", false);
        };
        /**
         * Creates and returns a new RetrieveAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RetrieveAction.create = function (model) {
            return internal.instancehelpers.createElement(model, RetrieveAction);
        };
        RetrieveAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.retrieveSource = AssociationRetrieveSource.create(this.model);
        };
        return RetrieveAction;
    }(MicroflowAction));
    RetrieveAction.typeName = "Microflows$RetrieveAction";
    RetrieveAction.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "retrieveSource": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.RetrieveAction = RetrieveAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/rollback-object relevant section in reference guide}
     */
    var RollbackAction = (function (_super) {
        __extends(RollbackAction, _super);
        function RollbackAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__rollbackVariableName = new internal.PrimitiveProperty(RollbackAction, _this, "rollbackVariableName", "", internal.PrimitiveTypeEnum.String);
            _this.__refreshInClient = new internal.PrimitiveProperty(RollbackAction, _this, "refreshInClient", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new RollbackAction() cannot be invoked directly, please use 'model.microflows.createRollbackAction()'");
            }
            return _this;
        }
        Object.defineProperty(RollbackAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RollbackAction.prototype, "rollbackVariableName", {
            get: function () { return this.__rollbackVariableName.get(); },
            set: function (newValue) { this.__rollbackVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RollbackAction.prototype, "refreshInClient", {
            get: function () { return this.__refreshInClient.get(); },
            set: function (newValue) { this.__refreshInClient.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new RollbackAction instance in the SDK and on the server.
         * The new RollbackAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        RollbackAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, RollbackAction, "action", false);
        };
        /**
         * Creates and returns a new RollbackAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RollbackAction.create = function (model) {
            return internal.instancehelpers.createElement(model, RollbackAction);
        };
        RollbackAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return RollbackAction;
    }(MicroflowAction));
    RollbackAction.typeName = "Microflows$RollbackAction";
    RollbackAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.RollbackAction = RollbackAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/rules relevant section in reference guide}
     */
    var Rule = (function (_super) {
        __extends(Rule, _super);
        function Rule(model, typeName, id, isPartial, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, container) || this;
            _this._containmentName = "documents";
            return _this;
        }
        Object.defineProperty(Rule.prototype, "containerAsFolderBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, projects_1.projects.FolderBase); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new Rule unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        Rule.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, Rule);
        };
        Rule.prototype._isByNameReferrable = function () { return true; };
        Rule.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.returnType = "Boolean";
        };
        return Rule;
    }(MicroflowBase));
    Rule.typeName = "Microflows$Rule";
    Rule.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.ModelUnit);
    microflows.Rule = Rule;
    /**
     * TODO
     */
    var RuleCall = (function (_super) {
        __extends(RuleCall, _super);
        function RuleCall(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__rule = new internal.ByNameReferenceProperty(RuleCall, _this, "rule", null, "Microflows$Rule");
            _this.__parameterMappings = new internal.PartListProperty(RuleCall, _this, "parameterMappings", []);
            if (arguments.length < 4) {
                throw new Error("new RuleCall() cannot be invoked directly, please use 'model.microflows.createRuleCall()'");
            }
            return _this;
        }
        Object.defineProperty(RuleCall.prototype, "containerAsRuleSplitCondition", {
            get: function () { return _super.prototype.getContainerAs.call(this, RuleSplitCondition); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuleCall.prototype, "rule", {
            get: function () { return this.__rule.get(); },
            set: function (newValue) { this.__rule.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuleCall.prototype, "ruleQualifiedName", {
            get: function () { return this.__rule.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuleCall.prototype, "parameterMappings", {
            get: function () { return this.__parameterMappings.get(); },
            set: function (newValue) { this.__parameterMappings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new RuleCall instance in the SDK and on the server.
         * The new RuleCall will be automatically stored in the 'ruleCall' property
         * of the parent RuleSplitCondition element passed as argument.
         */
        RuleCall.createIn = function (container) {
            return internal.instancehelpers.createElement(container, RuleCall, "ruleCall", false);
        };
        /**
         * Creates and returns a new RuleCall instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RuleCall.create = function (model) {
            return internal.instancehelpers.createElement(model, RuleCall);
        };
        RuleCall.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return RuleCall;
    }(internal.Element));
    RuleCall.typeName = "Microflows$RuleCall";
    RuleCall.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.RuleCall = RuleCall;
    /**
     * TODO
     */
    var RuleCallParameterMapping = (function (_super) {
        __extends(RuleCallParameterMapping, _super);
        function RuleCallParameterMapping(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__parameter = new internal.ByNameReferenceProperty(RuleCallParameterMapping, _this, "parameter", null, "Microflows$RuleParameter");
            _this.__argument = new internal.PrimitiveProperty(RuleCallParameterMapping, _this, "argument", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new RuleCallParameterMapping() cannot be invoked directly, please use 'model.microflows.createRuleCallParameterMapping()'");
            }
            return _this;
        }
        Object.defineProperty(RuleCallParameterMapping.prototype, "containerAsRuleCall", {
            get: function () { return _super.prototype.getContainerAs.call(this, RuleCall); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuleCallParameterMapping.prototype, "parameter", {
            get: function () { return this.__parameter.get(); },
            set: function (newValue) { this.__parameter.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuleCallParameterMapping.prototype, "parameterQualifiedName", {
            get: function () { return this.__parameter.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuleCallParameterMapping.prototype, "argument", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__argument.get(); },
            set: function (newValue) { this.__argument.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new RuleCallParameterMapping instance in the SDK and on the server.
         * The new RuleCallParameterMapping will be automatically stored in the 'parameterMappings' property
         * of the parent RuleCall element passed as argument.
         */
        RuleCallParameterMapping.createIn = function (container) {
            return internal.instancehelpers.createElement(container, RuleCallParameterMapping, "parameterMappings", true);
        };
        /**
         * Creates and returns a new RuleCallParameterMapping instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RuleCallParameterMapping.create = function (model) {
            return internal.instancehelpers.createElement(model, RuleCallParameterMapping);
        };
        RuleCallParameterMapping.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return RuleCallParameterMapping;
    }(internal.Element));
    RuleCallParameterMapping.typeName = "Microflows$RuleCallParameterMapping";
    RuleCallParameterMapping.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "parameter": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.RuleCallParameterMapping = RuleCallParameterMapping;
    /**
     * See: {@link https://docs.mendix.com/refguide7/parameter relevant section in reference guide}
     */
    var RuleParameter = (function (_super) {
        __extends(RuleParameter, _super);
        function RuleParameter(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new RuleParameter() cannot be invoked directly, please use 'model.microflows.createRuleParameter()'");
            }
            return _this;
        }
        Object.defineProperty(RuleParameter.prototype, "containerAsRule", {
            get: function () { return _super.prototype.getContainerAs.call(this, Rule); },
            enumerable: true,
            configurable: true
        });
        RuleParameter.prototype._isByNameReferrable = function () { return true; };
        RuleParameter.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return RuleParameter;
    }(MicroflowParameterBase));
    RuleParameter.typeName = "Microflows$RuleParameter";
    RuleParameter.versionInfo = new exports.StructureVersionInfo({
        "public": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    microflows.RuleParameter = RuleParameter;
    var RuleSplitCondition = (function (_super) {
        __extends(RuleSplitCondition, _super);
        function RuleSplitCondition(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__ruleCall = new internal.PartProperty(RuleSplitCondition, _this, "ruleCall", null, true);
            if (arguments.length < 4) {
                throw new Error("new RuleSplitCondition() cannot be invoked directly, please use 'model.microflows.createRuleSplitCondition()'");
            }
            return _this;
        }
        Object.defineProperty(RuleSplitCondition.prototype, "containerAsExclusiveSplit", {
            get: function () { return _super.prototype.getContainerAs.call(this, ExclusiveSplit); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RuleSplitCondition.prototype, "ruleCall", {
            get: function () { return this.__ruleCall.get(); },
            set: function (newValue) { this.__ruleCall.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new RuleSplitCondition instance in the SDK and on the server.
         * The new RuleSplitCondition will be automatically stored in the 'splitCondition' property
         * of the parent ExclusiveSplit element passed as argument.
         */
        RuleSplitCondition.createIn = function (container) {
            return internal.instancehelpers.createElement(container, RuleSplitCondition, "splitCondition", false);
        };
        /**
         * Creates and returns a new RuleSplitCondition instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        RuleSplitCondition.create = function (model) {
            return internal.instancehelpers.createElement(model, RuleSplitCondition);
        };
        RuleSplitCondition.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.ruleCall = RuleCall.create(this.model);
        };
        return RuleSplitCondition;
    }(SplitCondition));
    RuleSplitCondition.typeName = "Microflows$RuleSplitCondition";
    RuleSplitCondition.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "ruleCall": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.RuleSplitCondition = RuleSplitCondition;
    /**
     * See: {@link https://docs.mendix.com/refguide7/sequence-flow relevant section in reference guide}
     */
    var SequenceFlow = (function (_super) {
        __extends(SequenceFlow, _super);
        function SequenceFlow(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__caseValue = new internal.PartProperty(SequenceFlow, _this, "caseValue", null, true);
            _this.__isErrorHandler = new internal.PrimitiveProperty(SequenceFlow, _this, "isErrorHandler", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new SequenceFlow() cannot be invoked directly, please use 'model.microflows.createSequenceFlow()'");
            }
            return _this;
        }
        Object.defineProperty(SequenceFlow.prototype, "containerAsMicroflowBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SequenceFlow.prototype, "caseValue", {
            get: function () { return this.__caseValue.get(); },
            set: function (newValue) { this.__caseValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SequenceFlow.prototype, "isErrorHandler", {
            get: function () { return this.__isErrorHandler.get(); },
            set: function (newValue) { this.__isErrorHandler.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new SequenceFlow instance in the SDK and on the server.
         * The new SequenceFlow will be automatically stored in the 'flows' property
         * of the parent MicroflowBase element passed as argument.
         */
        SequenceFlow.createIn = function (container) {
            return internal.instancehelpers.createElement(container, SequenceFlow, "flows", true);
        };
        /**
         * Creates and returns a new SequenceFlow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SequenceFlow.create = function (model) {
            return internal.instancehelpers.createElement(model, SequenceFlow);
        };
        SequenceFlow.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.caseValue = NoCase.create(this.model);
        };
        return SequenceFlow;
    }(Flow));
    SequenceFlow.typeName = "Microflows$SequenceFlow";
    SequenceFlow.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "caseValue": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.SequenceFlow = SequenceFlow;
    /**
     * See: {@link https://docs.mendix.com/refguide7/show-home-page TODO: Page does not exist, should be created.}
     */
    var ShowHomePageAction = (function (_super) {
        __extends(ShowHomePageAction, _super);
        function ShowHomePageAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new ShowHomePageAction() cannot be invoked directly, please use 'model.microflows.createShowHomePageAction()'");
            }
            return _this;
        }
        Object.defineProperty(ShowHomePageAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ShowHomePageAction instance in the SDK and on the server.
         * The new ShowHomePageAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        ShowHomePageAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ShowHomePageAction, "action", false);
        };
        /**
         * Creates and returns a new ShowHomePageAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ShowHomePageAction.create = function (model) {
            return internal.instancehelpers.createElement(model, ShowHomePageAction);
        };
        ShowHomePageAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return ShowHomePageAction;
    }(MicroflowAction));
    ShowHomePageAction.typeName = "Microflows$ShowHomePageAction";
    ShowHomePageAction.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.ShowHomePageAction = ShowHomePageAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/show-message relevant section in reference guide}
     */
    var ShowMessageAction = (function (_super) {
        __extends(ShowMessageAction, _super);
        function ShowMessageAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__template = new internal.PartProperty(ShowMessageAction, _this, "template", null, true);
            _this.__type = new internal.EnumProperty(ShowMessageAction, _this, "type", ShowMessageType.Information, ShowMessageType);
            _this.__blocking = new internal.PrimitiveProperty(ShowMessageAction, _this, "blocking", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new ShowMessageAction() cannot be invoked directly, please use 'model.microflows.createShowMessageAction()'");
            }
            return _this;
        }
        Object.defineProperty(ShowMessageAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShowMessageAction.prototype, "template", {
            get: function () { return this.__template.get(); },
            set: function (newValue) { this.__template.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShowMessageAction.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShowMessageAction.prototype, "blocking", {
            get: function () { return this.__blocking.get(); },
            set: function (newValue) { this.__blocking.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ShowMessageAction instance in the SDK and on the server.
         * The new ShowMessageAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        ShowMessageAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ShowMessageAction, "action", false);
        };
        /**
         * Creates and returns a new ShowMessageAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ShowMessageAction.create = function (model) {
            return internal.instancehelpers.createElement(model, ShowMessageAction);
        };
        ShowMessageAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.blocking = true;
            this.template = TextTemplate.create(this.model);
            this.type = ShowMessageType.Information;
        };
        return ShowMessageAction;
    }(MicroflowAction));
    ShowMessageAction.typeName = "Microflows$ShowMessageAction";
    ShowMessageAction.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "template": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.ShowMessageAction = ShowMessageAction;
    /**
     * See: {@link https://docs.mendix.com/refguide7/show-page relevant section in reference guide}
     */
    var ShowPageAction = (function (_super) {
        __extends(ShowPageAction, _super);
        function ShowPageAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__pageSettings = new internal.PartProperty(ShowPageAction, _this, "pageSettings", null, true);
            _this.__passedObjectVariableName = new internal.PrimitiveProperty(ShowPageAction, _this, "passedObjectVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new ShowPageAction() cannot be invoked directly, please use 'model.microflows.createShowPageAction()'");
            }
            return _this;
        }
        Object.defineProperty(ShowPageAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShowPageAction.prototype, "pageSettings", {
            get: function () { return this.__pageSettings.get(); },
            set: function (newValue) { this.__pageSettings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShowPageAction.prototype, "passedObjectVariableName", {
            get: function () { return this.__passedObjectVariableName.get(); },
            set: function (newValue) { this.__passedObjectVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ShowPageAction instance in the SDK and on the server.
         * The new ShowPageAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        ShowPageAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ShowPageAction, "action", false);
        };
        /**
         * Creates and returns a new ShowPageAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ShowPageAction.create = function (model) {
            return internal.instancehelpers.createElement(model, ShowPageAction);
        };
        ShowPageAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.pageSettings = pages_1.pages.PageSettings.create(this.model);
        };
        return ShowPageAction;
    }(MicroflowAction));
    ShowPageAction.typeName = "Microflows$ShowPageAction";
    ShowPageAction.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "pageSettings": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.ShowPageAction = ShowPageAction;
    /**
     * TODO
     */
    var SimpleRequestHandling = (function (_super) {
        __extends(SimpleRequestHandling, _super);
        function SimpleRequestHandling(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__parameterMappings = new internal.PartListProperty(SimpleRequestHandling, _this, "parameterMappings", []);
            _this.__nullValueOption = new internal.EnumProperty(SimpleRequestHandling, _this, "nullValueOption", NullValueOption.LeaveOutElement, NullValueOption);
            if (arguments.length < 4) {
                throw new Error("new SimpleRequestHandling() cannot be invoked directly, please use 'model.microflows.createSimpleRequestHandling()'");
            }
            return _this;
        }
        Object.defineProperty(SimpleRequestHandling.prototype, "containerAsRestCallAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, RestCallAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleRequestHandling.prototype, "containerAsWebServiceCallAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, WebServiceCallAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleRequestHandling.prototype, "parameterMappings", {
            get: function () { return this.__parameterMappings.get(); },
            set: function (newValue) { this.__parameterMappings.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleRequestHandling.prototype, "nullValueOption", {
            /**
             * In version 6.7.0: introduced
             */
            get: function () { return this.__nullValueOption.get(); },
            set: function (newValue) { this.__nullValueOption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new SimpleRequestHandling instance in the SDK and on the server.
         * The new SimpleRequestHandling will be automatically stored in the 'requestHandling' property
         * of the parent RestCallAction element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        SimpleRequestHandling.createInRestCallActionUnderRequestHandling = function (container) {
            internal.createInVersionCheck(container.model, SimpleRequestHandling.typeName, ["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, SimpleRequestHandling, "requestHandling", false);
        };
        /**
         * Creates and returns a new SimpleRequestHandling instance in the SDK and on the server.
         * The new SimpleRequestHandling will be automatically stored in the 'requestBodyHandling' property
         * of the parent WebServiceCallAction element passed as argument.
         */
        SimpleRequestHandling.createInWebServiceCallActionUnderRequestBodyHandling = function (container) {
            return internal.instancehelpers.createElement(container, SimpleRequestHandling, "requestBodyHandling", false);
        };
        /**
         * Creates and returns a new SimpleRequestHandling instance in the SDK and on the server.
         * The new SimpleRequestHandling will be automatically stored in the 'requestHeaderHandling' property
         * of the parent WebServiceCallAction element passed as argument.
         */
        SimpleRequestHandling.createInWebServiceCallActionUnderRequestHeaderHandling = function (container) {
            return internal.instancehelpers.createElement(container, SimpleRequestHandling, "requestHeaderHandling", false);
        };
        /**
         * Creates and returns a new SimpleRequestHandling instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SimpleRequestHandling.create = function (model) {
            return internal.instancehelpers.createElement(model, SimpleRequestHandling);
        };
        SimpleRequestHandling.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            if (this.__nullValueOption.isAvailable) {
                this.nullValueOption = NullValueOption.LeaveOutElement;
            }
        };
        return SimpleRequestHandling;
    }(RequestHandling));
    SimpleRequestHandling.typeName = "Microflows$SimpleRequestHandling";
    SimpleRequestHandling.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "nullValueOption": {
                "introduced": "6.7.0"
            }
        }
    }, internal.StructureType.Element);
    microflows.SimpleRequestHandling = SimpleRequestHandling;
    var Sort = (function (_super) {
        __extends(Sort, _super);
        function Sort(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__sortItemList = new internal.PartProperty(Sort, _this, "sortItemList", null, true);
            if (arguments.length < 4) {
                throw new Error("new Sort() cannot be invoked directly, please use 'model.microflows.createSort()'");
            }
            return _this;
        }
        Object.defineProperty(Sort.prototype, "containerAsListOperationAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListOperationAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Sort.prototype, "sortItemList", {
            get: function () { return this.__sortItemList.get(); },
            set: function (newValue) { this.__sortItemList.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Sort instance in the SDK and on the server.
         * The new Sort will be automatically stored in the 'operation' property
         * of the parent ListOperationAction element passed as argument.
         */
        Sort.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Sort, "operation", false);
        };
        /**
         * Creates and returns a new Sort instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Sort.create = function (model) {
            return internal.instancehelpers.createElement(model, Sort);
        };
        Sort.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.sortItemList = SortItemList.create(this.model);
        };
        return Sort;
    }(ListOperation));
    Sort.typeName = "Microflows$Sort";
    Sort.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "sortItemList": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.Sort = Sort;
    /**
     * TODO
     */
    var SortItem = (function (_super) {
        __extends(SortItem, _super);
        function SortItem(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__attributePath = new internal.PrimitiveProperty(SortItem, _this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            _this.__sortOrder = new internal.EnumProperty(SortItem, _this, "sortOrder", SortOrderEnum.Ascending, SortOrderEnum);
            if (arguments.length < 4) {
                throw new Error("new SortItem() cannot be invoked directly, please use 'model.microflows.createSortItem()'");
            }
            return _this;
        }
        Object.defineProperty(SortItem.prototype, "containerAsSortItemList", {
            get: function () { return _super.prototype.getContainerAs.call(this, SortItemList); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SortItem.prototype, "attributePath", {
            /**
             * The value of this property is conceptually of type paths.AttributePath.
             */
            get: function () { return this.__attributePath.get(); },
            set: function (newValue) { this.__attributePath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SortItem.prototype, "sortOrder", {
            get: function () { return this.__sortOrder.get(); },
            set: function (newValue) { this.__sortOrder.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new SortItem instance in the SDK and on the server.
         * The new SortItem will be automatically stored in the 'items' property
         * of the parent SortItemList element passed as argument.
         */
        SortItem.createIn = function (container) {
            return internal.instancehelpers.createElement(container, SortItem, "items", true);
        };
        /**
         * Creates and returns a new SortItem instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SortItem.create = function (model) {
            return internal.instancehelpers.createElement(model, SortItem);
        };
        SortItem.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.attributePath = "";
            this.sortOrder = SortOrderEnum.Ascending;
        };
        return SortItem;
    }(internal.Element));
    SortItem.typeName = "Microflows$SortItem";
    SortItem.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "attributePath": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.SortItem = SortItem;
    /**
     * TODO
     */
    var SortItemList = (function (_super) {
        __extends(SortItemList, _super);
        function SortItemList(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__items = new internal.PartListProperty(SortItemList, _this, "items", []);
            if (arguments.length < 4) {
                throw new Error("new SortItemList() cannot be invoked directly, please use 'model.microflows.createSortItemList()'");
            }
            return _this;
        }
        Object.defineProperty(SortItemList.prototype, "containerAsDatabaseRetrieveSource", {
            get: function () { return _super.prototype.getContainerAs.call(this, DatabaseRetrieveSource); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SortItemList.prototype, "containerAsSort", {
            get: function () { return _super.prototype.getContainerAs.call(this, Sort); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SortItemList.prototype, "items", {
            get: function () { return this.__items.get(); },
            set: function (newValue) { this.__items.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new SortItemList instance in the SDK and on the server.
         * The new SortItemList will be automatically stored in the 'sortItemList' property
         * of the parent DatabaseRetrieveSource element passed as argument.
         */
        SortItemList.createInDatabaseRetrieveSourceUnderSortItemList = function (container) {
            return internal.instancehelpers.createElement(container, SortItemList, "sortItemList", false);
        };
        /**
         * Creates and returns a new SortItemList instance in the SDK and on the server.
         * The new SortItemList will be automatically stored in the 'sortItemList' property
         * of the parent Sort element passed as argument.
         */
        SortItemList.createInSortUnderSortItemList = function (container) {
            return internal.instancehelpers.createElement(container, SortItemList, "sortItemList", false);
        };
        /**
         * Creates and returns a new SortItemList instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        SortItemList.create = function (model) {
            return internal.instancehelpers.createElement(model, SortItemList);
        };
        SortItemList.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return SortItemList;
    }(internal.Element));
    SortItemList.typeName = "Microflows$SortItemList";
    SortItemList.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.SortItemList = SortItemList;
    /**
     * See: {@link https://docs.mendix.com/refguide7/start-event relevant section in reference guide}
     */
    var StartEvent = (function (_super) {
        __extends(StartEvent, _super);
        function StartEvent(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new StartEvent() cannot be invoked directly, please use 'model.microflows.createStartEvent()'");
            }
            return _this;
        }
        Object.defineProperty(StartEvent.prototype, "containerAsMicroflowObjectCollection", {
            get: function () { return _super.prototype.getContainerAs.call(this, MicroflowObjectCollection); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new StartEvent instance in the SDK and on the server.
         * The new StartEvent will be automatically stored in the 'objects' property
         * of the parent MicroflowObjectCollection element passed as argument.
         */
        StartEvent.createIn = function (container) {
            return internal.instancehelpers.createElement(container, StartEvent, "objects", true);
        };
        /**
         * Creates and returns a new StartEvent instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        StartEvent.create = function (model) {
            return internal.instancehelpers.createElement(model, StartEvent);
        };
        StartEvent.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.size = { width: 20, height: 20 };
        };
        return StartEvent;
    }(MicroflowObject));
    StartEvent.typeName = "Microflows$StartEvent";
    StartEvent.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.StartEvent = StartEvent;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    var Template = (function (_super) {
        __extends(Template, _super);
        function Template(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__arguments = new internal.PartListProperty(Template, _this, "arguments", []);
            if (arguments.length < 4) {
                throw new Error("new Template() cannot be invoked directly, please use 'model.microflows.createTemplate()'");
            }
            return _this;
        }
        Object.defineProperty(Template.prototype, "containerAsCustomRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, CustomRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Template.prototype, "containerAsHttpConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, HttpConfiguration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Template.prototype, "containerAsLogMessageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, LogMessageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Template.prototype, "containerAsShowMessageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ShowMessageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Template.prototype, "containerAsValidationFeedbackAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ValidationFeedbackAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Template.prototype, "arguments", {
            get: function () { return this.__arguments.get(); },
            set: function (newValue) { this.__arguments.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Template.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return Template;
    }(internal.Element));
    Template.typeName = "Microflows$Template";
    Template.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.Template = Template;
    /**
     * TODO
     */
    var StringTemplate = (function (_super) {
        __extends(StringTemplate, _super);
        function StringTemplate(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__text = new internal.PrimitiveProperty(StringTemplate, _this, "text", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new StringTemplate() cannot be invoked directly, please use 'model.microflows.createStringTemplate()'");
            }
            return _this;
        }
        Object.defineProperty(StringTemplate.prototype, "containerAsCustomRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, CustomRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringTemplate.prototype, "containerAsHttpConfiguration", {
            get: function () { return _super.prototype.getContainerAs.call(this, HttpConfiguration); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringTemplate.prototype, "containerAsLogMessageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, LogMessageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StringTemplate.prototype, "text", {
            get: function () { return this.__text.get(); },
            set: function (newValue) { this.__text.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new StringTemplate instance in the SDK and on the server.
         * The new StringTemplate will be automatically stored in the 'template' property
         * of the parent CustomRequestHandling element passed as argument.
         */
        StringTemplate.createInCustomRequestHandlingUnderTemplate = function (container) {
            return internal.instancehelpers.createElement(container, StringTemplate, "template", false);
        };
        /**
         * Creates and returns a new StringTemplate instance in the SDK and on the server.
         * The new StringTemplate will be automatically stored in the 'customLocationTemplate' property
         * of the parent HttpConfiguration element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        StringTemplate.createInHttpConfigurationUnderCustomLocationTemplate = function (container) {
            internal.createInVersionCheck(container.model, StringTemplate.typeName, ["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, StringTemplate, "customLocationTemplate", false);
        };
        /**
         * Creates and returns a new StringTemplate instance in the SDK and on the server.
         * The new StringTemplate will be automatically stored in the 'messageTemplate' property
         * of the parent LogMessageAction element passed as argument.
         */
        StringTemplate.createInLogMessageActionUnderMessageTemplate = function (container) {
            return internal.instancehelpers.createElement(container, StringTemplate, "messageTemplate", false);
        };
        /**
         * Creates and returns a new StringTemplate instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        StringTemplate.create = function (model) {
            return internal.instancehelpers.createElement(model, StringTemplate);
        };
        StringTemplate.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return StringTemplate;
    }(Template));
    StringTemplate.typeName = "Microflows$StringTemplate";
    StringTemplate.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.StringTemplate = StringTemplate;
    var Subtract = (function (_super) {
        __extends(Subtract, _super);
        function Subtract(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new Subtract() cannot be invoked directly, please use 'model.microflows.createSubtract()'");
            }
            return _this;
        }
        Object.defineProperty(Subtract.prototype, "containerAsListOperationAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListOperationAction); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Subtract instance in the SDK and on the server.
         * The new Subtract will be automatically stored in the 'operation' property
         * of the parent ListOperationAction element passed as argument.
         */
        Subtract.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Subtract, "operation", false);
        };
        /**
         * Creates and returns a new Subtract instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Subtract.create = function (model) {
            return internal.instancehelpers.createElement(model, Subtract);
        };
        Subtract.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return Subtract;
    }(BinaryListOperation));
    Subtract.typeName = "Microflows$Subtract";
    Subtract.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.Subtract = Subtract;
    var Tail = (function (_super) {
        __extends(Tail, _super);
        function Tail(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new Tail() cannot be invoked directly, please use 'model.microflows.createTail()'");
            }
            return _this;
        }
        Object.defineProperty(Tail.prototype, "containerAsListOperationAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListOperationAction); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Tail instance in the SDK and on the server.
         * The new Tail will be automatically stored in the 'operation' property
         * of the parent ListOperationAction element passed as argument.
         */
        Tail.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Tail, "operation", false);
        };
        /**
         * Creates and returns a new Tail instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Tail.create = function (model) {
            return internal.instancehelpers.createElement(model, Tail);
        };
        Tail.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return Tail;
    }(ListOperation));
    Tail.typeName = "Microflows$Tail";
    Tail.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.Tail = Tail;
    /**
     * TODO
     */
    var TemplateArgument = (function (_super) {
        __extends(TemplateArgument, _super);
        function TemplateArgument(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__expression = new internal.PrimitiveProperty(TemplateArgument, _this, "expression", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new TemplateArgument() cannot be invoked directly, please use 'model.microflows.createTemplateArgument()'");
            }
            return _this;
        }
        Object.defineProperty(TemplateArgument.prototype, "containerAsTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, Template); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateArgument.prototype, "expression", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__expression.get(); },
            set: function (newValue) { this.__expression.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new TemplateArgument instance in the SDK and on the server.
         * The new TemplateArgument will be automatically stored in the 'arguments' property
         * of the parent Template element passed as argument.
         */
        TemplateArgument.createIn = function (container) {
            return internal.instancehelpers.createElement(container, TemplateArgument, "arguments", true);
        };
        /**
         * Creates and returns a new TemplateArgument instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TemplateArgument.create = function (model) {
            return internal.instancehelpers.createElement(model, TemplateArgument);
        };
        TemplateArgument.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return TemplateArgument;
    }(internal.Element));
    TemplateArgument.typeName = "Microflows$TemplateArgument";
    TemplateArgument.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.TemplateArgument = TemplateArgument;
    /**
     * TODO
     */
    var TextTemplate = (function (_super) {
        __extends(TextTemplate, _super);
        function TextTemplate(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__text = new internal.PartProperty(TextTemplate, _this, "text", null, true);
            if (arguments.length < 4) {
                throw new Error("new TextTemplate() cannot be invoked directly, please use 'model.microflows.createTextTemplate()'");
            }
            return _this;
        }
        Object.defineProperty(TextTemplate.prototype, "containerAsShowMessageAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ShowMessageAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextTemplate.prototype, "containerAsValidationFeedbackAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ValidationFeedbackAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextTemplate.prototype, "text", {
            get: function () { return this.__text.get(); },
            set: function (newValue) { this.__text.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new TextTemplate instance in the SDK and on the server.
         * The new TextTemplate will be automatically stored in the 'template' property
         * of the parent ShowMessageAction element passed as argument.
         */
        TextTemplate.createInShowMessageActionUnderTemplate = function (container) {
            return internal.instancehelpers.createElement(container, TextTemplate, "template", false);
        };
        /**
         * Creates and returns a new TextTemplate instance in the SDK and on the server.
         * The new TextTemplate will be automatically stored in the 'feedbackTemplate' property
         * of the parent ValidationFeedbackAction element passed as argument.
         */
        TextTemplate.createInValidationFeedbackActionUnderFeedbackTemplate = function (container) {
            return internal.instancehelpers.createElement(container, TextTemplate, "feedbackTemplate", false);
        };
        /**
         * Creates and returns a new TextTemplate instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        TextTemplate.create = function (model) {
            return internal.instancehelpers.createElement(model, TextTemplate);
        };
        TextTemplate.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.text = texts_1.texts.Text.create(this.model);
        };
        return TextTemplate;
    }(Template));
    TextTemplate.typeName = "Microflows$TextTemplate";
    TextTemplate.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "text": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.TextTemplate = TextTemplate;
    var Union = (function (_super) {
        __extends(Union, _super);
        function Union(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            if (arguments.length < 4) {
                throw new Error("new Union() cannot be invoked directly, please use 'model.microflows.createUnion()'");
            }
            return _this;
        }
        Object.defineProperty(Union.prototype, "containerAsListOperationAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ListOperationAction); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new Union instance in the SDK and on the server.
         * The new Union will be automatically stored in the 'operation' property
         * of the parent ListOperationAction element passed as argument.
         */
        Union.createIn = function (container) {
            return internal.instancehelpers.createElement(container, Union, "operation", false);
        };
        /**
         * Creates and returns a new Union instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        Union.create = function (model) {
            return internal.instancehelpers.createElement(model, Union);
        };
        Union.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return Union;
    }(BinaryListOperation));
    Union.typeName = "Microflows$Union";
    Union.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.Union = Union;
    /**
     * See: {@link https://docs.mendix.com/refguide7/validation-feedback relevant section in reference guide}
     */
    var ValidationFeedbackAction = (function (_super) {
        __extends(ValidationFeedbackAction, _super);
        function ValidationFeedbackAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__feedbackTemplate = new internal.PartProperty(ValidationFeedbackAction, _this, "feedbackTemplate", null, true);
            _this.__objectVariableName = new internal.PrimitiveProperty(ValidationFeedbackAction, _this, "objectVariableName", "", internal.PrimitiveTypeEnum.String);
            _this.__attribute = new internal.ByNameReferenceProperty(ValidationFeedbackAction, _this, "attribute", null, "DomainModels$Attribute");
            _this.__association = new internal.ByNameReferenceProperty(ValidationFeedbackAction, _this, "association", null, "DomainModels$AssociationBase");
            if (arguments.length < 4) {
                throw new Error("new ValidationFeedbackAction() cannot be invoked directly, please use 'model.microflows.createValidationFeedbackAction()'");
            }
            return _this;
        }
        Object.defineProperty(ValidationFeedbackAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationFeedbackAction.prototype, "feedbackTemplate", {
            get: function () { return this.__feedbackTemplate.get(); },
            set: function (newValue) { this.__feedbackTemplate.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationFeedbackAction.prototype, "objectVariableName", {
            get: function () { return this.__objectVariableName.get(); },
            set: function (newValue) { this.__objectVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationFeedbackAction.prototype, "attribute", {
            /**
             * See: {@link https://docs.mendix.com/refguide7/validation-feedback See 'Member' section in reference guide}
             */
            get: function () { return this.__attribute.get(); },
            set: function (newValue) { this.__attribute.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationFeedbackAction.prototype, "attributeQualifiedName", {
            get: function () { return this.__attribute.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationFeedbackAction.prototype, "association", {
            /**
             * See: {@link https://docs.mendix.com/refguide7/validation-feedback See 'Member' section in reference guide}
             */
            get: function () { return this.__association.get(); },
            set: function (newValue) { this.__association.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValidationFeedbackAction.prototype, "associationQualifiedName", {
            get: function () { return this.__association.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new ValidationFeedbackAction instance in the SDK and on the server.
         * The new ValidationFeedbackAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        ValidationFeedbackAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, ValidationFeedbackAction, "action", false);
        };
        /**
         * Creates and returns a new ValidationFeedbackAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        ValidationFeedbackAction.create = function (model) {
            return internal.instancehelpers.createElement(model, ValidationFeedbackAction);
        };
        ValidationFeedbackAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.feedbackTemplate = TextTemplate.create(this.model);
        };
        return ValidationFeedbackAction;
    }(MicroflowAction));
    ValidationFeedbackAction.typeName = "Microflows$ValidationFeedbackAction";
    ValidationFeedbackAction.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "feedbackTemplate": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.ValidationFeedbackAction = ValidationFeedbackAction;
    /**
     * TODO
     */
    var VariableExport = (function (_super) {
        __extends(VariableExport, _super);
        function VariableExport(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__outputVariableName = new internal.PrimitiveProperty(VariableExport, _this, "outputVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new VariableExport() cannot be invoked directly, please use 'model.microflows.createVariableExport()'");
            }
            return _this;
        }
        Object.defineProperty(VariableExport.prototype, "containerAsExportXmlAction", {
            get: function () { return _super.prototype.getContainerAs.call(this, ExportXmlAction); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VariableExport.prototype, "outputVariableName", {
            get: function () { return this.__outputVariableName.get(); },
            set: function (newValue) { this.__outputVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new VariableExport instance in the SDK and on the server.
         * The new VariableExport will be automatically stored in the 'outputMethod' property
         * of the parent ExportXmlAction element passed as argument.
         */
        VariableExport.createIn = function (container) {
            return internal.instancehelpers.createElement(container, VariableExport, "outputMethod", false);
        };
        /**
         * Creates and returns a new VariableExport instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        VariableExport.create = function (model) {
            return internal.instancehelpers.createElement(model, VariableExport);
        };
        VariableExport.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return VariableExport;
    }(OutputMethod));
    VariableExport.typeName = "Microflows$VariableExport";
    VariableExport.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.VariableExport = VariableExport;
    /**
     * See: {@link https://docs.mendix.com/refguide7/call-web-service-action relevant section in reference guide}
     */
    var WebServiceCallAction = (function (_super) {
        __extends(WebServiceCallAction, _super);
        function WebServiceCallAction(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__importedWebService = new internal.ByNameReferenceProperty(WebServiceCallAction, _this, "importedWebService", null, "WebServices$ImportedWebService");
            _this.__serviceName = new internal.PrimitiveProperty(WebServiceCallAction, _this, "serviceName", "", internal.PrimitiveTypeEnum.String);
            _this.__operationName = new internal.PrimitiveProperty(WebServiceCallAction, _this, "operationName", "", internal.PrimitiveTypeEnum.String);
            _this.__useRequestTimeOut = new internal.PrimitiveProperty(WebServiceCallAction, _this, "useRequestTimeOut", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__timeOut = new internal.PrimitiveProperty(WebServiceCallAction, _this, "timeOut", 0, internal.PrimitiveTypeEnum.Integer);
            _this.__sendNullValueChoice = new internal.EnumProperty(WebServiceCallAction, _this, "sendNullValueChoice", NullValueOption.LeaveOutElement, NullValueOption);
            _this.__requestHeaderHandling = new internal.PartProperty(WebServiceCallAction, _this, "requestHeaderHandling", null, true);
            _this.__requestBodyHandling = new internal.PartProperty(WebServiceCallAction, _this, "requestBodyHandling", null, true);
            _this.__resultHandling = new internal.PartProperty(WebServiceCallAction, _this, "resultHandling", null, true);
            _this.__httpConfiguration = new internal.PartProperty(WebServiceCallAction, _this, "httpConfiguration", null, true);
            _this.__isValidationRequired = new internal.PrimitiveProperty(WebServiceCallAction, _this, "isValidationRequired", false, internal.PrimitiveTypeEnum.Boolean);
            if (arguments.length < 4) {
                throw new Error("new WebServiceCallAction() cannot be invoked directly, please use 'model.microflows.createWebServiceCallAction()'");
            }
            return _this;
        }
        Object.defineProperty(WebServiceCallAction.prototype, "containerAsActionActivity", {
            get: function () { return _super.prototype.getContainerAs.call(this, ActionActivity); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "importedWebService", {
            get: function () { return this.__importedWebService.get(); },
            set: function (newValue) { this.__importedWebService.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "importedWebServiceQualifiedName", {
            get: function () { return this.__importedWebService.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "serviceName", {
            get: function () { return this.__serviceName.get(); },
            set: function (newValue) { this.__serviceName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "operationName", {
            get: function () { return this.__operationName.get(); },
            set: function (newValue) { this.__operationName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "useRequestTimeOut", {
            get: function () { return this.__useRequestTimeOut.get(); },
            set: function (newValue) { this.__useRequestTimeOut.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "timeOut", {
            get: function () { return this.__timeOut.get(); },
            set: function (newValue) { this.__timeOut.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "sendNullValueChoice", {
            /**
             * In version 6.7.0: deleted
             */
            get: function () { return this.__sendNullValueChoice.get(); },
            set: function (newValue) { this.__sendNullValueChoice.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "requestHeaderHandling", {
            get: function () { return this.__requestHeaderHandling.get(); },
            set: function (newValue) { this.__requestHeaderHandling.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "requestBodyHandling", {
            get: function () { return this.__requestBodyHandling.get(); },
            set: function (newValue) { this.__requestBodyHandling.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "resultHandling", {
            get: function () { return this.__resultHandling.get(); },
            set: function (newValue) { this.__resultHandling.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "httpConfiguration", {
            get: function () { return this.__httpConfiguration.get(); },
            set: function (newValue) { this.__httpConfiguration.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceCallAction.prototype, "isValidationRequired", {
            get: function () { return this.__isValidationRequired.get(); },
            set: function (newValue) { this.__isValidationRequired.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new WebServiceCallAction instance in the SDK and on the server.
         * The new WebServiceCallAction will be automatically stored in the 'action' property
         * of the parent ActionActivity element passed as argument.
         */
        WebServiceCallAction.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WebServiceCallAction, "action", false);
        };
        /**
         * Creates and returns a new WebServiceCallAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WebServiceCallAction.create = function (model) {
            return internal.instancehelpers.createElement(model, WebServiceCallAction);
        };
        WebServiceCallAction.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.httpConfiguration = HttpConfiguration.create(this.model);
            this.requestBodyHandling = SimpleRequestHandling.create(this.model);
            this.requestHeaderHandling = SimpleRequestHandling.create(this.model);
            this.resultHandling = ResultHandling.create(this.model);
            if (this.__sendNullValueChoice.isAvailable) {
                this.sendNullValueChoice = NullValueOption.LeaveOutElement;
            }
            this.timeOut = 30;
        };
        return WebServiceCallAction;
    }(MicroflowAction));
    WebServiceCallAction.typeName = "Microflows$WebServiceCallAction";
    WebServiceCallAction.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "sendNullValueChoice": {
                "deleted": "6.7.0",
                "deletionMessage": null
            },
            "requestHeaderHandling": {
                "required": {
                    "currentValue": true
                }
            },
            "requestBodyHandling": {
                "required": {
                    "currentValue": true
                }
            },
            "resultHandling": {
                "required": {
                    "currentValue": true
                }
            },
            "httpConfiguration": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    microflows.WebServiceCallAction = WebServiceCallAction;
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.

     *
     * In version 6.3.0: introduced
     */
    var WebServiceOperationParameterMapping = (function (_super) {
        __extends(WebServiceOperationParameterMapping, _super);
        function WebServiceOperationParameterMapping(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__isChecked = new internal.PrimitiveProperty(WebServiceOperationParameterMapping, _this, "isChecked", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__parameterName = new internal.PrimitiveProperty(WebServiceOperationParameterMapping, _this, "parameterName", "", internal.PrimitiveTypeEnum.String);
            _this.__argument = new internal.PrimitiveProperty(WebServiceOperationParameterMapping, _this, "argument", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new WebServiceOperationParameterMapping() cannot be invoked directly, please use 'model.microflows.createWebServiceOperationParameterMapping()'");
            }
            return _this;
        }
        Object.defineProperty(WebServiceOperationParameterMapping.prototype, "containerAsAdvancedRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, AdvancedRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceOperationParameterMapping.prototype, "containerAsSimpleRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, SimpleRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceOperationParameterMapping.prototype, "isChecked", {
            get: function () { return this.__isChecked.get(); },
            set: function (newValue) { this.__isChecked.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceOperationParameterMapping.prototype, "parameterName", {
            get: function () { return this.__parameterName.get(); },
            set: function (newValue) { this.__parameterName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceOperationParameterMapping.prototype, "argument", {
            /**
             * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
             */
            get: function () { return this.__argument.get(); },
            set: function (newValue) { this.__argument.set(newValue); },
            enumerable: true,
            configurable: true
        });
        WebServiceOperationParameterMapping.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.isChecked = true;
        };
        return WebServiceOperationParameterMapping;
    }(internal.Element));
    WebServiceOperationParameterMapping.typeName = "Microflows$WebServiceOperationParameterMapping";
    WebServiceOperationParameterMapping.versionInfo = new exports.StructureVersionInfo({
        "introduced": "6.3.0"
    }, internal.StructureType.Element);
    microflows.WebServiceOperationParameterMapping = WebServiceOperationParameterMapping;
    /**
     * TODO
     */
    var WebServiceOperationAdvancedParameterMapping = (function (_super) {
        __extends(WebServiceOperationAdvancedParameterMapping, _super);
        function WebServiceOperationAdvancedParameterMapping(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__mapping = new internal.ByNameReferenceProperty(WebServiceOperationAdvancedParameterMapping, _this, "mapping", null, "ExportMappings$ExportMapping");
            _this.__mappingArgumentVariableName = new internal.PrimitiveProperty(WebServiceOperationAdvancedParameterMapping, _this, "mappingArgumentVariableName", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new WebServiceOperationAdvancedParameterMapping() cannot be invoked directly, please use 'model.microflows.createWebServiceOperationAdvancedParameterMapping()'");
            }
            return _this;
        }
        Object.defineProperty(WebServiceOperationAdvancedParameterMapping.prototype, "containerAsAdvancedRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, AdvancedRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceOperationAdvancedParameterMapping.prototype, "mapping", {
            get: function () { return this.__mapping.get(); },
            set: function (newValue) { this.__mapping.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceOperationAdvancedParameterMapping.prototype, "mappingQualifiedName", {
            get: function () { return this.__mapping.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceOperationAdvancedParameterMapping.prototype, "mappingArgumentVariableName", {
            get: function () { return this.__mappingArgumentVariableName.get(); },
            set: function (newValue) { this.__mappingArgumentVariableName.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new WebServiceOperationAdvancedParameterMapping instance in the SDK and on the server.
         * The new WebServiceOperationAdvancedParameterMapping will be automatically stored in the 'parameterMappings' property
         * of the parent AdvancedRequestHandling element passed as argument.
         */
        WebServiceOperationAdvancedParameterMapping.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WebServiceOperationAdvancedParameterMapping, "parameterMappings", true);
        };
        /**
         * Creates and returns a new WebServiceOperationAdvancedParameterMapping instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WebServiceOperationAdvancedParameterMapping.create = function (model) {
            return internal.instancehelpers.createElement(model, WebServiceOperationAdvancedParameterMapping);
        };
        WebServiceOperationAdvancedParameterMapping.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return WebServiceOperationAdvancedParameterMapping;
    }(WebServiceOperationParameterMapping));
    WebServiceOperationAdvancedParameterMapping.typeName = "Microflows$WebServiceOperationAdvancedParameterMapping";
    WebServiceOperationAdvancedParameterMapping.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.WebServiceOperationAdvancedParameterMapping = WebServiceOperationAdvancedParameterMapping;
    /**
     * TODO
     */
    var WebServiceOperationSimpleParameterMapping = (function (_super) {
        __extends(WebServiceOperationSimpleParameterMapping, _super);
        function WebServiceOperationSimpleParameterMapping(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__parameterPath = new internal.PrimitiveProperty(WebServiceOperationSimpleParameterMapping, _this, "parameterPath", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new WebServiceOperationSimpleParameterMapping() cannot be invoked directly, please use 'model.microflows.createWebServiceOperationSimpleParameterMapping()'");
            }
            return _this;
        }
        Object.defineProperty(WebServiceOperationSimpleParameterMapping.prototype, "containerAsSimpleRequestHandling", {
            get: function () { return _super.prototype.getContainerAs.call(this, SimpleRequestHandling); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WebServiceOperationSimpleParameterMapping.prototype, "parameterPath", {
            /**
             * The value of this property is conceptually of type mappings.ElementPath.
             */
            get: function () { return this.__parameterPath.get(); },
            set: function (newValue) { this.__parameterPath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new WebServiceOperationSimpleParameterMapping instance in the SDK and on the server.
         * The new WebServiceOperationSimpleParameterMapping will be automatically stored in the 'parameterMappings' property
         * of the parent SimpleRequestHandling element passed as argument.
         */
        WebServiceOperationSimpleParameterMapping.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WebServiceOperationSimpleParameterMapping, "parameterMappings", true);
        };
        /**
         * Creates and returns a new WebServiceOperationSimpleParameterMapping instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WebServiceOperationSimpleParameterMapping.create = function (model) {
            return internal.instancehelpers.createElement(model, WebServiceOperationSimpleParameterMapping);
        };
        WebServiceOperationSimpleParameterMapping.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return WebServiceOperationSimpleParameterMapping;
    }(WebServiceOperationParameterMapping));
    WebServiceOperationSimpleParameterMapping.typeName = "Microflows$WebServiceOperationSimpleParameterMapping";
    WebServiceOperationSimpleParameterMapping.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    microflows.WebServiceOperationSimpleParameterMapping = WebServiceOperationSimpleParameterMapping;
})(microflows = exports.microflows || (exports.microflows = {}));
var pages_1 = require("./pages");
var texts_1 = require("./texts");
