import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;
import { projects } from "./projects";
export declare namespace webservices {
    class AppServiceState extends internal.IEnum {
        static Draft: AppServiceState;
        static Consumable: AppServiceState;
        static Deprecated: AppServiceState;
        protected qualifiedTsTypeName: string;
    }
    class HeaderAuthentication extends internal.IEnum {
        static None: HeaderAuthentication;
        static UsernamePassword: HeaderAuthentication;
        static Custom: HeaderAuthentication;
        protected qualifiedTsTypeName: string;
    }
    class SoapVersion extends internal.IEnum {
        static Soap11: SoapVersion;
        static Soap12: SoapVersion;
        protected qualifiedTsTypeName: string;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `WebServices`.
     */
    interface IDataMember extends internal.IElement {
        model: IModel;
        containerAsDataEntityBase: IDataEntityBase;
        containerAsPublishedParameter: IPublishedParameter;
        containerAsPublishedResource: IPublishedResource;
        load(): DataMember;
        load(callback: (element: DataMember) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class DataMember extends internal.Element implements IDataMember {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataEntityBase: DataEntityBase;
        readonly containerAsPublishedParameter: PublishedParameter;
        readonly containerAsPublishedResource: PublishedResource;

        isLockedByContract: boolean;

        exposedName: string;

        isOptionalByContract: boolean;

        isOptional: boolean;

        isNillableByContract: boolean;

        isNillable: boolean;

        isKey: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IDataEntityBase extends IDataMember {
        model: IModel;
        containerAsDataEntityBase: IDataEntityBase;
        containerAsPublishedParameter: IPublishedParameter;
        containerAsPublishedResource: IPublishedResource;
        load(): DataEntityBase;
        load(callback: (element: DataEntityBase) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class DataEntityBase extends DataMember implements IDataEntityBase {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataEntityBase: DataEntityBase;
        readonly containerAsPublishedParameter: PublishedParameter;
        readonly containerAsPublishedResource: PublishedResource;

        childMembers: internal.IList<DataMember>;

        entity: domainmodels.IEntity;
        readonly entityQualifiedName: string;

        exposedItemName: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IDataAssociation extends IDataEntityBase {
        model: IModel;
        containerAsDataEntityBase: IDataEntityBase;
        load(): DataAssociation;
        load(callback: (element: DataAssociation) => void, forceRefresh?: boolean): any;
    }
    class DataAssociation extends DataEntityBase implements IDataAssociation {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataEntityBase: DataEntityBase;

        associationByContract: appservices.MsdAssociation;

        association: domainmodels.IAssociationBase;
        readonly associationQualifiedName: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataAssociation instance in the SDK and on the server.
         * The new DataAssociation will be automatically stored in the 'childMembers' property
         * of the parent DataEntityBase element passed as argument.
         */
        static createIn(container: DataEntityBase): DataAssociation;
        /**
         * Creates and returns a new DataAssociation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataAssociation;

    }
    interface IDataAttribute extends IDataMember {
        model: IModel;
        containerAsDataEntityBase: IDataEntityBase;
        load(): DataAttribute;
        load(callback: (element: DataAttribute) => void, forceRefresh?: boolean): any;
    }
    class DataAttribute extends DataMember implements IDataAttribute {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataEntityBase: DataEntityBase;

        attributeByContract: appservices.MsdAttribute;

        attribute: domainmodels.IAttribute;
        readonly attributeQualifiedName: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataAttribute instance in the SDK and on the server.
         * The new DataAttribute will be automatically stored in the 'childMembers' property
         * of the parent DataEntityBase element passed as argument.
         */
        static createIn(container: DataEntityBase): DataAttribute;
        /**
         * Creates and returns a new DataAttribute instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataAttribute;

    }
    interface IDataEntity extends IDataEntityBase {
        model: IModel;
        containerAsDataEntityBase: IDataEntityBase;
        containerAsPublishedParameter: IPublishedParameter;
        containerAsPublishedResource: IPublishedResource;
        load(): DataEntity;
        load(callback: (element: DataEntity) => void, forceRefresh?: boolean): any;
    }
    class DataEntity extends DataEntityBase implements IDataEntity {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataEntityBase: DataEntityBase;
        readonly containerAsPublishedParameter: PublishedParameter;
        readonly containerAsPublishedResource: PublishedResource;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataEntity instance in the SDK and on the server.
         * The new DataEntity will be automatically stored in the 'childMembers' property
         * of the parent DataEntityBase element passed as argument.
         */
        static createInDataEntityBaseUnderChildMembers(container: DataEntityBase): DataEntity;
        /**
         * Creates and returns a new DataEntity instance in the SDK and on the server.
         * The new DataEntity will be automatically stored in the 'dataEntity' property
         * of the parent PublishedParameter element passed as argument.
         */
        static createInPublishedParameterUnderDataEntity(container: PublishedParameter): DataEntity;
        /**
         * Creates and returns a new DataEntity instance in the SDK and on the server.
         * The new DataEntity will be automatically stored in the 'dataEntity' property
         * of the parent PublishedResource element passed as argument.
         */
        static createInPublishedResourceUnderDataEntity(container: PublishedResource): DataEntity;
        /**
         * Creates and returns a new DataEntity instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataEntity;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/consumed-web-services relevant section in reference guide}
     */
    interface IImportedWebService extends projects.IDocument {
        model: IModel;
        containerAsFolderBase: projects.IFolderBase;
        load(): ImportedWebService;
        load(callback: (element: ImportedWebService) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/consumed-web-services relevant section in reference guide}
     */
    class ImportedWebService extends projects.Document implements IImportedWebService {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsFolderBase: projects.FolderBase;

        wsdlDescription: WsdlDescription;

        wsdlUrl: string;

        /**
         * In version 6.4.1: introduced
         */
        useMtom: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new ImportedWebService unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): ImportedWebService;


    }
    interface IOperationInfo extends internal.IElement {
        model: IModel;
        containerAsServiceInfo: IServiceInfo;
        load(): OperationInfo;
        load(callback: (element: OperationInfo) => void, forceRefresh?: boolean): any;
    }
    class OperationInfo extends internal.Element implements IOperationInfo {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsServiceInfo: ServiceInfo;

        name: string;

        documentation: string;

        soapAction: string;

        requestHeaderRpcElement: RpcOperationElement;

        requestBodyRpcElement: RpcOperationElement;

        responseBodyRpcElement: RpcOperationElement;

        requestHeaderElementName: string;

        requestHeaderEncoded: boolean;

        requestHeaderPartEncoding: PartEncoding;

        requestBodyEncoded: boolean;

        requestBodyElementName: string;

        requestBodyPartEncodings: internal.IList<PartEncoding>;

        responseBodyElementName: string;

        /**
         * In version 6.1.0: deleted
         */
        allowSimpleMappingInheritance: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new OperationInfo instance in the SDK and on the server.
         * The new OperationInfo will be automatically stored in the 'operations' property
         * of the parent ServiceInfo element passed as argument.
         */
        static createIn(container: ServiceInfo): OperationInfo;
        /**
         * Creates and returns a new OperationInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): OperationInfo;

    }
    interface IPartEncoding extends internal.IElement {
        model: IModel;
        containerAsOperationInfo: IOperationInfo;
        load(): PartEncoding;
        load(callback: (element: PartEncoding) => void, forceRefresh?: boolean): any;
    }
    class PartEncoding extends internal.Element implements IPartEncoding {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsOperationInfo: OperationInfo;

        partName: string;

        partXsdType: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new PartEncoding instance in the SDK and on the server.
         * The new PartEncoding will be automatically stored in the 'requestBodyPartEncodings' property
         * of the parent OperationInfo element passed as argument.
         */
        static createInOperationInfoUnderRequestBodyPartEncodings(container: OperationInfo): PartEncoding;
        /**
         * Creates and returns a new PartEncoding instance in the SDK and on the server.
         * The new PartEncoding will be automatically stored in the 'requestHeaderPartEncoding' property
         * of the parent OperationInfo element passed as argument.
         */
        static createInOperationInfoUnderRequestHeaderPartEncoding(container: OperationInfo): PartEncoding;
        /**
         * Creates and returns a new PartEncoding instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): PartEncoding;

    }
    interface IPublishedServiceBase extends projects.IDocument {
        model: IModel;
        containerAsFolderBase: projects.IFolderBase;
        load(): PublishedServiceBase;
        load(callback: (element: PublishedServiceBase) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class PublishedServiceBase extends projects.Document implements IPublishedServiceBase {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsFolderBase: projects.FolderBase;

        versionedServices: internal.IList<VersionedService>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/published-app-services relevant section in reference guide}
     */
    interface IPublishedAppService extends IPublishedServiceBase {
        model: IModel;
        containerAsFolderBase: projects.IFolderBase;
        load(): PublishedAppService;
        load(callback: (element: PublishedAppService) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/published-app-services relevant section in reference guide}
     */
    class PublishedAppService extends PublishedServiceBase implements IPublishedAppService {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsFolderBase: projects.FolderBase;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new PublishedAppService unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): PublishedAppService;

    }
    interface IPublishedResource extends internal.IElement {
        model: IModel;
        containerAsPublishedRestServiceBase: rest.IPublishedRestServiceBase;
        containerAsVersionedService: IVersionedService;
        load(): PublishedResource;
        load(callback: (element: PublishedResource) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class PublishedResource extends internal.Element implements IPublishedResource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsPublishedRestServiceBase: rest.PublishedRestServiceBase;
        readonly containerAsVersionedService: VersionedService;

        dataEntity: DataEntity;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IPublishedOperation extends IPublishedResource {
        model: IModel;
        containerAsVersionedService: IVersionedService;
        load(): PublishedOperation;
        load(callback: (element: PublishedOperation) => void, forceRefresh?: boolean): any;
    }
    class PublishedOperation extends PublishedResource implements IPublishedOperation {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsVersionedService: VersionedService;

        isLockedByContract: boolean;

        name: string;

        image: images.IImage;
        readonly imageQualifiedName: string;

        description: string;

        documentation: string;

        microflow: microflows.IMicroflow;
        readonly microflowQualifiedName: string;

        parameters: internal.IList<PublishedParameter>;

        returnTypeNameByContract: string;

        returnTypeSpecificationByContract: string;

        entityExposedNameByContract: string;

        entityExposedName: string;

        /**
         * The value of this property is conceptually of type dataTypes.DataType.
         */
        returnType: string;

        returnTypeIsOptional: boolean;

        returnTypeIsNillable: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new PublishedOperation instance in the SDK and on the server.
         * The new PublishedOperation will be automatically stored in the 'operations' property
         * of the parent VersionedService element passed as argument.
         */
        static createIn(container: VersionedService): PublishedOperation;
        /**
         * Creates and returns a new PublishedOperation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): PublishedOperation;

    }
    interface IPublishedParameter extends internal.IElement {
        model: IModel;
        containerAsPublishedOperation: IPublishedOperation;
        load(): PublishedParameter;
        load(callback: (element: PublishedParameter) => void, forceRefresh?: boolean): any;
    }
    class PublishedParameter extends internal.Element implements IPublishedParameter {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsPublishedOperation: PublishedOperation;

        isLockedByContract: boolean;

        parameter: microflows.IMicroflowParameter;
        readonly parameterQualifiedName: string;

        parameterByContract: appservices.MsdMicroflowParameter;

        entityExposedName: string;

        isOptionalByContract: boolean;

        isOptional: boolean;

        isNillable: boolean;

        entityExposedItemNameByContract: string;

        entityExposedItemName: string;

        /**
         * The value of this property is conceptually of type dataTypes.DataType.
         */
        type: string;

        dataEntity: DataEntity;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new PublishedParameter instance in the SDK and on the server.
         * The new PublishedParameter will be automatically stored in the 'parameters' property
         * of the parent PublishedOperation element passed as argument.
         */
        static createIn(container: PublishedOperation): PublishedParameter;
        /**
         * Creates and returns a new PublishedParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): PublishedParameter;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/published-web-services relevant section in reference guide}
     */
    interface IPublishedWebService extends IPublishedServiceBase {
        model: IModel;
        containerAsFolderBase: projects.IFolderBase;
        load(): PublishedWebService;
        load(callback: (element: PublishedWebService) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/published-web-services relevant section in reference guide}
     */
    class PublishedWebService extends PublishedServiceBase implements IPublishedWebService {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsFolderBase: projects.FolderBase;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new PublishedWebService unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): PublishedWebService;

    }
    interface IRpcMessagePartElement extends internal.IElement {
        model: IModel;
        containerAsRpcOperationElement: IRpcOperationElement;
        load(): RpcMessagePartElement;
        load(callback: (element: RpcMessagePartElement) => void, forceRefresh?: boolean): any;
    }
    class RpcMessagePartElement extends internal.Element implements IRpcMessagePartElement {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsRpcOperationElement: RpcOperationElement;

        partName: string;

        typeName: string;

        elementName: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new RpcMessagePartElement instance in the SDK and on the server.
         * The new RpcMessagePartElement will be automatically stored in the 'messagePartElements' property
         * of the parent RpcOperationElement element passed as argument.
         */
        static createIn(container: RpcOperationElement): RpcMessagePartElement;
        /**
         * Creates and returns a new RpcMessagePartElement instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): RpcMessagePartElement;

    }
    interface IRpcOperationElement extends internal.IElement {
        model: IModel;
        containerAsOperationInfo: IOperationInfo;
        load(): RpcOperationElement;
        load(callback: (element: RpcOperationElement) => void, forceRefresh?: boolean): any;
    }
    class RpcOperationElement extends internal.Element implements IRpcOperationElement {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsOperationInfo: OperationInfo;

        name: string;

        messagePartElements: internal.IList<RpcMessagePartElement>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new RpcOperationElement instance in the SDK and on the server.
         * The new RpcOperationElement will be automatically stored in the 'requestBodyRpcElement' property
         * of the parent OperationInfo element passed as argument.
         */
        static createInOperationInfoUnderRequestBodyRpcElement(container: OperationInfo): RpcOperationElement;
        /**
         * Creates and returns a new RpcOperationElement instance in the SDK and on the server.
         * The new RpcOperationElement will be automatically stored in the 'requestHeaderRpcElement' property
         * of the parent OperationInfo element passed as argument.
         */
        static createInOperationInfoUnderRequestHeaderRpcElement(container: OperationInfo): RpcOperationElement;
        /**
         * Creates and returns a new RpcOperationElement instance in the SDK and on the server.
         * The new RpcOperationElement will be automatically stored in the 'responseBodyRpcElement' property
         * of the parent OperationInfo element passed as argument.
         */
        static createInOperationInfoUnderResponseBodyRpcElement(container: OperationInfo): RpcOperationElement;
        /**
         * Creates and returns a new RpcOperationElement instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): RpcOperationElement;

    }
    interface IServiceInfo extends internal.IElement {
        model: IModel;
        containerAsWsdlDescription: IWsdlDescription;
        load(): ServiceInfo;
        load(callback: (element: ServiceInfo) => void, forceRefresh?: boolean): any;
    }
    class ServiceInfo extends internal.Element implements IServiceInfo {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsWsdlDescription: WsdlDescription;

        name: string;

        documentation: string;

        portName: string;

        location: string;

        soapVersion: SoapVersion;

        locationConstant: constants.IConstant;
        readonly locationConstantQualifiedName: string;

        operations: internal.IList<OperationInfo>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ServiceInfo instance in the SDK and on the server.
         * The new ServiceInfo will be automatically stored in the 'services' property
         * of the parent WsdlDescription element passed as argument.
         */
        static createIn(container: WsdlDescription): ServiceInfo;
        /**
         * Creates and returns a new ServiceInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ServiceInfo;

    }
    /**
     * In version 6.7.0: introduced
     */
    interface ISystemIdDataAttribute extends IDataMember {
        model: IModel;
        containerAsDataEntityBase: IDataEntityBase;
        load(): SystemIdDataAttribute;
        load(callback: (element: SystemIdDataAttribute) => void, forceRefresh?: boolean): any;
    }
    /**
     * In version 6.7.0: introduced
     */
    class SystemIdDataAttribute extends DataMember implements ISystemIdDataAttribute {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataEntityBase: DataEntityBase;

        entity: domainmodels.IEntity;
        readonly entityQualifiedName: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SystemIdDataAttribute instance in the SDK and on the server.
         * The new SystemIdDataAttribute will be automatically stored in the 'childMembers' property
         * of the parent DataEntityBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createIn(container: DataEntityBase): SystemIdDataAttribute;
        /**
         * Creates and returns a new SystemIdDataAttribute instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SystemIdDataAttribute;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/published-web-services relevant section in reference guide}
     */
    interface IVersionedService extends internal.IElement {
        model: IModel;
        containerAsPublishedServiceBase: IPublishedServiceBase;
        load(): VersionedService;
        load(callback: (element: VersionedService) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/published-web-services relevant section in reference guide}
     */
    class VersionedService extends internal.Element implements IVersionedService {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsPublishedServiceBase: PublishedServiceBase;

        documentation: string;

        targetNamespace: string;

        headerAuthentication: HeaderAuthentication;

        operations: internal.IList<PublishedOperation>;

        isLockedByContract: boolean;

        enumerationsByContract: appservices.MsdEnumerationContainer;

        headerImportMapping: importmappings.IImportMapping;
        readonly headerImportMappingQualifiedName: string;

        headerMicroflow: microflows.IMicroflow;
        readonly headerMicroflowQualifiedName: string;

        versionNumber: number;

        caption: string;

        description: string;

        appServiceState: AppServiceState;

        image: images.IImage;
        readonly imageQualifiedName: string;

        validate: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new VersionedService instance in the SDK and on the server.
         * The new VersionedService will be automatically stored in the 'versionedServices' property
         * of the parent PublishedServiceBase element passed as argument.
         */
        static createIn(container: PublishedServiceBase): VersionedService;
        /**
         * Creates and returns a new VersionedService instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): VersionedService;

    }
    interface IWsdlDescription extends internal.IElement {
        model: IModel;
        containerAsMsd: appservices.IMsd;
        containerAsImportedWebService: IImportedWebService;
        load(): WsdlDescription;
        load(callback: (element: WsdlDescription) => void, forceRefresh?: boolean): any;
    }
    class WsdlDescription extends internal.Element implements IWsdlDescription {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMsd: appservices.Msd;
        readonly containerAsImportedWebService: ImportedWebService;

        wsdlEntries: internal.IList<WsdlEntry>;

        schemaEntries: internal.IList<xmlschemas.XmlSchemaEntry>;

        services: internal.IList<ServiceInfo>;

        targetNamespace: string;

        importsHaveLocations: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new WsdlDescription instance in the SDK and on the server.
         * The new WsdlDescription will be automatically stored in the 'wsdlDescription' property
         * of the parent appservices.Msd element passed as argument.
         */
        static createInMsdUnderWsdlDescription(container: appservices.Msd): WsdlDescription;
        /**
         * Creates and returns a new WsdlDescription instance in the SDK and on the server.
         * The new WsdlDescription will be automatically stored in the 'wsdlDescription' property
         * of the parent ImportedWebService element passed as argument.
         */
        static createInImportedWebServiceUnderWsdlDescription(container: ImportedWebService): WsdlDescription;
        /**
         * Creates and returns a new WsdlDescription instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): WsdlDescription;

    }
    interface IWsdlEntry extends internal.IElement {
        model: IModel;
        containerAsWsdlDescription: IWsdlDescription;
        load(): WsdlEntry;
        load(callback: (element: WsdlEntry) => void, forceRefresh?: boolean): any;
    }
    class WsdlEntry extends internal.Element implements IWsdlEntry {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsWsdlDescription: WsdlDescription;

        location: string;

        contents: string;

        localizedLocationFormat: string;

        localizedContentsFormat: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new WsdlEntry instance in the SDK and on the server.
         * The new WsdlEntry will be automatically stored in the 'wsdlEntries' property
         * of the parent WsdlDescription element passed as argument.
         */
        static createIn(container: WsdlDescription): WsdlEntry;
        /**
         * Creates and returns a new WsdlEntry instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): WsdlEntry;

    }
}
import { appservices } from "./appservices";
import { constants } from "./constants";
import { domainmodels } from "./domainmodels";
import { images } from "./images";
import { importmappings } from "./importmappings";
import { microflows } from "./microflows";
import { rest } from "./rest";
import { xmlschemas } from "./xmlschemas";
import { IModel } from "./base-model";
