import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;
import { common } from "../common";
import { projects } from "./projects";
export declare namespace documenttemplates {
    class BorderStyle extends internal.IEnum {
        static None: BorderStyle;
        static Dotted: BorderStyle;
        static Dashed: BorderStyle;
        static Solid: BorderStyle;
        protected qualifiedTsTypeName: string;
    }
    class FontFamily extends internal.IEnum {
        static Courier: FontFamily;
        static Tahoma: FontFamily;
        static Times: FontFamily;
        static Helvetica: FontFamily;
        static Arial: FontFamily;
        protected qualifiedTsTypeName: string;
    }
    class TextAlign extends internal.IEnum {
        static Left: TextAlign;
        static Right: TextAlign;
        static Center: TextAlign;
        protected qualifiedTsTypeName: string;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `DocumentTemplates`.
     */
    interface IWidget extends internal.IElement {
        model: IModel;
        containerAsDocumentTemplate: IDocumentTemplate;
        containerAsDropZone: IDropZone;
        load(): Widget;
        load(callback: (element: Widget) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class Widget extends internal.Element implements IWidget {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDocumentTemplate: DocumentTemplate;
        readonly containerAsDropZone: DropZone;

        name: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IAttributeWidget extends IWidget {
        model: IModel;
        containerAsDocumentTemplate: IDocumentTemplate;
        containerAsDropZone: IDropZone;
        load(): AttributeWidget;
        load(callback: (element: AttributeWidget) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class AttributeWidget extends Widget implements IAttributeWidget {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDocumentTemplate: DocumentTemplate;
        readonly containerAsDropZone: DropZone;

        /**
         * The value of this property is conceptually of type paths.AttributePath.
         */
        attributePath: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IConditionSettings extends internal.IElement {
        model: IModel;
        containerAsTableRow: ITableRow;
        load(): ConditionSettings;
        load(callback: (element: ConditionSettings) => void, forceRefresh?: boolean): any;
    }
    class ConditionSettings extends internal.Element implements IConditionSettings {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsTableRow: TableRow;

        conditions: internal.IList<enumerations.Condition>;

        attribute: domainmodels.IAttribute;
        readonly attributeQualifiedName: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ConditionSettings instance in the SDK and on the server.
         * The new ConditionSettings will be automatically stored in the 'conditionSettings' property
         * of the parent TableRow element passed as argument.
         */
        static createIn(container: TableRow): ConditionSettings;
        /**
         * Creates and returns a new ConditionSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ConditionSettings;

    }
    interface IEntityWidget extends IWidget {
        model: IModel;
        containerAsDocumentTemplate: IDocumentTemplate;
        containerAsDropZone: IDropZone;
        load(): EntityWidget;
        load(callback: (element: EntityWidget) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class EntityWidget extends Widget implements IEntityWidget {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDocumentTemplate: DocumentTemplate;
        readonly containerAsDropZone: DropZone;

        /**
         * The value of this property is conceptually of type paths.EntityPath.
         */
        entityPath: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IGrid extends IEntityWidget {
        model: IModel;
        containerAsDocumentTemplate: IDocumentTemplate;
        containerAsDropZone: IDropZone;
        load(): Grid;
        load(callback: (element: Grid) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class Grid extends EntityWidget implements IGrid {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDocumentTemplate: DocumentTemplate;
        readonly containerAsDropZone: DropZone;

        cellSpacing: number;

        cellPadding: number;

        style: Style;

        sortBar: GridSortBar;

        microflow: microflows.IMicroflow;
        readonly microflowQualifiedName: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-grid-(document-template) relevant section in reference guide}
     */
    interface IDataGrid extends IGrid {
        model: IModel;
        containerAsDocumentTemplate: IDocumentTemplate;
        containerAsDropZone: IDropZone;
        load(): DataGrid;
        load(callback: (element: DataGrid) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-grid-(document-template) relevant section in reference guide}
     */
    class DataGrid extends Grid implements IDataGrid {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDocumentTemplate: DocumentTemplate;
        readonly containerAsDropZone: DropZone;

        columns: internal.IList<DataGridColumn>;

        weights: internal.IList<number>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'toplevels' property
         * of the parent DocumentTemplate element passed as argument.
         */
        static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent DropZone element passed as argument.
         */
        static createInDropZoneUnderWidget(container: DropZone): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataGrid;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/columns-(document-template) relevant section in reference guide}
     */
    interface IDataGridCell extends internal.IElement {
        model: IModel;
        containerAsDataGridColumn: IDataGridColumn;
        load(): DataGridCell;
        load(callback: (element: DataGridCell) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/columns-(document-template) relevant section in reference guide}
     */
    class DataGridCell extends internal.Element implements IDataGridCell {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataGridColumn: DataGridColumn;

        style: Style;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataGridCell instance in the SDK and on the server.
         * The new DataGridCell will be automatically stored in the 'evenRowsCell' property
         * of the parent DataGridColumn element passed as argument.
         */
        static createInDataGridColumnUnderEvenRowsCell(container: DataGridColumn): DataGridCell;
        /**
         * Creates and returns a new DataGridCell instance in the SDK and on the server.
         * The new DataGridCell will be automatically stored in the 'oddRowsCell' property
         * of the parent DataGridColumn element passed as argument.
         */
        static createInDataGridColumnUnderOddRowsCell(container: DataGridColumn): DataGridCell;
        /**
         * Creates and returns a new DataGridCell instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataGridCell;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/columns-(document-template) relevant section in reference guide}
     */
    interface IDataGridColumn extends internal.IElement {
        model: IModel;
        containerAsDataGrid: IDataGrid;
        load(): DataGridColumn;
        load(callback: (element: DataGridColumn) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/columns-(document-template) relevant section in reference guide}
     */
    class DataGridColumn extends internal.Element implements IDataGridColumn {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataGrid: DataGrid;

        /**
         * The value of this property is conceptually of type paths.AttributePath.
         */
        attributePath: string;

        caption: texts.Text;

        style: Style;

        oddRowsCell: DataGridCell;

        evenRowsCell: DataGridCell;

        formattingInfo: pages.FormattingInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataGridColumn instance in the SDK and on the server.
         * The new DataGridColumn will be automatically stored in the 'columns' property
         * of the parent DataGrid element passed as argument.
         */
        static createIn(container: DataGrid): DataGridColumn;
        /**
         * Creates and returns a new DataGridColumn instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataGridColumn;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-(document-template) relevant section in reference guide}
     */
    interface IDataView extends IEntityWidget {
        model: IModel;
        containerAsDocumentTemplate: IDocumentTemplate;
        containerAsDropZone: IDropZone;
        load(): DataView;
        load(callback: (element: DataView) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-(document-template) relevant section in reference guide}
     */
    class DataView extends EntityWidget implements IDataView {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDocumentTemplate: DocumentTemplate;
        readonly containerAsDropZone: DropZone;

        contents: DataViewContents;

        microflow: microflows.IMicroflow;
        readonly microflowQualifiedName: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'toplevels' property
         * of the parent DocumentTemplate element passed as argument.
         */
        static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent DropZone element passed as argument.
         */
        static createInDropZoneUnderWidget(container: DropZone): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataView;

    }
    interface IDropZone extends internal.IElement {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDocumentTemplate: IDocumentTemplate;
        containerAsTableRow: ITableRow;
        containerAsTemplateGrid: ITemplateGrid;
        load(): DropZone;
        load(callback: (element: DropZone) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class DropZone extends internal.Element implements IDropZone {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDocumentTemplate: DocumentTemplate;
        readonly containerAsTableRow: TableRow;
        readonly containerAsTemplateGrid: TemplateGrid;

        widget: Widget;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IDataViewContents extends IDropZone {
        model: IModel;
        containerAsDataView: IDataView;
        load(): DataViewContents;
        load(callback: (element: DataViewContents) => void, forceRefresh?: boolean): any;
    }
    class DataViewContents extends DropZone implements IDataViewContents {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataViewContents instance in the SDK and on the server.
         * The new DataViewContents will be automatically stored in the 'contents' property
         * of the parent DataView element passed as argument.
         */
        static createIn(container: DataView): DataViewContents;
        /**
         * Creates and returns a new DataViewContents instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataViewContents;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/document-templates relevant section in reference guide}
     */
    interface IDocumentTemplate extends projects.IDocument {
        model: IModel;
        containerAsFolderBase: projects.IFolderBase;
        load(): DocumentTemplate;
        load(callback: (element: DocumentTemplate) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/document-templates relevant section in reference guide}
     */
    class DocumentTemplate extends projects.Document implements IDocumentTemplate {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsFolderBase: projects.FolderBase;

        toplevels: internal.IList<Widget>;

        canvasWidth: number;

        pageWidth: string;

        pageHeight: string;

        ppi: number;

        marginLeftInInch: number;

        marginRightInInch: number;

        marginTopInInch: number;

        marginBottomInInch: number;

        style: Style;

        header: Header;

        footer: Footer;

        showHeaderAndFooterOnFirstPage: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new DocumentTemplate unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): DocumentTemplate;


    }
    interface IDocumentTemplateParameter extends internal.IElement {
        model: IModel;
        containerAsDocumentTemplate: IDocumentTemplate;
        name: string;
        /**
         * The value of this property is conceptually of type dataTypes.DataType.
         */
        type: string;
        load(): DocumentTemplateParameter;
        load(callback: (element: DocumentTemplateParameter) => void, forceRefresh?: boolean): any;
    }
    class DocumentTemplateParameter extends internal.Element implements IDocumentTemplateParameter {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDocumentTemplate: DocumentTemplate;

        name: string;

        /**
         * The value of this property is conceptually of type dataTypes.DataType.
         */
        type: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/dynamic-image-(document-template) relevant section in reference guide}
     */
    interface IDynamicImageViewer extends IEntityWidget {
        model: IModel;
        containerAsDocumentTemplate: IDocumentTemplate;
        containerAsDropZone: IDropZone;
        load(): DynamicImageViewer;
        load(callback: (element: DynamicImageViewer) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/dynamic-image-(document-template) relevant section in reference guide}
     */
    class DynamicImageViewer extends EntityWidget implements IDynamicImageViewer {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDocumentTemplate: DocumentTemplate;
        readonly containerAsDropZone: DropZone;

        defaultImage: images.IImage;
        readonly defaultImageQualifiedName: string;

        useThumbnail: boolean;

        width: number;

        height: number;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'toplevels' property
         * of the parent DocumentTemplate element passed as argument.
         */
        static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent DropZone element passed as argument.
         */
        static createInDropZoneUnderWidget(container: DropZone): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DynamicImageViewer;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/dynamic-label-(document-template) relevant section in reference guide}
     */
    interface IDynamicLabel extends IAttributeWidget {
        model: IModel;
        containerAsDocumentTemplate: IDocumentTemplate;
        containerAsDropZone: IDropZone;
        load(): DynamicLabel;
        load(callback: (element: DynamicLabel) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/dynamic-label-(document-template) relevant section in reference guide}
     */
    class DynamicLabel extends AttributeWidget implements IDynamicLabel {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDocumentTemplate: DocumentTemplate;
        readonly containerAsDropZone: DropZone;

        style: Style;

        renderXHTML: boolean;

        formattingInfo: pages.FormattingInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DynamicLabel instance in the SDK and on the server.
         * The new DynamicLabel will be automatically stored in the 'toplevels' property
         * of the parent DocumentTemplate element passed as argument.
         */
        static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): DynamicLabel;
        /**
         * Creates and returns a new DynamicLabel instance in the SDK and on the server.
         * The new DynamicLabel will be automatically stored in the 'widget' property
         * of the parent DropZone element passed as argument.
         */
        static createInDropZoneUnderWidget(container: DropZone): DynamicLabel;
        /**
         * Creates and returns a new DynamicLabel instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DynamicLabel;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/footer-(document-template) relevant section in reference guide}
     */
    interface IFooter extends IDropZone {
        model: IModel;
        containerAsDocumentTemplate: IDocumentTemplate;
        load(): Footer;
        load(callback: (element: Footer) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/footer-(document-template) relevant section in reference guide}
     */
    class Footer extends DropZone implements IFooter {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDocumentTemplate: DocumentTemplate;

        bottomMargin: number;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Footer instance in the SDK and on the server.
         * The new Footer will be automatically stored in the 'footer' property
         * of the parent DocumentTemplate element passed as argument.
         */
        static createIn(container: DocumentTemplate): Footer;
        /**
         * Creates and returns a new Footer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Footer;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/sort-bar relevant section in reference guide}
     */
    interface IGridSortBar extends internal.IElement {
        model: IModel;
        containerAsGrid: IGrid;
        load(): GridSortBar;
        load(callback: (element: GridSortBar) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/sort-bar relevant section in reference guide}
     */
    class GridSortBar extends internal.Element implements IGridSortBar {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsGrid: Grid;

        sortItems: internal.IList<GridSortItem>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * The new GridSortBar will be automatically stored in the 'sortBar' property
         * of the parent Grid element passed as argument.
         */
        static createIn(container: Grid): GridSortBar;
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridSortBar;

    }
    interface IGridSortItem extends internal.IElement {
        model: IModel;
        containerAsGridSortBar: IGridSortBar;
        load(): GridSortItem;
        load(callback: (element: GridSortItem) => void, forceRefresh?: boolean): any;
    }
    class GridSortItem extends internal.Element implements IGridSortItem {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsGridSortBar: GridSortBar;

        /**
         * The value of this property is conceptually of type paths.AttributePath.
         */
        attributePath: string;

        sortOrder: pages.SortDirection;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridSortItem instance in the SDK and on the server.
         * The new GridSortItem will be automatically stored in the 'sortItems' property
         * of the parent GridSortBar element passed as argument.
         */
        static createIn(container: GridSortBar): GridSortItem;
        /**
         * Creates and returns a new GridSortItem instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridSortItem;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/header-(document-template) relevant section in reference guide}
     */
    interface IHeader extends IDropZone {
        model: IModel;
        containerAsDocumentTemplate: IDocumentTemplate;
        load(): Header;
        load(callback: (element: Header) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/header-(document-template) relevant section in reference guide}
     */
    class Header extends DropZone implements IHeader {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDocumentTemplate: DocumentTemplate;

        topMargin: number;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'header' property
         * of the parent DocumentTemplate element passed as argument.
         */
        static createIn(container: DocumentTemplate): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Header;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/line-break-(document-template) relevant section in reference guide}
     */
    interface ILineBreak extends IWidget {
        model: IModel;
        containerAsDocumentTemplate: IDocumentTemplate;
        containerAsDropZone: IDropZone;
        load(): LineBreak;
        load(callback: (element: LineBreak) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/line-break-(document-template) relevant section in reference guide}
     */
    class LineBreak extends Widget implements ILineBreak {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDocumentTemplate: DocumentTemplate;
        readonly containerAsDropZone: DropZone;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new LineBreak instance in the SDK and on the server.
         * The new LineBreak will be automatically stored in the 'toplevels' property
         * of the parent DocumentTemplate element passed as argument.
         */
        static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): LineBreak;
        /**
         * Creates and returns a new LineBreak instance in the SDK and on the server.
         * The new LineBreak will be automatically stored in the 'widget' property
         * of the parent DropZone element passed as argument.
         */
        static createInDropZoneUnderWidget(container: DropZone): LineBreak;
        /**
         * Creates and returns a new LineBreak instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): LineBreak;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/page-break-(document-template) relevant section in reference guide}
     */
    interface IPageBreak extends IWidget {
        model: IModel;
        containerAsDocumentTemplate: IDocumentTemplate;
        containerAsDropZone: IDropZone;
        load(): PageBreak;
        load(callback: (element: PageBreak) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/page-break-(document-template) relevant section in reference guide}
     */
    class PageBreak extends Widget implements IPageBreak {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDocumentTemplate: DocumentTemplate;
        readonly containerAsDropZone: DropZone;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new PageBreak instance in the SDK and on the server.
         * The new PageBreak will be automatically stored in the 'toplevels' property
         * of the parent DocumentTemplate element passed as argument.
         */
        static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): PageBreak;
        /**
         * Creates and returns a new PageBreak instance in the SDK and on the server.
         * The new PageBreak will be automatically stored in the 'widget' property
         * of the parent DropZone element passed as argument.
         */
        static createInDropZoneUnderWidget(container: DropZone): PageBreak;
        /**
         * Creates and returns a new PageBreak instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): PageBreak;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/static-image-(document-template) relevant section in reference guide}
     */
    interface IStaticImageViewer extends IWidget {
        model: IModel;
        containerAsDocumentTemplate: IDocumentTemplate;
        containerAsDropZone: IDropZone;
        load(): StaticImageViewer;
        load(callback: (element: StaticImageViewer) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/static-image-(document-template) relevant section in reference guide}
     */
    class StaticImageViewer extends Widget implements IStaticImageViewer {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDocumentTemplate: DocumentTemplate;
        readonly containerAsDropZone: DropZone;

        image: images.IImage;
        readonly imageQualifiedName: string;

        width: number;

        height: number;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'toplevels' property
         * of the parent DocumentTemplate element passed as argument.
         */
        static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent DropZone element passed as argument.
         */
        static createInDropZoneUnderWidget(container: DropZone): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): StaticImageViewer;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/static-label-(document-template) relevant section in reference guide}
     */
    interface IStaticLabel extends IWidget {
        model: IModel;
        containerAsDocumentTemplate: IDocumentTemplate;
        containerAsDropZone: IDropZone;
        load(): StaticLabel;
        load(callback: (element: StaticLabel) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/static-label-(document-template) relevant section in reference guide}
     */
    class StaticLabel extends Widget implements IStaticLabel {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDocumentTemplate: DocumentTemplate;
        readonly containerAsDropZone: DropZone;

        caption: texts.Text;

        style: Style;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new StaticLabel instance in the SDK and on the server.
         * The new StaticLabel will be automatically stored in the 'toplevels' property
         * of the parent DocumentTemplate element passed as argument.
         */
        static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): StaticLabel;
        /**
         * Creates and returns a new StaticLabel instance in the SDK and on the server.
         * The new StaticLabel will be automatically stored in the 'widget' property
         * of the parent DropZone element passed as argument.
         */
        static createInDropZoneUnderWidget(container: DropZone): StaticLabel;
        /**
         * Creates and returns a new StaticLabel instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): StaticLabel;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/style relevant section in reference guide}
     */
    interface IStyle extends internal.IElement {
        model: IModel;
        containerAsDataGridCell: IDataGridCell;
        containerAsDataGridColumn: IDataGridColumn;
        containerAsDocumentTemplate: IDocumentTemplate;
        containerAsDynamicLabel: IDynamicLabel;
        containerAsGrid: IGrid;
        containerAsStaticLabel: IStaticLabel;
        containerAsTable: ITable;
        containerAsTableCell: ITableCell;
        containerAsTitle: ITitle;
        load(): Style;
        load(callback: (element: Style) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/style relevant section in reference guide}
     */
    class Style extends internal.Element implements IStyle {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataGridCell: DataGridCell;
        readonly containerAsDataGridColumn: DataGridColumn;
        readonly containerAsDocumentTemplate: DocumentTemplate;
        readonly containerAsDynamicLabel: DynamicLabel;
        readonly containerAsGrid: Grid;
        readonly containerAsStaticLabel: StaticLabel;
        readonly containerAsTable: Table;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTitle: Title;

        fontFamily: FontFamily;

        fontSize: number;

        bold: boolean;

        italic: boolean;

        fontColor: common.IColor;

        backgroundColor: common.IColor;

        overrideFontFamily: boolean;

        overrideFontSize: boolean;

        overrideBold: boolean;

        overrideItalic: boolean;

        overrideFontColor: boolean;

        overrideBackgroundColor: boolean;

        borderStyleTop: BorderStyle;

        borderStyleBottom: BorderStyle;

        borderStyleLeft: BorderStyle;

        borderStyleRight: BorderStyle;

        borderWidthTop: number;

        borderWidthBottom: number;

        borderWidthLeft: number;

        borderWidthRight: number;

        borderColorTop: common.IColor;

        borderColorBottom: common.IColor;

        borderColorLeft: common.IColor;

        borderColorRight: common.IColor;

        textAlign: TextAlign;

        customStyles: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Style instance in the SDK and on the server.
         * The new Style will be automatically stored in the 'style' property
         * of the parent DataGridCell element passed as argument.
         */
        static createInDataGridCellUnderStyle(container: DataGridCell): Style;
        /**
         * Creates and returns a new Style instance in the SDK and on the server.
         * The new Style will be automatically stored in the 'style' property
         * of the parent DataGridColumn element passed as argument.
         */
        static createInDataGridColumnUnderStyle(container: DataGridColumn): Style;
        /**
         * Creates and returns a new Style instance in the SDK and on the server.
         * The new Style will be automatically stored in the 'style' property
         * of the parent DocumentTemplate element passed as argument.
         */
        static createInDocumentTemplateUnderStyle(container: DocumentTemplate): Style;
        /**
         * Creates and returns a new Style instance in the SDK and on the server.
         * The new Style will be automatically stored in the 'style' property
         * of the parent DynamicLabel element passed as argument.
         */
        static createInDynamicLabelUnderStyle(container: DynamicLabel): Style;
        /**
         * Creates and returns a new Style instance in the SDK and on the server.
         * The new Style will be automatically stored in the 'style' property
         * of the parent Grid element passed as argument.
         */
        static createInGridUnderStyle(container: Grid): Style;
        /**
         * Creates and returns a new Style instance in the SDK and on the server.
         * The new Style will be automatically stored in the 'style' property
         * of the parent StaticLabel element passed as argument.
         */
        static createInStaticLabelUnderStyle(container: StaticLabel): Style;
        /**
         * Creates and returns a new Style instance in the SDK and on the server.
         * The new Style will be automatically stored in the 'style' property
         * of the parent Table element passed as argument.
         */
        static createInTableUnderStyle(container: Table): Style;
        /**
         * Creates and returns a new Style instance in the SDK and on the server.
         * The new Style will be automatically stored in the 'style' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderStyle(container: TableCell): Style;
        /**
         * Creates and returns a new Style instance in the SDK and on the server.
         * The new Style will be automatically stored in the 'style' property
         * of the parent Title element passed as argument.
         */
        static createInTitleUnderStyle(container: Title): Style;
        /**
         * Creates and returns a new Style instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Style;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/table-(document-template) relevant section in reference guide}
     */
    interface ITable extends IWidget {
        model: IModel;
        containerAsDocumentTemplate: IDocumentTemplate;
        containerAsDropZone: IDropZone;
        load(): Table;
        load(callback: (element: Table) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/table-(document-template) relevant section in reference guide}
     */
    class Table extends Widget implements ITable {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDocumentTemplate: DocumentTemplate;
        readonly containerAsDropZone: DropZone;

        rows: internal.IList<TableRow>;

        columnWeights: internal.IList<number>;

        cellSpacing: number;

        cellPadding: number;

        style: Style;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'toplevels' property
         * of the parent DocumentTemplate element passed as argument.
         */
        static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent DropZone element passed as argument.
         */
        static createInDropZoneUnderWidget(container: DropZone): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Table;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/cell-(document-template) relevant section in reference guide}
     */
    interface ITableCell extends IDropZone {
        model: IModel;
        containerAsTableRow: ITableRow;
        load(): TableCell;
        load(callback: (element: TableCell) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/cell-(document-template) relevant section in reference guide}
     */
    class TableCell extends DropZone implements ITableCell {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsTableRow: TableRow;

        colSpan: number;

        rowSpan: number;

        isPartOfSpan: boolean;

        style: Style;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TableCell instance in the SDK and on the server.
         * The new TableCell will be automatically stored in the 'cells' property
         * of the parent TableRow element passed as argument.
         */
        static createIn(container: TableRow): TableCell;
        /**
         * Creates and returns a new TableCell instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TableCell;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/row-(document-template) relevant section in reference guide}
     */
    interface ITableRow extends internal.IElement {
        model: IModel;
        containerAsTable: ITable;
        load(): TableRow;
        load(callback: (element: TableRow) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/row-(document-template) relevant section in reference guide}
     */
    class TableRow extends internal.Element implements ITableRow {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsTable: Table;

        cells: internal.IList<TableCell>;

        conditionSettings: ConditionSettings;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TableRow instance in the SDK and on the server.
         * The new TableRow will be automatically stored in the 'rows' property
         * of the parent Table element passed as argument.
         */
        static createIn(container: Table): TableRow;
        /**
         * Creates and returns a new TableRow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TableRow;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/template-grid-(document-template) relevant section in reference guide}
     */
    interface ITemplateGrid extends IGrid {
        model: IModel;
        containerAsDocumentTemplate: IDocumentTemplate;
        containerAsDropZone: IDropZone;
        load(): TemplateGrid;
        load(callback: (element: TemplateGrid) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/template-grid-(document-template) relevant section in reference guide}
     */
    class TemplateGrid extends Grid implements ITemplateGrid {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDocumentTemplate: DocumentTemplate;
        readonly containerAsDropZone: DropZone;

        numberOfColumns: number;

        oddRowsContents: TemplateGridContents;

        evenRowsContents: TemplateGridContents;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'toplevels' property
         * of the parent DocumentTemplate element passed as argument.
         */
        static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent DropZone element passed as argument.
         */
        static createInDropZoneUnderWidget(container: DropZone): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TemplateGrid;

    }
    interface ITemplateGridContents extends IDropZone {
        model: IModel;
        containerAsTemplateGrid: ITemplateGrid;
        load(): TemplateGridContents;
        load(callback: (element: TemplateGridContents) => void, forceRefresh?: boolean): any;
    }
    class TemplateGridContents extends DropZone implements ITemplateGridContents {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsTemplateGrid: TemplateGrid;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
         * The new TemplateGridContents will be automatically stored in the 'evenRowsContents' property
         * of the parent TemplateGrid element passed as argument.
         */
        static createInTemplateGridUnderEvenRowsContents(container: TemplateGrid): TemplateGridContents;
        /**
         * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
         * The new TemplateGridContents will be automatically stored in the 'oddRowsContents' property
         * of the parent TemplateGrid element passed as argument.
         */
        static createInTemplateGridUnderOddRowsContents(container: TemplateGrid): TemplateGridContents;
        /**
         * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TemplateGridContents;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/title-(document-template) relevant section in reference guide}
     */
    interface ITitle extends IWidget {
        model: IModel;
        containerAsDocumentTemplate: IDocumentTemplate;
        containerAsDropZone: IDropZone;
        load(): Title;
        load(callback: (element: Title) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/title-(document-template) relevant section in reference guide}
     */
    class Title extends Widget implements ITitle {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDocumentTemplate: DocumentTemplate;
        readonly containerAsDropZone: DropZone;

        caption: texts.Text;

        style: Style;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'toplevels' property
         * of the parent DocumentTemplate element passed as argument.
         */
        static createInDocumentTemplateUnderToplevels(container: DocumentTemplate): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent DropZone element passed as argument.
         */
        static createInDropZoneUnderWidget(container: DropZone): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Title;

    }
}
import { domainmodels } from "./domainmodels";
import { enumerations } from "./enumerations";
import { images } from "./images";
import { microflows } from "./microflows";
import { pages } from "./pages";
import { texts } from "./texts";
import { IModel } from "./base-model";
