import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;
import { projects } from "./projects";
export declare namespace texts {
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `Texts`.
     */
    interface ISystemText extends internal.IElement {
        model: IModel;
        containerAsSystemTextCollection: ISystemTextCollection;
        load(): SystemText;
        load(callback: (element: SystemText) => void, forceRefresh?: boolean): any;
    }
    class SystemText extends internal.Element implements ISystemText {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsSystemTextCollection: SystemTextCollection;

        text: Text;

        key: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SystemText instance in the SDK and on the server.
         * The new SystemText will be automatically stored in the 'systemTexts' property
         * of the parent SystemTextCollection element passed as argument.
         */
        static createIn(container: SystemTextCollection): SystemText;
        /**
         * Creates and returns a new SystemText instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SystemText;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/system-texts relevant section in reference guide}
     */
    interface ISystemTextCollection extends projects.IProjectDocument {
        model: IModel;
        containerAsProject: projects.IProject;
        load(): SystemTextCollection;
        load(callback: (element: SystemTextCollection) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/system-texts relevant section in reference guide}
     */
    class SystemTextCollection extends projects.ProjectDocument implements ISystemTextCollection {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsProject: projects.Project;

        systemTexts: internal.IList<SystemText>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IProject);
        /**
         * Creates a new SystemTextCollection unit in the SDK and on the server.
         * Expects one argument, the projects.IProject in which this unit is contained.
         */
        static createIn(container: projects.IProject): SystemTextCollection;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/translatable-texts relevant section in reference guide}
     */
    interface IText extends internal.IElement {
        model: IModel;
        containerAsWidgetValue: customwidgets.IWidgetValue;
        containerAsDataGridColumn: documenttemplates.IDataGridColumn;
        containerAsStaticLabel: documenttemplates.IStaticLabel;
        containerAsTitle: documenttemplates.ITitle;
        containerAsAssociationDeleteBehavior: domainmodels.IAssociationDeleteBehavior;
        containerAsValidationRule: domainmodels.IValidationRule;
        containerAsEnumerationValue: enumerations.IEnumerationValue;
        containerAsMenuItem: menus.IMenuItem;
        containerAsMicroflow: microflows.IMicroflow;
        containerAsTextTemplate: microflows.ITextTemplate;
        containerAsAttributeWidget: pages.IAttributeWidget;
        containerAsAttributeWidgetWithPlaceholder: pages.IAttributeWidgetWithPlaceholder;
        containerAsButton: pages.IButton;
        containerAsClientTemplate: pages.IClientTemplate;
        containerAsConfirmationInfo: pages.IConfirmationInfo;
        containerAsControlBarButton: pages.IControlBarButton;
        containerAsDataView: pages.IDataView;
        containerAsDropDownButtonItem: pages.IDropDownButtonItem;
        containerAsGridColumn: pages.IGridColumn;
        containerAsInputWidget: pages.IInputWidget;
        containerAsLabel: pages.ILabel;
        containerAsMicroflowSettings: pages.IMicroflowSettings;
        containerAsPage: pages.IPage;
        containerAsPageSettings: pages.IPageSettings;
        containerAsReferenceSelector: pages.IReferenceSelector;
        containerAsSearchField: pages.ISearchField;
        containerAsTabPage: pages.ITabPage;
        containerAsTextArea: pages.ITextArea;
        containerAsBasicReportAggregate: reports.IBasicReportAggregate;
        containerAsBasicReportColumn: reports.IBasicReportColumn;
        containerAsReportButton: reports.IReportButton;
        containerAsReportChart: reports.IReportChart;
        containerAsReportChartSeries: reports.IReportChartSeries;
        containerAsReportDateRangeField: reports.IReportDateRangeField;
        containerAsReportDateRangeSelector: reports.IReportDateRangeSelector;
        containerAsSystemText: ISystemText;
        load(): Text;
        load(callback: (element: Text) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/translatable-texts relevant section in reference guide}
     */
    class Text extends internal.Element implements IText {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsWidgetValue: customwidgets.WidgetValue;
        readonly containerAsDataGridColumn: documenttemplates.DataGridColumn;
        readonly containerAsStaticLabel: documenttemplates.StaticLabel;
        readonly containerAsTitle: documenttemplates.Title;
        readonly containerAsAssociationDeleteBehavior: domainmodels.AssociationDeleteBehavior;
        readonly containerAsValidationRule: domainmodels.ValidationRule;
        readonly containerAsEnumerationValue: enumerations.EnumerationValue;
        readonly containerAsMenuItem: menus.MenuItem;
        readonly containerAsMicroflow: microflows.Microflow;
        readonly containerAsTextTemplate: microflows.TextTemplate;
        readonly containerAsAttributeWidget: pages.AttributeWidget;
        readonly containerAsAttributeWidgetWithPlaceholder: pages.AttributeWidgetWithPlaceholder;
        readonly containerAsButton: pages.Button;
        readonly containerAsClientTemplate: pages.ClientTemplate;
        readonly containerAsConfirmationInfo: pages.ConfirmationInfo;
        readonly containerAsControlBarButton: pages.ControlBarButton;
        readonly containerAsDataView: pages.DataView;
        readonly containerAsDropDownButtonItem: pages.DropDownButtonItem;
        readonly containerAsGridColumn: pages.GridColumn;
        readonly containerAsInputWidget: pages.InputWidget;
        readonly containerAsLabel: pages.Label;
        readonly containerAsMicroflowSettings: pages.MicroflowSettings;
        readonly containerAsPage: pages.Page;
        readonly containerAsPageSettings: pages.PageSettings;
        readonly containerAsReferenceSelector: pages.ReferenceSelector;
        readonly containerAsSearchField: pages.SearchField;
        readonly containerAsTabPage: pages.TabPage;
        readonly containerAsTextArea: pages.TextArea;
        readonly containerAsBasicReportAggregate: reports.BasicReportAggregate;
        readonly containerAsBasicReportColumn: reports.BasicReportColumn;
        readonly containerAsReportButton: reports.ReportButton;
        readonly containerAsReportChart: reports.ReportChart;
        readonly containerAsReportChartSeries: reports.ReportChartSeries;
        readonly containerAsReportDateRangeField: reports.ReportDateRangeField;
        readonly containerAsReportDateRangeSelector: reports.ReportDateRangeSelector;
        readonly containerAsSystemText: SystemText;

        translations: internal.IList<Translation>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'translatableValue' property
         * of the parent customwidgets.WidgetValue element passed as argument.
         */
        static createInWidgetValueUnderTranslatableValue(container: customwidgets.WidgetValue): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent documenttemplates.DataGridColumn element passed as argument.
         */
        static createInDataGridColumnUnderCaption(container: documenttemplates.DataGridColumn): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent documenttemplates.StaticLabel element passed as argument.
         */
        static createInStaticLabelUnderCaption(container: documenttemplates.StaticLabel): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent documenttemplates.Title element passed as argument.
         */
        static createInTitleUnderCaption(container: documenttemplates.Title): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'childErrorMessage' property
         * of the parent domainmodels.AssociationDeleteBehavior element passed as argument.
         */
        static createInAssociationDeleteBehaviorUnderChildErrorMessage(container: domainmodels.AssociationDeleteBehavior): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'parentErrorMessage' property
         * of the parent domainmodels.AssociationDeleteBehavior element passed as argument.
         */
        static createInAssociationDeleteBehaviorUnderParentErrorMessage(container: domainmodels.AssociationDeleteBehavior): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'errorMessage' property
         * of the parent domainmodels.ValidationRule element passed as argument.
         */
        static createInValidationRuleUnderErrorMessage(container: domainmodels.ValidationRule): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent enumerations.EnumerationValue element passed as argument.
         */
        static createInEnumerationValueUnderCaption(container: enumerations.EnumerationValue): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent menus.MenuItem element passed as argument.
         */
        static createInMenuItemUnderCaption(container: menus.MenuItem): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'concurrencyErrorMessage' property
         * of the parent microflows.Microflow element passed as argument.
         */
        static createInMicroflowUnderConcurrencyErrorMessage(container: microflows.Microflow): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'text' property
         * of the parent microflows.TextTemplate element passed as argument.
         */
        static createInTextTemplateUnderText(container: microflows.TextTemplate): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'requiredMessage' property
         * of the parent pages.AttributeWidget element passed as argument.
         */
        static createInAttributeWidgetUnderRequiredMessage(container: pages.AttributeWidget): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'placeholder' property
         * of the parent pages.AttributeWidgetWithPlaceholder element passed as argument.
         */
        static createInAttributeWidgetWithPlaceholderUnderPlaceholder(container: pages.AttributeWidgetWithPlaceholder): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'tooltip' property
         * of the parent pages.Button element passed as argument.
         */
        static createInButtonUnderTooltip(container: pages.Button): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'template' property
         * of the parent pages.ClientTemplate element passed as argument.
         */
        static createInClientTemplateUnderTemplate(container: pages.ClientTemplate): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'cancelButtonCaption' property
         * of the parent pages.ConfirmationInfo element passed as argument.
         */
        static createInConfirmationInfoUnderCancelButtonCaption(container: pages.ConfirmationInfo): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'proceedButtonCaption' property
         * of the parent pages.ConfirmationInfo element passed as argument.
         */
        static createInConfirmationInfoUnderProceedButtonCaption(container: pages.ConfirmationInfo): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'question' property
         * of the parent pages.ConfirmationInfo element passed as argument.
         */
        static createInConfirmationInfoUnderQuestion(container: pages.ConfirmationInfo): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'tooltip' property
         * of the parent pages.ControlBarButton element passed as argument.
         */
        static createInControlBarButtonUnderTooltip(container: pages.ControlBarButton): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'noEntityMessage' property
         * of the parent pages.DataView element passed as argument.
         */
        static createInDataViewUnderNoEntityMessage(container: pages.DataView): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent pages.DropDownButtonItem element passed as argument.
         */
        static createInDropDownButtonItemUnderCaption(container: pages.DropDownButtonItem): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'aggregateCaption' property
         * of the parent pages.GridColumn element passed as argument.
         */
        static createInGridColumnUnderAggregateCaption(container: pages.GridColumn): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent pages.GridColumn element passed as argument.
         */
        static createInGridColumnUnderCaption(container: pages.GridColumn): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'label' property
         * of the parent pages.InputWidget element passed as argument.
         */
        static createInInputWidgetUnderLabel(container: pages.InputWidget): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent pages.Label element passed as argument.
         */
        static createInLabelUnderCaption(container: pages.Label): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'progressMessage' property
         * of the parent pages.MicroflowSettings element passed as argument.
         */
        static createInMicroflowSettingsUnderProgressMessage(container: pages.MicroflowSettings): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'title' property
         * of the parent pages.Page element passed as argument.
         */
        static createInPageUnderTitle(container: pages.Page): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'formTitle' property
         * of the parent pages.PageSettings element passed as argument.
         */
        static createInPageSettingsUnderFormTitle(container: pages.PageSettings): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'requiredMessage' property
         * of the parent pages.ReferenceSelector element passed as argument.
         */
        static createInReferenceSelectorUnderRequiredMessage(container: pages.ReferenceSelector): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent pages.SearchField element passed as argument.
         */
        static createInSearchFieldUnderCaption(container: pages.SearchField): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent pages.TabPage element passed as argument.
         */
        static createInTabPageUnderCaption(container: pages.TabPage): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'counterMessage' property
         * of the parent pages.TextArea element passed as argument.
         */
        static createInTextAreaUnderCounterMessage(container: pages.TextArea): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'textTooLongMessage' property
         * of the parent pages.TextArea element passed as argument.
         */
        static createInTextAreaUnderTextTooLongMessage(container: pages.TextArea): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent reports.BasicReportAggregate element passed as argument.
         */
        static createInBasicReportAggregateUnderCaption(container: reports.BasicReportAggregate): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent reports.BasicReportColumn element passed as argument.
         */
        static createInBasicReportColumnUnderCaption(container: reports.BasicReportColumn): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent reports.ReportButton element passed as argument.
         */
        static createInReportButtonUnderCaption(container: reports.ReportButton): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'xAxisCaption' property
         * of the parent reports.ReportChart element passed as argument.
         */
        static createInReportChartUnderXAxisCaption(container: reports.ReportChart): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'yAxisCaption' property
         * of the parent reports.ReportChart element passed as argument.
         */
        static createInReportChartUnderYAxisCaption(container: reports.ReportChart): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent reports.ReportChartSeries element passed as argument.
         */
        static createInReportChartSeriesUnderCaption(container: reports.ReportChartSeries): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'caption' property
         * of the parent reports.ReportDateRangeField element passed as argument.
         */
        static createInReportDateRangeFieldUnderCaption(container: reports.ReportDateRangeField): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'fromCaption' property
         * of the parent reports.ReportDateRangeSelector element passed as argument.
         */
        static createInReportDateRangeSelectorUnderFromCaption(container: reports.ReportDateRangeSelector): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'toCaption' property
         * of the parent reports.ReportDateRangeSelector element passed as argument.
         */
        static createInReportDateRangeSelectorUnderToCaption(container: reports.ReportDateRangeSelector): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * The new Text will be automatically stored in the 'text' property
         * of the parent SystemText element passed as argument.
         */
        static createInSystemTextUnderText(container: SystemText): Text;
        /**
         * Creates and returns a new Text instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Text;

    }
    interface ITranslation extends internal.IElement {
        model: IModel;
        containerAsText: IText;
        load(): Translation;
        load(callback: (element: Translation) => void, forceRefresh?: boolean): any;
    }
    class Translation extends internal.Element implements ITranslation {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsText: Text;

        languageCode: string;

        text: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Translation instance in the SDK and on the server.
         * The new Translation will be automatically stored in the 'translations' property
         * of the parent Text element passed as argument.
         */
        static createIn(container: Text): Translation;
        /**
         * Creates and returns a new Translation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Translation;

    }
}
import { customwidgets } from "./customwidgets";
import { documenttemplates } from "./documenttemplates";
import { domainmodels } from "./domainmodels";
import { enumerations } from "./enumerations";
import { menus } from "./menus";
import { microflows } from "./microflows";
import { pages } from "./pages";
import { reports } from "./reports";
import { IModel } from "./base-model";
