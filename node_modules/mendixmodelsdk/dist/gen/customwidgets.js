/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var pages_1 = require("./pages");
var customwidgets;
(function (customwidgets) {
    var CustomWidgetAttributeType = (function (_super) {
        __extends(CustomWidgetAttributeType, _super);
        function CustomWidgetAttributeType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "customwidgets.CustomWidgetAttributeType";
            return _this;
        }
        return CustomWidgetAttributeType;
    }(internal.IEnum));
    CustomWidgetAttributeType.AutoNumber = new CustomWidgetAttributeType("AutoNumber", {});
    CustomWidgetAttributeType.Binary = new CustomWidgetAttributeType("Binary", {});
    CustomWidgetAttributeType.Boolean = new CustomWidgetAttributeType("Boolean", {});
    CustomWidgetAttributeType.Currency = new CustomWidgetAttributeType("Currency", {});
    CustomWidgetAttributeType.DateTime = new CustomWidgetAttributeType("DateTime", {});
    CustomWidgetAttributeType.Enum = new CustomWidgetAttributeType("Enum", {});
    CustomWidgetAttributeType.Float = new CustomWidgetAttributeType("Float", {});
    CustomWidgetAttributeType.HashString = new CustomWidgetAttributeType("HashString", {});
    CustomWidgetAttributeType.Integer = new CustomWidgetAttributeType("Integer", {});
    CustomWidgetAttributeType.Long = new CustomWidgetAttributeType("Long", {});
    CustomWidgetAttributeType.String = new CustomWidgetAttributeType("String", {});
    CustomWidgetAttributeType.Decimal = new CustomWidgetAttributeType("Decimal", {});
    customwidgets.CustomWidgetAttributeType = CustomWidgetAttributeType;
    var IsPath = (function (_super) {
        __extends(IsPath, _super);
        function IsPath() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "customwidgets.IsPath";
            return _this;
        }
        return IsPath;
    }(internal.IEnum));
    IsPath.No = new IsPath("No", {});
    IsPath.Optional = new IsPath("Optional", {});
    IsPath.Yes = new IsPath("Yes", {});
    customwidgets.IsPath = IsPath;
    var PathType = (function (_super) {
        __extends(PathType, _super);
        function PathType() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "customwidgets.PathType";
            return _this;
        }
        return PathType;
    }(internal.IEnum));
    PathType.None = new PathType("None", {});
    PathType.Reference = new PathType("Reference", {});
    PathType.ReferenceSet = new PathType("ReferenceSet", {});
    customwidgets.PathType = PathType;
    var WidgetReturnTypeEnum = (function (_super) {
        __extends(WidgetReturnTypeEnum, _super);
        function WidgetReturnTypeEnum() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "customwidgets.WidgetReturnTypeEnum";
            return _this;
        }
        return WidgetReturnTypeEnum;
    }(internal.IEnum));
    WidgetReturnTypeEnum.Void = new WidgetReturnTypeEnum("Void", {});
    WidgetReturnTypeEnum.Boolean = new WidgetReturnTypeEnum("Boolean", {});
    WidgetReturnTypeEnum.Integer = new WidgetReturnTypeEnum("Integer", {});
    WidgetReturnTypeEnum.Float = new WidgetReturnTypeEnum("Float", {});
    WidgetReturnTypeEnum.DateTime = new WidgetReturnTypeEnum("DateTime", {});
    WidgetReturnTypeEnum.String = new WidgetReturnTypeEnum("String", {});
    WidgetReturnTypeEnum.Object = new WidgetReturnTypeEnum("Object", {});
    WidgetReturnTypeEnum.Decimal = new WidgetReturnTypeEnum("Decimal", {});
    customwidgets.WidgetReturnTypeEnum = WidgetReturnTypeEnum;
    var WidgetValueTypeEnum = (function (_super) {
        __extends(WidgetValueTypeEnum, _super);
        function WidgetValueTypeEnum() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "customwidgets.WidgetValueTypeEnum";
            return _this;
        }
        return WidgetValueTypeEnum;
    }(internal.IEnum));
    WidgetValueTypeEnum.Attribute = new WidgetValueTypeEnum("Attribute", {});
    WidgetValueTypeEnum.Boolean = new WidgetValueTypeEnum("Boolean", {});
    WidgetValueTypeEnum.Entity = new WidgetValueTypeEnum("Entity", {});
    WidgetValueTypeEnum.EntityConstraint = new WidgetValueTypeEnum("EntityConstraint", {});
    WidgetValueTypeEnum.Enumeration = new WidgetValueTypeEnum("Enumeration", {});
    WidgetValueTypeEnum.Form = new WidgetValueTypeEnum("Form", {});
    WidgetValueTypeEnum.Image = new WidgetValueTypeEnum("Image", {});
    WidgetValueTypeEnum.Integer = new WidgetValueTypeEnum("Integer", {});
    WidgetValueTypeEnum.Microflow = new WidgetValueTypeEnum("Microflow", {});
    WidgetValueTypeEnum.Object = new WidgetValueTypeEnum("Object", {});
    WidgetValueTypeEnum.String = new WidgetValueTypeEnum("String", {});
    WidgetValueTypeEnum.TranslatableString = new WidgetValueTypeEnum("TranslatableString", {});
    customwidgets.WidgetValueTypeEnum = WidgetValueTypeEnum;
    var CustomWidget = (function (_super) {
        __extends(CustomWidget, _super);
        function CustomWidget(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__type = new internal.PartProperty(CustomWidget, _this, "type", null, false);
            _this.__object = new internal.PartProperty(CustomWidget, _this, "object", null, false);
            if (arguments.length < 4) {
                throw new Error("new CustomWidget() cannot be invoked directly, please use 'model.customwidgets.createCustomWidget()'");
            }
            return _this;
        }
        Object.defineProperty(CustomWidget.prototype, "containerAsDataView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DataView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidget.prototype, "containerAsDivContainer", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.DivContainer); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidget.prototype, "containerAsGroupBox", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.GroupBox); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidget.prototype, "containerAsHeader", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Header); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidget.prototype, "containerAsLayout", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Layout); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidget.prototype, "containerAsLayoutCallArgument", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutCallArgument); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidget.prototype, "containerAsLayoutGridColumn", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.LayoutGridColumn); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidget.prototype, "containerAsListView", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListView); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidget.prototype, "containerAsListViewTemplate", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ListViewTemplate); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidget.prototype, "containerAsNavigationListItem", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.NavigationListItem); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidget.prototype, "containerAsScrollContainerRegion", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.ScrollContainerRegion); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidget.prototype, "containerAsSnippet", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.Snippet); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidget.prototype, "containerAsSplitPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.SplitPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidget.prototype, "containerAsTabPage", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TabPage); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidget.prototype, "containerAsTableCell", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TableCell); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidget.prototype, "containerAsTemplateGridContents", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.TemplateGridContents); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidget.prototype, "containerAsVerticalFlow", {
            get: function () { return _super.prototype.getContainerAs.call(this, pages_1.pages.VerticalFlow); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidget.prototype, "containerAsReportPane", {
            get: function () { return _super.prototype.getContainerAs.call(this, reports_1.reports.ReportPane); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidget.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidget.prototype, "object", {
            get: function () { return this.__object.get(); },
            set: function (newValue) { this.__object.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'footerWidget' property
         * of the parent pages.DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        CustomWidget.createInDataViewUnderFooterWidget = function (container) {
            internal.createInVersionCheck(container.model, CustomWidget.typeName, ["6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, CustomWidget, "footerWidget", false);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.DataView element passed as argument.
         */
        CustomWidget.createInDataViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.DivContainer element passed as argument.
         */
        CustomWidget.createInDivContainerUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.GroupBox element passed as argument.
         */
        CustomWidget.createInGroupBoxUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'leftWidget' property
         * of the parent pages.Header element passed as argument.
         */
        CustomWidget.createInHeaderUnderLeftWidget = function (container) {
            return internal.instancehelpers.createElement(container, CustomWidget, "leftWidget", false);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'rightWidget' property
         * of the parent pages.Header element passed as argument.
         */
        CustomWidget.createInHeaderUnderRightWidget = function (container) {
            return internal.instancehelpers.createElement(container, CustomWidget, "rightWidget", false);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.Layout element passed as argument.
         */
        CustomWidget.createInLayoutUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.LayoutCallArgument element passed as argument.
         */
        CustomWidget.createInLayoutCallArgumentUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.LayoutGridColumn element passed as argument.
         */
        CustomWidget.createInLayoutGridColumnUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.ListView element passed as argument.
         */
        CustomWidget.createInListViewUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.ListViewTemplate element passed as argument.
         */
        CustomWidget.createInListViewTemplateUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.NavigationListItem element passed as argument.
         */
        CustomWidget.createInNavigationListItemUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.ScrollContainerRegion element passed as argument.
         */
        CustomWidget.createInScrollContainerRegionUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.Snippet element passed as argument.
         */
        CustomWidget.createInSnippetUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'firstWidget' property
         * of the parent pages.SplitPane element passed as argument.
         */
        CustomWidget.createInSplitPaneUnderFirstWidget = function (container) {
            return internal.instancehelpers.createElement(container, CustomWidget, "firstWidget", false);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'secondWidget' property
         * of the parent pages.SplitPane element passed as argument.
         */
        CustomWidget.createInSplitPaneUnderSecondWidget = function (container) {
            return internal.instancehelpers.createElement(container, CustomWidget, "secondWidget", false);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.TabPage element passed as argument.
         */
        CustomWidget.createInTabPageUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.TableCell element passed as argument.
         */
        CustomWidget.createInTableCellUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widget' property
         * of the parent pages.TemplateGridContents element passed as argument.
         */
        CustomWidget.createInTemplateGridContentsUnderWidget = function (container) {
            return internal.instancehelpers.createElement(container, CustomWidget, "widget", false);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'widgets' property
         * of the parent pages.VerticalFlow element passed as argument.
         */
        CustomWidget.createInVerticalFlowUnderWidgets = function (container) {
            return internal.instancehelpers.createElement(container, CustomWidget, "widgets", true);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        CustomWidget.createInReportPaneUnderParameterWidget = function (container) {
            internal.createInVersionCheck(container.model, CustomWidget.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, CustomWidget, "parameterWidget", false);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * The new CustomWidget will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        CustomWidget.createInReportPaneUnderReportWidget = function (container) {
            internal.createInVersionCheck(container.model, CustomWidget.typeName, ["6.0.0", "6.0.1", "6.1.0", "6.2.0", "6.3.0", "6.4.0", "6.4.1", "6.5.0", "6.6.0", "6.7.0", "6.8.0", "6.9.0"]);
            return internal.instancehelpers.createElement(container, CustomWidget, "reportWidget", false);
        };
        /**
         * Creates and returns a new CustomWidget instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CustomWidget.create = function (model) {
            return internal.instancehelpers.createElement(model, CustomWidget);
        };
        CustomWidget.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return CustomWidget;
    }(pages_1.pages.Widget));
    CustomWidget.typeName = "CustomWidgets$CustomWidget";
    CustomWidget.versionInfo = new exports.StructureVersionInfo({
        "public": {
            "currentValue": true
        }
    }, internal.StructureType.Element);
    customwidgets.CustomWidget = CustomWidget;
    var CustomWidgetType = (function (_super) {
        __extends(CustomWidgetType, _super);
        function CustomWidgetType(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__widgetId = new internal.PrimitiveProperty(CustomWidgetType, _this, "widgetId", "", internal.PrimitiveTypeEnum.String);
            _this.__needsEntityContext = new internal.PrimitiveProperty(CustomWidgetType, _this, "needsEntityContext", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__name = new internal.PrimitiveProperty(CustomWidgetType, _this, "name", "", internal.PrimitiveTypeEnum.String);
            _this.__description = new internal.PrimitiveProperty(CustomWidgetType, _this, "description", "", internal.PrimitiveTypeEnum.String);
            _this.__phoneGapEnabled = new internal.PrimitiveProperty(CustomWidgetType, _this, "phoneGapEnabled", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__offlineCapable = new internal.PrimitiveProperty(CustomWidgetType, _this, "offlineCapable", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__experimentalApi = new internal.PrimitiveProperty(CustomWidgetType, _this, "experimentalApi", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__objectType = new internal.PartProperty(CustomWidgetType, _this, "objectType", null, true);
            if (arguments.length < 4) {
                throw new Error("new CustomWidgetType() cannot be invoked directly, please use 'model.customwidgets.createCustomWidgetType()'");
            }
            return _this;
        }
        Object.defineProperty(CustomWidgetType.prototype, "containerAsCustomWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, CustomWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidgetType.prototype, "widgetId", {
            get: function () { return this.__widgetId.get(); },
            set: function (newValue) { this.__widgetId.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidgetType.prototype, "needsEntityContext", {
            get: function () { return this.__needsEntityContext.get(); },
            set: function (newValue) { this.__needsEntityContext.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidgetType.prototype, "name", {
            get: function () { return this.__name.get(); },
            set: function (newValue) { this.__name.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidgetType.prototype, "description", {
            get: function () { return this.__description.get(); },
            set: function (newValue) { this.__description.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidgetType.prototype, "phoneGapEnabled", {
            get: function () { return this.__phoneGapEnabled.get(); },
            set: function (newValue) { this.__phoneGapEnabled.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidgetType.prototype, "offlineCapable", {
            get: function () { return this.__offlineCapable.get(); },
            set: function (newValue) { this.__offlineCapable.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidgetType.prototype, "experimentalApi", {
            /**
             * In version 7.0.0: introduced
             */
            get: function () { return this.__experimentalApi.get(); },
            set: function (newValue) { this.__experimentalApi.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomWidgetType.prototype, "objectType", {
            get: function () { return this.__objectType.get(); },
            set: function (newValue) { this.__objectType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new CustomWidgetType instance in the SDK and on the server.
         * The new CustomWidgetType will be automatically stored in the 'type' property
         * of the parent CustomWidget element passed as argument.
         */
        CustomWidgetType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, CustomWidgetType, "type", false);
        };
        /**
         * Creates and returns a new CustomWidgetType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        CustomWidgetType.create = function (model) {
            return internal.instancehelpers.createElement(model, CustomWidgetType);
        };
        CustomWidgetType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.objectType = WidgetObjectType.create(this.model);
        };
        return CustomWidgetType;
    }(internal.Element));
    CustomWidgetType.typeName = "CustomWidgets$CustomWidgetType";
    CustomWidgetType.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "experimentalApi": {
                "introduced": "7.0.0"
            },
            "objectType": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    customwidgets.CustomWidgetType = CustomWidgetType;
    var WidgetEnumerationValue = (function (_super) {
        __extends(WidgetEnumerationValue, _super);
        function WidgetEnumerationValue(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__key = new internal.PrimitiveProperty(WidgetEnumerationValue, _this, "key", "", internal.PrimitiveTypeEnum.String);
            _this.__caption = new internal.PrimitiveProperty(WidgetEnumerationValue, _this, "caption", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new WidgetEnumerationValue() cannot be invoked directly, please use 'model.customwidgets.createWidgetEnumerationValue()'");
            }
            return _this;
        }
        Object.defineProperty(WidgetEnumerationValue.prototype, "containerAsWidgetValueType", {
            get: function () { return _super.prototype.getContainerAs.call(this, WidgetValueType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetEnumerationValue.prototype, "key", {
            get: function () { return this.__key.get(); },
            set: function (newValue) { this.__key.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetEnumerationValue.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new WidgetEnumerationValue instance in the SDK and on the server.
         * The new WidgetEnumerationValue will be automatically stored in the 'enumerationValues' property
         * of the parent WidgetValueType element passed as argument.
         */
        WidgetEnumerationValue.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WidgetEnumerationValue, "enumerationValues", true);
        };
        /**
         * Creates and returns a new WidgetEnumerationValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WidgetEnumerationValue.create = function (model) {
            return internal.instancehelpers.createElement(model, WidgetEnumerationValue);
        };
        WidgetEnumerationValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return WidgetEnumerationValue;
    }(internal.Element));
    WidgetEnumerationValue.typeName = "CustomWidgets$WidgetEnumerationValue";
    WidgetEnumerationValue.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    customwidgets.WidgetEnumerationValue = WidgetEnumerationValue;
    var WidgetObject = (function (_super) {
        __extends(WidgetObject, _super);
        function WidgetObject(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__type = new internal.ByIdReferenceProperty(WidgetObject, _this, "type", null);
            _this.__properties = new internal.PartListProperty(WidgetObject, _this, "properties", []);
            if (arguments.length < 4) {
                throw new Error("new WidgetObject() cannot be invoked directly, please use 'model.customwidgets.createWidgetObject()'");
            }
            return _this;
        }
        Object.defineProperty(WidgetObject.prototype, "containerAsCustomWidget", {
            get: function () { return _super.prototype.getContainerAs.call(this, CustomWidget); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetObject.prototype, "containerAsWidgetValue", {
            get: function () { return _super.prototype.getContainerAs.call(this, WidgetValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetObject.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetObject.prototype, "properties", {
            get: function () { return this.__properties.get(); },
            set: function (newValue) { this.__properties.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new WidgetObject instance in the SDK and on the server.
         * The new WidgetObject will be automatically stored in the 'object' property
         * of the parent CustomWidget element passed as argument.
         */
        WidgetObject.createInCustomWidgetUnderObject = function (container) {
            return internal.instancehelpers.createElement(container, WidgetObject, "object", false);
        };
        /**
         * Creates and returns a new WidgetObject instance in the SDK and on the server.
         * The new WidgetObject will be automatically stored in the 'objects' property
         * of the parent WidgetValue element passed as argument.
         */
        WidgetObject.createInWidgetValueUnderObjects = function (container) {
            return internal.instancehelpers.createElement(container, WidgetObject, "objects", true);
        };
        /**
         * Creates and returns a new WidgetObject instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WidgetObject.create = function (model) {
            return internal.instancehelpers.createElement(model, WidgetObject);
        };
        WidgetObject.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return WidgetObject;
    }(internal.Element));
    WidgetObject.typeName = "CustomWidgets$WidgetObject";
    WidgetObject.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "type": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    customwidgets.WidgetObject = WidgetObject;
    var WidgetObjectType = (function (_super) {
        __extends(WidgetObjectType, _super);
        function WidgetObjectType(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__propertyTypes = new internal.PartListProperty(WidgetObjectType, _this, "propertyTypes", []);
            if (arguments.length < 4) {
                throw new Error("new WidgetObjectType() cannot be invoked directly, please use 'model.customwidgets.createWidgetObjectType()'");
            }
            return _this;
        }
        Object.defineProperty(WidgetObjectType.prototype, "containerAsCustomWidgetType", {
            get: function () { return _super.prototype.getContainerAs.call(this, CustomWidgetType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetObjectType.prototype, "containerAsWidgetValueType", {
            get: function () { return _super.prototype.getContainerAs.call(this, WidgetValueType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetObjectType.prototype, "propertyTypes", {
            get: function () { return this.__propertyTypes.get(); },
            set: function (newValue) { this.__propertyTypes.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new WidgetObjectType instance in the SDK and on the server.
         * The new WidgetObjectType will be automatically stored in the 'objectType' property
         * of the parent CustomWidgetType element passed as argument.
         */
        WidgetObjectType.createInCustomWidgetTypeUnderObjectType = function (container) {
            return internal.instancehelpers.createElement(container, WidgetObjectType, "objectType", false);
        };
        /**
         * Creates and returns a new WidgetObjectType instance in the SDK and on the server.
         * The new WidgetObjectType will be automatically stored in the 'objectType' property
         * of the parent WidgetValueType element passed as argument.
         */
        WidgetObjectType.createInWidgetValueTypeUnderObjectType = function (container) {
            return internal.instancehelpers.createElement(container, WidgetObjectType, "objectType", false);
        };
        /**
         * Creates and returns a new WidgetObjectType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WidgetObjectType.create = function (model) {
            return internal.instancehelpers.createElement(model, WidgetObjectType);
        };
        WidgetObjectType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return WidgetObjectType;
    }(internal.Element));
    WidgetObjectType.typeName = "CustomWidgets$WidgetObjectType";
    WidgetObjectType.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    customwidgets.WidgetObjectType = WidgetObjectType;
    var WidgetProperty = (function (_super) {
        __extends(WidgetProperty, _super);
        function WidgetProperty(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__type = new internal.ByIdReferenceProperty(WidgetProperty, _this, "type", null);
            _this.__value = new internal.PartProperty(WidgetProperty, _this, "value", null, true);
            if (arguments.length < 4) {
                throw new Error("new WidgetProperty() cannot be invoked directly, please use 'model.customwidgets.createWidgetProperty()'");
            }
            return _this;
        }
        Object.defineProperty(WidgetProperty.prototype, "containerAsWidgetObject", {
            get: function () { return _super.prototype.getContainerAs.call(this, WidgetObject); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetProperty.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetProperty.prototype, "value", {
            get: function () { return this.__value.get(); },
            set: function (newValue) { this.__value.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new WidgetProperty instance in the SDK and on the server.
         * The new WidgetProperty will be automatically stored in the 'properties' property
         * of the parent WidgetObject element passed as argument.
         */
        WidgetProperty.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WidgetProperty, "properties", true);
        };
        /**
         * Creates and returns a new WidgetProperty instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WidgetProperty.create = function (model) {
            return internal.instancehelpers.createElement(model, WidgetProperty);
        };
        WidgetProperty.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.value = WidgetValue.create(this.model);
        };
        return WidgetProperty;
    }(internal.Element));
    WidgetProperty.typeName = "CustomWidgets$WidgetProperty";
    WidgetProperty.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "type": {
                "required": {
                    "currentValue": true
                }
            },
            "value": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    customwidgets.WidgetProperty = WidgetProperty;
    var WidgetPropertyType = (function (_super) {
        __extends(WidgetPropertyType, _super);
        function WidgetPropertyType(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__key = new internal.PrimitiveProperty(WidgetPropertyType, _this, "key", "", internal.PrimitiveTypeEnum.String);
            _this.__category = new internal.PrimitiveProperty(WidgetPropertyType, _this, "category", "", internal.PrimitiveTypeEnum.String);
            _this.__caption = new internal.PrimitiveProperty(WidgetPropertyType, _this, "caption", "", internal.PrimitiveTypeEnum.String);
            _this.__description = new internal.PrimitiveProperty(WidgetPropertyType, _this, "description", "", internal.PrimitiveTypeEnum.String);
            _this.__isDefault = new internal.PrimitiveProperty(WidgetPropertyType, _this, "isDefault", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__valueType = new internal.PartProperty(WidgetPropertyType, _this, "valueType", null, true);
            if (arguments.length < 4) {
                throw new Error("new WidgetPropertyType() cannot be invoked directly, please use 'model.customwidgets.createWidgetPropertyType()'");
            }
            return _this;
        }
        Object.defineProperty(WidgetPropertyType.prototype, "containerAsWidgetObjectType", {
            get: function () { return _super.prototype.getContainerAs.call(this, WidgetObjectType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetPropertyType.prototype, "key", {
            get: function () { return this.__key.get(); },
            set: function (newValue) { this.__key.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetPropertyType.prototype, "category", {
            get: function () { return this.__category.get(); },
            set: function (newValue) { this.__category.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetPropertyType.prototype, "caption", {
            get: function () { return this.__caption.get(); },
            set: function (newValue) { this.__caption.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetPropertyType.prototype, "description", {
            get: function () { return this.__description.get(); },
            set: function (newValue) { this.__description.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetPropertyType.prototype, "isDefault", {
            get: function () { return this.__isDefault.get(); },
            set: function (newValue) { this.__isDefault.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetPropertyType.prototype, "valueType", {
            get: function () { return this.__valueType.get(); },
            set: function (newValue) { this.__valueType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new WidgetPropertyType instance in the SDK and on the server.
         * The new WidgetPropertyType will be automatically stored in the 'propertyTypes' property
         * of the parent WidgetObjectType element passed as argument.
         */
        WidgetPropertyType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WidgetPropertyType, "propertyTypes", true);
        };
        /**
         * Creates and returns a new WidgetPropertyType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WidgetPropertyType.create = function (model) {
            return internal.instancehelpers.createElement(model, WidgetPropertyType);
        };
        WidgetPropertyType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.valueType = WidgetValueType.create(this.model);
        };
        return WidgetPropertyType;
    }(internal.Element));
    WidgetPropertyType.typeName = "CustomWidgets$WidgetPropertyType";
    WidgetPropertyType.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "valueType": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    customwidgets.WidgetPropertyType = WidgetPropertyType;
    var WidgetReturnType = (function (_super) {
        __extends(WidgetReturnType, _super);
        function WidgetReturnType(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__type = new internal.EnumProperty(WidgetReturnType, _this, "type", WidgetReturnTypeEnum.Boolean, WidgetReturnTypeEnum);
            _this.__isList = new internal.PrimitiveProperty(WidgetReturnType, _this, "isList", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__entityProperty = new internal.PrimitiveProperty(WidgetReturnType, _this, "entityProperty", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new WidgetReturnType() cannot be invoked directly, please use 'model.customwidgets.createWidgetReturnType()'");
            }
            return _this;
        }
        Object.defineProperty(WidgetReturnType.prototype, "containerAsWidgetValueType", {
            get: function () { return _super.prototype.getContainerAs.call(this, WidgetValueType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetReturnType.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetReturnType.prototype, "isList", {
            get: function () { return this.__isList.get(); },
            set: function (newValue) { this.__isList.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetReturnType.prototype, "entityProperty", {
            get: function () { return this.__entityProperty.get(); },
            set: function (newValue) { this.__entityProperty.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new WidgetReturnType instance in the SDK and on the server.
         * The new WidgetReturnType will be automatically stored in the 'returnType' property
         * of the parent WidgetValueType element passed as argument.
         */
        WidgetReturnType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WidgetReturnType, "returnType", false);
        };
        /**
         * Creates and returns a new WidgetReturnType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WidgetReturnType.create = function (model) {
            return internal.instancehelpers.createElement(model, WidgetReturnType);
        };
        WidgetReturnType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.type = WidgetReturnTypeEnum.Boolean;
        };
        return WidgetReturnType;
    }(internal.Element));
    WidgetReturnType.typeName = "CustomWidgets$WidgetReturnType";
    WidgetReturnType.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    customwidgets.WidgetReturnType = WidgetReturnType;
    var WidgetTranslation = (function (_super) {
        __extends(WidgetTranslation, _super);
        function WidgetTranslation(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__languageCode = new internal.PrimitiveProperty(WidgetTranslation, _this, "languageCode", "", internal.PrimitiveTypeEnum.String);
            _this.__text = new internal.PrimitiveProperty(WidgetTranslation, _this, "text", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new WidgetTranslation() cannot be invoked directly, please use 'model.customwidgets.createWidgetTranslation()'");
            }
            return _this;
        }
        Object.defineProperty(WidgetTranslation.prototype, "containerAsWidgetValueType", {
            get: function () { return _super.prototype.getContainerAs.call(this, WidgetValueType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetTranslation.prototype, "languageCode", {
            get: function () { return this.__languageCode.get(); },
            set: function (newValue) { this.__languageCode.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetTranslation.prototype, "text", {
            get: function () { return this.__text.get(); },
            set: function (newValue) { this.__text.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new WidgetTranslation instance in the SDK and on the server.
         * The new WidgetTranslation will be automatically stored in the 'translations' property
         * of the parent WidgetValueType element passed as argument.
         */
        WidgetTranslation.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WidgetTranslation, "translations", true);
        };
        /**
         * Creates and returns a new WidgetTranslation instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WidgetTranslation.create = function (model) {
            return internal.instancehelpers.createElement(model, WidgetTranslation);
        };
        WidgetTranslation.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return WidgetTranslation;
    }(internal.Element));
    WidgetTranslation.typeName = "CustomWidgets$WidgetTranslation";
    WidgetTranslation.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    customwidgets.WidgetTranslation = WidgetTranslation;
    var WidgetValue = (function (_super) {
        __extends(WidgetValue, _super);
        function WidgetValue(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__type = new internal.ByIdReferenceProperty(WidgetValue, _this, "type", null);
            _this.__primitiveValue = new internal.PrimitiveProperty(WidgetValue, _this, "primitiveValue", "", internal.PrimitiveTypeEnum.String);
            _this.__entityPath = new internal.PrimitiveProperty(WidgetValue, _this, "entityPath", "", internal.PrimitiveTypeEnum.String);
            _this.__attributePath = new internal.PrimitiveProperty(WidgetValue, _this, "attributePath", "", internal.PrimitiveTypeEnum.String);
            _this.__page = new internal.ByNameReferenceProperty(WidgetValue, _this, "page", null, "Pages$Page");
            _this.__microflow = new internal.ByNameReferenceProperty(WidgetValue, _this, "microflow", null, "Microflows$Microflow");
            _this.__image = new internal.ByNameReferenceProperty(WidgetValue, _this, "image", null, "Images$Image");
            _this.__translatableValue = new internal.PartProperty(WidgetValue, _this, "translatableValue", null, false);
            _this.__xPathConstraint = new internal.PrimitiveProperty(WidgetValue, _this, "xPathConstraint", "", internal.PrimitiveTypeEnum.String);
            _this.__objects = new internal.PartListProperty(WidgetValue, _this, "objects", []);
            if (arguments.length < 4) {
                throw new Error("new WidgetValue() cannot be invoked directly, please use 'model.customwidgets.createWidgetValue()'");
            }
            return _this;
        }
        Object.defineProperty(WidgetValue.prototype, "containerAsWidgetProperty", {
            get: function () { return _super.prototype.getContainerAs.call(this, WidgetProperty); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "primitiveValue", {
            get: function () { return this.__primitiveValue.get(); },
            set: function (newValue) { this.__primitiveValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "entityPath", {
            /**
             * The value of this property is conceptually of type paths.EntityPath.
             */
            get: function () { return this.__entityPath.get(); },
            set: function (newValue) { this.__entityPath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "attributePath", {
            /**
             * The value of this property is conceptually of type paths.AttributePath.
             */
            get: function () { return this.__attributePath.get(); },
            set: function (newValue) { this.__attributePath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "page", {
            get: function () { return this.__page.get(); },
            set: function (newValue) { this.__page.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "pageQualifiedName", {
            get: function () { return this.__page.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "microflow", {
            get: function () { return this.__microflow.get(); },
            set: function (newValue) { this.__microflow.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "microflowQualifiedName", {
            get: function () { return this.__microflow.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "image", {
            get: function () { return this.__image.get(); },
            set: function (newValue) { this.__image.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "imageQualifiedName", {
            get: function () { return this.__image.qualifiedName(); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "translatableValue", {
            get: function () { return this.__translatableValue.get(); },
            set: function (newValue) { this.__translatableValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "xPathConstraint", {
            /**
             * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
             */
            get: function () { return this.__xPathConstraint.get(); },
            set: function (newValue) { this.__xPathConstraint.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValue.prototype, "objects", {
            get: function () { return this.__objects.get(); },
            set: function (newValue) { this.__objects.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new WidgetValue instance in the SDK and on the server.
         * The new WidgetValue will be automatically stored in the 'value' property
         * of the parent WidgetProperty element passed as argument.
         */
        WidgetValue.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WidgetValue, "value", false);
        };
        /**
         * Creates and returns a new WidgetValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WidgetValue.create = function (model) {
            return internal.instancehelpers.createElement(model, WidgetValue);
        };
        WidgetValue.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return WidgetValue;
    }(internal.Element));
    WidgetValue.typeName = "CustomWidgets$WidgetValue";
    WidgetValue.versionInfo = new exports.StructureVersionInfo({
        "properties": {
            "type": {
                "required": {
                    "currentValue": true
                }
            }
        }
    }, internal.StructureType.Element);
    customwidgets.WidgetValue = WidgetValue;
    var WidgetValueType = (function (_super) {
        __extends(WidgetValueType, _super);
        function WidgetValueType(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__type = new internal.EnumProperty(WidgetValueType, _this, "type", WidgetValueTypeEnum.String, WidgetValueTypeEnum);
            _this.__isList = new internal.PrimitiveProperty(WidgetValueType, _this, "isList", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__entityProperty = new internal.PrimitiveProperty(WidgetValueType, _this, "entityProperty", "", internal.PrimitiveTypeEnum.String);
            _this.__allowNonPersistableEntities = new internal.PrimitiveProperty(WidgetValueType, _this, "allowNonPersistableEntities", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__isPath = new internal.EnumProperty(WidgetValueType, _this, "isPath", IsPath.No, IsPath);
            _this.__pathType = new internal.EnumProperty(WidgetValueType, _this, "pathType", PathType.None, PathType);
            _this.__parameterIsList = new internal.PrimitiveProperty(WidgetValueType, _this, "parameterIsList", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__multiline = new internal.PrimitiveProperty(WidgetValueType, _this, "multiline", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__defaultValue = new internal.PrimitiveProperty(WidgetValueType, _this, "defaultValue", "", internal.PrimitiveTypeEnum.String);
            _this.__required = new internal.PrimitiveProperty(WidgetValueType, _this, "required", false, internal.PrimitiveTypeEnum.Boolean);
            _this.__attributeTypes = new internal.EnumListProperty(WidgetValueType, _this, "attributeTypes", [], CustomWidgetAttributeType);
            _this.__enumerationValues = new internal.PartListProperty(WidgetValueType, _this, "enumerationValues", []);
            _this.__objectType = new internal.PartProperty(WidgetValueType, _this, "objectType", null, false);
            _this.__returnType = new internal.PartProperty(WidgetValueType, _this, "returnType", null, false);
            _this.__translations = new internal.PartListProperty(WidgetValueType, _this, "translations", []);
            if (arguments.length < 4) {
                throw new Error("new WidgetValueType() cannot be invoked directly, please use 'model.customwidgets.createWidgetValueType()'");
            }
            return _this;
        }
        Object.defineProperty(WidgetValueType.prototype, "containerAsWidgetPropertyType", {
            get: function () { return _super.prototype.getContainerAs.call(this, WidgetPropertyType); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "type", {
            get: function () { return this.__type.get(); },
            set: function (newValue) { this.__type.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "isList", {
            get: function () { return this.__isList.get(); },
            set: function (newValue) { this.__isList.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "entityProperty", {
            get: function () { return this.__entityProperty.get(); },
            set: function (newValue) { this.__entityProperty.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "allowNonPersistableEntities", {
            get: function () { return this.__allowNonPersistableEntities.get(); },
            set: function (newValue) { this.__allowNonPersistableEntities.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "isPath", {
            get: function () { return this.__isPath.get(); },
            set: function (newValue) { this.__isPath.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "pathType", {
            get: function () { return this.__pathType.get(); },
            set: function (newValue) { this.__pathType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "parameterIsList", {
            get: function () { return this.__parameterIsList.get(); },
            set: function (newValue) { this.__parameterIsList.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "multiline", {
            get: function () { return this.__multiline.get(); },
            set: function (newValue) { this.__multiline.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "defaultValue", {
            get: function () { return this.__defaultValue.get(); },
            set: function (newValue) { this.__defaultValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "required", {
            get: function () { return this.__required.get(); },
            set: function (newValue) { this.__required.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "attributeTypes", {
            get: function () { return this.__attributeTypes.get(); },
            set: function (newValue) { this.__attributeTypes.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "enumerationValues", {
            get: function () { return this.__enumerationValues.get(); },
            set: function (newValue) { this.__enumerationValues.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "objectType", {
            get: function () { return this.__objectType.get(); },
            set: function (newValue) { this.__objectType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "returnType", {
            get: function () { return this.__returnType.get(); },
            set: function (newValue) { this.__returnType.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WidgetValueType.prototype, "translations", {
            get: function () { return this.__translations.get(); },
            set: function (newValue) { this.__translations.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new WidgetValueType instance in the SDK and on the server.
         * The new WidgetValueType will be automatically stored in the 'valueType' property
         * of the parent WidgetPropertyType element passed as argument.
         */
        WidgetValueType.createIn = function (container) {
            return internal.instancehelpers.createElement(container, WidgetValueType, "valueType", false);
        };
        /**
         * Creates and returns a new WidgetValueType instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        WidgetValueType.create = function (model) {
            return internal.instancehelpers.createElement(model, WidgetValueType);
        };
        WidgetValueType.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
            this.isPath = IsPath.No;
            this.pathType = PathType.None;
            this.type = WidgetValueTypeEnum.String;
        };
        return WidgetValueType;
    }(internal.Element));
    WidgetValueType.typeName = "CustomWidgets$WidgetValueType";
    WidgetValueType.versionInfo = new exports.StructureVersionInfo({}, internal.StructureType.Element);
    customwidgets.WidgetValueType = WidgetValueType;
})(customwidgets = exports.customwidgets || (exports.customwidgets = {}));
var reports_1 = require("./reports");
