import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;
import { projects } from "./projects";
export declare namespace settings {
    class CertificateType extends internal.IEnum {
        static Authority: CertificateType;
        static Client: CertificateType;
        protected qualifiedTsTypeName: string;
    }
    class DatabaseType extends internal.IEnum {
        static Hsqldb: DatabaseType;
        static Db2: DatabaseType;
        static SqlServer: DatabaseType;
        static MySql: DatabaseType;
        static Oracle: DatabaseType;
        static PostgreSql: DatabaseType;
        protected qualifiedTsTypeName: string;
    }
    class FirstDayOfWeekEnum extends internal.IEnum {
        static Default: FirstDayOfWeekEnum;
        static Sunday: FirstDayOfWeekEnum;
        static Monday: FirstDayOfWeekEnum;
        static Tuesday: FirstDayOfWeekEnum;
        static Wednesday: FirstDayOfWeekEnum;
        static Thursday: FirstDayOfWeekEnum;
        static Friday: FirstDayOfWeekEnum;
        static Saturday: FirstDayOfWeekEnum;
        protected qualifiedTsTypeName: string;
    }
    class HashAlgorithmType extends internal.IEnum {
        static BCrypt: HashAlgorithmType;
        static SSHA256: HashAlgorithmType;
        static SHA256: HashAlgorithmType;
        static MD5: HashAlgorithmType;
        protected qualifiedTsTypeName: string;
    }
    class RoundingMode extends internal.IEnum {
        static HalfUp: RoundingMode;
        static HalfEven: RoundingMode;
        protected qualifiedTsTypeName: string;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `Settings`.
     */
    interface ICertificate extends internal.IElement {
        model: IModel;
        containerAsCertificateSettings: ICertificateSettings;
        load(): Certificate;
        load(callback: (element: Certificate) => void, forceRefresh?: boolean): any;
    }
    class Certificate extends internal.Element implements ICertificate {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsCertificateSettings: CertificateSettings;

        type: CertificateType;

        data: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Certificate instance in the SDK and on the server.
         * The new Certificate will be automatically stored in the 'certificates' property
         * of the parent CertificateSettings element passed as argument.
         */
        static createIn(container: CertificateSettings): Certificate;
        /**
         * Creates and returns a new Certificate instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Certificate;

    }
    interface IProjectSettingsPart extends internal.IElement {
        model: IModel;
        containerAsProjectSettings: IProjectSettings;
        load(): ProjectSettingsPart;
        load(callback: (element: ProjectSettingsPart) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ProjectSettingsPart extends internal.Element implements IProjectSettingsPart {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsProjectSettings: ProjectSettings;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface ICertificateSettings extends IProjectSettingsPart {
        model: IModel;
        containerAsProjectSettings: IProjectSettings;
        load(): CertificateSettings;
        load(callback: (element: CertificateSettings) => void, forceRefresh?: boolean): any;
    }
    class CertificateSettings extends ProjectSettingsPart implements ICertificateSettings {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsProjectSettings: ProjectSettings;

        certificates: internal.IList<Certificate>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new CertificateSettings instance in the SDK and on the server.
         * The new CertificateSettings will be automatically stored in the 'settingsParts' property
         * of the parent ProjectSettings element passed as argument.
         */
        static createIn(container: ProjectSettings): CertificateSettings;
        /**
         * Creates and returns a new CertificateSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): CertificateSettings;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/configuration relevant section in reference guide}
     */
    interface IConfiguration extends internal.IElement {
        model: IModel;
        containerAsConfigurationSettings: IConfigurationSettings;
        load(): Configuration;
        load(callback: (element: Configuration) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/configuration relevant section in reference guide}
     */
    class Configuration extends internal.Element implements IConfiguration {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsConfigurationSettings: ConfigurationSettings;

        name: string;

        applicationRootUrl: string;

        runtimePortNumber: number;

        adminPortNumber: number;

        runtimePortOnlyLocal: boolean;

        adminPortOnlyLocal: boolean;

        maxJavaHeapSize: number;

        emulateCloudSecurity: boolean;

        extraJvmParameters: string;

        databaseType: DatabaseType;

        databaseUrl: string;

        databaseName: string;

        databaseUseIntegratedSecurity: boolean;

        databaseUserName: string;

        databasePassword: string;

        customSettings: internal.IList<CustomSetting>;

        constantValues: internal.IList<ConstantValue>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Configuration instance in the SDK and on the server.
         * The new Configuration will be automatically stored in the 'configurations' property
         * of the parent ConfigurationSettings element passed as argument.
         */
        static createIn(container: ConfigurationSettings): Configuration;
        /**
         * Creates and returns a new Configuration instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Configuration;

    }
    interface IConfigurationSettings extends IProjectSettingsPart {
        model: IModel;
        containerAsProjectSettings: IProjectSettings;
        load(): ConfigurationSettings;
        load(callback: (element: ConfigurationSettings) => void, forceRefresh?: boolean): any;
    }
    class ConfigurationSettings extends ProjectSettingsPart implements IConfigurationSettings {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsProjectSettings: ProjectSettings;

        configurations: internal.IList<Configuration>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ConfigurationSettings instance in the SDK and on the server.
         * The new ConfigurationSettings will be automatically stored in the 'settingsParts' property
         * of the parent ProjectSettings element passed as argument.
         */
        static createIn(container: ProjectSettings): ConfigurationSettings;
        /**
         * Creates and returns a new ConfigurationSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ConfigurationSettings;

    }
    interface IConstantValue extends internal.IElement {
        model: IModel;
        containerAsConfiguration: IConfiguration;
        load(): ConstantValue;
        load(callback: (element: ConstantValue) => void, forceRefresh?: boolean): any;
    }
    class ConstantValue extends internal.Element implements IConstantValue {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsConfiguration: Configuration;

        constant: constants.IConstant;
        readonly constantQualifiedName: string;

        value: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ConstantValue instance in the SDK and on the server.
         * The new ConstantValue will be automatically stored in the 'constantValues' property
         * of the parent Configuration element passed as argument.
         */
        static createIn(container: Configuration): ConstantValue;
        /**
         * Creates and returns a new ConstantValue instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ConstantValue;

    }
    interface ICustomSetting extends internal.IElement {
        model: IModel;
        containerAsConfiguration: IConfiguration;
        load(): CustomSetting;
        load(callback: (element: CustomSetting) => void, forceRefresh?: boolean): any;
    }
    class CustomSetting extends internal.Element implements ICustomSetting {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsConfiguration: Configuration;

        name: string;

        value: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new CustomSetting instance in the SDK and on the server.
         * The new CustomSetting will be automatically stored in the 'customSettings' property
         * of the parent Configuration element passed as argument.
         */
        static createIn(container: Configuration): CustomSetting;
        /**
         * Creates and returns a new CustomSetting instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): CustomSetting;

    }
    interface IIntegrationProjectSettingsPart extends IProjectSettingsPart {
        model: IModel;
        containerAsProjectSettings: IProjectSettings;
        load(): IntegrationProjectSettingsPart;
        load(callback: (element: IntegrationProjectSettingsPart) => void, forceRefresh?: boolean): any;
    }
    class IntegrationProjectSettingsPart extends ProjectSettingsPart implements IIntegrationProjectSettingsPart {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsProjectSettings: ProjectSettings;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new IntegrationProjectSettingsPart instance in the SDK and on the server.
         * The new IntegrationProjectSettingsPart will be automatically stored in the 'settingsParts' property
         * of the parent ProjectSettings element passed as argument.
         */
        static createIn(container: ProjectSettings): IntegrationProjectSettingsPart;
        /**
         * Creates and returns a new IntegrationProjectSettingsPart instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): IntegrationProjectSettingsPart;

    }
    /**
     * In version 6.9.0: introduced
     */
    interface IJavaActionsSettings extends IProjectSettingsPart {
        model: IModel;
        containerAsProjectSettings: IProjectSettings;
        load(): JavaActionsSettings;
        load(callback: (element: JavaActionsSettings) => void, forceRefresh?: boolean): any;
    }
    /**
     * In version 6.9.0: introduced
     */
    class JavaActionsSettings extends ProjectSettingsPart implements IJavaActionsSettings {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsProjectSettings: ProjectSettings;

        generatePostfixesForParameters: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new JavaActionsSettings instance in the SDK and on the server.
         * The new JavaActionsSettings will be automatically stored in the 'settingsParts' property
         * of the parent ProjectSettings element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createIn(container: ProjectSettings): JavaActionsSettings;
        /**
         * Creates and returns a new JavaActionsSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): JavaActionsSettings;

    }
    interface ILanguage extends internal.IElement {
        model: IModel;
        containerAsLanguageSettings: ILanguageSettings;
        load(): Language;
        load(callback: (element: Language) => void, forceRefresh?: boolean): any;
    }
    class Language extends internal.Element implements ILanguage {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsLanguageSettings: LanguageSettings;

        code: string;

        checkCompleteness: boolean;

        customDateFormat: string;

        customTimeFormat: string;

        customDateTimeFormat: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Language instance in the SDK and on the server.
         * The new Language will be automatically stored in the 'languages' property
         * of the parent LanguageSettings element passed as argument.
         */
        static createIn(container: LanguageSettings): Language;
        /**
         * Creates and returns a new Language instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Language;

    }
    interface ILanguageSettings extends IProjectSettingsPart {
        model: IModel;
        containerAsProjectSettings: IProjectSettings;
        load(): LanguageSettings;
        load(callback: (element: LanguageSettings) => void, forceRefresh?: boolean): any;
    }
    class LanguageSettings extends ProjectSettingsPart implements ILanguageSettings {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsProjectSettings: ProjectSettings;

        defaultLanguageCode: string;

        languages: internal.IList<Language>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new LanguageSettings instance in the SDK and on the server.
         * The new LanguageSettings will be automatically stored in the 'settingsParts' property
         * of the parent ProjectSettings element passed as argument.
         */
        static createIn(container: ProjectSettings): LanguageSettings;
        /**
         * Creates and returns a new LanguageSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): LanguageSettings;

    }
    interface IModelerSettings extends IProjectSettingsPart {
        model: IModel;
        containerAsProjectSettings: IProjectSettings;
        load(): ModelerSettings;
        load(callback: (element: ModelerSettings) => void, forceRefresh?: boolean): any;
    }
    class ModelerSettings extends ProjectSettingsPart implements IModelerSettings {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsProjectSettings: ProjectSettings;

        lowerCaseMicroflowVariables: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ModelerSettings instance in the SDK and on the server.
         * The new ModelerSettings will be automatically stored in the 'settingsParts' property
         * of the parent ProjectSettings element passed as argument.
         */
        static createIn(container: ProjectSettings): ModelerSettings;
        /**
         * Creates and returns a new ModelerSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ModelerSettings;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/project-settings relevant section in reference guide}
     */
    interface IProjectSettings extends projects.IProjectDocument {
        model: IModel;
        containerAsProject: projects.IProject;
        load(): ProjectSettings;
        load(callback: (element: ProjectSettings) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/project-settings relevant section in reference guide}
     */
    class ProjectSettings extends projects.ProjectDocument implements IProjectSettings {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsProject: projects.Project;

        settingsParts: internal.IList<ProjectSettingsPart>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IProject);
        /**
         * Creates a new ProjectSettings unit in the SDK and on the server.
         * Expects one argument, the projects.IProject in which this unit is contained.
         */
        static createIn(container: projects.IProject): ProjectSettings;

    }
    interface IRuntimeSettings extends IProjectSettingsPart {
        model: IModel;
        containerAsProjectSettings: IProjectSettings;
        load(): RuntimeSettings;
        load(callback: (element: RuntimeSettings) => void, forceRefresh?: boolean): any;
    }
    class RuntimeSettings extends ProjectSettingsPart implements IRuntimeSettings {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsProjectSettings: ProjectSettings;

        afterStartupMicroflow: microflows.IMicroflow;
        readonly afterStartupMicroflowQualifiedName: string;

        beforeShutdownMicroflow: microflows.IMicroflow;
        readonly beforeShutdownMicroflowQualifiedName: string;

        healthCheckMicroflow: microflows.IMicroflow;
        readonly healthCheckMicroflowQualifiedName: string;

        firstDayOfWeek: FirstDayOfWeekEnum;

        defaultTimeZoneCode: string;

        scheduledEventTimeZoneCode: string;

        hashAlgorithm: HashAlgorithmType;

        roundingMode: RoundingMode;

        allowUserMultipleSessions: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new RuntimeSettings instance in the SDK and on the server.
         * The new RuntimeSettings will be automatically stored in the 'settingsParts' property
         * of the parent ProjectSettings element passed as argument.
         */
        static createIn(container: ProjectSettings): RuntimeSettings;
        /**
         * Creates and returns a new RuntimeSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): RuntimeSettings;

    }
    interface IWebUIProjectSettingsPart extends IProjectSettingsPart {
        model: IModel;
        containerAsProjectSettings: IProjectSettings;
        load(): WebUIProjectSettingsPart;
        load(callback: (element: WebUIProjectSettingsPart) => void, forceRefresh?: boolean): any;
    }
    class WebUIProjectSettingsPart extends ProjectSettingsPart implements IWebUIProjectSettingsPart {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsProjectSettings: ProjectSettings;

        theme: string;

        /**
         * In version 6.2.0: deleted
         */
        feedbackWidgetUpdated: boolean;

        enableWidgetBundling: boolean;

        /**
         * In version 6.6.0: introduced
         */
        enableDownloadResources: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new WebUIProjectSettingsPart instance in the SDK and on the server.
         * The new WebUIProjectSettingsPart will be automatically stored in the 'settingsParts' property
         * of the parent ProjectSettings element passed as argument.
         */
        static createIn(container: ProjectSettings): WebUIProjectSettingsPart;
        /**
         * Creates and returns a new WebUIProjectSettingsPart instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): WebUIProjectSettingsPart;

    }
}
import { constants } from "./constants";
import { microflows } from "./microflows";
import { IModel } from "./base-model";
