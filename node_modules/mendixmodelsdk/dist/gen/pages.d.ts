import * as internal from "../sdk/internal";
export import StructureVersionInfo = internal.StructureVersionInfo;
import { common } from "../common";
import { projects } from "./projects";
export declare namespace pages {
    class AggregateFunction extends internal.IEnum {
        static None: AggregateFunction;
        static Average: AggregateFunction;
        static Maximum: AggregateFunction;
        static Minimum: AggregateFunction;
        static Sum: AggregateFunction;
        static Count: AggregateFunction;
        protected qualifiedTsTypeName: string;
    }
    class AlignmentEnum extends internal.IEnum {
        static Left: AlignmentEnum;
        static Center: AlignmentEnum;
        static Right: AlignmentEnum;
        protected qualifiedTsTypeName: string;
    }
    class ButtonStyle extends internal.IEnum {
        static Default: ButtonStyle;
        static Inverse: ButtonStyle;
        static Primary: ButtonStyle;
        static Info: ButtonStyle;
        static Success: ButtonStyle;
        static Warning: ButtonStyle;
        static Danger: ButtonStyle;
        protected qualifiedTsTypeName: string;
    }
    class ClickTypeType extends internal.IEnum {
        static Single: ClickTypeType;
        static Double: ClickTypeType;
        protected qualifiedTsTypeName: string;
    }
    class ContainerWidth extends internal.IEnum {
        static FullWidth: ContainerWidth;
        static FixedWidth: ContainerWidth;
        protected qualifiedTsTypeName: string;
    }
    class DataViewReadOnlyStyle extends internal.IEnum {
        static Control: DataViewReadOnlyStyle;
        static Text: DataViewReadOnlyStyle;
        protected qualifiedTsTypeName: string;
    }
    class DatabaseConstraintOperator extends internal.IEnum {
        static Equals: DatabaseConstraintOperator;
        static NotEquals: DatabaseConstraintOperator;
        static Contains: DatabaseConstraintOperator;
        static NotContains: DatabaseConstraintOperator;
        static LessThan: DatabaseConstraintOperator;
        static LessThanOrEquals: DatabaseConstraintOperator;
        static GreaterThan: DatabaseConstraintOperator;
        static GreaterThanOrEquals: DatabaseConstraintOperator;
        protected qualifiedTsTypeName: string;
    }
    class DateFormat extends internal.IEnum {
        static Date: DateFormat;
        static Time: DateFormat;
        static DateTime: DateFormat;
        static Custom: DateFormat;
        protected qualifiedTsTypeName: string;
    }
    class EditableEnum extends internal.IEnum {
        static Always: EditableEnum;
        static Never: EditableEnum;
        static Conditional: EditableEnum;
        protected qualifiedTsTypeName: string;
    }
    class EnumFormat extends internal.IEnum {
        static Text: EnumFormat;
        static Image: EnumFormat;
        protected qualifiedTsTypeName: string;
    }
    class FileManagerType extends internal.IEnum {
        static Upload: FileManagerType;
        static Download: FileManagerType;
        static Both: FileManagerType;
        protected qualifiedTsTypeName: string;
    }
    class FormLocation extends internal.IEnum {
        static Content: FormLocation;
        static Popup: FormLocation;
        static ModalPopup: FormLocation;
        protected qualifiedTsTypeName: string;
    }
    class FormValidations extends internal.IEnum {
        static None: FormValidations;
        static Widget: FormValidations;
        static All: FormValidations;
        protected qualifiedTsTypeName: string;
    }
    class GridSelectionMode extends internal.IEnum {
        static None: GridSelectionMode;
        static Single: GridSelectionMode;
        static SingleAndMaintain: GridSelectionMode;
        static Multi: GridSelectionMode;
        static SimpleMulti: GridSelectionMode;
        protected qualifiedTsTypeName: string;
    }
    class GroupBoxCollapsible extends internal.IEnum {
        static No: GroupBoxCollapsible;
        static YesInitiallyExpanded: GroupBoxCollapsible;
        static YesInitiallyCollapsed: GroupBoxCollapsible;
        protected qualifiedTsTypeName: string;
    }
    class ImageSizeUnit extends internal.IEnum {
        static Auto: ImageSizeUnit;
        static Pixels: ImageSizeUnit;
        static Percentage: ImageSizeUnit;
        protected qualifiedTsTypeName: string;
    }
    class LayoutModeType extends internal.IEnum {
        static Headline: LayoutModeType;
        static Sidebar: LayoutModeType;
        protected qualifiedTsTypeName: string;
    }
    class LayoutType extends internal.IEnum {
        static Responsive: LayoutType;
        static Tablet: LayoutType;
        static Phone: LayoutType;
        static ModalPopup: LayoutType;
        static Popup: LayoutType;
        static Legacy: LayoutType;
        protected qualifiedTsTypeName: string;
    }
    class LinkType extends internal.IEnum {
        static Web: LinkType;
        static Email: LinkType;
        static Call: LinkType;
        static Text: LinkType;
        protected qualifiedTsTypeName: string;
    }
    class MobileFooterType extends internal.IEnum {
        static None: MobileFooterType;
        static MenuBar: MobileFooterType;
        static Custom: MobileFooterType;
        protected qualifiedTsTypeName: string;
    }
    class NewButtonEditLocation extends internal.IEnum {
        static InlineAtTop: NewButtonEditLocation;
        static InlineAtBottom: NewButtonEditLocation;
        static Form: NewButtonEditLocation;
        protected qualifiedTsTypeName: string;
    }
    class ProgressBarType extends internal.IEnum {
        static None: ProgressBarType;
        static NonBlocking: ProgressBarType;
        static Blocking: ProgressBarType;
        protected qualifiedTsTypeName: string;
    }
    class ReadOnlyStyle extends internal.IEnum {
        static Inherit: ReadOnlyStyle;
        static Control: ReadOnlyStyle;
        static Text: ReadOnlyStyle;
        protected qualifiedTsTypeName: string;
    }
    class ReferenceSelectorRenderModeType extends internal.IEnum {
        static Form: ReferenceSelectorRenderModeType;
        static DropDown: ReferenceSelectorRenderModeType;
        protected qualifiedTsTypeName: string;
    }
    class RenderType extends internal.IEnum {
        static Button: RenderType;
        static Link: RenderType;
        protected qualifiedTsTypeName: string;
    }
    class ScrollBehavior extends internal.IEnum {
        static PerRegion: ScrollBehavior;
        static FullWidget: ScrollBehavior;
        protected qualifiedTsTypeName: string;
    }
    class SearchBarTypeEnum extends internal.IEnum {
        static None: SearchBarTypeEnum;
        static FoldableOpen: SearchBarTypeEnum;
        static FoldableClosed: SearchBarTypeEnum;
        static AlwaysOpen: SearchBarTypeEnum;
        protected qualifiedTsTypeName: string;
    }
    class SearchFieldOperator extends internal.IEnum {
        static Contains: SearchFieldOperator;
        static StartsWith: SearchFieldOperator;
        static Greater: SearchFieldOperator;
        static GreaterOrEqual: SearchFieldOperator;
        static Equal: SearchFieldOperator;
        static NotEqual: SearchFieldOperator;
        static SmallerOrEqual: SearchFieldOperator;
        static Smaller: SearchFieldOperator;
        protected qualifiedTsTypeName: string;
    }
    class SearchFieldType extends internal.IEnum {
        static Normal: SearchFieldType;
        static Hidden: SearchFieldType;
        static ReadOnly: SearchFieldType;
        protected qualifiedTsTypeName: string;
    }
    class SelectionType extends internal.IEnum {
        static SelectPage: SelectionType;
        static SelectAll: SelectionType;
        protected qualifiedTsTypeName: string;
    }
    class SidebarToggleMode extends internal.IEnum {
        static PushContentAside: SidebarToggleMode;
        static SlideOverContent: SidebarToggleMode;
        static ShrinkContent: SidebarToggleMode;
        protected qualifiedTsTypeName: string;
    }
    class SidebarToggleRegion extends internal.IEnum {
        static Left: SidebarToggleRegion;
        static Right: SidebarToggleRegion;
        protected qualifiedTsTypeName: string;
    }
    class SimpleMenuBarOrientation extends internal.IEnum {
        static Horizontal: SimpleMenuBarOrientation;
        static Vertical: SimpleMenuBarOrientation;
        protected qualifiedTsTypeName: string;
    }
    class SizeMode extends internal.IEnum {
        static Auto: SizeMode;
        static Pixels: SizeMode;
        static Percentage: SizeMode;
        protected qualifiedTsTypeName: string;
    }
    class SortDirection extends internal.IEnum {
        static Ascending: SortDirection;
        static Descending: SortDirection;
        protected qualifiedTsTypeName: string;
    }
    class TableCellRenderModeType extends internal.IEnum {
        static Default: TableCellRenderModeType;
        static Header: TableCellRenderModeType;
        static Title: TableCellRenderModeType;
        protected qualifiedTsTypeName: string;
    }
    class TextRenderMode extends internal.IEnum {
        static Text: TextRenderMode;
        static Paragraph: TextRenderMode;
        static H1: TextRenderMode;
        static H2: TextRenderMode;
        static H3: TextRenderMode;
        static H4: TextRenderMode;
        static H5: TextRenderMode;
        static H6: TextRenderMode;
        protected qualifiedTsTypeName: string;
    }
    class ToggleMode extends internal.IEnum {
        static None: ToggleMode;
        static PushContentAside: ToggleMode;
        static SlideOverContent: ToggleMode;
        static ShrinkContentInitiallyOpen: ToggleMode;
        static ShrinkContentInitiallyClosed: ToggleMode;
        protected qualifiedTsTypeName: string;
    }
    class UnitEnum extends internal.IEnum {
        static Weight: UnitEnum;
        static Pixels: UnitEnum;
        protected qualifiedTsTypeName: string;
    }
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `Pages`.
     */
    /**
     * See: {@link https://docs.mendix.com/refguide7/pages relevant section in reference guide}
     */
    interface IWidget extends internal.IElement {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): Widget;
        load(callback: (element: Widget) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/pages relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class Widget extends internal.Element implements IWidget {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        name: string;

        class: string;

        style: string;

        tabIndex: number;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IConditionallyVisibleWidget extends IWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): ConditionallyVisibleWidget;
        load(callback: (element: ConditionallyVisibleWidget) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ConditionallyVisibleWidget extends Widget implements IConditionallyVisibleWidget {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        conditionalVisibilitySettings: ConditionalVisibilitySettings;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/button-widgets relevant section in reference guide}
     */
    interface IButton extends IConditionallyVisibleWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): Button;
        load(callback: (element: Button) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/button-widgets relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class Button extends ConditionallyVisibleWidget implements IButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        caption: ClientTemplate;

        tooltip: texts.Text;

        icon: Icon;

        renderType: RenderType;

        buttonStyle: ButtonStyle;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/action-button relevant section in reference guide}
     */
    interface IActionButton extends IButton {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): ActionButton;
        load(callback: (element: ActionButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/action-button relevant section in reference guide}
     */
    class ActionButton extends Button implements IActionButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        action: ClientAction;

        disabledDuringAction: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * The new ActionButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): ActionButton;
        /**
         * Creates and returns a new ActionButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ActionButton;

    }
    interface IActionItem extends internal.IElement {
        model: IModel;
        containerAsDropDownButton: IDropDownButton;
        containerAsNavigationList: INavigationList;
        load(): ActionItem;
        load(callback: (element: ActionItem) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ActionItem extends internal.Element implements IActionItem {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDropDownButton: DropDownButton;
        readonly containerAsNavigationList: NavigationList;

        action: ClientAction;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-sources relevant section in reference guide}
     */
    interface IDataSource extends internal.IElement {
        model: IModel;
        containerAsEntityWidget: IEntityWidget;
        load(): DataSource;
        load(callback: (element: DataSource) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-sources relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class DataSource extends internal.Element implements IDataSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsEntityWidget: EntityWidget;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IEntityPathSource extends IDataSource {
        model: IModel;
        containerAsEntityWidget: IEntityWidget;
        load(): EntityPathSource;
        load(callback: (element: EntityPathSource) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class EntityPathSource extends DataSource implements IEntityPathSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsEntityWidget: EntityWidget;

        /**
         * The value of this property is conceptually of type paths.EntityPath.
         */
        entityPath: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IAssociationSource extends IEntityPathSource {
        model: IModel;
        containerAsEntityWidget: IEntityWidget;
        load(): AssociationSource;
        load(callback: (element: AssociationSource) => void, forceRefresh?: boolean): any;
    }
    class AssociationSource extends EntityPathSource implements IAssociationSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsEntityWidget: EntityWidget;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new AssociationSource instance in the SDK and on the server.
         * The new AssociationSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createIn(container: EntityWidget): AssociationSource;
        /**
         * Creates and returns a new AssociationSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): AssociationSource;

    }
    interface IConditionallyEditableWidget extends IConditionallyVisibleWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): ConditionallyEditableWidget;
        load(callback: (element: ConditionallyEditableWidget) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ConditionallyEditableWidget extends ConditionallyVisibleWidget implements IConditionallyEditableWidget {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        conditionalEditabilitySettings: ConditionalEditabilitySettings;

        editable: EditableEnum;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IInputWidget extends IConditionallyEditableWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): InputWidget;
        load(callback: (element: InputWidget) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class InputWidget extends ConditionallyEditableWidget implements IInputWidget {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        label: texts.Text;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IMemberWidget extends IInputWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): MemberWidget;
        load(callback: (element: MemberWidget) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class MemberWidget extends InputWidget implements IMemberWidget {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        /**
         * The value of this property is conceptually of type paths.AttributePath.
         */
        attributePath: string;

        /**
         * In version 6.9.0: introduced
         */
        readOnlyStyle: ReadOnlyStyle;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IAssociationWidget extends IMemberWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): AssociationWidget;
        load(callback: (element: AssociationWidget) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class AssociationWidget extends MemberWidget implements IAssociationWidget {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        selectorSource: SelectorSource;

        selectPageSettings: PageSettings;

        onChangeMicroflowSettings: MicroflowSettings;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IAttributeWidget extends IMemberWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): AttributeWidget;
        load(callback: (element: AttributeWidget) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class AttributeWidget extends MemberWidget implements IAttributeWidget {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        required: boolean;

        requiredMessage: texts.Text;

        onChangeMicroflowSettings: MicroflowSettings;

        onEnterMicroflowSettings: MicroflowSettings;

        onLeaveMicroflowSettings: MicroflowSettings;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IAttributeWidgetWithPlaceholder extends IAttributeWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): AttributeWidgetWithPlaceholder;
        load(callback: (element: AttributeWidgetWithPlaceholder) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class AttributeWidgetWithPlaceholder extends AttributeWidget implements IAttributeWidgetWithPlaceholder {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        placeholder: texts.Text;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/close-page-button relevant section in reference guide}
     */
    interface IBackButton extends IButton {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): BackButton;
        load(callback: (element: BackButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/close-page-button relevant section in reference guide}
     */
    class BackButton extends Button implements IBackButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * The new BackButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): BackButton;
        /**
         * Creates and returns a new BackButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): BackButton;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/cancel-button relevant section in reference guide}
     */
    interface ICancelButton extends IButton {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): CancelButton;
        load(callback: (element: CancelButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/cancel-button relevant section in reference guide}
     */
    class CancelButton extends Button implements ICancelButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        /**
         * In version 6.7.0: introduced
         */
        closePage: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * The new CancelButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): CancelButton;
        /**
         * Creates and returns a new CancelButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): CancelButton;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/check-box relevant section in reference guide}
     */
    interface ICheckBox extends IAttributeWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): CheckBox;
        load(callback: (element: CheckBox) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/check-box relevant section in reference guide}
     */
    class CheckBox extends AttributeWidget implements ICheckBox {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * The new CheckBox will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): CheckBox;
        /**
         * Creates and returns a new CheckBox instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): CheckBox;

    }
    interface IClientAction extends internal.IElement {
        model: IModel;
        containerAsMenuItem: menus.IMenuItem;
        containerAsActionButton: IActionButton;
        containerAsActionItem: IActionItem;
        containerAsDataViewActionButton: IDataViewActionButton;
        containerAsGridActionButton: IGridActionButton;
        containerAsListView: IListView;
        containerAsStaticImageViewer: IStaticImageViewer;
        load(): ClientAction;
        load(callback: (element: ClientAction) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ClientAction extends internal.Element implements IClientAction {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMenuItem: menus.MenuItem;
        readonly containerAsActionButton: ActionButton;
        readonly containerAsActionItem: ActionItem;
        readonly containerAsDataViewActionButton: DataViewActionButton;
        readonly containerAsGridActionButton: GridActionButton;
        readonly containerAsListView: ListView;
        readonly containerAsStaticImageViewer: StaticImageViewer;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IClientTemplate extends internal.IElement {
        model: IModel;
        containerAsButton: IButton;
        containerAsControlBarButton: IControlBarButton;
        containerAsDynamicText: IDynamicText;
        containerAsGroupBox: IGroupBox;
        load(): ClientTemplate;
        load(callback: (element: ClientTemplate) => void, forceRefresh?: boolean): any;
    }
    class ClientTemplate extends internal.Element implements IClientTemplate {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsButton: Button;
        readonly containerAsControlBarButton: ControlBarButton;
        readonly containerAsDynamicText: DynamicText;
        readonly containerAsGroupBox: GroupBox;

        template: texts.Text;

        parameters: internal.IList<ClientTemplateParameter>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'caption' property
         * of the parent Button element passed as argument.
         */
        static createInButtonUnderCaption(container: Button): ClientTemplate;
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'caption' property
         * of the parent ControlBarButton element passed as argument.
         */
        static createInControlBarButtonUnderCaption(container: ControlBarButton): ClientTemplate;
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'content' property
         * of the parent DynamicText element passed as argument.
         */
        static createInDynamicTextUnderContent(container: DynamicText): ClientTemplate;
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * The new ClientTemplate will be automatically stored in the 'caption' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderCaption(container: GroupBox): ClientTemplate;
        /**
         * Creates and returns a new ClientTemplate instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ClientTemplate;

    }
    interface IClientTemplateParameter extends internal.IElement {
        model: IModel;
        containerAsClientTemplate: IClientTemplate;
        load(): ClientTemplateParameter;
        load(callback: (element: ClientTemplateParameter) => void, forceRefresh?: boolean): any;
    }
    class ClientTemplateParameter extends internal.Element implements IClientTemplateParameter {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsClientTemplate: ClientTemplate;

        /**
         * The value of this property is conceptually of type paths.AttributePath.
         */
        attributePath: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ClientTemplateParameter instance in the SDK and on the server.
         * The new ClientTemplateParameter will be automatically stored in the 'parameters' property
         * of the parent ClientTemplate element passed as argument.
         */
        static createIn(container: ClientTemplate): ClientTemplateParameter;
        /**
         * Creates and returns a new ClientTemplateParameter instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ClientTemplateParameter;

    }
    interface IEntityWidget extends IConditionallyVisibleWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): EntityWidget;
        load(callback: (element: EntityWidget) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class EntityWidget extends ConditionallyVisibleWidget implements IEntityWidget {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        dataSource: DataSource;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IListenTargetWidget extends IEntityWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): ListenTargetWidget;
        load(callback: (element: ListenTargetWidget) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ListenTargetWidget extends EntityWidget implements IListenTargetWidget {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IGrid extends IListenTargetWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): Grid;
        load(callback: (element: Grid) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class Grid extends ListenTargetWidget implements IGrid {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        isControlBarVisible: boolean;

        isPagingEnabled: boolean;

        selectionMode: GridSelectionMode;

        selectFirst: boolean;

        defaultButtonTrigger: ClickTypeType;

        refreshTime: number;

        controlBar: GridControlBar;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IColumnGrid extends IGrid {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): ColumnGrid;
        load(callback: (element: ColumnGrid) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ColumnGrid extends Grid implements IColumnGrid {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        columns: internal.IList<GridColumn>;

        numberOfRows: number;

        showEmptyRows: boolean;

        widthUnit: UnitEnum;

        tooltipPage: IPage;
        readonly tooltipPageQualifiedName: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IControlBarItem extends internal.IElement {
        model: IModel;
        containerAsControlBar: IControlBar;
        containerAsGridControlBar: IGridControlBar;
        load(): ControlBarItem;
        load(callback: (element: ControlBarItem) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ControlBarItem extends internal.Element implements IControlBarItem {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;
        readonly containerAsGridControlBar: GridControlBar;

        name: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface ISearchField extends IControlBarItem {
        model: IModel;
        containerAsControlBar: IControlBar;
        load(): SearchField;
        load(callback: (element: SearchField) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class SearchField extends ControlBarItem implements ISearchField {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;

        caption: texts.Text;

        type: SearchFieldType;

        defaultValue: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface ISingleSearchField extends ISearchField {
        model: IModel;
        containerAsControlBar: IControlBar;
        load(): SingleSearchField;
        load(callback: (element: SingleSearchField) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class SingleSearchField extends SearchField implements ISingleSearchField {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;

        /**
         * The value of this property is conceptually of type paths.AttributePath.
         */
        attributePath: string;

        operator: SearchFieldOperator;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/comparison-search-field relevant section in reference guide}
     */
    interface IComparisonSearchField extends ISingleSearchField {
        model: IModel;
        containerAsControlBar: IControlBar;
        load(): ComparisonSearchField;
        load(callback: (element: ComparisonSearchField) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/comparison-search-field relevant section in reference guide}
     */
    class ComparisonSearchField extends SingleSearchField implements IComparisonSearchField {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ComparisonSearchField instance in the SDK and on the server.
         * The new ComparisonSearchField will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): ComparisonSearchField;
        /**
         * Creates and returns a new ComparisonSearchField instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ComparisonSearchField;

    }
    interface IConditionalSettings extends internal.IElement {
        model: IModel;
        containerAsConditionallyEditableWidget: IConditionallyEditableWidget;
        containerAsConditionallyVisibleWidget: IConditionallyVisibleWidget;
        containerAsControlBarButton: IControlBarButton;
        containerAsLayoutGridRow: ILayoutGridRow;
        containerAsNavigationListItem: INavigationListItem;
        containerAsTabPage: ITabPage;
        containerAsTableRow: ITableRow;
        load(): ConditionalSettings;
        load(callback: (element: ConditionalSettings) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ConditionalSettings extends internal.Element implements IConditionalSettings {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsConditionallyEditableWidget: ConditionallyEditableWidget;
        readonly containerAsConditionallyVisibleWidget: ConditionallyVisibleWidget;
        readonly containerAsControlBarButton: ControlBarButton;
        readonly containerAsLayoutGridRow: LayoutGridRow;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableRow: TableRow;

        attribute: domainmodels.IAttribute;
        readonly attributeQualifiedName: string;

        conditions: internal.IList<enumerations.Condition>;

        /**
         * The value of this property is conceptually of type microflowExpressions.MicroflowExpression.
         *
         * In version 7.0.1: introduced
         */
        expression: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IConditionalEditabilitySettings extends IConditionalSettings {
        model: IModel;
        containerAsConditionallyEditableWidget: IConditionallyEditableWidget;
        load(): ConditionalEditabilitySettings;
        load(callback: (element: ConditionalEditabilitySettings) => void, forceRefresh?: boolean): any;
    }
    class ConditionalEditabilitySettings extends ConditionalSettings implements IConditionalEditabilitySettings {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsConditionallyEditableWidget: ConditionallyEditableWidget;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ConditionalEditabilitySettings instance in the SDK and on the server.
         * The new ConditionalEditabilitySettings will be automatically stored in the 'conditionalEditabilitySettings' property
         * of the parent ConditionallyEditableWidget element passed as argument.
         */
        static createIn(container: ConditionallyEditableWidget): ConditionalEditabilitySettings;
        /**
         * Creates and returns a new ConditionalEditabilitySettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ConditionalEditabilitySettings;

    }
    interface IConditionalVisibilitySettings extends IConditionalSettings {
        model: IModel;
        containerAsConditionallyVisibleWidget: IConditionallyVisibleWidget;
        containerAsControlBarButton: IControlBarButton;
        containerAsLayoutGridRow: ILayoutGridRow;
        containerAsNavigationListItem: INavigationListItem;
        containerAsTabPage: ITabPage;
        containerAsTableRow: ITableRow;
        load(): ConditionalVisibilitySettings;
        load(callback: (element: ConditionalVisibilitySettings) => void, forceRefresh?: boolean): any;
    }
    class ConditionalVisibilitySettings extends ConditionalSettings implements IConditionalVisibilitySettings {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsConditionallyVisibleWidget: ConditionallyVisibleWidget;
        readonly containerAsControlBarButton: ControlBarButton;
        readonly containerAsLayoutGridRow: LayoutGridRow;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableRow: TableRow;

        moduleRoles: internal.IList<security.IModuleRole>;
        readonly moduleRolesQualifiedNames: string[];

        ignoreSecurity: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent ConditionallyVisibleWidget element passed as argument.
         */
        static createInConditionallyVisibleWidgetUnderConditionalVisibilitySettings(container: ConditionallyVisibleWidget): ConditionalVisibilitySettings;
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent ControlBarButton element passed as argument.
         */
        static createInControlBarButtonUnderConditionalVisibilitySettings(container: ControlBarButton): ConditionalVisibilitySettings;
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent LayoutGridRow element passed as argument.
         */
        static createInLayoutGridRowUnderConditionalVisibilitySettings(container: LayoutGridRow): ConditionalVisibilitySettings;
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderConditionalVisibilitySettings(container: NavigationListItem): ConditionalVisibilitySettings;
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderConditionalVisibilitySettings(container: TabPage): ConditionalVisibilitySettings;
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * The new ConditionalVisibilitySettings will be automatically stored in the 'conditionalVisibilitySettings' property
         * of the parent TableRow element passed as argument.
         */
        static createInTableRowUnderConditionalVisibilitySettings(container: TableRow): ConditionalVisibilitySettings;
        /**
         * Creates and returns a new ConditionalVisibilitySettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ConditionalVisibilitySettings;

    }
    interface IConfirmationInfo extends internal.IElement {
        model: IModel;
        containerAsMicroflowSettings: IMicroflowSettings;
        load(): ConfirmationInfo;
        load(callback: (element: ConfirmationInfo) => void, forceRefresh?: boolean): any;
    }
    class ConfirmationInfo extends internal.Element implements IConfirmationInfo {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMicroflowSettings: MicroflowSettings;

        question: texts.Text;

        proceedButtonCaption: texts.Text;

        cancelButtonCaption: texts.Text;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ConfirmationInfo instance in the SDK and on the server.
         * The new ConfirmationInfo will be automatically stored in the 'confirmationInfo' property
         * of the parent MicroflowSettings element passed as argument.
         */
        static createIn(container: MicroflowSettings): ConfirmationInfo;
        /**
         * Creates and returns a new ConfirmationInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ConfirmationInfo;

    }
    interface IControlBar extends internal.IElement {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsGrid: IGrid;
        containerAsGridBaseSource: IGridBaseSource;
        containerAsGridDatabaseSource: IGridDatabaseSource;
        load(): ControlBar;
        load(callback: (element: ControlBar) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ControlBar extends internal.Element implements IControlBar {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsGrid: Grid;
        readonly containerAsGridBaseSource: GridBaseSource;
        readonly containerAsGridDatabaseSource: GridDatabaseSource;

        items: internal.IList<ControlBarItem>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IControlBarButton extends IControlBarItem {
        model: IModel;
        containerAsControlBar: IControlBar;
        containerAsGridControlBar: IGridControlBar;
        load(): ControlBarButton;
        load(callback: (element: ControlBarButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class ControlBarButton extends ControlBarItem implements IControlBarButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;
        readonly containerAsGridControlBar: GridControlBar;

        caption: ClientTemplate;

        tooltip: texts.Text;

        icon: Icon;

        class: string;

        style: string;

        conditionalVisibilitySettings: ConditionalVisibilitySettings;

        buttonStyle: ButtonStyle;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-grid relevant section in reference guide}
     */
    interface IDataGrid extends IColumnGrid {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): DataGrid;
        load(callback: (element: DataGrid) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-grid relevant section in reference guide}
     */
    class DataGrid extends ColumnGrid implements IDataGrid {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * The new DataGrid will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): DataGrid;
        /**
         * Creates and returns a new DataGrid instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataGrid;

    }
    interface IGridControlBarButton extends IControlBarButton {
        model: IModel;
        containerAsControlBar: IControlBar;
        containerAsGridControlBar: IGridControlBar;
        load(): GridControlBarButton;
        load(callback: (element: GridControlBarButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class GridControlBarButton extends ControlBarButton implements IGridControlBarButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;
        readonly containerAsGridControlBar: GridControlBar;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/add-button relevant section in reference guide}
     */
    interface IDataGridAddButton extends IGridControlBarButton {
        model: IModel;
        containerAsControlBar: IControlBar;
        load(): DataGridAddButton;
        load(callback: (element: DataGridAddButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/add-button relevant section in reference guide}
     */
    class DataGridAddButton extends GridControlBarButton implements IDataGridAddButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;

        pageSettings: PageSettings;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataGridAddButton instance in the SDK and on the server.
         * The new DataGridAddButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): DataGridAddButton;
        /**
         * Creates and returns a new DataGridAddButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataGridAddButton;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/export-to-csv-button relevant section in reference guide}
     */
    interface IDataGridExportToCSVButton extends IGridControlBarButton {
        model: IModel;
        containerAsControlBar: IControlBar;
        load(): DataGridExportToCSVButton;
        load(callback: (element: DataGridExportToCSVButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/export-to-csv-button relevant section in reference guide}
     */
    class DataGridExportToCSVButton extends GridControlBarButton implements IDataGridExportToCSVButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;

        maxNumberOfRows: number;

        decimalSeparator: string;

        groupSeparator: string;

        delimiter: string;

        generateExcelHint: boolean;

        useGridDateFormat: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataGridExportToCSVButton instance in the SDK and on the server.
         * The new DataGridExportToCSVButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): DataGridExportToCSVButton;
        /**
         * Creates and returns a new DataGridExportToCSVButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataGridExportToCSVButton;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/export-to-excel-button relevant section in reference guide}
     */
    interface IDataGridExportToExcelButton extends IGridControlBarButton {
        model: IModel;
        containerAsControlBar: IControlBar;
        load(): DataGridExportToExcelButton;
        load(callback: (element: DataGridExportToExcelButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/export-to-excel-button relevant section in reference guide}
     */
    class DataGridExportToExcelButton extends GridControlBarButton implements IDataGridExportToExcelButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;

        maxNumberOfRows: number;

        useExcelDateType: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataGridExportToExcelButton instance in the SDK and on the server.
         * The new DataGridExportToExcelButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): DataGridExportToExcelButton;
        /**
         * Creates and returns a new DataGridExportToExcelButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataGridExportToExcelButton;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/remove-button relevant section in reference guide}
     */
    interface IDataGridRemoveButton extends IGridControlBarButton {
        model: IModel;
        containerAsControlBar: IControlBar;
        load(): DataGridRemoveButton;
        load(callback: (element: DataGridRemoveButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/remove-button relevant section in reference guide}
     */
    class DataGridRemoveButton extends GridControlBarButton implements IDataGridRemoveButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataGridRemoveButton instance in the SDK and on the server.
         * The new DataGridRemoveButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): DataGridRemoveButton;
        /**
         * Creates and returns a new DataGridRemoveButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataGridRemoveButton;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view relevant section in reference guide}
     */
    interface IDataView extends IEntityWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): DataView;
        load(callback: (element: DataView) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view relevant section in reference guide}
     */
    class DataView extends EntityWidget implements IDataView {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        widget: Widget;

        /**
         * In version 6.7.0: introduced
         */
        footerWidget: Widget;

        editable: boolean;

        /**
         * In version 6.7.0: deleted
         */
        showControlBar: boolean;

        /**
         * In version 6.7.0: introduced
         */
        showFooter: boolean;

        /**
         * In version 6.7.0: deleted
         */
        closeOnSaveOrCancel: boolean;

        useSchema: boolean;

        noEntityMessage: texts.Text;

        labelWidth: number;

        /**
         * In version 6.7.0: deleted
         * In version 6.5.0: added optional
         */
        controlBar: DataViewControlBar;

        /**
         * In version 6.9.0: introduced
         */
        readOnlyStyle: DataViewReadOnlyStyle;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * The new DataView will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): DataView;
        /**
         * Creates and returns a new DataView instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataView;

    }
    /**
     * In version 6.7.0: deleted
     */
    interface IDataViewControlBarButton extends IControlBarButton {
        model: IModel;
        containerAsControlBar: IControlBar;
        load(): DataViewControlBarButton;
        load(callback: (element: DataViewControlBarButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.

     *
     * In version 6.7.0: deleted
     */
    abstract class DataViewControlBarButton extends ControlBarButton implements IDataViewControlBarButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;

        tabIndex: number;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-action-button relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    interface IDataViewActionButton extends IDataViewControlBarButton {
        model: IModel;
        containerAsControlBar: IControlBar;
        load(): DataViewActionButton;
        load(callback: (element: DataViewActionButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-action-button relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    class DataViewActionButton extends DataViewControlBarButton implements IDataViewActionButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;

        action: ClientAction;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataViewActionButton instance in the SDK and on the server.
         * The new DataViewActionButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
         */
        static createIn(container: ControlBar): DataViewActionButton;
        /**
         * Creates and returns a new DataViewActionButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataViewActionButton;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-cancel-button relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    interface IDataViewCancelButton extends IDataViewControlBarButton {
        model: IModel;
        containerAsControlBar: IControlBar;
        load(): DataViewCancelButton;
        load(callback: (element: DataViewCancelButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-cancel-button relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    class DataViewCancelButton extends DataViewControlBarButton implements IDataViewCancelButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataViewCancelButton instance in the SDK and on the server.
         * The new DataViewCancelButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
         */
        static createIn(container: ControlBar): DataViewCancelButton;
        /**
         * Creates and returns a new DataViewCancelButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataViewCancelButton;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-close-button relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    interface IDataViewCloseButton extends IDataViewControlBarButton {
        model: IModel;
        containerAsControlBar: IControlBar;
        load(): DataViewCloseButton;
        load(callback: (element: DataViewCloseButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-close-button relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    class DataViewCloseButton extends DataViewControlBarButton implements IDataViewCloseButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataViewCloseButton instance in the SDK and on the server.
         * The new DataViewCloseButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
         */
        static createIn(container: ControlBar): DataViewCloseButton;
        /**
         * Creates and returns a new DataViewCloseButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataViewCloseButton;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-control-bar relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    interface IDataViewControlBar extends IControlBar {
        model: IModel;
        containerAsDataView: IDataView;
        load(): DataViewControlBar;
        load(callback: (element: DataViewControlBar) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-control-bar relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    class DataViewControlBar extends ControlBar implements IDataViewControlBar {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;

        closeButton: ControlBarItem;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataViewControlBar instance in the SDK and on the server.
         * The new DataViewControlBar will be automatically stored in the 'controlBar' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
         */
        static createIn(container: DataView): DataViewControlBar;
        /**
         * Creates and returns a new DataViewControlBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataViewControlBar;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-save-button relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    interface IDataViewSaveButton extends IDataViewControlBarButton {
        model: IModel;
        containerAsControlBar: IControlBar;
        load(): DataViewSaveButton;
        load(callback: (element: DataViewSaveButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/data-view-save-button relevant section in reference guide}
     *
     * In version 6.7.0: deleted
     */
    class DataViewSaveButton extends DataViewControlBarButton implements IDataViewSaveButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;

        /**
         * In version 6.6.0: introduced
         */
        syncAutomatically: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataViewSaveButton instance in the SDK and on the server.
         * The new DataViewSaveButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
         */
        static createIn(container: ControlBar): DataViewSaveButton;
        /**
         * Creates and returns a new DataViewSaveButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataViewSaveButton;

    }
    interface IDataViewSource extends IEntityPathSource {
        model: IModel;
        containerAsEntityWidget: IEntityWidget;
        load(): DataViewSource;
        load(callback: (element: DataViewSource) => void, forceRefresh?: boolean): any;
    }
    class DataViewSource extends EntityPathSource implements IDataViewSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsEntityWidget: EntityWidget;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DataViewSource instance in the SDK and on the server.
         * The new DataViewSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createIn(container: EntityWidget): DataViewSource;
        /**
         * Creates and returns a new DataViewSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DataViewSource;

    }
    interface IDatabaseConstraint extends internal.IElement {
        model: IModel;
        containerAsDatabaseSourceBase: IDatabaseSourceBase;
        containerAsSelectorDatabaseSource: ISelectorDatabaseSource;
        load(): DatabaseConstraint;
        load(callback: (element: DatabaseConstraint) => void, forceRefresh?: boolean): any;
    }
    class DatabaseConstraint extends internal.Element implements IDatabaseConstraint {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDatabaseSourceBase: DatabaseSourceBase;
        readonly containerAsSelectorDatabaseSource: SelectorDatabaseSource;

        attribute: domainmodels.IAttribute;
        readonly attributeQualifiedName: string;

        operator: DatabaseConstraintOperator;

        value: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
         * The new DatabaseConstraint will be automatically stored in the 'databaseConstraints' property
         * of the parent DatabaseSourceBase element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1
         */
        static createIn(container: DatabaseSourceBase): DatabaseConstraint;
        /**
         * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
         * The new DatabaseConstraint will be automatically stored in the 'databaseConstraints' property
         * of the parent DatabaseSourceBase element passed as argument.
         */
        static createInDatabaseSourceBaseUnderDatabaseConstraints(container: DatabaseSourceBase): DatabaseConstraint;
        /**
         * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
         * The new DatabaseConstraint will be automatically stored in the 'databaseConstraints' property
         * of the parent SelectorDatabaseSource element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInSelectorDatabaseSourceUnderDatabaseConstraints(container: SelectorDatabaseSource): DatabaseConstraint;
        /**
         * Creates and returns a new DatabaseConstraint instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DatabaseConstraint;

    }
    interface ISortableEntityPathSource extends IEntityPathSource {
        model: IModel;
        containerAsEntityWidget: IEntityWidget;
        load(): SortableEntityPathSource;
        load(callback: (element: SortableEntityPathSource) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class SortableEntityPathSource extends EntityPathSource implements ISortableEntityPathSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsEntityWidget: EntityWidget;

        sortBar: GridSortBar;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IDatabaseSourceBase extends ISortableEntityPathSource {
        model: IModel;
        containerAsEntityWidget: IEntityWidget;
        load(): DatabaseSourceBase;
        load(callback: (element: DatabaseSourceBase) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class DatabaseSourceBase extends SortableEntityPathSource implements IDatabaseSourceBase {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsEntityWidget: EntityWidget;

        databaseConstraints: internal.IList<DatabaseConstraint>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/date-picker relevant section in reference guide}
     */
    interface IDatePicker extends IAttributeWidgetWithPlaceholder {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): DatePicker;
        load(callback: (element: DatePicker) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/date-picker relevant section in reference guide}
     */
    class DatePicker extends AttributeWidgetWithPlaceholder implements IDatePicker {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        formattingInfo: FormattingInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * The new DatePicker will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): DatePicker;
        /**
         * Creates and returns a new DatePicker instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DatePicker;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/container relevant section in reference guide}
     */
    interface IDivContainer extends IConditionallyVisibleWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): DivContainer;
        load(callback: (element: DivContainer) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/container relevant section in reference guide}
     */
    class DivContainer extends ConditionallyVisibleWidget implements IDivContainer {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        widget: Widget;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * The new DivContainer will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): DivContainer;
        /**
         * Creates and returns a new DivContainer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DivContainer;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/drop-down-widget relevant section in reference guide}
     */
    interface IDropDown extends IAttributeWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): DropDown;
        load(callback: (element: DropDown) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/drop-down-widget relevant section in reference guide}
     */
    class DropDown extends AttributeWidget implements IDropDown {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * The new DropDown will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): DropDown;
        /**
         * Creates and returns a new DropDown instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DropDown;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/drop-down-button relevant section in reference guide}
     */
    interface IDropDownButton extends IButton {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): DropDownButton;
        load(callback: (element: DropDownButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/drop-down-button relevant section in reference guide}
     */
    class DropDownButton extends Button implements IDropDownButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        items: internal.IList<DropDownButtonItem>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * The new DropDownButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): DropDownButton;
        /**
         * Creates and returns a new DropDownButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DropDownButton;

    }
    interface IDropDownButtonItem extends IActionItem {
        model: IModel;
        containerAsDropDownButton: IDropDownButton;
        load(): DropDownButtonItem;
        load(callback: (element: DropDownButtonItem) => void, forceRefresh?: boolean): any;
    }
    class DropDownButtonItem extends ActionItem implements IDropDownButtonItem {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDropDownButton: DropDownButton;

        caption: texts.Text;

        image: images.IImage;
        readonly imageQualifiedName: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DropDownButtonItem instance in the SDK and on the server.
         * The new DropDownButtonItem will be automatically stored in the 'items' property
         * of the parent DropDownButton element passed as argument.
         */
        static createIn(container: DropDownButton): DropDownButtonItem;
        /**
         * Creates and returns a new DropDownButtonItem instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DropDownButtonItem;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/drop-down-search-field relevant section in reference guide}
     */
    interface IDropDownSearchField extends ISingleSearchField {
        model: IModel;
        containerAsControlBar: IControlBar;
        load(): DropDownSearchField;
        load(callback: (element: DropDownSearchField) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/drop-down-search-field relevant section in reference guide}
     */
    class DropDownSearchField extends SingleSearchField implements IDropDownSearchField {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;

        sortBar: GridSortBar;

        /**
         * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
         */
        xPathConstraint: string;

        allowMultipleSelect: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DropDownSearchField instance in the SDK and on the server.
         * The new DropDownSearchField will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): DropDownSearchField;
        /**
         * Creates and returns a new DropDownSearchField instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DropDownSearchField;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/image-viewer relevant section in reference guide}
     */
    interface IDynamicImageViewer extends IEntityWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): DynamicImageViewer;
        load(callback: (element: DynamicImageViewer) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/image-viewer relevant section in reference guide}
     */
    class DynamicImageViewer extends EntityWidget implements IDynamicImageViewer {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        defaultImage: images.IImage;
        readonly defaultImageQualifiedName: string;

        widthUnit: ImageSizeUnit;

        heightUnit: ImageSizeUnit;

        width: number;

        height: number;

        responsive: boolean;

        showAsThumbnail: boolean;

        onClickBehavior: OnClickBehavior;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * The new DynamicImageViewer will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): DynamicImageViewer;
        /**
         * Creates and returns a new DynamicImageViewer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DynamicImageViewer;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/text relevant section in reference guide}
     */
    interface IDynamicText extends IConditionallyVisibleWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): DynamicText;
        load(callback: (element: DynamicText) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/text relevant section in reference guide}
     */
    class DynamicText extends ConditionallyVisibleWidget implements IDynamicText {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        content: ClientTemplate;

        renderMode: TextRenderMode;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * The new DynamicText will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): DynamicText;
        /**
         * Creates and returns a new DynamicText instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): DynamicText;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/file-manager relevant section in reference guide}
     */
    interface IFileManager extends IInputWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): FileManager;
        load(callback: (element: FileManager) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/file-manager relevant section in reference guide}
     */
    class FileManager extends InputWidget implements IFileManager {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        allowedExtensions: string;

        type: FileManagerType;

        maxFileSize: number;

        showFileInBrowser: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * The new FileManager will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): FileManager;
        /**
         * Creates and returns a new FileManager instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): FileManager;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/pages relevant section in reference guide}
     */
    interface IFormBase extends projects.IDocument {
        model: IModel;
        containerAsFolderBase: projects.IFolderBase;
        load(): FormBase;
        load(callback: (element: FormBase) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/pages relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class FormBase extends projects.Document implements IFormBase {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsFolderBase: projects.FolderBase;

        canvasWidth: number;

        canvasHeight: number;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);

    }
    interface IFormattingInfo extends internal.IElement {
        model: IModel;
        containerAsDataGridColumn: documenttemplates.IDataGridColumn;
        containerAsDynamicLabel: documenttemplates.IDynamicLabel;
        containerAsDatePicker: IDatePicker;
        containerAsGridColumn: IGridColumn;
        containerAsReferenceSelector: IReferenceSelector;
        containerAsTextBox: ITextBox;
        load(): FormattingInfo;
        load(callback: (element: FormattingInfo) => void, forceRefresh?: boolean): any;
    }
    class FormattingInfo extends internal.Element implements IFormattingInfo {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataGridColumn: documenttemplates.DataGridColumn;
        readonly containerAsDynamicLabel: documenttemplates.DynamicLabel;
        readonly containerAsDatePicker: DatePicker;
        readonly containerAsGridColumn: GridColumn;
        readonly containerAsReferenceSelector: ReferenceSelector;
        readonly containerAsTextBox: TextBox;

        decimalPrecision: number;

        groupDigits: boolean;

        enumFormat: EnumFormat;

        dateFormat: DateFormat;

        customDateFormat: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent documenttemplates.DataGridColumn element passed as argument.
         */
        static createInDataGridColumnUnderFormattingInfo(container: documenttemplates.DataGridColumn): FormattingInfo;
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent documenttemplates.DynamicLabel element passed as argument.
         */
        static createInDynamicLabelUnderFormattingInfo(container: documenttemplates.DynamicLabel): FormattingInfo;
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent DatePicker element passed as argument.
         */
        static createInDatePickerUnderFormattingInfo(container: DatePicker): FormattingInfo;
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent GridColumn element passed as argument.
         */
        static createInGridColumnUnderFormattingInfo(container: GridColumn): FormattingInfo;
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent ReferenceSelector element passed as argument.
         */
        static createInReferenceSelectorUnderFormattingInfo(container: ReferenceSelector): FormattingInfo;
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * The new FormattingInfo will be automatically stored in the 'formattingInfo' property
         * of the parent TextBox element passed as argument.
         */
        static createInTextBoxUnderFormattingInfo(container: TextBox): FormattingInfo;
        /**
         * Creates and returns a new FormattingInfo instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): FormattingInfo;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/image-property relevant section in reference guide}
     */
    interface IIcon extends internal.IElement {
        model: IModel;
        containerAsMenuItem: menus.IMenuItem;
        containerAsButton: IButton;
        containerAsControlBarButton: IControlBarButton;
        load(): Icon;
        load(callback: (element: Icon) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/image-property relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class Icon extends internal.Element implements IIcon {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMenuItem: menus.MenuItem;
        readonly containerAsButton: Button;
        readonly containerAsControlBarButton: ControlBarButton;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IGlyphIcon extends IIcon {
        model: IModel;
        containerAsMenuItem: menus.IMenuItem;
        containerAsButton: IButton;
        containerAsControlBarButton: IControlBarButton;
        load(): GlyphIcon;
        load(callback: (element: GlyphIcon) => void, forceRefresh?: boolean): any;
    }
    class GlyphIcon extends Icon implements IGlyphIcon {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMenuItem: menus.MenuItem;
        readonly containerAsButton: Button;
        readonly containerAsControlBarButton: ControlBarButton;

        code: number;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GlyphIcon instance in the SDK and on the server.
         * The new GlyphIcon will be automatically stored in the 'icon' property
         * of the parent menus.MenuItem element passed as argument.
         */
        static createInMenuItemUnderIcon(container: menus.MenuItem): GlyphIcon;
        /**
         * Creates and returns a new GlyphIcon instance in the SDK and on the server.
         * The new GlyphIcon will be automatically stored in the 'icon' property
         * of the parent Button element passed as argument.
         */
        static createInButtonUnderIcon(container: Button): GlyphIcon;
        /**
         * Creates and returns a new GlyphIcon instance in the SDK and on the server.
         * The new GlyphIcon will be automatically stored in the 'icon' property
         * of the parent ControlBarButton element passed as argument.
         */
        static createInControlBarButtonUnderIcon(container: ControlBarButton): GlyphIcon;
        /**
         * Creates and returns a new GlyphIcon instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GlyphIcon;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/grid-action-button relevant section in reference guide}
     */
    interface IGridActionButton extends IGridControlBarButton {
        model: IModel;
        containerAsControlBar: IControlBar;
        load(): GridActionButton;
        load(callback: (element: GridActionButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/grid-action-button relevant section in reference guide}
     */
    class GridActionButton extends GridControlBarButton implements IGridActionButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;

        action: ClientAction;

        maintainSelectionAfterMicroflow: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridActionButton instance in the SDK and on the server.
         * The new GridActionButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): GridActionButton;
        /**
         * Creates and returns a new GridActionButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridActionButton;

    }
    interface IGridBaseSource extends ISortableEntityPathSource {
        model: IModel;
        containerAsEntityWidget: IEntityWidget;
        load(): GridBaseSource;
        load(callback: (element: GridBaseSource) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class GridBaseSource extends SortableEntityPathSource implements IGridBaseSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsEntityWidget: EntityWidget;

        searchBar: SearchBar;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/columns relevant section in reference guide}
     */
    interface IGridColumn extends internal.IElement {
        model: IModel;
        containerAsColumnGrid: IColumnGrid;
        load(): GridColumn;
        load(callback: (element: GridColumn) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/columns relevant section in reference guide}
     */
    class GridColumn extends internal.Element implements IGridColumn {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsColumnGrid: ColumnGrid;

        name: string;

        caption: texts.Text;

        /**
         * The value of this property is conceptually of type paths.AttributePath.
         */
        attributePath: string;

        formattingInfo: FormattingInfo;

        showTooltip: boolean;

        aggregateCaption: texts.Text;

        aggregateFunction: AggregateFunction;

        editable: boolean;

        width: number;

        class: string;

        style: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridColumn instance in the SDK and on the server.
         * The new GridColumn will be automatically stored in the 'columns' property
         * of the parent ColumnGrid element passed as argument.
         */
        static createIn(container: ColumnGrid): GridColumn;
        /**
         * Creates and returns a new GridColumn instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridColumn;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/control-bar relevant section in reference guide}
     */
    interface IGridControlBar extends IControlBar {
        model: IModel;
        containerAsGrid: IGrid;
        load(): GridControlBar;
        load(callback: (element: GridControlBar) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/control-bar relevant section in reference guide}
     */
    class GridControlBar extends ControlBar implements IGridControlBar {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsGrid: Grid;

        searchButton: GridSearchButton;

        defaultButton: ControlBarItem;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridControlBar instance in the SDK and on the server.
         * The new GridControlBar will be automatically stored in the 'controlBar' property
         * of the parent Grid element passed as argument.
         */
        static createIn(container: Grid): GridControlBar;
        /**
         * Creates and returns a new GridControlBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridControlBar;

    }
    interface IGridDatabaseSource extends IDatabaseSourceBase {
        model: IModel;
        containerAsEntityWidget: IEntityWidget;
        load(): GridDatabaseSource;
        load(callback: (element: GridDatabaseSource) => void, forceRefresh?: boolean): any;
    }
    class GridDatabaseSource extends DatabaseSourceBase implements IGridDatabaseSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsEntityWidget: EntityWidget;

        searchBar: SearchBar;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridDatabaseSource instance in the SDK and on the server.
         * The new GridDatabaseSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createIn(container: EntityWidget): GridDatabaseSource;
        /**
         * Creates and returns a new GridDatabaseSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridDatabaseSource;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/delete-button relevant section in reference guide}
     */
    interface IGridDeleteButton extends IGridControlBarButton {
        model: IModel;
        containerAsControlBar: IControlBar;
        load(): GridDeleteButton;
        load(callback: (element: GridDeleteButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/delete-button relevant section in reference guide}
     */
    class GridDeleteButton extends GridControlBarButton implements IGridDeleteButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridDeleteButton instance in the SDK and on the server.
         * The new GridDeleteButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): GridDeleteButton;
        /**
         * Creates and returns a new GridDeleteButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridDeleteButton;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/deselect-all-button relevant section in reference guide}
     */
    interface IGridDeselectAllButton extends IGridControlBarButton {
        model: IModel;
        containerAsControlBar: IControlBar;
        load(): GridDeselectAllButton;
        load(callback: (element: GridDeselectAllButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/deselect-all-button relevant section in reference guide}
     */
    class GridDeselectAllButton extends GridControlBarButton implements IGridDeselectAllButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridDeselectAllButton instance in the SDK and on the server.
         * The new GridDeselectAllButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): GridDeselectAllButton;
        /**
         * Creates and returns a new GridDeselectAllButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridDeselectAllButton;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/edit-button relevant section in reference guide}
     */
    interface IGridEditButton extends IGridControlBarButton {
        model: IModel;
        containerAsControlBar: IControlBar;
        load(): GridEditButton;
        load(callback: (element: GridEditButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/edit-button relevant section in reference guide}
     */
    class GridEditButton extends GridControlBarButton implements IGridEditButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;

        pageSettings: PageSettings;

        pagesForSpecializations: internal.IList<PageForSpecialization>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridEditButton instance in the SDK and on the server.
         * The new GridEditButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): GridEditButton;
        /**
         * Creates and returns a new GridEditButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridEditButton;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/grid-new-button relevant section in reference guide}
     */
    interface IGridNewButton extends IGridControlBarButton {
        model: IModel;
        containerAsControlBar: IControlBar;
        load(): GridNewButton;
        load(callback: (element: GridNewButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/grid-new-button relevant section in reference guide}
     */
    class GridNewButton extends GridControlBarButton implements IGridNewButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;

        entity: domainmodels.IEntity;
        readonly entityQualifiedName: string;

        editLocation: NewButtonEditLocation;

        pageSettings: PageSettings;

        /**
         * In version 6.2.0: deleted
         * In version 6.0.0: deprecated
         */
        isPersistent: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridNewButton instance in the SDK and on the server.
         * The new GridNewButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): GridNewButton;
        /**
         * Creates and returns a new GridNewButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridNewButton;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/search-button relevant section in reference guide}
     */
    interface IGridSearchButton extends IGridControlBarButton {
        model: IModel;
        containerAsControlBar: IControlBar;
        containerAsGridControlBar: IGridControlBar;
        load(): GridSearchButton;
        load(callback: (element: GridSearchButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/search-button relevant section in reference guide}
     */
    class GridSearchButton extends GridControlBarButton implements IGridSearchButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;
        readonly containerAsGridControlBar: GridControlBar;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridSearchButton instance in the SDK and on the server.
         * The new GridSearchButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createInControlBarUnderItems(container: ControlBar): GridSearchButton;
        /**
         * Creates and returns a new GridSearchButton instance in the SDK and on the server.
         * The new GridSearchButton will be automatically stored in the 'searchButton' property
         * of the parent GridControlBar element passed as argument.
         */
        static createInGridControlBarUnderSearchButton(container: GridControlBar): GridSearchButton;
        /**
         * Creates and returns a new GridSearchButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridSearchButton;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/select-all-button relevant section in reference guide}
     */
    interface IGridSelectAllButton extends IGridControlBarButton {
        model: IModel;
        containerAsControlBar: IControlBar;
        load(): GridSelectAllButton;
        load(callback: (element: GridSelectAllButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/select-all-button relevant section in reference guide}
     */
    class GridSelectAllButton extends GridControlBarButton implements IGridSelectAllButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;

        selectionType: SelectionType;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridSelectAllButton instance in the SDK and on the server.
         * The new GridSelectAllButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): GridSelectAllButton;
        /**
         * Creates and returns a new GridSelectAllButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridSelectAllButton;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/sort-bar relevant section in reference guide}
     */
    interface IGridSortBar extends internal.IElement {
        model: IModel;
        containerAsDropDownSearchField: IDropDownSearchField;
        containerAsSelectorDatabaseSource: ISelectorDatabaseSource;
        containerAsSelectorXPathSource: ISelectorXPathSource;
        containerAsSortableEntityPathSource: ISortableEntityPathSource;
        load(): GridSortBar;
        load(callback: (element: GridSortBar) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/sort-bar relevant section in reference guide}
     */
    class GridSortBar extends internal.Element implements IGridSortBar {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDropDownSearchField: DropDownSearchField;
        readonly containerAsSelectorDatabaseSource: SelectorDatabaseSource;
        readonly containerAsSelectorXPathSource: SelectorXPathSource;
        readonly containerAsSortableEntityPathSource: SortableEntityPathSource;

        sortItems: internal.IList<GridSortItem>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * The new GridSortBar will be automatically stored in the 'sortBar' property
         * of the parent DropDownSearchField element passed as argument.
         */
        static createInDropDownSearchFieldUnderSortBar(container: DropDownSearchField): GridSortBar;
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * The new GridSortBar will be automatically stored in the 'sortBar' property
         * of the parent SelectorDatabaseSource element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInSelectorDatabaseSourceUnderSortBar(container: SelectorDatabaseSource): GridSortBar;
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * The new GridSortBar will be automatically stored in the 'sortBar' property
         * of the parent SelectorXPathSource element passed as argument.
         */
        static createInSelectorXPathSourceUnderSortBar(container: SelectorXPathSource): GridSortBar;
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * The new GridSortBar will be automatically stored in the 'sortBar' property
         * of the parent SortableEntityPathSource element passed as argument.
         */
        static createInSortableEntityPathSourceUnderSortBar(container: SortableEntityPathSource): GridSortBar;
        /**
         * Creates and returns a new GridSortBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridSortBar;

    }
    interface IGridSortItem extends internal.IElement {
        model: IModel;
        containerAsGridSortBar: IGridSortBar;
        load(): GridSortItem;
        load(callback: (element: GridSortItem) => void, forceRefresh?: boolean): any;
    }
    class GridSortItem extends internal.Element implements IGridSortItem {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsGridSortBar: GridSortBar;

        /**
         * The value of this property is conceptually of type paths.AttributePath.
         */
        attributePath: string;

        sortDirection: SortDirection;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridSortItem instance in the SDK and on the server.
         * The new GridSortItem will be automatically stored in the 'sortItems' property
         * of the parent GridSortBar element passed as argument.
         */
        static createIn(container: GridSortBar): GridSortItem;
        /**
         * Creates and returns a new GridSortItem instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridSortItem;

    }
    interface IGridXPathSource extends IGridBaseSource {
        model: IModel;
        containerAsEntityWidget: IEntityWidget;
        load(): GridXPathSource;
        load(callback: (element: GridXPathSource) => void, forceRefresh?: boolean): any;
    }
    class GridXPathSource extends GridBaseSource implements IGridXPathSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsEntityWidget: EntityWidget;

        /**
         * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
         */
        xPathConstraint: string;

        applyContext: boolean;

        removeAllFromContext: boolean;

        removeFromContextIds: internal.IList<domainmodels.IEntity>;
        readonly removeFromContextIdsQualifiedNames: string[];
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GridXPathSource instance in the SDK and on the server.
         * The new GridXPathSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createIn(container: EntityWidget): GridXPathSource;
        /**
         * Creates and returns a new GridXPathSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GridXPathSource;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/group-box relevant section in reference guide}
     */
    interface IGroupBox extends IConditionallyVisibleWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): GroupBox;
        load(callback: (element: GroupBox) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/group-box relevant section in reference guide}
     */
    class GroupBox extends ConditionallyVisibleWidget implements IGroupBox {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        caption: ClientTemplate;

        collapsible: GroupBoxCollapsible;

        widget: Widget;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * The new GroupBox will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): GroupBox;
        /**
         * Creates and returns a new GroupBox instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): GroupBox;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/header relevant section in reference guide}
     */
    interface IHeader extends IWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): Header;
        load(callback: (element: Header) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/header relevant section in reference guide}
     */
    class Header extends Widget implements IHeader {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        leftWidget: Widget;

        rightWidget: Widget;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * The new Header will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): Header;
        /**
         * Creates and returns a new Header instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Header;

    }
    interface ISplitPane extends IWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): SplitPane;
        load(callback: (element: SplitPane) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class SplitPane extends Widget implements ISplitPane {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        firstWidget: Widget;

        secondWidget: Widget;

        animatedResize: boolean;

        height: number;

        position: number;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/horizontal-split-pane relevant section in reference guide}
     */
    interface IHorizontalSplitPane extends ISplitPane {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): HorizontalSplitPane;
        load(callback: (element: HorizontalSplitPane) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/horizontal-split-pane relevant section in reference guide}
     */
    class HorizontalSplitPane extends SplitPane implements IHorizontalSplitPane {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * The new HorizontalSplitPane will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): HorizontalSplitPane;
        /**
         * Creates and returns a new HorizontalSplitPane instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): HorizontalSplitPane;

    }
    interface IImageIcon extends IIcon {
        model: IModel;
        containerAsMenuItem: menus.IMenuItem;
        containerAsButton: IButton;
        containerAsControlBarButton: IControlBarButton;
        load(): ImageIcon;
        load(callback: (element: ImageIcon) => void, forceRefresh?: boolean): any;
    }
    class ImageIcon extends Icon implements IImageIcon {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMenuItem: menus.MenuItem;
        readonly containerAsButton: Button;
        readonly containerAsControlBarButton: ControlBarButton;

        image: images.IImage;
        readonly imageQualifiedName: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ImageIcon instance in the SDK and on the server.
         * The new ImageIcon will be automatically stored in the 'icon' property
         * of the parent menus.MenuItem element passed as argument.
         */
        static createInMenuItemUnderIcon(container: menus.MenuItem): ImageIcon;
        /**
         * Creates and returns a new ImageIcon instance in the SDK and on the server.
         * The new ImageIcon will be automatically stored in the 'icon' property
         * of the parent Button element passed as argument.
         */
        static createInButtonUnderIcon(container: Button): ImageIcon;
        /**
         * Creates and returns a new ImageIcon instance in the SDK and on the server.
         * The new ImageIcon will be automatically stored in the 'icon' property
         * of the parent ControlBarButton element passed as argument.
         */
        static createInControlBarButtonUnderIcon(container: ControlBarButton): ImageIcon;
        /**
         * Creates and returns a new ImageIcon instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ImageIcon;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/image-uploader relevant section in reference guide}
     */
    interface IImageUploader extends IInputWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): ImageUploader;
        load(callback: (element: ImageUploader) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/image-uploader relevant section in reference guide}
     */
    class ImageUploader extends InputWidget implements IImageUploader {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        allowedExtensions: string;

        thumbnailSize: common.ISize;

        maxFileSize: number;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * The new ImageUploader will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): ImageUploader;
        /**
         * Creates and returns a new ImageUploader instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ImageUploader;

    }
    interface IImageViewerSource extends IEntityPathSource {
        model: IModel;
        containerAsEntityWidget: IEntityWidget;
        load(): ImageViewerSource;
        load(callback: (element: ImageViewerSource) => void, forceRefresh?: boolean): any;
    }
    class ImageViewerSource extends EntityPathSource implements IImageViewerSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsEntityWidget: EntityWidget;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ImageViewerSource instance in the SDK and on the server.
         * The new ImageViewerSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createIn(container: EntityWidget): ImageViewerSource;
        /**
         * Creates and returns a new ImageViewerSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ImageViewerSource;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/input-reference-set-selector relevant section in reference guide}
     */
    interface IInputReferenceSetSelector extends IAssociationWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): InputReferenceSetSelector;
        load(callback: (element: InputReferenceSetSelector) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/input-reference-set-selector relevant section in reference guide}
     */
    class InputReferenceSetSelector extends AssociationWidget implements IInputReferenceSetSelector {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * The new InputReferenceSetSelector will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): InputReferenceSetSelector;
        /**
         * Creates and returns a new InputReferenceSetSelector instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): InputReferenceSetSelector;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/label relevant section in reference guide}
     */
    interface ILabel extends IConditionallyVisibleWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): Label;
        load(callback: (element: Label) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/label relevant section in reference guide}
     */
    class Label extends ConditionallyVisibleWidget implements ILabel {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        caption: texts.Text;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * The new Label will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): Label;
        /**
         * Creates and returns a new Label instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Label;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/layout relevant section in reference guide}
     */
    interface ILayout extends IFormBase {
        model: IModel;
        containerAsFolderBase: projects.IFolderBase;
        /**
         * In version 6.8.0: added public
         */
        layoutType: LayoutType;
        load(): Layout;
        load(callback: (element: Layout) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/layout relevant section in reference guide}
     */
    class Layout extends FormBase implements ILayout {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsFolderBase: projects.FolderBase;

        widget: Widget;

        /**
         * In version 6.8.0: added optional
         */
        layoutCall: LayoutCall;

        /**
         * In version 6.8.0: added public
         */
        layoutType: LayoutType;

        /**
         * In version 6.8.0: deleted
         */
        mainPlaceholder: ILayoutParameter;
        readonly mainPlaceholderQualifiedName: string;

        /**
         * In version 6.8.0: deleted
         */
        acceptButtonPlaceholder: ILayoutParameter;
        readonly acceptButtonPlaceholderQualifiedName: string;

        /**
         * In version 6.8.0: deleted
         */
        cancelButtonPlaceholder: ILayoutParameter;
        readonly cancelButtonPlaceholderQualifiedName: string;

        /**
         * In version 6.8.0: introduced
         */
        mainPlaceholderName: string;

        /**
         * In version 6.8.0: introduced
         */
        acceptPlaceholderName: string;

        /**
         * In version 6.8.0: introduced
         */
        cancelPlaceholderName: string;

        useMainPlaceholderForPopups: boolean;

        class: string;

        style: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new Layout unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): Layout;


    }
    interface ILayoutCall extends internal.IElement {
        model: IModel;
        containerAsLayout: ILayout;
        containerAsPage: IPage;
        load(): LayoutCall;
        load(callback: (element: LayoutCall) => void, forceRefresh?: boolean): any;
    }
    class LayoutCall extends internal.Element implements ILayoutCall {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsLayout: Layout;
        readonly containerAsPage: Page;

        layout: ILayout;
        readonly layoutQualifiedName: string;

        arguments: internal.IList<LayoutCallArgument>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new LayoutCall instance in the SDK and on the server.
         * The new LayoutCall will be automatically stored in the 'layoutCall' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderLayoutCall(container: Layout): LayoutCall;
        /**
         * Creates and returns a new LayoutCall instance in the SDK and on the server.
         * The new LayoutCall will be automatically stored in the 'layoutCall' property
         * of the parent Page element passed as argument.
         */
        static createInPageUnderLayoutCall(container: Page): LayoutCall;
        /**
         * Creates and returns a new LayoutCall instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): LayoutCall;

    }
    interface ILayoutCallArgument extends internal.IElement {
        model: IModel;
        containerAsLayoutCall: ILayoutCall;
        load(): LayoutCallArgument;
        load(callback: (element: LayoutCallArgument) => void, forceRefresh?: boolean): any;
    }
    class LayoutCallArgument extends internal.Element implements ILayoutCallArgument {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsLayoutCall: LayoutCall;

        /**
         * In version 6.8.0: deleted
         */
        parameterName: string;

        /**
         * In version 6.8.0: introduced
         */
        parameter: ILayoutParameter;
        readonly parameterQualifiedName: string;

        widget: Widget;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new LayoutCallArgument instance in the SDK and on the server.
         * The new LayoutCallArgument will be automatically stored in the 'arguments' property
         * of the parent LayoutCall element passed as argument.
         */
        static createIn(container: LayoutCall): LayoutCallArgument;
        /**
         * Creates and returns a new LayoutCallArgument instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): LayoutCallArgument;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/layout-grid relevant section in reference guide}
     */
    interface ILayoutGrid extends IConditionallyVisibleWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): LayoutGrid;
        load(callback: (element: LayoutGrid) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/layout-grid relevant section in reference guide}
     */
    class LayoutGrid extends ConditionallyVisibleWidget implements ILayoutGrid {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        width: ContainerWidth;

        rows: internal.IList<LayoutGridRow>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * The new LayoutGrid will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): LayoutGrid;
        /**
         * Creates and returns a new LayoutGrid instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): LayoutGrid;

    }
    interface ILayoutGridColumn extends internal.IElement {
        model: IModel;
        containerAsLayoutGridRow: ILayoutGridRow;
        load(): LayoutGridColumn;
        load(callback: (element: LayoutGridColumn) => void, forceRefresh?: boolean): any;
    }
    class LayoutGridColumn extends internal.Element implements ILayoutGridColumn {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsLayoutGridRow: LayoutGridRow;

        weight: number;

        widget: Widget;

        class: string;

        style: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new LayoutGridColumn instance in the SDK and on the server.
         * The new LayoutGridColumn will be automatically stored in the 'columns' property
         * of the parent LayoutGridRow element passed as argument.
         */
        static createIn(container: LayoutGridRow): LayoutGridColumn;
        /**
         * Creates and returns a new LayoutGridColumn instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): LayoutGridColumn;

    }
    interface ILayoutGridRow extends internal.IElement {
        model: IModel;
        containerAsLayoutGrid: ILayoutGrid;
        load(): LayoutGridRow;
        load(callback: (element: LayoutGridRow) => void, forceRefresh?: boolean): any;
    }
    class LayoutGridRow extends internal.Element implements ILayoutGridRow {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsLayoutGrid: LayoutGrid;

        columns: internal.IList<LayoutGridColumn>;

        conditionalVisibilitySettings: ConditionalVisibilitySettings;

        class: string;

        style: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new LayoutGridRow instance in the SDK and on the server.
         * The new LayoutGridRow will be automatically stored in the 'rows' property
         * of the parent LayoutGrid element passed as argument.
         */
        static createIn(container: LayoutGrid): LayoutGridRow;
        /**
         * Creates and returns a new LayoutGridRow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): LayoutGridRow;

    }
    interface ILayoutParameter extends internal.IElement {
        model: IModel;
        containerAsLayout: ILayout;
        name: string;
        load(): LayoutParameter;
        load(callback: (element: LayoutParameter) => void, forceRefresh?: boolean): any;
    }
    class LayoutParameter extends internal.Element implements ILayoutParameter {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsLayout: Layout;

        name: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);


    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/link-button relevant section in reference guide}
     */
    interface ILinkButton extends IButton {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): LinkButton;
        load(callback: (element: LinkButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/link-button relevant section in reference guide}
     */
    class LinkButton extends Button implements ILinkButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        linkType: LinkType;

        address: StaticOrDynamicString;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * The new LinkButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): LinkButton;
        /**
         * Creates and returns a new LinkButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): LinkButton;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/list-view relevant section in reference guide}
     */
    interface IListView extends IListenTargetWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): ListView;
        load(callback: (element: ListView) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/list-view relevant section in reference guide}
     */
    class ListView extends ListenTargetWidget implements IListView {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        widget: Widget;

        pageSize: number;

        clickAction: ClientAction;

        editable: boolean;

        templates: internal.IList<ListViewTemplate>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * The new ListView will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): ListView;
        /**
         * Creates and returns a new ListView instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ListView;

    }
    interface IListViewDatabaseSource extends IDatabaseSourceBase {
        model: IModel;
        containerAsEntityWidget: IEntityWidget;
        load(): ListViewDatabaseSource;
        load(callback: (element: ListViewDatabaseSource) => void, forceRefresh?: boolean): any;
    }
    class ListViewDatabaseSource extends DatabaseSourceBase implements IListViewDatabaseSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsEntityWidget: EntityWidget;

        search: ListViewSearch;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ListViewDatabaseSource instance in the SDK and on the server.
         * The new ListViewDatabaseSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createIn(container: EntityWidget): ListViewDatabaseSource;
        /**
         * Creates and returns a new ListViewDatabaseSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ListViewDatabaseSource;

    }
    interface IListViewSearch extends internal.IElement {
        model: IModel;
        containerAsListViewDatabaseSource: IListViewDatabaseSource;
        containerAsListViewXPathSource: IListViewXPathSource;
        load(): ListViewSearch;
        load(callback: (element: ListViewSearch) => void, forceRefresh?: boolean): any;
    }
    class ListViewSearch extends internal.Element implements IListViewSearch {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsListViewDatabaseSource: ListViewDatabaseSource;
        readonly containerAsListViewXPathSource: ListViewXPathSource;

        /**
         * The value of this property is conceptually of type paths.AttributePath.
         */
        searchPaths: internal.IList<string>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ListViewSearch instance in the SDK and on the server.
         * The new ListViewSearch will be automatically stored in the 'search' property
         * of the parent ListViewDatabaseSource element passed as argument.
         */
        static createInListViewDatabaseSourceUnderSearch(container: ListViewDatabaseSource): ListViewSearch;
        /**
         * Creates and returns a new ListViewSearch instance in the SDK and on the server.
         * The new ListViewSearch will be automatically stored in the 'search' property
         * of the parent ListViewXPathSource element passed as argument.
         */
        static createInListViewXPathSourceUnderSearch(container: ListViewXPathSource): ListViewSearch;
        /**
         * Creates and returns a new ListViewSearch instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ListViewSearch;

    }
    interface IListViewTemplate extends internal.IElement {
        model: IModel;
        containerAsListView: IListView;
        load(): ListViewTemplate;
        load(callback: (element: ListViewTemplate) => void, forceRefresh?: boolean): any;
    }
    class ListViewTemplate extends internal.Element implements IListViewTemplate {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsListView: ListView;

        specialization: domainmodels.IEntity;
        readonly specializationQualifiedName: string;

        widget: Widget;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ListViewTemplate instance in the SDK and on the server.
         * The new ListViewTemplate will be automatically stored in the 'templates' property
         * of the parent ListView element passed as argument.
         */
        static createIn(container: ListView): ListViewTemplate;
        /**
         * Creates and returns a new ListViewTemplate instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ListViewTemplate;

    }
    interface IListViewXPathSource extends ISortableEntityPathSource {
        model: IModel;
        containerAsEntityWidget: IEntityWidget;
        load(): ListViewXPathSource;
        load(callback: (element: ListViewXPathSource) => void, forceRefresh?: boolean): any;
    }
    class ListViewXPathSource extends SortableEntityPathSource implements IListViewXPathSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsEntityWidget: EntityWidget;

        search: ListViewSearch;

        /**
         * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
         */
        xPathConstraint: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ListViewXPathSource instance in the SDK and on the server.
         * The new ListViewXPathSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createIn(container: EntityWidget): ListViewXPathSource;
        /**
         * Creates and returns a new ListViewXPathSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ListViewXPathSource;

    }
    interface IListenTargetSource extends IDataSource {
        model: IModel;
        containerAsEntityWidget: IEntityWidget;
        load(): ListenTargetSource;
        load(callback: (element: ListenTargetSource) => void, forceRefresh?: boolean): any;
    }
    class ListenTargetSource extends DataSource implements IListenTargetSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsEntityWidget: EntityWidget;

        listenTarget: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ListenTargetSource instance in the SDK and on the server.
         * The new ListenTargetSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createIn(container: EntityWidget): ListenTargetSource;
        /**
         * Creates and returns a new ListenTargetSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ListenTargetSource;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/sign-out-button relevant section in reference guide}
     */
    interface ILogoutButton extends IButton {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): LogoutButton;
        load(callback: (element: LogoutButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/sign-out-button relevant section in reference guide}
     */
    class LogoutButton extends Button implements ILogoutButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * The new LogoutButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): LogoutButton;
        /**
         * Creates and returns a new LogoutButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): LogoutButton;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/menu-widgets relevant section in reference guide}
     */
    interface IMenuWidget extends IWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): MenuWidget;
        load(callback: (element: MenuWidget) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/menu-widgets relevant section in reference guide}
     *
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class MenuWidget extends Widget implements IMenuWidget {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        menuSource: MenuSource;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/menu-bar relevant section in reference guide}
     */
    interface IMenuBar extends IMenuWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): MenuBar;
        load(callback: (element: MenuBar) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/menu-bar relevant section in reference guide}
     */
    class MenuBar extends MenuWidget implements IMenuBar {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * The new MenuBar will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): MenuBar;
        /**
         * Creates and returns a new MenuBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MenuBar;

    }
    interface IMenuSource extends internal.IElement {
        model: IModel;
        containerAsMenuWidget: IMenuWidget;
        load(): MenuSource;
        load(callback: (element: MenuSource) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class MenuSource extends internal.Element implements IMenuSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMenuWidget: MenuWidget;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IMenuDocumentSource extends IMenuSource {
        model: IModel;
        containerAsMenuWidget: IMenuWidget;
        load(): MenuDocumentSource;
        load(callback: (element: MenuDocumentSource) => void, forceRefresh?: boolean): any;
    }
    class MenuDocumentSource extends MenuSource implements IMenuDocumentSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMenuWidget: MenuWidget;

        menu: menus.IMenuDocument;
        readonly menuQualifiedName: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MenuDocumentSource instance in the SDK and on the server.
         * The new MenuDocumentSource will be automatically stored in the 'menuSource' property
         * of the parent MenuWidget element passed as argument.
         */
        static createIn(container: MenuWidget): MenuDocumentSource;
        /**
         * Creates and returns a new MenuDocumentSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MenuDocumentSource;

    }
    interface IMicroflowClientAction extends IClientAction {
        model: IModel;
        containerAsMenuItem: menus.IMenuItem;
        containerAsActionButton: IActionButton;
        containerAsActionItem: IActionItem;
        containerAsDataViewActionButton: IDataViewActionButton;
        containerAsGridActionButton: IGridActionButton;
        containerAsListView: IListView;
        containerAsStaticImageViewer: IStaticImageViewer;
        load(): MicroflowClientAction;
        load(callback: (element: MicroflowClientAction) => void, forceRefresh?: boolean): any;
    }
    class MicroflowClientAction extends ClientAction implements IMicroflowClientAction {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMenuItem: menus.MenuItem;
        readonly containerAsActionButton: ActionButton;
        readonly containerAsActionItem: ActionItem;
        readonly containerAsDataViewActionButton: DataViewActionButton;
        readonly containerAsGridActionButton: GridActionButton;
        readonly containerAsListView: ListView;
        readonly containerAsStaticImageViewer: StaticImageViewer;

        microflowSettings: MicroflowSettings;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         */
        static createInMenuItemUnderAction(container: menus.MenuItem): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         */
        static createInActionButtonUnderAction(container: ActionButton): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         */
        static createInActionItemUnderAction(container: ActionItem): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent DataViewActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
         */
        static createInDataViewActionButtonUnderAction(container: DataViewActionButton): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         */
        static createInGridActionButtonUnderAction(container: GridActionButton): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderClickAction(container: ListView): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * The new MicroflowClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         */
        static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): MicroflowClientAction;
        /**
         * Creates and returns a new MicroflowClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MicroflowClientAction;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/starting-microflows relevant section in reference guide}
     */
    interface IMicroflowSettings extends internal.IElement {
        model: IModel;
        containerAsAssociationWidget: IAssociationWidget;
        containerAsAttributeWidget: IAttributeWidget;
        containerAsMicroflowClientAction: IMicroflowClientAction;
        containerAsMicroflowSource: IMicroflowSource;
        containerAsOnClickMicroflow: IOnClickMicroflow;
        containerAsReferenceSetSelector: IReferenceSetSelector;
        containerAsSelectorMicroflowSource: ISelectorMicroflowSource;
        load(): MicroflowSettings;
        load(callback: (element: MicroflowSettings) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/starting-microflows relevant section in reference guide}
     */
    class MicroflowSettings extends internal.Element implements IMicroflowSettings {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsAssociationWidget: AssociationWidget;
        readonly containerAsAttributeWidget: AttributeWidget;
        readonly containerAsMicroflowClientAction: MicroflowClientAction;
        readonly containerAsMicroflowSource: MicroflowSource;
        readonly containerAsOnClickMicroflow: OnClickMicroflow;
        readonly containerAsReferenceSetSelector: ReferenceSetSelector;
        readonly containerAsSelectorMicroflowSource: SelectorMicroflowSource;

        microflow: microflows.IMicroflow;
        readonly microflowQualifiedName: string;

        useAllPages: boolean;

        progressBar: ProgressBarType;

        progressMessage: texts.Text;

        asynchronous: boolean;

        formValidations: FormValidations;

        confirmationInfo: ConfirmationInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'onChangeMicroflowSettings' property
         * of the parent AssociationWidget element passed as argument.
         */
        static createInAssociationWidgetUnderOnChangeMicroflowSettings(container: AssociationWidget): MicroflowSettings;
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'onChangeMicroflowSettings' property
         * of the parent AttributeWidget element passed as argument.
         */
        static createInAttributeWidgetUnderOnChangeMicroflowSettings(container: AttributeWidget): MicroflowSettings;
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'onEnterMicroflowSettings' property
         * of the parent AttributeWidget element passed as argument.
         */
        static createInAttributeWidgetUnderOnEnterMicroflowSettings(container: AttributeWidget): MicroflowSettings;
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'onLeaveMicroflowSettings' property
         * of the parent AttributeWidget element passed as argument.
         */
        static createInAttributeWidgetUnderOnLeaveMicroflowSettings(container: AttributeWidget): MicroflowSettings;
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'microflowSettings' property
         * of the parent MicroflowClientAction element passed as argument.
         */
        static createInMicroflowClientActionUnderMicroflowSettings(container: MicroflowClientAction): MicroflowSettings;
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'microflowSettings' property
         * of the parent MicroflowSource element passed as argument.
         */
        static createInMicroflowSourceUnderMicroflowSettings(container: MicroflowSource): MicroflowSettings;
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'microflowSettings' property
         * of the parent OnClickMicroflow element passed as argument.
         */
        static createInOnClickMicroflowUnderMicroflowSettings(container: OnClickMicroflow): MicroflowSettings;
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'onChangeMicroflowSettings' property
         * of the parent ReferenceSetSelector element passed as argument.
         */
        static createInReferenceSetSelectorUnderOnChangeMicroflowSettings(container: ReferenceSetSelector): MicroflowSettings;
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * The new MicroflowSettings will be automatically stored in the 'dataSourceMicroflowSettings' property
         * of the parent SelectorMicroflowSource element passed as argument.
         */
        static createInSelectorMicroflowSourceUnderDataSourceMicroflowSettings(container: SelectorMicroflowSource): MicroflowSettings;
        /**
         * Creates and returns a new MicroflowSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MicroflowSettings;

    }
    interface IMicroflowSource extends IDataSource {
        model: IModel;
        containerAsEntityWidget: IEntityWidget;
        load(): MicroflowSource;
        load(callback: (element: MicroflowSource) => void, forceRefresh?: boolean): any;
    }
    class MicroflowSource extends DataSource implements IMicroflowSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsEntityWidget: EntityWidget;

        microflowSettings: MicroflowSettings;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new MicroflowSource instance in the SDK and on the server.
         * The new MicroflowSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createIn(container: EntityWidget): MicroflowSource;
        /**
         * Creates and returns a new MicroflowSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): MicroflowSource;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/navigation-list relevant section in reference guide}
     */
    interface INavigationList extends IConditionallyVisibleWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): NavigationList;
        load(callback: (element: NavigationList) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/navigation-list relevant section in reference guide}
     */
    class NavigationList extends ConditionallyVisibleWidget implements INavigationList {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        items: internal.IList<NavigationListItem>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * The new NavigationList will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): NavigationList;
        /**
         * Creates and returns a new NavigationList instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): NavigationList;

    }
    interface INavigationListItem extends IActionItem {
        model: IModel;
        containerAsNavigationList: INavigationList;
        load(): NavigationListItem;
        load(callback: (element: NavigationListItem) => void, forceRefresh?: boolean): any;
    }
    class NavigationListItem extends ActionItem implements INavigationListItem {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsNavigationList: NavigationList;

        widget: Widget;

        class: string;

        style: string;

        conditionalVisibilitySettings: ConditionalVisibilitySettings;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new NavigationListItem instance in the SDK and on the server.
         * The new NavigationListItem will be automatically stored in the 'items' property
         * of the parent NavigationList element passed as argument.
         */
        static createIn(container: NavigationList): NavigationListItem;
        /**
         * Creates and returns a new NavigationListItem instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): NavigationListItem;

    }
    interface INavigationSource extends IMenuSource {
        model: IModel;
        containerAsMenuWidget: IMenuWidget;
        load(): NavigationSource;
        load(callback: (element: NavigationSource) => void, forceRefresh?: boolean): any;
    }
    class NavigationSource extends MenuSource implements INavigationSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMenuWidget: MenuWidget;

        profileType: navigation.ProfileType;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new NavigationSource instance in the SDK and on the server.
         * The new NavigationSource will be automatically stored in the 'menuSource' property
         * of the parent MenuWidget element passed as argument.
         */
        static createIn(container: MenuWidget): NavigationSource;
        /**
         * Creates and returns a new NavigationSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): NavigationSource;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/navigation-tree relevant section in reference guide}
     */
    interface INavigationTree extends IMenuWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): NavigationTree;
        load(callback: (element: NavigationTree) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/navigation-tree relevant section in reference guide}
     */
    class NavigationTree extends MenuWidget implements INavigationTree {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * The new NavigationTree will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): NavigationTree;
        /**
         * Creates and returns a new NavigationTree instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): NavigationTree;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/new-button relevant section in reference guide}
     */
    interface INewButton extends IButton {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): NewButton;
        load(callback: (element: NewButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/new-button relevant section in reference guide}
     */
    class NewButton extends Button implements INewButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        /**
         * In version 6.3.0: deleted
         */
        entity: domainmodels.IEntity;
        readonly entityQualifiedName: string;

        /**
         * The value of this property is conceptually of type paths.EntityPath.
         *
         * In version 6.3.0: introduced
         */
        entityPath: string;

        pageSettings: PageSettings;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * The new NewButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): NewButton;
        /**
         * Creates and returns a new NewButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): NewButton;

    }
    interface INoClientAction extends IClientAction {
        model: IModel;
        containerAsMenuItem: menus.IMenuItem;
        containerAsActionButton: IActionButton;
        containerAsActionItem: IActionItem;
        containerAsDataViewActionButton: IDataViewActionButton;
        containerAsGridActionButton: IGridActionButton;
        containerAsListView: IListView;
        containerAsStaticImageViewer: IStaticImageViewer;
        load(): NoClientAction;
        load(callback: (element: NoClientAction) => void, forceRefresh?: boolean): any;
    }
    class NoClientAction extends ClientAction implements INoClientAction {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMenuItem: menus.MenuItem;
        readonly containerAsActionButton: ActionButton;
        readonly containerAsActionItem: ActionItem;
        readonly containerAsDataViewActionButton: DataViewActionButton;
        readonly containerAsGridActionButton: GridActionButton;
        readonly containerAsListView: ListView;
        readonly containerAsStaticImageViewer: StaticImageViewer;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         */
        static createInMenuItemUnderAction(container: menus.MenuItem): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         */
        static createInActionButtonUnderAction(container: ActionButton): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         */
        static createInActionItemUnderAction(container: ActionItem): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent DataViewActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
         */
        static createInDataViewActionButtonUnderAction(container: DataViewActionButton): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         */
        static createInGridActionButtonUnderAction(container: GridActionButton): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderClickAction(container: ListView): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * The new NoClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         */
        static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): NoClientAction;
        /**
         * Creates and returns a new NoClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): NoClientAction;

    }
    interface IOfflineSchema extends internal.IElement {
        model: IModel;
        load(): OfflineSchema;
        load(callback: (element: OfflineSchema) => void, forceRefresh?: boolean): any;
    }
    class OfflineSchema extends internal.Element implements IOfflineSchema {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;

        role: security.IUserRole;
        readonly roleQualifiedName: string;

        /**
         * In version 6.4.0: introduced
         */
        tables: internal.IList<string>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new OfflineSchema instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): OfflineSchema;

    }
    interface IOfflineSchemaFetchInstruction extends internal.IElement {
        model: IModel;
        load(): OfflineSchemaFetchInstruction;
        load(callback: (element: OfflineSchemaFetchInstruction) => void, forceRefresh?: boolean): any;
    }
    class OfflineSchemaFetchInstruction extends internal.Element implements IOfflineSchemaFetchInstruction {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;

        tableName: string;

        xPath: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new OfflineSchemaFetchInstruction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): OfflineSchemaFetchInstruction;

    }
    interface IOnClickBehavior extends internal.IElement {
        model: IModel;
        containerAsDynamicImageViewer: IDynamicImageViewer;
        load(): OnClickBehavior;
        load(callback: (element: OnClickBehavior) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class OnClickBehavior extends internal.Element implements IOnClickBehavior {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDynamicImageViewer: DynamicImageViewer;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    interface IOnClickEnlarge extends IOnClickBehavior {
        model: IModel;
        containerAsDynamicImageViewer: IDynamicImageViewer;
        load(): OnClickEnlarge;
        load(callback: (element: OnClickEnlarge) => void, forceRefresh?: boolean): any;
    }
    class OnClickEnlarge extends OnClickBehavior implements IOnClickEnlarge {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDynamicImageViewer: DynamicImageViewer;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new OnClickEnlarge instance in the SDK and on the server.
         * The new OnClickEnlarge will be automatically stored in the 'onClickBehavior' property
         * of the parent DynamicImageViewer element passed as argument.
         */
        static createIn(container: DynamicImageViewer): OnClickEnlarge;
        /**
         * Creates and returns a new OnClickEnlarge instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): OnClickEnlarge;

    }
    interface IOnClickMicroflow extends IOnClickBehavior {
        model: IModel;
        containerAsDynamicImageViewer: IDynamicImageViewer;
        load(): OnClickMicroflow;
        load(callback: (element: OnClickMicroflow) => void, forceRefresh?: boolean): any;
    }
    class OnClickMicroflow extends OnClickBehavior implements IOnClickMicroflow {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDynamicImageViewer: DynamicImageViewer;

        microflowSettings: MicroflowSettings;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new OnClickMicroflow instance in the SDK and on the server.
         * The new OnClickMicroflow will be automatically stored in the 'onClickBehavior' property
         * of the parent DynamicImageViewer element passed as argument.
         */
        static createIn(container: DynamicImageViewer): OnClickMicroflow;
        /**
         * Creates and returns a new OnClickMicroflow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): OnClickMicroflow;

    }
    interface IOnClickNothing extends IOnClickBehavior {
        model: IModel;
        containerAsDynamicImageViewer: IDynamicImageViewer;
        load(): OnClickNothing;
        load(callback: (element: OnClickNothing) => void, forceRefresh?: boolean): any;
    }
    class OnClickNothing extends OnClickBehavior implements IOnClickNothing {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDynamicImageViewer: DynamicImageViewer;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new OnClickNothing instance in the SDK and on the server.
         * The new OnClickNothing will be automatically stored in the 'onClickBehavior' property
         * of the parent DynamicImageViewer element passed as argument.
         */
        static createIn(container: DynamicImageViewer): OnClickNothing;
        /**
         * Creates and returns a new OnClickNothing instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): OnClickNothing;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/page relevant section in reference guide}
     */
    interface IPage extends IFormBase {
        model: IModel;
        containerAsFolderBase: projects.IFolderBase;
        load(): Page;
        load(callback: (element: Page) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/page relevant section in reference guide}
     */
    class Page extends FormBase implements IPage {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsFolderBase: projects.FolderBase;

        layoutCall: LayoutCall;

        title: texts.Text;

        class: string;

        style: string;

        allowedRoles: internal.IList<security.IModuleRole>;
        readonly allowedRolesQualifiedNames: string[];

        /**
         * In version 6.7.0: introduced
         */
        popupCloseAction: string;

        popupWidth: number;

        popupHeight: number;

        popupResizable: boolean;

        markAsUsed: boolean;

        /**
         * In version 6.7.0: introduced
         */
        url: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new Page unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): Page;


    }
    interface IPageClientAction extends IClientAction {
        model: IModel;
        containerAsMenuItem: menus.IMenuItem;
        containerAsActionButton: IActionButton;
        containerAsActionItem: IActionItem;
        containerAsDataViewActionButton: IDataViewActionButton;
        containerAsGridActionButton: IGridActionButton;
        containerAsListView: IListView;
        containerAsStaticImageViewer: IStaticImageViewer;
        load(): PageClientAction;
        load(callback: (element: PageClientAction) => void, forceRefresh?: boolean): any;
    }
    class PageClientAction extends ClientAction implements IPageClientAction {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsMenuItem: menus.MenuItem;
        readonly containerAsActionButton: ActionButton;
        readonly containerAsActionItem: ActionItem;
        readonly containerAsDataViewActionButton: DataViewActionButton;
        readonly containerAsGridActionButton: GridActionButton;
        readonly containerAsListView: ListView;
        readonly containerAsStaticImageViewer: StaticImageViewer;

        pageSettings: PageSettings;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent menus.MenuItem element passed as argument.
         */
        static createInMenuItemUnderAction(container: menus.MenuItem): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent ActionButton element passed as argument.
         */
        static createInActionButtonUnderAction(container: ActionButton): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent ActionItem element passed as argument.
         */
        static createInActionItemUnderAction(container: ActionItem): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent DataViewActionButton element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0
         */
        static createInDataViewActionButtonUnderAction(container: DataViewActionButton): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'action' property
         * of the parent GridActionButton element passed as argument.
         */
        static createInGridActionButtonUnderAction(container: GridActionButton): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'clickAction' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderClickAction(container: ListView): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * The new PageClientAction will be automatically stored in the 'clickAction' property
         * of the parent StaticImageViewer element passed as argument.
         */
        static createInStaticImageViewerUnderClickAction(container: StaticImageViewer): PageClientAction;
        /**
         * Creates and returns a new PageClientAction instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): PageClientAction;

    }
    interface IPageForSpecialization extends internal.IElement {
        model: IModel;
        containerAsGridEditButton: IGridEditButton;
        load(): PageForSpecialization;
        load(callback: (element: PageForSpecialization) => void, forceRefresh?: boolean): any;
    }
    class PageForSpecialization extends internal.Element implements IPageForSpecialization {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsGridEditButton: GridEditButton;

        entity: domainmodels.IEntity;
        readonly entityQualifiedName: string;

        pageSettings: PageSettings;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new PageForSpecialization instance in the SDK and on the server.
         * The new PageForSpecialization will be automatically stored in the 'pagesForSpecializations' property
         * of the parent GridEditButton element passed as argument.
         */
        static createIn(container: GridEditButton): PageForSpecialization;
        /**
         * Creates and returns a new PageForSpecialization instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): PageForSpecialization;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/opening-pages relevant section in reference guide}
     */
    interface IPageSettings extends internal.IElement {
        model: IModel;
        containerAsShowPageAction: microflows.IShowPageAction;
        containerAsAssociationWidget: IAssociationWidget;
        containerAsDataGridAddButton: IDataGridAddButton;
        containerAsGridEditButton: IGridEditButton;
        containerAsGridNewButton: IGridNewButton;
        containerAsNewButton: INewButton;
        containerAsPageClientAction: IPageClientAction;
        containerAsPageForSpecialization: IPageForSpecialization;
        containerAsReferenceSelector: IReferenceSelector;
        load(): PageSettings;
        load(callback: (element: PageSettings) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/opening-pages relevant section in reference guide}
     */
    class PageSettings extends internal.Element implements IPageSettings {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsShowPageAction: microflows.ShowPageAction;
        readonly containerAsAssociationWidget: AssociationWidget;
        readonly containerAsDataGridAddButton: DataGridAddButton;
        readonly containerAsGridEditButton: GridEditButton;
        readonly containerAsGridNewButton: GridNewButton;
        readonly containerAsNewButton: NewButton;
        readonly containerAsPageClientAction: PageClientAction;
        readonly containerAsPageForSpecialization: PageForSpecialization;
        readonly containerAsReferenceSelector: ReferenceSelector;

        page: IPage;
        readonly pageQualifiedName: string;

        formTitle: texts.Text;

        location: FormLocation;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent microflows.ShowPageAction element passed as argument.
         */
        static createInShowPageActionUnderPageSettings(container: microflows.ShowPageAction): PageSettings;
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'selectPageSettings' property
         * of the parent AssociationWidget element passed as argument.
         */
        static createInAssociationWidgetUnderSelectPageSettings(container: AssociationWidget): PageSettings;
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent DataGridAddButton element passed as argument.
         */
        static createInDataGridAddButtonUnderPageSettings(container: DataGridAddButton): PageSettings;
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent GridEditButton element passed as argument.
         */
        static createInGridEditButtonUnderPageSettings(container: GridEditButton): PageSettings;
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent GridNewButton element passed as argument.
         */
        static createInGridNewButtonUnderPageSettings(container: GridNewButton): PageSettings;
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent NewButton element passed as argument.
         */
        static createInNewButtonUnderPageSettings(container: NewButton): PageSettings;
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent PageClientAction element passed as argument.
         */
        static createInPageClientActionUnderPageSettings(container: PageClientAction): PageSettings;
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'pageSettings' property
         * of the parent PageForSpecialization element passed as argument.
         */
        static createInPageForSpecializationUnderPageSettings(container: PageForSpecialization): PageSettings;
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * The new PageSettings will be automatically stored in the 'gotoPageSettings' property
         * of the parent ReferenceSelector element passed as argument.
         */
        static createInReferenceSelectorUnderGotoPageSettings(container: ReferenceSelector): PageSettings;
        /**
         * Creates and returns a new PageSettings instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): PageSettings;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/placeholder relevant section in reference guide}
     */
    interface IPlaceholder extends IWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): Placeholder;
        load(callback: (element: Placeholder) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/placeholder relevant section in reference guide}
     */
    class Placeholder extends Widget implements IPlaceholder {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * The new Placeholder will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): Placeholder;
        /**
         * Creates and returns a new Placeholder instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Placeholder;

    }
    interface IRadioButtonGroup extends IAttributeWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): RadioButtonGroup;
        load(callback: (element: RadioButtonGroup) => void, forceRefresh?: boolean): any;
    }
    class RadioButtonGroup extends AttributeWidget implements IRadioButtonGroup {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        renderHorizontal: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * The new RadioButtonGroup will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): RadioButtonGroup;
        /**
         * Creates and returns a new RadioButtonGroup instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): RadioButtonGroup;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/range-search-field relevant section in reference guide}
     */
    interface IRangeSearchField extends ISearchField {
        model: IModel;
        containerAsControlBar: IControlBar;
        load(): RangeSearchField;
        load(callback: (element: RangeSearchField) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/range-search-field relevant section in reference guide}
     */
    class RangeSearchField extends SearchField implements IRangeSearchField {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;

        /**
         * The value of this property is conceptually of type paths.AttributePath.
         */
        lowerBound: string;

        /**
         * The value of this property is conceptually of type paths.AttributePath.
         */
        upperBound: string;

        includeLower: boolean;

        includeUpper: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new RangeSearchField instance in the SDK and on the server.
         * The new RangeSearchField will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): RangeSearchField;
        /**
         * Creates and returns a new RangeSearchField instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): RangeSearchField;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/reference-selector relevant section in reference guide}
     */
    interface IReferenceSelector extends IAssociationWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): ReferenceSelector;
        load(callback: (element: ReferenceSelector) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/reference-selector relevant section in reference guide}
     */
    class ReferenceSelector extends AssociationWidget implements IReferenceSelector {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        required: boolean;

        requiredMessage: texts.Text;

        renderMode: ReferenceSelectorRenderModeType;

        gotoPageSettings: PageSettings;

        formattingInfo: FormattingInfo;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * The new ReferenceSelector will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): ReferenceSelector;
        /**
         * Creates and returns a new ReferenceSelector instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ReferenceSelector;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/reference-set-selector relevant section in reference guide}
     */
    interface IReferenceSetSelector extends IColumnGrid {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): ReferenceSetSelector;
        load(callback: (element: ReferenceSetSelector) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/reference-set-selector relevant section in reference guide}
     */
    class ReferenceSetSelector extends ColumnGrid implements IReferenceSetSelector {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        onChangeMicroflowSettings: MicroflowSettings;

        /**
         * The value of this property is conceptually of type paths.EntityPath.
         */
        constrainedBy: internal.IList<string>;

        /**
         * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
         */
        xPathConstraint: string;

        removeAllFromContext: boolean;

        removeFromContextEntities: internal.IList<domainmodels.IEntity>;
        readonly removeFromContextEntitiesQualifiedNames: string[];
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * The new ReferenceSetSelector will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): ReferenceSetSelector;
        /**
         * Creates and returns a new ReferenceSetSelector instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ReferenceSetSelector;

    }
    interface IReferenceSetSource extends IGridBaseSource {
        model: IModel;
        containerAsEntityWidget: IEntityWidget;
        load(): ReferenceSetSource;
        load(callback: (element: ReferenceSetSource) => void, forceRefresh?: boolean): any;
    }
    class ReferenceSetSource extends GridBaseSource implements IReferenceSetSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsEntityWidget: EntityWidget;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ReferenceSetSource instance in the SDK and on the server.
         * The new ReferenceSetSource will be automatically stored in the 'dataSource' property
         * of the parent EntityWidget element passed as argument.
         */
        static createIn(container: EntityWidget): ReferenceSetSource;
        /**
         * Creates and returns a new ReferenceSetSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ReferenceSetSource;

    }
    /**
     * In version 6.2.0: introduced
     */
    interface IRetrievalSchema extends internal.IElement {
        model: IModel;
        load(): RetrievalSchema;
        load(callback: (element: RetrievalSchema) => void, forceRefresh?: boolean): any;
    }
    /**
     * In version 6.2.0: introduced
     */
    class RetrievalSchema extends internal.Element implements IRetrievalSchema {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;

        usedAttributes: internal.IList<string>;

        entity: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new RetrievalSchema instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): RetrievalSchema;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/save-button relevant section in reference guide}
     */
    interface ISaveButton extends IButton {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): SaveButton;
        load(callback: (element: SaveButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/save-button relevant section in reference guide}
     */
    class SaveButton extends Button implements ISaveButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        /**
         * In version 6.6.0: introduced
         */
        syncAutomatically: boolean;

        /**
         * In version 6.7.0: introduced
         */
        closePage: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * The new SaveButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): SaveButton;
        /**
         * Creates and returns a new SaveButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SaveButton;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/scroll-container relevant section in reference guide}
     */
    interface IScrollContainer extends IWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): ScrollContainer;
        load(callback: (element: ScrollContainer) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/scroll-container relevant section in reference guide}
     */
    class ScrollContainer extends Widget implements IScrollContainer {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        center: ScrollContainerRegion;

        left: ScrollContainerRegion;

        right: ScrollContainerRegion;

        top: ScrollContainerRegion;

        bottom: ScrollContainerRegion;

        layoutMode: LayoutModeType;

        widthMode: SizeMode;

        width: number;

        alignment: AlignmentEnum;

        scrollBehavior: ScrollBehavior;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * The new ScrollContainer will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): ScrollContainer;
        /**
         * Creates and returns a new ScrollContainer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ScrollContainer;

    }
    interface IScrollContainerRegion extends internal.IElement {
        model: IModel;
        containerAsScrollContainer: IScrollContainer;
        load(): ScrollContainerRegion;
        load(callback: (element: ScrollContainerRegion) => void, forceRefresh?: boolean): any;
    }
    class ScrollContainerRegion extends internal.Element implements IScrollContainerRegion {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsScrollContainer: ScrollContainer;

        widget: Widget;

        sizeMode: SizeMode;

        size: number;

        class: string;

        style: string;

        /**
         * In version 6.10.0: introduced
         */
        toggleMode: ToggleMode;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * The new ScrollContainerRegion will be automatically stored in the 'bottom' property
         * of the parent ScrollContainer element passed as argument.
         */
        static createInScrollContainerUnderBottom(container: ScrollContainer): ScrollContainerRegion;
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * The new ScrollContainerRegion will be automatically stored in the 'center' property
         * of the parent ScrollContainer element passed as argument.
         */
        static createInScrollContainerUnderCenter(container: ScrollContainer): ScrollContainerRegion;
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * The new ScrollContainerRegion will be automatically stored in the 'left' property
         * of the parent ScrollContainer element passed as argument.
         */
        static createInScrollContainerUnderLeft(container: ScrollContainer): ScrollContainerRegion;
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * The new ScrollContainerRegion will be automatically stored in the 'right' property
         * of the parent ScrollContainer element passed as argument.
         */
        static createInScrollContainerUnderRight(container: ScrollContainer): ScrollContainerRegion;
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * The new ScrollContainerRegion will be automatically stored in the 'top' property
         * of the parent ScrollContainer element passed as argument.
         */
        static createInScrollContainerUnderTop(container: ScrollContainer): ScrollContainerRegion;
        /**
         * Creates and returns a new ScrollContainerRegion instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): ScrollContainerRegion;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/search-bar relevant section in reference guide}
     */
    interface ISearchBar extends IControlBar {
        model: IModel;
        containerAsGridBaseSource: IGridBaseSource;
        containerAsGridDatabaseSource: IGridDatabaseSource;
        load(): SearchBar;
        load(callback: (element: SearchBar) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/search-bar relevant section in reference guide}
     */
    class SearchBar extends ControlBar implements ISearchBar {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsGridBaseSource: GridBaseSource;
        readonly containerAsGridDatabaseSource: GridDatabaseSource;

        type: SearchBarTypeEnum;

        waitForSearch: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SearchBar instance in the SDK and on the server.
         * The new SearchBar will be automatically stored in the 'searchBar' property
         * of the parent GridBaseSource element passed as argument.
         */
        static createInGridBaseSourceUnderSearchBar(container: GridBaseSource): SearchBar;
        /**
         * Creates and returns a new SearchBar instance in the SDK and on the server.
         * The new SearchBar will be automatically stored in the 'searchBar' property
         * of the parent GridDatabaseSource element passed as argument.
         */
        static createInGridDatabaseSourceUnderSearchBar(container: GridDatabaseSource): SearchBar;
        /**
         * Creates and returns a new SearchBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SearchBar;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/select-button relevant section in reference guide}
     */
    interface ISelectButton extends IGridControlBarButton {
        model: IModel;
        containerAsControlBar: IControlBar;
        load(): SelectButton;
        load(callback: (element: SelectButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/select-button relevant section in reference guide}
     */
    class SelectButton extends GridControlBarButton implements ISelectButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsControlBar: ControlBar;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SelectButton instance in the SDK and on the server.
         * The new SelectButton will be automatically stored in the 'items' property
         * of the parent ControlBar element passed as argument.
         */
        static createIn(container: ControlBar): SelectButton;
        /**
         * Creates and returns a new SelectButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SelectButton;

    }
    interface ISelectorSource extends internal.IElement {
        model: IModel;
        containerAsAssociationWidget: IAssociationWidget;
        load(): SelectorSource;
        load(callback: (element: SelectorSource) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class SelectorSource extends internal.Element implements ISelectorSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsAssociationWidget: AssociationWidget;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    /**
     * In version 6.1.0: introduced
     */
    interface ISelectorDatabaseSource extends ISelectorSource {
        model: IModel;
        containerAsAssociationWidget: IAssociationWidget;
        load(): SelectorDatabaseSource;
        load(callback: (element: SelectorDatabaseSource) => void, forceRefresh?: boolean): any;
    }
    /**
     * In version 6.1.0: introduced
     */
    class SelectorDatabaseSource extends SelectorSource implements ISelectorDatabaseSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsAssociationWidget: AssociationWidget;

        databaseConstraints: internal.IList<DatabaseConstraint>;

        /**
         * In version 6.2.0: introduced
         */
        sortBar: GridSortBar;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SelectorDatabaseSource instance in the SDK and on the server.
         * The new SelectorDatabaseSource will be automatically stored in the 'selectorSource' property
         * of the parent AssociationWidget element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createIn(container: AssociationWidget): SelectorDatabaseSource;
        /**
         * Creates and returns a new SelectorDatabaseSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SelectorDatabaseSource;

    }
    interface ISelectorMicroflowSource extends ISelectorSource {
        model: IModel;
        containerAsAssociationWidget: IAssociationWidget;
        load(): SelectorMicroflowSource;
        load(callback: (element: SelectorMicroflowSource) => void, forceRefresh?: boolean): any;
    }
    class SelectorMicroflowSource extends SelectorSource implements ISelectorMicroflowSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsAssociationWidget: AssociationWidget;

        dataSourceMicroflowSettings: MicroflowSettings;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SelectorMicroflowSource instance in the SDK and on the server.
         * The new SelectorMicroflowSource will be automatically stored in the 'selectorSource' property
         * of the parent AssociationWidget element passed as argument.
         */
        static createIn(container: AssociationWidget): SelectorMicroflowSource;
        /**
         * Creates and returns a new SelectorMicroflowSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SelectorMicroflowSource;

    }
    interface ISelectorXPathSource extends ISelectorSource {
        model: IModel;
        containerAsAssociationWidget: IAssociationWidget;
        load(): SelectorXPathSource;
        load(callback: (element: SelectorXPathSource) => void, forceRefresh?: boolean): any;
    }
    class SelectorXPathSource extends SelectorSource implements ISelectorXPathSource {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsAssociationWidget: AssociationWidget;

        sortBar: GridSortBar;

        /**
         * The value of this property is conceptually of type xPathConstraints.XPathConstraint.
         */
        xPathConstraint: string;

        /**
         * The value of this property is conceptually of type paths.EntityPath.
         */
        constrainedBy: internal.IList<string>;

        applyContext: boolean;

        removeAllFromContext: boolean;

        removeFromContextEntities: internal.IList<domainmodels.IEntity>;
        readonly removeFromContextEntitiesQualifiedNames: string[];
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SelectorXPathSource instance in the SDK and on the server.
         * The new SelectorXPathSource will be automatically stored in the 'selectorSource' property
         * of the parent AssociationWidget element passed as argument.
         */
        static createIn(container: AssociationWidget): SelectorXPathSource;
        /**
         * Creates and returns a new SelectorXPathSource instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SelectorXPathSource;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/sidebar-toggle-button relevant section in reference guide}
     */
    interface ISidebarToggleButton extends IButton {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): SidebarToggleButton;
        load(callback: (element: SidebarToggleButton) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/sidebar-toggle-button relevant section in reference guide}
     */
    class SidebarToggleButton extends Button implements ISidebarToggleButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        /**
         * In version 6.10.0: deleted
         */
        region: SidebarToggleRegion;

        /**
         * In version 6.10.0: deleted
         */
        mode: SidebarToggleMode;

        /**
         * In version 6.10.0: deleted
         */
        initiallyOpen: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * The new SidebarToggleButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): SidebarToggleButton;
        /**
         * Creates and returns a new SidebarToggleButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SidebarToggleButton;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/simple-menu-bar relevant section in reference guide}
     */
    interface ISimpleMenuBar extends IMenuWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): SimpleMenuBar;
        load(callback: (element: SimpleMenuBar) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/simple-menu-bar relevant section in reference guide}
     */
    class SimpleMenuBar extends MenuWidget implements ISimpleMenuBar {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        orientation: SimpleMenuBarOrientation;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * The new SimpleMenuBar will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): SimpleMenuBar;
        /**
         * Creates and returns a new SimpleMenuBar instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SimpleMenuBar;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/snippet relevant section in reference guide}
     */
    interface ISnippet extends IFormBase {
        model: IModel;
        containerAsFolderBase: projects.IFolderBase;
        entity: domainmodels.IEntity;
        entityQualifiedName: string;
        load(): Snippet;
        load(callback: (element: Snippet) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/snippet relevant section in reference guide}
     */
    class Snippet extends FormBase implements ISnippet {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsFolderBase: projects.FolderBase;

        entity: domainmodels.IEntity;
        readonly entityQualifiedName: string;

        widget: Widget;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, container: projects.IFolderBase);
        /**
         * Creates a new Snippet unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        static createIn(container: projects.IFolderBase): Snippet;


    }
    interface ISnippetCall extends internal.IElement {
        model: IModel;
        containerAsSnippetCallWidget: ISnippetCallWidget;
        load(): SnippetCall;
        load(callback: (element: SnippetCall) => void, forceRefresh?: boolean): any;
    }
    class SnippetCall extends internal.Element implements ISnippetCall {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsSnippetCallWidget: SnippetCallWidget;

        snippet: ISnippet;
        readonly snippetQualifiedName: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SnippetCall instance in the SDK and on the server.
         * The new SnippetCall will be automatically stored in the 'snippetCall' property
         * of the parent SnippetCallWidget element passed as argument.
         */
        static createIn(container: SnippetCallWidget): SnippetCall;
        /**
         * Creates and returns a new SnippetCall instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SnippetCall;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/snippet-call relevant section in reference guide}
     */
    interface ISnippetCallWidget extends IWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): SnippetCallWidget;
        load(callback: (element: SnippetCallWidget) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/snippet-call relevant section in reference guide}
     */
    class SnippetCallWidget extends Widget implements ISnippetCallWidget {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        snippetCall: SnippetCall;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * The new SnippetCallWidget will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): SnippetCallWidget;
        /**
         * Creates and returns a new SnippetCallWidget instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SnippetCallWidget;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/image relevant section in reference guide}
     */
    interface IStaticImageViewer extends IConditionallyVisibleWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): StaticImageViewer;
        load(callback: (element: StaticImageViewer) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/image relevant section in reference guide}
     */
    class StaticImageViewer extends ConditionallyVisibleWidget implements IStaticImageViewer {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        image: images.IImage;
        readonly imageQualifiedName: string;

        widthUnit: ImageSizeUnit;

        heightUnit: ImageSizeUnit;

        width: number;

        height: number;

        clickAction: ClientAction;

        responsive: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * The new StaticImageViewer will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): StaticImageViewer;
        /**
         * Creates and returns a new StaticImageViewer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): StaticImageViewer;

    }
    interface IStaticOrDynamicString extends internal.IElement {
        model: IModel;
        containerAsLinkButton: ILinkButton;
        load(): StaticOrDynamicString;
        load(callback: (element: StaticOrDynamicString) => void, forceRefresh?: boolean): any;
    }
    class StaticOrDynamicString extends internal.Element implements IStaticOrDynamicString {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsLinkButton: LinkButton;

        isDynamic: boolean;

        value: string;

        /**
         * The value of this property is conceptually of type paths.AttributePath.
         */
        attribute: string;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new StaticOrDynamicString instance in the SDK and on the server.
         * The new StaticOrDynamicString will be automatically stored in the 'address' property
         * of the parent LinkButton element passed as argument.
         */
        static createIn(container: LinkButton): StaticOrDynamicString;
        /**
         * Creates and returns a new StaticOrDynamicString instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): StaticOrDynamicString;

    }
    interface ISyncButton extends IButton {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): SyncButton;
        load(callback: (element: SyncButton) => void, forceRefresh?: boolean): any;
    }
    class SyncButton extends Button implements ISyncButton {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * The new SyncButton will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): SyncButton;
        /**
         * Creates and returns a new SyncButton instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): SyncButton;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/tab-container relevant section in reference guide}
     */
    interface ITabContainer extends IConditionallyVisibleWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): TabContainer;
        load(callback: (element: TabContainer) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/tab-container relevant section in reference guide}
     */
    class TabContainer extends ConditionallyVisibleWidget implements ITabContainer {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        tabPages: internal.IList<TabPage>;

        defaultPage: TabPage;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * The new TabContainer will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): TabContainer;
        /**
         * Creates and returns a new TabContainer instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TabContainer;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/tab-page relevant section in reference guide}
     */
    interface ITabPage extends internal.IElement {
        model: IModel;
        containerAsTabContainer: ITabContainer;
        load(): TabPage;
        load(callback: (element: TabPage) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/tab-page relevant section in reference guide}
     */
    class TabPage extends internal.Element implements ITabPage {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsTabContainer: TabContainer;

        name: string;

        caption: texts.Text;

        refreshOnShow: boolean;

        conditionalVisibilitySettings: ConditionalVisibilitySettings;

        widget: Widget;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TabPage instance in the SDK and on the server.
         * The new TabPage will be automatically stored in the 'tabPages' property
         * of the parent TabContainer element passed as argument.
         */
        static createIn(container: TabContainer): TabPage;
        /**
         * Creates and returns a new TabPage instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TabPage;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/table relevant section in reference guide}
     */
    interface ITable extends IConditionallyVisibleWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): Table;
        load(callback: (element: Table) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/table relevant section in reference guide}
     */
    class Table extends ConditionallyVisibleWidget implements ITable {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        cells: internal.IList<TableCell>;

        columns: internal.IList<TableColumn>;

        widthUnit: UnitEnum;

        rows: internal.IList<TableRow>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * The new Table will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): Table;
        /**
         * Creates and returns a new Table instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Table;

    }
    interface ITableCell extends internal.IElement {
        model: IModel;
        containerAsTable: ITable;
        load(): TableCell;
        load(callback: (element: TableCell) => void, forceRefresh?: boolean): any;
    }
    class TableCell extends internal.Element implements ITableCell {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsTable: Table;

        class: string;

        style: string;

        isHeader: boolean;

        widget: Widget;

        leftColumnIndex: number;

        topRowIndex: number;

        width: number;

        height: number;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TableCell instance in the SDK and on the server.
         * The new TableCell will be automatically stored in the 'cells' property
         * of the parent Table element passed as argument.
         */
        static createIn(container: Table): TableCell;
        /**
         * Creates and returns a new TableCell instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TableCell;

    }
    interface ITableColumn extends internal.IElement {
        model: IModel;
        containerAsTable: ITable;
        load(): TableColumn;
        load(callback: (element: TableColumn) => void, forceRefresh?: boolean): any;
    }
    class TableColumn extends internal.Element implements ITableColumn {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsTable: Table;

        width: number;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TableColumn instance in the SDK and on the server.
         * The new TableColumn will be automatically stored in the 'columns' property
         * of the parent Table element passed as argument.
         */
        static createIn(container: Table): TableColumn;
        /**
         * Creates and returns a new TableColumn instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TableColumn;

    }
    interface ITableRow extends internal.IElement {
        model: IModel;
        containerAsTable: ITable;
        load(): TableRow;
        load(callback: (element: TableRow) => void, forceRefresh?: boolean): any;
    }
    class TableRow extends internal.Element implements ITableRow {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsTable: Table;

        class: string;

        style: string;

        conditionalVisibilitySettings: ConditionalVisibilitySettings;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TableRow instance in the SDK and on the server.
         * The new TableRow will be automatically stored in the 'rows' property
         * of the parent Table element passed as argument.
         */
        static createIn(container: Table): TableRow;
        /**
         * Creates and returns a new TableRow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TableRow;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/template-grid relevant section in reference guide}
     */
    interface ITemplateGrid extends IGrid {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): TemplateGrid;
        load(callback: (element: TemplateGrid) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/template-grid relevant section in reference guide}
     */
    class TemplateGrid extends Grid implements ITemplateGrid {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        contents: TemplateGridContents;

        numberOfRows: number;

        numberOfColumns: number;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * The new TemplateGrid will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): TemplateGrid;
        /**
         * Creates and returns a new TemplateGrid instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TemplateGrid;

    }
    interface ITemplateGridContents extends internal.IElement {
        model: IModel;
        containerAsTemplateGrid: ITemplateGrid;
        load(): TemplateGridContents;
        load(callback: (element: TemplateGridContents) => void, forceRefresh?: boolean): any;
    }
    class TemplateGridContents extends internal.Element implements ITemplateGridContents {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsTemplateGrid: TemplateGrid;

        widget: Widget;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
         * The new TemplateGridContents will be automatically stored in the 'contents' property
         * of the parent TemplateGrid element passed as argument.
         */
        static createIn(container: TemplateGrid): TemplateGridContents;
        /**
         * Creates and returns a new TemplateGridContents instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TemplateGridContents;

    }
    interface ITextWidget extends IAttributeWidgetWithPlaceholder {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): TextWidget;
        load(callback: (element: TextWidget) => void, forceRefresh?: boolean): any;
    }
    /**
     * Warning: this class represents an abstract and non-instantiable concept in the meta model.
     * You should _not_ try to instantiate this class directly, but instantiate one of its concrete/non-abstract sub classes instead.
     * Instantiating this class is possible in pure JavaScript, but there's no guarantee the result will be at all useful.
     */
    abstract class TextWidget extends AttributeWidgetWithPlaceholder implements ITextWidget {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        maxLengthCode: number;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/text-area relevant section in reference guide}
     */
    interface ITextArea extends ITextWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): TextArea;
        load(callback: (element: TextArea) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/text-area relevant section in reference guide}
     */
    class TextArea extends TextWidget implements ITextArea {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        numberOfLines: number;

        counterMessage: texts.Text;

        textTooLongMessage: texts.Text;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * The new TextArea will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): TextArea;
        /**
         * Creates and returns a new TextArea instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TextArea;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/text-box relevant section in reference guide}
     */
    interface ITextBox extends ITextWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): TextBox;
        load(callback: (element: TextBox) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/text-box relevant section in reference guide}
     */
    class TextBox extends TextWidget implements ITextBox {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        inputMask: string;

        formattingInfo: FormattingInfo;

        isPasswordBox: boolean;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * The new TextBox will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): TextBox;
        /**
         * Creates and returns a new TextBox instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): TextBox;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/page-title relevant section in reference guide}
     */
    interface ITitle extends IConditionallyVisibleWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): Title;
        load(callback: (element: Title) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/page-title relevant section in reference guide}
     */
    class Title extends ConditionallyVisibleWidget implements ITitle {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * The new Title will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): Title;
        /**
         * Creates and returns a new Title instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): Title;

    }
    interface IVerticalFlow extends IWidget {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): VerticalFlow;
        load(callback: (element: VerticalFlow) => void, forceRefresh?: boolean): any;
    }
    class VerticalFlow extends Widget implements IVerticalFlow {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;

        widgets: internal.IList<Widget>;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * The new VerticalFlow will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): VerticalFlow;
        /**
         * Creates and returns a new VerticalFlow instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): VerticalFlow;

    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/vertical-split-pane relevant section in reference guide}
     */
    interface IVerticalSplitPane extends ISplitPane {
        model: IModel;
        containerAsDataView: IDataView;
        containerAsDivContainer: IDivContainer;
        containerAsGroupBox: IGroupBox;
        containerAsHeader: IHeader;
        containerAsLayout: ILayout;
        containerAsLayoutCallArgument: ILayoutCallArgument;
        containerAsLayoutGridColumn: ILayoutGridColumn;
        containerAsListView: IListView;
        containerAsListViewTemplate: IListViewTemplate;
        containerAsNavigationListItem: INavigationListItem;
        containerAsScrollContainerRegion: IScrollContainerRegion;
        containerAsSnippet: ISnippet;
        containerAsSplitPane: ISplitPane;
        containerAsTabPage: ITabPage;
        containerAsTableCell: ITableCell;
        containerAsTemplateGridContents: ITemplateGridContents;
        containerAsVerticalFlow: IVerticalFlow;
        containerAsReportPane: reports.IReportPane;
        load(): VerticalSplitPane;
        load(callback: (element: VerticalSplitPane) => void, forceRefresh?: boolean): any;
    }
    /**
     * See: {@link https://docs.mendix.com/refguide7/vertical-split-pane relevant section in reference guide}
     */
    class VerticalSplitPane extends SplitPane implements IVerticalSplitPane {
        static typeName: string;
        static versionInfo: StructureVersionInfo;
        model: IModel;
        readonly containerAsDataView: DataView;
        readonly containerAsDivContainer: DivContainer;
        readonly containerAsGroupBox: GroupBox;
        readonly containerAsHeader: Header;
        readonly containerAsLayout: Layout;
        readonly containerAsLayoutCallArgument: LayoutCallArgument;
        readonly containerAsLayoutGridColumn: LayoutGridColumn;
        readonly containerAsListView: ListView;
        readonly containerAsListViewTemplate: ListViewTemplate;
        readonly containerAsNavigationListItem: NavigationListItem;
        readonly containerAsScrollContainerRegion: ScrollContainerRegion;
        readonly containerAsSnippet: Snippet;
        readonly containerAsSplitPane: SplitPane;
        readonly containerAsTabPage: TabPage;
        readonly containerAsTableCell: TableCell;
        readonly containerAsTemplateGridContents: TemplateGridContents;
        readonly containerAsVerticalFlow: VerticalFlow;
        readonly containerAsReportPane: reports.ReportPane;
        constructor(model: internal.AbstractModel, typeName: string, id: string, isPartial: boolean, unit: internal.ModelUnit, container: internal.AbstractElement);
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'footerWidget' property
         * of the parent DataView element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        static createInDataViewUnderFooterWidget(container: DataView): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent DataView element passed as argument.
         */
        static createInDataViewUnderWidget(container: DataView): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent DivContainer element passed as argument.
         */
        static createInDivContainerUnderWidget(container: DivContainer): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent GroupBox element passed as argument.
         */
        static createInGroupBoxUnderWidget(container: GroupBox): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'leftWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderLeftWidget(container: Header): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'rightWidget' property
         * of the parent Header element passed as argument.
         */
        static createInHeaderUnderRightWidget(container: Header): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent Layout element passed as argument.
         */
        static createInLayoutUnderWidget(container: Layout): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent LayoutCallArgument element passed as argument.
         */
        static createInLayoutCallArgumentUnderWidget(container: LayoutCallArgument): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent LayoutGridColumn element passed as argument.
         */
        static createInLayoutGridColumnUnderWidget(container: LayoutGridColumn): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent ListView element passed as argument.
         */
        static createInListViewUnderWidget(container: ListView): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent ListViewTemplate element passed as argument.
         */
        static createInListViewTemplateUnderWidget(container: ListViewTemplate): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent NavigationListItem element passed as argument.
         */
        static createInNavigationListItemUnderWidget(container: NavigationListItem): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent ScrollContainerRegion element passed as argument.
         */
        static createInScrollContainerRegionUnderWidget(container: ScrollContainerRegion): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent Snippet element passed as argument.
         */
        static createInSnippetUnderWidget(container: Snippet): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'firstWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderFirstWidget(container: SplitPane): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'secondWidget' property
         * of the parent SplitPane element passed as argument.
         */
        static createInSplitPaneUnderSecondWidget(container: SplitPane): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent TabPage element passed as argument.
         */
        static createInTabPageUnderWidget(container: TabPage): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent TableCell element passed as argument.
         */
        static createInTableCellUnderWidget(container: TableCell): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widget' property
         * of the parent TemplateGridContents element passed as argument.
         */
        static createInTemplateGridContentsUnderWidget(container: TemplateGridContents): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'widgets' property
         * of the parent VerticalFlow element passed as argument.
         */
        static createInVerticalFlowUnderWidgets(container: VerticalFlow): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'parameterWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderParameterWidget(container: reports.ReportPane): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * The new VerticalSplitPane will be automatically stored in the 'reportWidget' property
         * of the parent reports.ReportPane element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.0.0, 6.0.1, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 6.4.1, 6.5.0, 6.6.0, 6.7.0, 6.8.0, 6.9.0
         */
        static createInReportPaneUnderReportWidget(container: reports.ReportPane): VerticalSplitPane;
        /**
         * Creates and returns a new VerticalSplitPane instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        static create(model: IModel): VerticalSplitPane;

    }
}
import { documenttemplates } from "./documenttemplates";
import { domainmodels } from "./domainmodels";
import { enumerations } from "./enumerations";
import { images } from "./images";
import { menus } from "./menus";
import { microflows } from "./microflows";
import { navigation } from "./navigation";
import { reports } from "./reports";
import { security } from "./security";
import { texts } from "./texts";
import { IModel } from "./base-model";
