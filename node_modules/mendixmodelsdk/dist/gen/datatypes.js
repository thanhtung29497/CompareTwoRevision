/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var datatypes;
(function (datatypes) {
    var DataTypeKind = (function (_super) {
        __extends(DataTypeKind, _super);
        function DataTypeKind() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.qualifiedTsTypeName = "datatypes.DataTypeKind";
            return _this;
        }
        return DataTypeKind;
    }(internal.IEnum));
    DataTypeKind.Unknown = new DataTypeKind("Unknown", {});
    DataTypeKind.Void = new DataTypeKind("Void", {});
    DataTypeKind.Empty = new DataTypeKind("Empty", {});
    DataTypeKind.Boolean = new DataTypeKind("Boolean", {});
    DataTypeKind.Binary = new DataTypeKind("Binary", {});
    DataTypeKind.Decimal = new DataTypeKind("Decimal", {});
    DataTypeKind.DecimalRange = new DataTypeKind("DecimalRange", {});
    DataTypeKind.Integer = new DataTypeKind("Integer", {});
    DataTypeKind.IntegerRange = new DataTypeKind("IntegerRange", {});
    DataTypeKind.Float = new DataTypeKind("Float", {});
    DataTypeKind.FloatRange = new DataTypeKind("FloatRange", {});
    DataTypeKind.DateTime = new DataTypeKind("DateTime", {});
    DataTypeKind.DateTimeRange = new DataTypeKind("DateTimeRange", {});
    DataTypeKind.String = new DataTypeKind("String", {});
    DataTypeKind.Enumeration = new DataTypeKind("Enumeration", {});
    DataTypeKind.Object = new DataTypeKind("Object", {});
    DataTypeKind.List = new DataTypeKind("List", {});
    datatypes.DataTypeKind = DataTypeKind;
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `DataTypes`.
     */
})(datatypes = exports.datatypes || (exports.datatypes = {}));
