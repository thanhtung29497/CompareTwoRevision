/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var internal = require("../sdk/internal");
exports.StructureVersionInfo = internal.StructureVersionInfo;
var mappings_1 = require("./mappings");
var xmlschemas_1 = require("./xmlschemas");
var jsonstructures;
(function (jsonstructures) {
    /**
     * Interfaces and instance classes for types from the Mendix sub meta model `JsonStructures`.
     */
    /**
     * In version 6.6.0: introduced
     */
    var JsonElement = (function (_super) {
        __extends(JsonElement, _super);
        function JsonElement(model, typeName, id, isPartial, unit, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, unit, container) || this;
            _this.__originalValue = new internal.PrimitiveProperty(JsonElement, _this, "originalValue", "", internal.PrimitiveTypeEnum.String);
            if (arguments.length < 4) {
                throw new Error("new JsonElement() cannot be invoked directly, please use 'model.jsonstructures.createJsonElement()'");
            }
            return _this;
        }
        Object.defineProperty(JsonElement.prototype, "containerAsJsonStructure", {
            get: function () { return _super.prototype.getContainerAs.call(this, JsonStructure); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JsonElement.prototype, "containerAsElement", {
            get: function () { return _super.prototype.getContainerAs.call(this, mappings_1.mappings.Element); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JsonElement.prototype, "originalValue", {
            get: function () { return this.__originalValue.get(); },
            set: function (newValue) { this.__originalValue.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates and returns a new JsonElement instance in the SDK and on the server.
         * The new JsonElement will be automatically stored in the 'elements' property
         * of the parent JsonStructure element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        JsonElement.createInJsonStructureUnderElements = function (container) {
            internal.createInVersionCheck(container.model, JsonElement.typeName, ["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, JsonElement, "elements", true);
        };
        /**
         * Creates and returns a new JsonElement instance in the SDK and on the server.
         * The new JsonElement will be automatically stored in the 'children' property
         * of the parent mappings.Element element passed as argument.
         *
         * Warning! Can only be used on models with the following Mendix meta model versions:
         *  6.6.0, 6.7.0, 6.8.0, 6.9.0, 6.10.0, 7.0.0, 7.0.1
         */
        JsonElement.createInElementUnderChildren = function (container) {
            internal.createInVersionCheck(container.model, JsonElement.typeName, ["6.6.0", "6.7.0", "6.8.0", "6.9.0", "6.10.0", "7.0.0", "7.0.1"]);
            return internal.instancehelpers.createElement(container, JsonElement, "children", true);
        };
        /**
         * Creates and returns a new JsonElement instance in the SDK and on the server.
         * Expects one argument: the IModel object the instance will "live on".
         * After creation, assign or add this instance to a property that accepts this kind of objects.
         */
        JsonElement.create = function (model) {
            return internal.instancehelpers.createElement(model, JsonElement);
        };
        JsonElement.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return JsonElement;
    }(mappings_1.mappings.Element));
    JsonElement.typeName = "JsonStructures$JsonElement";
    JsonElement.versionInfo = new exports.StructureVersionInfo({
        "introduced": "6.6.0"
    }, internal.StructureType.Element);
    jsonstructures.JsonElement = JsonElement;
    /**
     * See: {@link https://docs.mendix.com/refguide7/json-structures relevant section in reference guide}
     *
     * In version 6.6.0: removed experimental
     * In version 6.2.0: introduced
     */
    var JsonStructure = (function (_super) {
        __extends(JsonStructure, _super);
        function JsonStructure(model, typeName, id, isPartial, container) {
            var _this = _super.call(this, model, typeName, id, isPartial, container) || this;
            _this.__jsonSnippet = new internal.PrimitiveProperty(JsonStructure, _this, "jsonSnippet", "", internal.PrimitiveTypeEnum.String);
            _this.__elements = new internal.PartListProperty(JsonStructure, _this, "elements", []);
            _this._containmentName = "documents";
            return _this;
        }
        Object.defineProperty(JsonStructure.prototype, "containerAsFolderBase", {
            get: function () { return _super.prototype.getContainerAs.call(this, projects_1.projects.FolderBase); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JsonStructure.prototype, "jsonSnippet", {
            get: function () { return this.__jsonSnippet.get(); },
            set: function (newValue) { this.__jsonSnippet.set(newValue); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(JsonStructure.prototype, "elements", {
            /**
             * In version 6.6.0: introduced
             */
            get: function () { return this.__elements.get(); },
            set: function (newValue) { this.__elements.set(newValue); },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a new JsonStructure unit in the SDK and on the server.
         * Expects one argument, the projects.IFolderBase in which this unit is contained.
         */
        JsonStructure.createIn = function (container) {
            return internal.instancehelpers.createUnit(container, JsonStructure);
        };
        JsonStructure.prototype._isByNameReferrable = function () { return true; };
        JsonStructure.prototype._initializeDefaultProperties = function () {
            _super.prototype._initializeDefaultProperties.call(this);
        };
        return JsonStructure;
    }(xmlschemas_1.xmlschemas.MxSchema));
    JsonStructure.typeName = "JsonStructures$JsonStructure";
    JsonStructure.versionInfo = new exports.StructureVersionInfo({
        "introduced": "6.2.0",
        "properties": {
            "elements": {
                "introduced": "6.6.0"
            }
        },
        "experimental": {
            "currentValue": false,
            "changedIn": [
                "6.6.0"
            ]
        }
    }, internal.StructureType.ModelUnit);
    jsonstructures.JsonStructure = JsonStructure;
})(jsonstructures = exports.jsonstructures || (exports.jsonstructures = {}));
var projects_1 = require("./projects");
